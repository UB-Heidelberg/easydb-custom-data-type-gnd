// Generated by CoffeeScript 1.10.0
var ez5;

ez5 = (function() {
  function ez5() {}

  ez5.handleFrontendError = function(errorEvent, show_to_user) {
    var show_msg;
    if (show_to_user == null) {
      show_to_user = false;
    }
    show_msg = (function(_this) {
      return function(event) {
        var event_id, loca_key, ref;
        event_id = event != null ? (ref = event.event) != null ? ref._id : void 0 : void 0;
        if (event_id) {
          loca_key = 'general.frontend.error.message_with_id.md';
        } else {
          loca_key = 'general.frontend.error.message.md';
        }
        return CUI.confirm({
          "class": 'cui-alert-problem',
          text: $$(loca_key, {
            event_id: event_id
          }),
          button_text_ok: $$('general.frontend.error.button.ok'),
          button_text_cancel: $$('general.frontend.error.button.reload'),
          markdown: true
        }).fail(function() {
          return document.location.reload();
        });
      };
    })(this);
    return this.saveErrorEvent(errorEvent).always((function(_this) {
      return function(event) {
        if (show_to_user) {
          return show_msg(event);
        }
      };
    })(this));
  };

  ez5.saveErrorEvent = function(errorEvent) {
    return EventPoller.saveEvent({
      type: "FRONTEND_ERROR",
      info: {
        message: errorEvent.error.message,
        stack: errorEvent.error.stack
      }
    });
  };

  ez5.callbacks = {};

  ez5.state = "loading";

  ez5.fitRectangle = function(img_w, img_h, w, h) {
    var dest_h, dest_w, img_aspect, margin_left, margin_top, viewport_aspect;
    assert(img_w > 0 && img_h > 0 && w > 0 && h > 0, "ez5.fit_rectangle", "img_w, img_h, w and h need to be > 0", {
      img_w: img_w,
      img_h: img_h,
      w: w,
      h: h
    });
    img_aspect = img_w / img_h;
    viewport_aspect = w / h;
    if (img_aspect > viewport_aspect) {
      dest_w = w;
      dest_h = dest_w / img_aspect;
    } else if (img_aspect < viewport_aspect) {
      dest_h = h;
      dest_w = dest_h * img_aspect;
    } else {
      dest_w = w;
      dest_h = h;
    }
    margin_top = (h - dest_h) / 2;
    margin_left = (w - dest_w) / 2;
    return [dest_w, dest_h, margin_top, margin_left];
  };

  ez5.format_seconds = function(seconds) {
    var h, m, s;
    h = Math.floor(seconds / 3600);
    m = Math.floor((seconds - h * 3600) / 60);
    s = seconds - h * 3600 - m * 60;
    if (s < 10) {
      s = "0" + s;
    }
    if (h > 0 && m < 10) {
      m = "0" + m;
    }
    if (h > 0) {
      return h + ":" + m + ":" + s;
    } else {
      return m + ":" + s;
    }
  };

  ez5.format_date_and_time = function(date_s, include_seconds) {
    var mom;
    if (include_seconds == null) {
      include_seconds = false;
    }
    if (isEmpty(date_s)) {
      return "";
    }
    if (date_s instanceof Date) {
      mom = moment(date_s);
      date_s = mom.format(DateTimeFormats[ez5.loca.getLanguage()].formats.display_short);
    }
    if (include_seconds) {
      return DateTime.format(date_s, "display_short", "date_time_seconds");
    } else {
      return DateTime.format(date_s, "display_short", "date_time");
    }
  };

  ez5.format_date = function(date_s) {
    return DateTime.format(date_s, "display_short", "date");
  };

  ez5.dirname = function(path) {
    var _path;
    if (isEmpty(path)) {
      return "";
    }
    _path = path.split(/[\/]/);
    _path.pop();
    switch (_path.length) {
      case 0:
        return '';
      case 1:
        if (_path[0] === '') {
          return '/';
        }
    }
    return _path.join('/');
  };

  ez5.basename = function(path) {
    if (isEmpty(path)) {
      return "";
    }
    return path.split(/[\/]/).pop();
  };

  ez5.extension = function(path) {
    var _path, basename;
    basename = this.basename(path);
    if (isEmpty(basename)) {
      return '';
    }
    _path = basename.split(/\./);
    if (_path.length > 1) {
      return _path.pop();
    } else {
      return '';
    }
  };

  ez5.bareBasename = function(path) {
    var _path, basename;
    basename = this.basename(path);
    if (isEmpty(basename)) {
      return '';
    }
    _path = basename.split(/\./);
    if (_path.length > 1) {
      _path.pop();
    }
    return _path.join('.');
  };

  ez5.getAbsoluteURL = function(url, server_url) {
    var loc;
    if (server_url == null) {
      server_url = window.easydb_server_url;
    }
    loc = CUI.parseLocation(url);
    if (!loc) {
      return "";
    } else if (loc.origin) {
      return url;
    } else if (server_url) {
      return server_url + url;
    } else {
      return document.location.origin + url;
    }
  };

  ez5.format_number = function(number) {
    if (isEmpty(number)) {
      return "";
    }
    return NumberInput.format(number, {
      decimalpoint: ez5.session.frontend_locale.numbers.decimal,
      separator: ez5.session.frontend_locale.numbers.grouping
    });
  };

  ez5.format_bitrate = function(bits) {
    if (typeof bits !== 'number') {
      return '';
    }
    if (bits >= 1000000000) {
      return (bits / 1000000000).toFixed(2) + ' Gbit/s';
    } else if (bits >= 1000000) {
      return (bits / 1000000).toFixed(2) + ' Mbit/s';
    } else if (bits >= 1000) {
      return (bits / 1000).toFixed(2) + ' kbit/s';
    } else {
      return bits.toFixed(2) + ' bit/s';
    }
  };

  ez5.format_filesize = function(bytes) {
    var base, i, sizes;
    if (isNaN(bytes)) {
      return "";
    }
    sizes = ["Bytes", "KB", "MB", "GB", "TB"];
    base = 1024;
    i = parseInt(Math.floor(Math.log(bytes) / Math.log(base)));
    if (bytes === 0) {
      return "0 " + sizes[0];
    } else if (i <= 1) {
      return Math.round(bytes / Math.pow(base, i)) + " " + sizes[i];
    } else {
      return Math.round(bytes / Math.pow(base, i) * 10) / 10 + " " + sizes[i];
    }
  };

  ez5.buildObjectTree = function(opts) {
    var _path, c, doOpen, fatherPool, filtered_nodes, idx, inputObjects, j, l, len1, len2, len3, len4, level, max_level, n, newInstanceFunc, o, obj, object, objectIdKey, objectKey, object_by_path, objects, objecttype, p, path, path_str, pseudoRoot, q, ref, ref1, ref2, t;
    if (opts == null) {
      opts = {};
    }
    inputObjects = opts.objects;
    objectKey = opts.objectKey;
    newInstanceFunc = opts.newInstanceFunc;
    assert($.isArray(inputObjects), "ez5.buildObjectTree", "opts.inputObjects need to be an Array", {
      opts: opts
    });
    assert($.isFunction(newInstanceFunc), "ez5.buildObjectTree", "opts.newInstancFunc need to be a Function", {
      opts: opts
    });
    doOpen = opts.doOpen || false;
    objectIdKey = opts.objectIdKey || "_id";
    object_by_path = {};
    objects = [];
    max_level = -1;
    for (idx = j = 0, len1 = inputObjects.length; j < len1; idx = ++j) {
      o = inputObjects[idx];
      if (!o._level) {
        o._level = 0;
      }
      if (o._level > max_level) {
        max_level = o._level;
      }
    }
    for (level = l = 0, ref = max_level; l <= ref; level = l += 1) {
      for (idx = n = 0, len2 = inputObjects.length; n < len2; idx = ++n) {
        o = inputObjects[idx];
        if (o._level !== level) {
          continue;
        }
        objecttype = o._basetype || o._objecttype;
        path = [objecttype];
        if (o.hasOwnProperty("_path")) {
          _path = o._path;
        } else {
          _path = [o];
        }
        for (idx = q = 0, len3 = _path.length; q < len3; idx = ++q) {
          object = _path[idx];
          if (objectKey) {
            if (CUI.isFunction(objectKey)) {
              p = object[objectKey(object)][objectIdKey];
            } else {
              p = object[objectKey][objectIdKey];
            }
          } else {
            p = object[objectIdKey];
          }
          assert(!isEmpty(p), "ez5.buildObjectTree", "path element is empty", {
            objectKey: objectKey,
            objectIdKey: objectIdKey,
            object: object
          });
          path.push(p);
          path_str = path.join(".");
          if (!object_by_path[path_str]) {
            if (idx === _path.length - 1) {
              obj = newInstanceFunc(o);
            } else {
              obj = newInstanceFunc(object);
              obj._build_from_path = true;
            }
            object_by_path[path_str] = obj;
            if (idx === 0) {
              objects.push(obj);
            } else {
              fatherPool = object_by_path[path.slice(0, -1).join(".")];
              if (!fatherPool.children) {
                fatherPool.children = [];
                if (doOpen) {
                  fatherPool.do_open = true;
                }
              }
              fatherPool.children.push(obj);
            }
          }
        }
      }
    }
    if (opts.filter) {
      pseudoRoot = new ListViewTreeNode({
        children: objects
      });
      filtered_nodes = pseudoRoot.filter(function(node) {
        if (node._build_from_path) {
          return true;
        } else {
          return false;
        }
      });
      objects = [];
      ref1 = pseudoRoot.children;
      for (t = 0, len4 = ref1.length; t < len4; t++) {
        c = ref1[t];
        if (!((ref2 = c.children) != null ? ref2.length : void 0)) {
          delete c.do_open;
        }
        objects.push(c);
        c.setFather(null);
      }
    }
    return objects;
  };

  ez5.error_handler = function(xhr) {
    var allow_cancel, choices, cls, content, description, dfr, error, markdown, offer_reload, ref, ref1, ref2, ref3, server, text, title, uuid;
    if (xhr == null) {
      xhr = {};
    }
    dfr = new CUI.Deferred();
    error = xhr.responseJSON;
    allow_cancel = true;
    console.warn("ez5.error_handler", xhr.readyState, xhr.status, error, xhr.CUI_statusText);
    if (xhr.readyState < 4 || !((error != null ? error.code : void 0) && (error != null ? error.realm : void 0))) {
      server = window.easydb_server_url || document.location.origin;
      offer_reload = true;
      if (xhr.CUI_statusText === "timeout") {
        text = $$("base.error.timeout", {
          server: server
        });
        offer_reload = false;
      } else if (xhr.readyState < 4 || xhr.status === 0) {
        text = $$("base.error.network", {
          server: server
        });
        allow_cancel = false;
      } else {
        CUI.error("easydb-server returned an unparsable error. xhr: ", xhr);
        text = $$("base.error.generic", {
          server: server
        });
      }
      markdown = true;
      choices = [
        offer_reload && window.easydb_server_url ? {
          text: $$("ez5.error_handler.reset_server", {
            server: server
          }),
          choice: "reset_server"
        } : void 0, offer_reload ? {
          text: $$("base.reload", {
            server: server
          }),
          choice: "reload"
        } : void 0, {
          text: $$("base.retry", {
            server: server
          }),
          choice: "retry"
        }
      ];
    } else {
      choices = [];
      title = $$("base.error.realm." + error.realm);
      markdown = false;
      text = $$(error.code, error.parameters);
      allow_cancel = false;
      if ((ref = error.realm) === "api" || ref === "server") {
        description = error.description;
      }
      if (((ref1 = error.realm) === "server") && error.uuid) {
        uuid = $$("base.error.uuid", {
          uuid: error.uuid
        });
      }
      if (uuid && ((ref2 = ez5.session) != null ? ref2.hasSystemRight("root", "server.error.uuid_detail", "server.error.self_uuid_detail") : void 0)) {
        choices = [
          {
            text: $$("base.error.uuid.modal.btn"),
            choice: "show_error"
          }, {
            text: $$("base.ok")
          }
        ];
      } else if ((ref3 = error.realm) === "user") {
        return CUI.problem({
          text: text
        });
      }
    }
    content = new Template({
      name: "error",
      map: {
        text: true,
        description: true,
        uuid: true
      }
    });
    content.replace(new Label({
      multiline: true,
      text: text,
      markdown: markdown
    }), "text");
    if (description) {
      content.replace(new Label({
        multiline: true,
        text: description
      }), "description");
    }
    if (uuid) {
      content.replace(new Label({
        multiline: true,
        text: uuid
      }), "uuid");
    }
    if (CUI.__ng__) {
      cls = "";
    } else {
      cls = "ez5-error-handler-dialog cui-alert";
    }
    CUI.problem({
      "class": cls,
      title: title,
      choices: choices.length > 0 ? choices : void 0,
      content: content,
      cancel: allow_cancel
    }).done((function(_this) {
      return function(choice) {
        var ref4;
        switch (choice.choice) {
          case "reload":
            document.location.reload();
            break;
          case "reset_server":
            CUI.setSessionStorage("server", void 0);
            if ((ref4 = ez5.session) != null) {
              ref4.saveCookiePref("easydb_server_url", null);
            }
            document.location.assign("/");
            break;
          case "retry":
            dfr.reject();
            return;
          case "show_error":
            (new ServerErrorModal(error)).show();
        }
        return dfr.resolve();
      };
    })(this));
    return dfr.promise();
  };

  ez5.renderFormPopoverInfo = function(info) {
    var div, inf, j, len1;
    if (!(info != null ? info.length : void 0)) {
      return;
    }
    div = $div("ez5-form-popover-info");
    for (j = 0, len1 = info.length; j < len1; j++) {
      inf = info[j];
      div.appendChild(new Label({
        "class": "ez5-form-popover-info-item",
        text: inf
      }).DOM);
    }
    return div;
  };

  ez5.replaceMap = function(_value, rec, repl_default) {
    var k, map, map2, match, re, v, value;
    if (repl_default == null) {
      repl_default = "";
    }
    value = _value;
    map = {};
    re = new RegExp(/%([\-\._\:a-z]+)%/, "g");
    while (match = re.exec(value)) {
      map[match[0]] = repl_default;
    }
    if (!CUI.isEmptyObject(map)) {
      map2 = {};
      for (k in rec) {
        v = rec[k];
        if (CUI.isArray(v)) {
          map2["%" + k + "%"] = v.join(", ");
        } else {
          map2["%" + k + "%"] = v;
        }
      }
      value = CUI.stringMapReplace(value, map2);
      value = CUI.stringMapReplace(value, map);
      console.error("REPLACED:", _value, value, map, map2);
    }
    return value;
  };

  ez5.weekdays = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"];

  ez5.generateUUID = function() {
    var d;
    d = Date.now();
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r;
      r = (d + Math.random() * 16) % 16 | 0;
      d = Math.floor(d / 16);
      return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
    });
  };

  ez5.setDefaults = function() {
    ez5.defaults = {
      focusClass: "ez-focus",
      "class": {
        User: User,
        Group: Group,
        SystemGroup: SystemGroup,
        CustomGroup: CustomGroup,
        AnonymousUser: AnonymousUser,
        SystemUser: SystemUser,
        CollectionWorkfolder: CollectionWorkfolder,
        SearchCollection: SearchCollection,
        DownloadManager: DownloadManager,
        AdminMessage: AdminMessage,
        WebDVDPlayer: WebDVDPlayer
      }
    };
    ez5.icon_map = {
      result_object_path_separator: "fa-caret-right"
    };
    return ez5.getLabelForCount = function(loca_key, count) {
      switch (count) {
        case 0:
          return new EmptyLabel({
            text: $$(loca_key + ".none", {
              count: count
            })
          });
        case 1:
          return new Label({
            text: $$(loca_key + ".one", {
              count: count
            })
          });
        default:
          return new Label({
            text: $$(loca_key, {
              count: count
            })
          });
      }
    };
  };

  ez5.__load_defaults_callbacks = [];

  ez5.load_defaults = function(callback) {
    if (callback) {
      return ez5.__load_defaults_callbacks.push(callback);
    } else {
      return CUI.chainedCall.apply(CUI, ez5.__load_defaults_callbacks);
    }
  };

  ez5.chunked_work = function(items, chunk_size, func) {
    var dfr, idx, len, next_chunk;
    assert(this !== ez5, "ez5.chunked_work", "Cannot call ez5.chunked_work with 'this' not set to the caller.");
    dfr = new CUI.Deferred();
    idx = 0;
    len = items.length;
    next_chunk = (function(_this) {
      return function() {
        var progress;
        progress = (idx + 1) + " - " + Math.min(len, idx + chunk_size) + " / " + len;
        dfr.notify({
          progress: progress,
          idx: idx,
          len: len,
          chunk_size: chunk_size
        });
        return func.call(_this, items.slice(idx, idx + chunk_size)).fail(dfr.reject).done(function() {
          if (idx + chunk_size >= len) {
            return dfr.resolve();
          } else {
            idx = idx + chunk_size;
            return CUI.setTimeout({
              ms: 10,
              call: next_chunk
            });
          }
        });
      };
    })(this);
    CUI.setTimeout({
      ms: 10,
      call: next_chunk
    });
    return dfr.promise();
  };

  ez5.splash = {
    show: function(loca_key) {
      var ref;
      if ((ref = ez5.splash.__toaster) != null) {
        ref.destroy();
      }
      return ez5.splash.__toaster = CUI.toaster({
        show_ms: 0,
        content: new LocaLabel({
          loca_key: loca_key
        })
      });
    },
    done: function(loca_key) {
      ez5.splash.__toaster.setContent(new LocaLabel({
        loca_key: loca_key
      }));
      return CUI.setTimeout({
        ms: 1000,
        call: function() {
          return ez5.splash.hide();
        }
      });
    },
    hide: function() {
      ez5.splash.__toaster.destroy();
      return ez5.splash.__toaster = null;
    }
  };

  return ez5;

})();

(function() {
  var fn, j, k, len1, ref;
  ref = ["session_ready"];
  fn = function(k) {
    return ez5[k] = function(callback) {
      if (callback == null) {
        callback = null;
      }
      if (callback === null) {
        ez5.state = k;
        return CUI.chainedCall.apply(CUI, ez5.callbacks[k]).always(function() {
          return ez5.callbacks[k] = [];
        }).fail(function() {
          return console.error("ez5.session_start failed for callback", ez5.callbacks[k]);
        });
      }
      assert(callback instanceof Function, "ez5." + k, "Parameter needs to be Function", {
        callback: callback
      });
      return ez5.callbacks[k].push(callback);
    };
  };
  for (j = 0, len1 = ref.length; j < len1; j++) {
    k = ref[j];
    ez5.callbacks[k] = [];
    fn(k);
  }
})();

CUI.ready((function(_this) {
  return function() {
    var renderer;
    renderer = new marked.Renderer();
    renderer.link = function(href, title, text) {
      var a_node;
      a_node = CUI.DOM.element("A", {
        target: "_blank",
        href: href,
        title: title
      });
      a_node.innerHTML = text;
      return a_node.outerHTML;
    };
    CUI.defaults.marked_opts.renderer = renderer;
    CUI.defaults.asserts_alert = 'off';
    return Events.listen({
      node: window,
      type: 'error',
      call: function(ev) {
        ez5.handleFrontendError(ev.getNativeEvent(), ez5.session.isDebug() || CUI.__in_error);
      }
    });
  };
})(this));
// Generated by CoffeeScript 1.10.0
var arrayUnique, urlParameterByName;

arrayUnique = function(arr) {
  return arr.filter(function(val, i, arr) {
    return i <= arr.indexOf(val);
  });
};

urlParameterByName = function(name) {
  var match;
  match = RegExp('[?&]' + name + '=([^&]*)').exec(window.location.search);
  return match && decodeURIComponent(match[1].replace(/\+/g, ' '));
};
// Generated by CoffeeScript 1.10.0
var Schema,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Schema = (function(superClass) {
  extend(Schema, superClass);

  function Schema() {
    return Schema.__super__.constructor.apply(this, arguments);
  }

  Schema.prototype.apis = {
    schema: "/schema/user/{version}",
    mask: "/mask/{version}",
    all_fields_mask: "/mask/{version}/_all_fields"
  };

  Schema.prototype.api = function(key, version) {
    return this.apis[key].replace(/{version}/, version);
  };

  Schema.prototype.getForStore = function() {
    var dfr, store;
    dfr = new CUI.Deferred();
    store = {};
    this.load(null, store, ['HEAD'], ['schema', 'mask']).done((function(_this) {
      return function() {
        return ez5.api.l10n({
          api: '/user/HEAD',
          withCredentials: true
        }).done(function(data) {
          store.keys = {
            HEAD: data
          };
          return dfr.resolve(store);
        });
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  Schema.prototype.sendToServer = function(store) {
    var dfr;
    dfr = new CUI.Deferred();
    ez5.api.schema({
      type: 'POST',
      api: '/user/HEAD',
      json_data: store.schema.HEAD
    }).fail(dfr.reject).done((function(_this) {
      return function() {
        return ez5.api.mask({
          type: 'POST',
          api: '/HEAD',
          json_data: store.mask.HEAD
        }).fail(dfr.reject).done(function() {
          return ez5.api.l10n({
            api: '/user/HEAD',
            type: 'POST',
            withCredentials: true,
            json_data: store.keys.HEAD
          }).done(function() {
            return dfr.resolve();
          });
        });
      };
    })(this));
    dfr.fail((function(_this) {
      return function() {
        return CUI.problem({
          text: $$('schema.send_to_server.problem')
        });
      };
    })(this));
    return dfr.promise();
  };

  Schema.prototype.load = function(x_easydb, store, _versions, _keys) {
    var cache_seconds, cache_uuid, dfrs, fn, i, j, key, keys, len, len1, prom, version, versions;
    if (store == null) {
      store = ez5;
    }
    dfrs = [];
    if (_versions) {
      versions = _versions;
    } else {
      versions = ['CURRENT'];
      if (Datamodel.getLevel()) {
        versions.push("HEAD");
      }
    }
    if (_keys) {
      keys = _keys;
    } else {
      keys = ["schema", "mask", "all_fields_mask"];
    }
    for (i = 0, len = keys.length; i < len; i++) {
      key = keys[i];
      store[key] = store[key] || {};
      fn = (function(_this) {
        return function(key, version) {
          return dfrs.push(ez5.server({
            api: _this.api(key, version),
            data: {
              format: "json",
              cache_seconds: cache_seconds,
              cache_uuid: cache_uuid
            }
          }).done(function(data) {
            return store[key][version] = data;
          }));
        };
      })(this);
      for (j = 0, len1 = versions.length; j < len1; j++) {
        version = versions[j];
        if (version === "CURRENT" && x_easydb) {
          cache_seconds = 3600 * 24 * 365;
          cache_uuid = JSON.stringify(x_easydb);
        } else {
          cache_seconds = void 0;
          cache_uuid = void 0;
        }
        store[key][version] = null;
        fn(key, version);
      }
    }
    prom = CUI.when(dfrs);
    prom.done((function(_this) {
      return function() {
        var k, l, len2, len3, m, ref;
        if (store !== ez5) {
          return;
        }
        ez5.all_fields_mask_preferred = {};
        for (k = 0, len2 = versions.length; k < len2; k++) {
          version = versions[k];
          ez5.schema.enrich_schema(ez5.schema[version], version);
          ez5.schema.enrich_mask_schema(ez5.mask[version], version);
          ref = ez5.all_fields_mask[version].masks;
          for (l = 0, len3 = ref.length; l < len3; l++) {
            m = ref[l];
            m.name = "_all_fields";
          }
          ez5.all_fields_mask_preferred[version] = copyObject(ez5.all_fields_mask[version], true);
          ez5.schema.enrich_mask_schema(ez5.all_fields_mask_preferred[version], version, true, true);
          ez5.schema.enrich_mask_schema(ez5.all_fields_mask[version], version, true);
        }
        _this.initPreferredMask("CURRENT");
        _this.initMaskInstances("CURRENT");
      };
    })(this));
    return prom;
  };

  Schema.prototype.initPreferredMask = function(version) {
    var i, len, mask, ref;
    ref = ez5.mask[version].masks;
    for (i = 0, len = ref.length; i < len; i++) {
      mask = ref[i];
      if (mask.is_preferred) {
        ez5.schema[version]._table_by_id[mask.table_id]._preferred_mask = mask;
      }
    }
    return this;
  };

  Schema.prototype.initMaskInstances = function(version) {
    var i, len, mask, ref;
    ref = ez5.mask[version].masks;
    for (i = 0, len = ref.length; i < len; i++) {
      mask = ref[i];
      if (ez5.mask[version]._mask_instance_by_name[mask.name]) {
        assert(!ez5.mask[version]._mask_instance_by_name[mask.name], "ez5.schema.load_schema", "ez5.mask." + version + "._mask_instance_by_name: \"" + mask.name + " already exists.", {
          mask: mask
        });
      }
      ez5.mask[version]._mask_instance_by_name[mask.name] = new Mask(version, null, mask);
    }
    return this;
  };

  Schema.prototype.getDatatypeLocalized = function(type, version) {
    if (isEmpty(type)) {
      return;
    }
    if (type.match("^link_")) {
      return $$("datamodel.type.link", [ez5.schema[version]._table_by_id[type.substring(5)]._name_localized]);
    } else if (type.match("^custom:")) {
      return CustomDataType.get(type).getCustomDataTypeNameLocalized();
    } else {
      return $$("datamodel.type." + type);
    }
  };

  return Schema;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var $$, $empty$, $span$, Localization,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Localization = (function(superClass) {
  extend(Localization, superClass);

  function Localization() {
    return Localization.__super__.constructor.apply(this, arguments);
  }

  Localization.prototype.init = function() {
    var dfr;
    dfr = new CUI.Deferred();
    return ez5.server({
      local_url: "/web/l10n/cultures.json",
      error: function() {}
    }).done((function(_this) {
      return function(data, status, xhr) {
        var c, i, idx, len;
        _this.cultures = [];
        assert(CUI.isArray(data), "Localization.init", "cultures.json is not an Array.", {
          data: data,
          xhr: xhr,
          status: status
        });
        for (idx = i = 0, len = data.length; i < len; idx = ++i) {
          c = data[idx];
          _this.cultures.push(c.code);
        }
        if (_this.cultures.length === 0) {
          return dfr.reject();
        }
        if (window.LanguageControl) {
          _this.__multiInputControl = new LanguageControl();
          return _this.__multiInputControlAdmin = new LanguageControlAdmin();
        }
      };
    })(this));
  };

  Localization.prototype.getPreferredDatabaseLanguage = function() {
    return ez5.session.getPref("database_languages")[0];
  };

  Localization.prototype.getPreferredNavigatorLanguage = function() {
    var _lang, i, j, len, len1, navlang, ref, ref1, shortlang;
    navlang = navigator.language;
    if (isEmpty(navlang)) {
      return this.cultures[0];
    }
    ref = this.cultures;
    for (i = 0, len = ref.length; i < len; i++) {
      _lang = ref[i];
      if (_lang.toLowerCase().startsWith(navlang.toLowerCase())) {
        return _lang;
      }
    }
    shortlang = navlang.split("-")[0];
    if (isEmpty(shortlang)) {
      return this.cultures[0];
    }
    ref1 = this.cultures;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      _lang = ref1[j];
      if (_lang.toLowerCase().startsWith(shortlang + "-")) {
        return _lang;
      }
    }
    return this.cultures[0];
  };

  Localization.prototype.getLanguageControl = function() {
    return this.__multiInputControl;
  };

  Localization.prototype.getLanguageControlAdmin = function() {
    return this.__multiInputControlAdmin;
  };

  Localization.prototype.getDatabaseLanguages = function() {
    return ez5.session.getPref("database_languages");
  };

  Localization.prototype.getSearchLanguages = function() {
    return ez5.session.getPref("search_languages");
  };

  Localization.prototype.getBestFrontendValue = function(data, html, html_only) {
    if (html == null) {
      html = false;
    }
    if (html_only == null) {
      html_only = false;
    }
    return this.__getBestValue(data, html, html_only, true);
  };

  Localization.prototype.getBestDatabaseValue = function(data, html, html_only) {
    if (html == null) {
      html = false;
    }
    if (html_only == null) {
      html_only = false;
    }
    return this.__getBestValue(data, html, html_only, false);
  };

  Localization.prototype.__getBestValue = function(data, html, html_only, frontend) {
    var i, j, k, lang, len, len1, try_languages, v;
    if (!data) {
      return;
    }
    try_languages = [];
    if (frontend) {
      try_languages.push(this.getLanguage());
      try_languages.push.apply(try_languages, ez5.session.getConfigFrontendLanguages());
    } else {
      try_languages.push.apply(try_languages, ez5.session.getPref("database_languages"));
      try_languages.push.apply(try_languages, ez5.session.getConfigDatabaseLanguages());
    }
    if (html) {
      for (i = 0, len = try_languages.length; i < len; i++) {
        lang = try_languages[i];
        if (isEmpty(v = data[lang + ":highlight"])) {
          continue;
        }
        return v;
      }
    }
    if (!html_only) {
      for (j = 0, len1 = try_languages.length; j < len1; j++) {
        lang = try_languages[j];
        if (isEmpty(v = data[lang])) {
          continue;
        }
        if (html) {
          return toHtml(v);
        } else {
          return v;
        }
      }
    }
    if (html) {
      for (k in data) {
        v = data[k];
        if (k === "_comment") {
          continue;
        }
        if (isEmpty(v)) {
          continue;
        }
        if (k.match(/:highlight$/)) {
          return v;
        }
      }
      if (html_only) {
        return;
      }
    }
    for (k in data) {
      v = data[k];
      if (k === "_comment") {
        continue;
      }
      if (isEmpty(v)) {
        continue;
      }
      if (html) {
        return toHtml(v);
      } else {
        return v;
      }
    }
  };

  Localization.prototype.setLanguage = function(culture) {
    var ref;
    assert(this.cultures, "Localization.setLanguage", "No cultures set, you need to call Localization.init first");
    assert(indexOf.call(this.cultures, culture) >= 0, "Localization.setLanguage", "Culture \"" + culture + "\" not available. Cultures are: \"" + ((ref = this.cultures) != null ? ref.join('\", \"') : void 0) + "\".");
    if (culture === this.culture) {
      return CUI.resolvedPromise();
    }
    this.culture = culture;
    DateTime.setLocale(this.culture);
    document.documentElement.setAttribute("lang", this.culture.split('-')[0]);
    return CUI.chainedCall((function(_this) {
      return function() {
        return _this.load_keys();
      };
    })(this), (function(_this) {
      return function() {
        var ref1;
        return (ref1 = ez5.pluginManager) != null ? ref1.loadKeys() : void 0;
      };
    })(this));
  };

  Localization.prototype.getLanguage = function() {
    return this.culture;
  };

  Localization.prototype.str_span = function(key, attrs, culture) {
    return $span("loca-key loca-key-" + key.replace(/[\.]/g, "-")).text(this.str(key, attrs, culture));
  };

  Localization.prototype.str_default = function(key, _default, attrs, culture) {
    if (_default == null) {
      _default = null;
    }
    return this.str(key, attrs, culture, _default);
  };

  Localization.prototype.html = function(key, attrs, culture, _default) {
    var html;
    if (culture == null) {
      culture = this.culture;
    }
    if (_default == null) {
      _default = void 0;
    }
    return html = this.str(key, attrs, culture, _default, true);
  };

  Localization.prototype.str = function(key, attrs, culture, _default, as_html) {
    var _key, _str, matches, r, repl, s, str;
    if (culture == null) {
      culture = this.culture;
    }
    if (isUndef(key)) {
      return "";
    }
    str = this.get_key(key, culture);
    if (str === "-") {
      return "";
    }
    if (isEmpty(str)) {
      if (_default !== void 0) {
        if (_default === null) {
          return null;
        }
        str = _default;
      } else {
        str = culture + ":" + key;
      }
      if (as_html) {
        return toHtml(str);
      } else {
        return str;
      }
    }
    if (as_html) {
      str = toHtml(str);
    }
    if (str.indexOf("$(") > -1) {
      r = /\$\((.*?)\)/g;
      s = "" + str;
      while (matches = r.exec(str)) {
        _str = this.get_key(matches[1], culture);
        if (isEmpty(_str)) {
          _str = culture + ":" + matches[1];
        }
        s = s.split(matches[0]).join(_str);
      }
      str = s;
    }
    if (attrs) {
      r = /%(?:([1-9][0-9]*)|\((.+?)\))([idsD])/g;
      s = "" + str;
      while (matches = r.exec(str)) {
        if (matches[1]) {
          _key = parseInt(matches[1]) - 1;
        } else {
          _key = matches[2];
        }
        repl = attrs[_key];
        if (isNull(repl)) {
          repl = "(attrs." + (matches[1] || matches[2]) + " missing)";
        } else {
          switch (matches[3]) {
            case "D":
              repl = ez5.format_date(repl);
              break;
            case "d":
              repl = ez5.format_date_and_time(repl);
          }
        }
        s = s.split(matches[0]).join(repl);
      }
      return s;
    } else {
      return str;
    }
  };

  Localization.prototype.get_complete_key = function(key, culture) {
    var _key;
    if (culture == null) {
      culture = this.culture;
    }
    _key = {};
    _key[this.culture] = this.get_key(key, culture);
    return _key;
  };

  Localization.prototype.get_key = function(key, culture) {
    if (culture == null) {
      culture = this.culture;
    }
    if (!this.strings) {
      return void 0;
    }
    if (!this.strings[culture]) {
      CUI.debug("no strings for loca " + culture + " found.");
      return void 0;
    }
    return this.strings[culture][key];
  };

  Localization.prototype.has = function(key) {
    return !isUndef(this.get_key(key));
  };

  Localization.prototype.clean_keys = function(map) {
    var _map, culture, found, k, v, value;
    for (k in map) {
      v = map[k];
      _map = {};
      found = false;
      for (culture in v) {
        value = v[culture];
        if (!isEmpty(value)) {
          _map[culture] = value;
          found = true;
        }
      }
      if (found) {
        map[k] = _map;
      } else {
        delete map[k];
      }
    }
    return map;
  };

  Localization.prototype.get_valid_user_key_prefixes = function(version) {
    var i, j, len, len1, mask, prefixes, ref, ref1, table;
    prefixes = [];
    ref = ez5.schema[version].tables;
    for (i = 0, len = ref.length; i < len; i++) {
      table = ref[i];
      prefixes.push("schema." + table.name + ".");
    }
    ref1 = ez5.mask[version].masks;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      mask = ref1[j];
      if (mask.name) {
        prefixes.push("mask." + mask.table_id + "." + mask.name + ".");
      } else {
        prefixes.push("mask." + mask.table_id + "._new_.");
      }
    }
    return prefixes;
  };

  Localization.prototype.update = function(opts) {
    var idx, key, ref, ref1, ref2, ref3, value;
    assert((ref = opts.realm) === "HEAD" || ref === "CURRENT", "Localization.update", "opts.realm needs to be \"HEAD\" or \"CURRENT\" but is \"" + opts.realm + "\".", {
      opts: opts
    });
    if (!this.user_keys || !this.user_keys[opts.realm]) {
      CUI.debug("ez5.loca.update: user_keys for realm '" + opts.realm + "' not loaded, cannot update.");
      return;
    }
    CUI.debug("Localization.update", opts);
    if (isString(opts.delete_prefix)) {
      ref1 = this.user_keys[opts.realm];
      for (key in ref1) {
        value = ref1[key];
        if (opts.delete_prefix === key.substr(0, opts.delete_prefix.length)) {
          delete this.user_keys[opts.realm][key];
        }
      }
    }
    if ($.isArray(opts.valid_prefixes)) {
      ref2 = this.user_keys[opts.realm];
      for (key in ref2) {
        value = ref2[key];
        if (!this.user_keys[opts.realm].hasOwnProperty(key)) {
          continue;
        }
        idx = idxInArray(key, opts.valid_prefixes, function(prefix) {
          return prefix === key.substr(0, prefix.length);
        });
        if (idx === -1) {
          CUI.warn("Localization.update: Removing not protected invalid key:", key);
          delete this.user_keys[opts.realm][key];
        }
      }
    }
    ref3 = opts.keys;
    for (key in ref3) {
      value = ref3[key];
      if (!isNull(value)) {
        this.user_keys[opts.realm][key] = value;
      }
    }
    return ez5.api.l10n({
      type: "POST",
      api: "/user/" + opts.realm,
      withCredentials: true,
      json_data: this.user_keys[opts.realm]
    });
  };

  Localization.prototype.load_keys = function(language) {
    if (language == null) {
      language = this.culture;
    }
    assert(language, "Localization.load_keys", "language is not set");
    this.strings = {};
    this.strings[language] = {};
    return CUI.when(ez5.api.l10n({
      api: "/static/" + language + ".json",
      add_token: false
    }).done((function(_this) {
      return function(data) {
        if (!CUI.isPlainObject(data)) {
          console.warn("Localization: load_keys", language, "no data returned.");
          return;
        }
        _this.__addKeys(data, language);
      };
    })(this)), ez5.server({
      local_url: "/web/l10n/" + language + ".json",
      add_token: false
    }).done((function(_this) {
      return function(data) {
        _this.__addKeys(data, language);
      };
    })(this))).fail(function(xhr) {
      return CUI.error("error retrieving language", language, xhr);
    }).done((function(_this) {
      return function() {
        var k, key;
        CUI.defaults["class"].Button.defaults.confirm_ok = $$("base.ok");
        CUI.defaults["class"].Button.defaults.confirm_cancel = $$("base.cancel");
        CUI.defaults["class"].Button.defaults.confirm_title = $$("base.confirm");
        CUI.Modal.defaults.cancel_tooltip = {
          text: $$("base.cancel.tooltip")
        };
        CUI.Pane.defaults.button_tooltip = {
          text: $$("base.pane.tooltip")
        };
        CUI.DateTime.defaults.button_tooltip = ez5.loca.text("cui.date.time.button_tooltip");
        CUI.DataTable.defaults.plus_button_tooltip = ez5.loca.text("cui.data.table.plus_button_tooltip");
        CUI.DataTable.defaults.minus_button_tooltip = ez5.loca.text("cui.data.table.minus_button_tooltip");
        CUI.ListView.defaults.row_move_handle_tooltip = ez5.loca.text("cui.list.view.row_move_handle_tooltip");
        CUI.Tabs.defaults.overflow_button_tooltip = ez5.loca.text("cui.tabs.overflow_button_tooltip");
        for (k in CUI.ConfirmationChoice.defaults) {
          key = "cui.confirmation.choice." + k;
          if (_this.has(key)) {
            CUI.ConfirmationChoice.defaults[k] = _this.get_key(key);
          }
        }
      };
    })(this));
  };

  Localization.prototype.__replaceValue = function(v) {
    return v.replace(/\\n/g, "\n").replace(/~/g, '\u00AD');
  };

  Localization.prototype.__addKeys = function(data, language) {
    var k, ref, v;
    ref = data[language];
    for (k in ref) {
      v = ref[k];
      this.strings[language][k] = this.__replaceValue(v);
    }
  };

  Localization.prototype.load_more_keys = function(url) {
    var dfr;
    dfr = new CUI.Deferred();
    ez5.server({
      local_url: url,
      add_token: false,
      handle_error: (function(_this) {
        return function(xhr) {
          return true;
        };
      })(this)
    }).done((function(_this) {
      return function(data) {
        _this.__addKeys(data, _this.getLanguage());
        dfr.resolve(data);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  Localization.prototype.load_user_keys = function(x_easydb) {
    var cache_seconds, cache_uuid, loads, set_keys;
    if (x_easydb) {
      cache_seconds = 3600 * 24 * 365;
      cache_uuid = JSON.stringify(x_easydb);
    } else {
      cache_seconds = void 0;
      cache_uuid = void 0;
    }
    this.user_keys = {};
    set_keys = (function(_this) {
      return function(version, data) {
        var info, key, lang, value;
        _this.user_keys[version] = {};
        for (key in data) {
          info = data[key];
          _this.user_keys[version][key] = {};
          for (lang in info) {
            value = info[lang];
            if (lang === '_comment') {
              _this.user_keys[version][key][lang] = value;
            } else {
              _this.user_keys[version][key][lang] = _this.__replaceValue(value);
            }
          }
        }
      };
    })(this);
    loads = [
      ez5.api.l10n({
        api: "/user/CURRENT",
        withCredentials: true,
        data: {
          cache_seconds: cache_seconds,
          cache_uuid: cache_uuid
        }
      }).done((function(_this) {
        return function(data) {
          return set_keys('CURRENT', data);
        };
      })(this))
    ];
    if (Datamodel.getLevel()) {
      loads.push(ez5.api.l10n({
        api: "/user/HEAD",
        withCredentials: true
      }).done((function(_this) {
        return function(data) {
          return set_keys('HEAD', data);
        };
      })(this)));
    }
    return CUI.when(loads).fail(function(xhr) {
      return CUI.error("error loading user keys", this.culture, xhr);
    }).done(function() {});
  };

  Localization.prototype.has_user_key = function(realm, key) {
    var ref, ref1;
    return !isEmpty((ref = this.user_keys) != null ? (ref1 = ref[realm]) != null ? ref1[key] : void 0 : void 0);
  };

  Localization.prototype.get_user_key = function(realm, key) {
    if (!this.has_user_key(realm, key)) {
      return {};
    }
    return this.user_keys[realm][key];
  };

  Localization.prototype.has_user_key_localized = function(realm, key) {
    var keys;
    keys = this.get_user_key(realm, key);
    return !isEmpty(this.get_user_key_localized(realm, key));
  };

  Localization.prototype.get_user_key_localized = function(realm, key, _default) {
    var keys, v;
    keys = this.get_user_key(realm, key);
    v = this.getBestFrontendValue(keys);
    if (isEmpty(v)) {
      return _default;
    } else {
      return v;
    }
  };

  Localization.prototype.text = function(key, attrs) {
    if (this.has(key + "|text")) {
      return this.str(key + "|text", attrs);
    } else if (this.has(key)) {
      return this.str(key, attrs);
    } else {
      return void 0;
    }
  };

  Localization.prototype.tooltip = function(key, attrs) {
    if (this.has(key + "|tooltip")) {
      return this.str(key + "|tooltip", attrs);
    } else {
      return null;
    }
  };

  Localization.prototype.formatNumber = function(int, fixed) {
    if (fixed == null) {
      fixed = 2;
    }
    return (int / Math.pow(10, fixed)).toFixed(fixed).replace("\.", ez5.session.frontend_locale.numbers.decimal);
  };

  Localization.prototype.setLocaKeys = function(div) {
    var el, i, len, loca_key, prefix, prefix_el, ref;
    ref = CUI.DOM.matchSelector(div, "[data-loca-key]");
    for (i = 0, len = ref.length; i < len; i++) {
      el = ref[i];
      loca_key = el.getAttribute("data-loca-key");
      prefix_el = CUI.DOM.closest(el, "[data-loca-key-prefix]");
      if (prefix_el) {
        prefix = prefix_el.getAttribute("data-loca-key-prefix");
      } else {
        prefix = "";
      }
      el.textContent = $$(prefix + loca_key);
    }
  };

  return Localization;

})(CUI.Element);

ez5.loca = new Localization();

$$ = function() {
  return ez5.loca.str.apply(ez5.loca, arguments);
};

$span$ = function() {
  return ez5.loca.str_span.apply(ez5.loca, arguments);
};

$empty$ = function() {
  return ez5.loca.str_span.apply(ez5.loca, arguments).addClass("italic");
};
// Generated by CoffeeScript 1.10.0
var Plugin,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Plugin = (function(superClass) {
  extend(Plugin, superClass);

  function Plugin(opts) {
    this.opts = opts != null ? opts : {};
    if (this.opts.base_url.endsWith("/")) {
      this.__bare_base_url = this.opts.base_url;
    } else {
      this.__bare_base_url = this.opts.base_url + "/";
    }
    if (this.opts.load_from_remote) {
      this.__load_from_remote = true;
      this.__base_url = ez5.getAbsoluteURL(this.__bare_base_url);
    } else {
      this.__base_url = this.__bare_base_url;
      this.__load_from_remote = false;
    }
    this.__webfrontend = this.opts.webfrontend || {};
    this.__name = this.opts.name;
  }

  Plugin.prototype.getWebfrontend = function() {
    return this.__webfrontend;
  };

  Plugin.prototype.getName = function() {
    return this.__name;
  };

  Plugin.prototype.loadFromRemote = function() {
    return this.__load_from_remote;
  };

  Plugin.prototype.getInfoName = function() {
    if (this.__load_from_remote) {
      return this.__name + "(R)";
    } else {
      return this.__name;
    }
  };

  Plugin.prototype.getOpts = function() {
    return this.opts;
  };

  Plugin.prototype.getBareBaseURL = function() {
    return this.__bare_base_url;
  };

  Plugin.prototype.getBaseURL = function() {
    return this.__base_url;
  };

  Plugin.prototype.loadCss = function() {
    var cssNode, css_url;
    css_url = this.getWebfrontend().css;
    if (!css_url) {
      return CUI.resolvedPromise();
    }
    cssNode = CUI.DOM.element("LINK", {
      rel: "stylesheet",
      charset: "utf-8",
      href: this.getBaseURL() + css_url
    });
    document.head.appendChild(cssNode);
    return cssNode;
  };

  Plugin.prototype.loadKeys = function() {
    var dfr, more_keys_url;
    if (!this.getWebfrontend().l10n) {
      return CUI.resolvedPromise();
    }
    dfr = new CUI.Deferred();
    more_keys_url = this.getBaseURL() + this.getWebfrontend().l10n + "/" + ez5.loca.getLanguage() + ".json";
    ez5.loca.load_more_keys(more_keys_url, true).done(dfr.resolve).fail((function(_this) {
      return function(xhr) {
        var ref;
        if ((ref = xhr.status) === 403 || ref === 404) {
          return dfr.resolve();
        } else {
          return dfr.reject();
        }
      };
    })(this));
    return dfr.promise();
  };

  return Plugin;

})(CUI.Dummy);
// Generated by CoffeeScript 1.10.0
var PluginManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PluginManager = (function(superClass) {
  extend(PluginManager, superClass);

  function PluginManager() {
    return PluginManager.__super__.constructor.apply(this, arguments);
  }

  PluginManager.prototype.readOpts = function() {
    PluginManager.__super__.readOpts.call(this);
    return this.__plugins = {};
  };

  PluginManager.prototype.initOpts = function() {
    PluginManager.__super__.initOpts.call(this);
    return this.addOpts({
      load_from_remote: {
        mandatory: true,
        "default": true,
        check: Boolean
      }
    });
  };

  PluginManager.prototype.getPluginNames = function() {
    var names;
    names = Object.keys(this.__plugins);
    names.sort();
    return names;
  };

  PluginManager.prototype.getPlugin = function(name) {
    return this.__plugins[name] || void 0;
  };

  PluginManager.prototype.loadKeys = function() {
    var name, plugin, promises, ref;
    promises = [];
    ref = this.__plugins;
    for (name in ref) {
      plugin = ref[name];
      promises.push(plugin.loadKeys());
    }
    return CUI.when(promises);
  };

  PluginManager.prototype.loadFromRemote = function() {
    if (window.easydb_server_url && this._load_from_remote) {
      return true;
    } else {
      return false;
    }
  };

  PluginManager.prototype.load = function() {
    var dfr;
    dfr = new CUI.Deferred();
    ez5.api.plugin({
      withCredentials: false
    }).done((function(_this) {
      return function(info) {
        var _plugin, fn, i, len, plugin, plugins, todos;
        plugins = info.plugins;
        todos = [];
        fn = function(plugin) {
          return todos.push(function() {
            var dfr2, file, load_code, load_html, url;
            dfr2 = new CUI.Deferred();
            if (plugin.getWebfrontend().html) {
              file = plugin.getBaseURL() + plugin.getWebfrontend().html;
              load_html = CUI.Template.loadTemplateFile(file);
            } else {
              file = "<none>";
              load_html = CUI.resolvedPromise();
            }
            if (plugin.getWebfrontend().url) {
              url = plugin.getBaseURL() + plugin.getWebfrontend().url;
              load_code = new CUI.XHR({
                url: url,
                responseType: "text"
              }).start().done(function(code) {
                return CUI.evalCode(code);
              });
            } else {
              url = "<none>";
              load_code = CUI.resolvedPromise();
            }
            CUI.when(load_html, load_code).done(function() {
              return plugin.loadKeys().always(function() {
                _this.__plugins[plugin.getName()] = plugin;
                return dfr2.resolve();
              });
            }).fail(function(error) {
              var code, e, error1;
              console.error("Plugin: \"" + plugin.getName() + "\". Error while loading. Disabling plugin. URL was:", url, "Error was:", error);
              if ((error != null ? error.status : void 0) === 200) {
                code = error.responseText;
                try {
                  eval(code);
                } catch (error1) {
                  e = error1;
                  console.error("Error EVAL:", e, "Code was:", {
                    code: code
                  });
                }
              }
              return dfr2.resolve();
            });
            return dfr2.promise();
          });
        };
        for (i = 0, len = plugins.length; i < len; i++) {
          _plugin = plugins[i];
          if (!_plugin.hasOwnProperty("load_from_remote")) {
            _plugin.load_from_remote = _this.loadFromRemote();
          }
          plugin = new Plugin(_plugin);
          assert(!_this.getPlugin(plugin.getName()), "PluginManager.load", "Plugin " + (plugin.getName()) + " already loaded.", {
            plugin: plugin
          });
          fn(plugin);
        }
        CUI.chainedCall.apply(CUI, todos).done(function() {
          return dfr.resolve();
        });
      };
    })(this)).fail(function() {
      return dfr.reject();
    });
    dfr.always((function(_this) {
      return function() {};
    })(this));
    return dfr.promise();
  };

  return PluginManager;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var UserError,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

UserError = (function(superClass) {
  extend(UserError, superClass);

  function UserError() {
    return UserError.__super__.constructor.apply(this, arguments);
  }

  UserError.prototype.initOpts = function() {
    UserError.__super__.initOpts.call(this);
    return this.addOpts({
      label: {
        check: String
      },
      label_attrs: {
        check: (function(_this) {
          return function(v) {
            return CUI.isPlainObject(v) || CUI.isArray(v);
          };
        })(this)
      },
      text: {
        check: String
      }
    });
  };

  UserError.prototype.readOpts = function() {
    UserError.__super__.readOpts.call(this);
    if (this._label) {
      this.__text = $$(this._label, this._label_attrs);
    } else {
      this.__text = this._text;
    }
    return this;
  };

  UserError.prototype.getError = function() {
    return this.__text;
  };

  UserError.prototype.presentError = function(opts) {
    if (opts == null) {
      opts = {};
    }
    assert(!isEmpty(this.getError()), "new UserError", "opts.label or opts.text needs to be set.", {
      userError: this
    });
    return CUI.problem({
      text: this.getError()
    });
  };

  return UserError;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var InvalidSaveDataException,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

InvalidSaveDataException = (function(superClass) {
  extend(InvalidSaveDataException, superClass);

  function InvalidSaveDataException() {
    return InvalidSaveDataException.__super__.constructor.apply(this, arguments);
  }

  InvalidSaveDataException.prototype.getError = function() {
    var err;
    err = InvalidSaveDataException.__super__.getError.call(this);
    if (!isEmpty(err)) {
      return err;
    } else {
      return $$("invalid.save.data.exception.error");
    }
  };

  return InvalidSaveDataException;

})(UserError);
// Generated by CoffeeScript 1.10.0
var ServerRequest,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ServerRequest = (function(superClass) {
  extend(ServerRequest, superClass);

  function ServerRequest(opts1) {
    var err;
    this.opts = opts1 != null ? opts1 : {};
    ServerRequest.__super__.constructor.call(this, this.opts);
    err = "One of opts.api, opts.url, or opts.local_url must be set";
    this.__type = this._type || "GET";
    if (this._api) {
      assert(!this._url && !this._local_url, "new ServerRequest", err, {
        opts: this.opts
      });
      assert(this._api.startsWith("/"), "new ServerRequest", "opts.api needs to start with /", {
        opts: this.opts
      });
      this.__url = ez5.api.getFullBase() + this._api;
      if (Session.request_cookieauth) {
        if (window.easydb_server_url && !this.opts.hasOwnProperty("withCredentials")) {
          this._withCredentials = true;
        }
      } else {
        this._withCredentials = false;
      }
    }
    if (this._url) {
      assert(!this._local_url, "new ServerRequest", err, {
        opts: this.opts
      });
      this.__url = this._url;
    }
    if (this._local_url) {
      this.__url = this._local_url;
    }
    if (window.easydb_server_url && !this._local_url && !this.__url.startsWith(window.easydb_server_url)) {
      this.__url = window.easydb_server_url + this.__url;
    }
    this.__headers = {};
    this.__prepareRequest();
  }

  ServerRequest.prototype.initOpts = function() {
    ServerRequest.__super__.initOpts.call(this);
    return this.addOpts({
      success: {
        check: Function
      },
      error: {
        check: Function
      },
      complete: {
        check: Function
      },
      cache: {
        deprecated: true,
        check: Boolean
      },
      handle_error: {
        check: Function
      },
      async: {
        deprecated: true,
        check: Boolean
      },
      api: {
        check: String
      },
      dataType: {
        check: String
      },
      json_data: {},
      data: {},
      url: {
        check: String
      },
      local_url: {
        check: String
      },
      type: {
        check: ["POST", "GET", "PUT", "DELETE", "HEAD"]
      },
      add_token: {
        "default": true,
        check: Boolean
      },
      hide_active: {
        "default": false,
        check: Boolean
      },
      dump_only: {
        "default": false,
        check: Boolean
      },
      dump_only_promise_policy: {
        "default": "reject",
        check: ["reject", "resolve"]
      },
      withCredentials: {
        mandatory: true,
        "default": false,
        check: Boolean
      }
    });
  };

  ServerRequest.prototype.start = function() {
    var dfr, fn, i, k, len, promise, ref, xhr;
    dfr = new CUI.Deferred();
    xhr = this.__doRequest(dfr);
    promise = dfr.promise();
    ref = ["abort"];
    fn = (function(_this) {
      return function(k) {
        return promise[k] = function() {
          return xhr[k].apply(xhr, arguments);
        };
      };
    })(this);
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      fn(k);
    }
    return promise;
  };

  ServerRequest.prototype.handle202 = function(dfr, data) {
    var form_data, show_task_modal;
    form_data = {};
    show_task_modal = function(task_idx, tasks_dfr) {
      var btn, buttons, f, field, fields, fn, form, i, j, len, len1, mod, ref, ref1, set_buttons_state, task;
      if (tasks_dfr == null) {
        tasks_dfr = new CUI.Deferred();
      }
      if (!(task = data.tasks[task_idx])) {
        tasks_dfr.resolve();
        return;
      }
      dfr.notify("start", task_idx, data.tasks.length);
      fields = [];
      if (task.form) {
        ref = task.form;
        for (i = 0, len = ref.length; i < len; i++) {
          f = ref[i];
          if (f.name) {
            form_data[f.name] = void 0;
          }
          field = {
            form: {
              label: f.label
            }
          };
          switch (f.type) {
            case "options":
              field.undo_and_changed_support = false;
              field.type = Options;
              field.name = f.name;
              field.radio = true;
              field.options = f.options;
              break;
            default:
              assert(false, "ServerRequest.handle202", "Unknown field in task.form", {
                task: task
              });
          }
          fields.push(field);
        }
        form = new Form({
          undo_and_changed_support: false,
          onDataChanged: function() {
            return set_buttons_state();
          },
          "class": "server-request-handle-202-form",
          data: form_data,
          fields: fields
        });
        form.start();
      } else {
        form = null;
      }
      buttons = [];
      if (task.buttons) {
        ref1 = task.buttons;
        fn = function(btn) {
          return buttons.push(new Button({
            text: btn.text,
            onClick: function() {
              if (btn.name) {
                form_data[btn.name] = btn.value;
              }
              mod.destroy();
              dfr.notify("confirmed", task_idx, data.tasks.length);
              show_task_modal(task_idx + 1, tasks_dfr);
            }
          }));
        };
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          btn = ref1[j];
          if (btn.hidden) {
            assert(btn.name && btn.hasOwnProperty("value"), "ServerRequest.handle202", "btn.hidden needs button name and btn.value to be set.", {
              button: btn
            });
            form_data[btn.name] = btn.value;
            continue;
          }
          fn(btn);
        }
      } else {
        assert(false, "ServerRequest.handle202", "Task did not provide a button", {
          task: task
        });
      }
      set_buttons_state = function() {
        var df, form_ok, l, len2, len3, m, n, ref2;
        if (!form) {
          form_ok = true;
        } else {
          form_ok = true;
          ref2 = form.getDataFields();
          for (l = 0, len2 = ref2.length; l < len2; l++) {
            df = ref2[l];
            if (n = df.getName()) {
              if (isFalse(form_data[n])) {
                form_ok = false;
                break;
              }
            }
          }
        }
        for (m = 0, len3 = buttons.length; m < len3; m++) {
          btn = buttons[m];
          if (form_ok) {
            btn.enable();
          } else {
            btn.disable();
          }
        }
      };
      mod = new Modal({
        "class": "server-request-handle-202",
        cancel: true,
        onCancel: function() {
          tasks_dfr.reject(task_idx);
        },
        pane: {
          header_left: new Label({
            text: task.title
          }),
          padded: true,
          content: function() {
            return $div("server-request-handle-202-content").append($div("server-202-message").append($text(task.message))).append(form != null ? form.DOM : void 0);
          },
          footer_right: function() {
            return new Buttonbar({
              buttons: buttons
            });
          }
        }
      });
      set_buttons_state();
      mod.show();
      return tasks_dfr.promise();
    };
    return show_task_modal(0).done((function(_this) {
      return function() {
        dfr.notify("done");
        assert(!$.isEmptyObject(form_data), "ServerRequest.handle202", "Server did not provide at least one \"name\" field or button.", {
          form_data: form_data
        });
        _this.req.url = CUI.appendToUrl(_this.__req_url, form_data);
        return _this.__doRequest(dfr);
      };
    })(this)).fail(function(task_idx) {
      return dfr.reject("cancelled", task_idx, data.tasks.length);
    });
  };

  ServerRequest.prototype.handle502 = function(dfr) {
    var cls;
    if (!ServerRequest.bad_gateway_modal) {
      if (CUI.__ng__) {
        cls = "cui-alert-problem";
      } else {
        cls = "ez5-bad-gateway-handler-dialog cui-alert cui-alert-problem";
      }
      ServerRequest.bad_gateway_modal = new CUI.ConfirmationDialog({
        "class": cls,
        title: $$("server.error.bad_gateway.title"),
        icon: CUI.__ng__ ? void 0 : "warning",
        text: $$("server.error.bad_gateway.text")
      }).show();
    }
    if (!this.__502_in_progress) {
      this.__502_in_progress = true;
      dfr.done(function() {
        var ref;
        if ((ref = ServerRequest.bad_gateway_modal) != null) {
          ref.destroy();
        }
        delete ServerRequest.bad_gateway_modal;
        return delete this.__502_in_progress;
      });
    }
    CUI.setTimeout((function(_this) {
      return function() {
        return _this.__doRequest(dfr);
      };
    })(this), 2500);
  };

  ServerRequest.__active = 0;

  ServerRequest.hasRequests = function() {
    return this.__active > 0;
  };

  ServerRequest.prototype.__doRequest = function(dfr) {
    var ref, xhr;
    xhr = new CUI.XHR(this.req);
    if (this._success) {
      dfr.done((function(_this) {
        return function(data, status, statusText) {
          return _this._success(data, status, xhr.getXHR());
        };
      })(this));
    }
    if (this._error) {
      dfr.fail((function(_this) {
        return function(data, status, statusText) {
          return _this._error(xhr.getXHR(), statusText);
        };
      })(this));
    }
    if (this._complete) {
      assert(false, "ServerRequest.__doRequest", "opts.complete is obsolete.");
    }
    if (!this._hide_active) {
      ServerRequest.__active++;
      if ((ref = ez5.busyState) != null) {
        ref.update();
      }
      if (ServerRequest.__active === 1) {

      }
      dfr.always((function(_this) {
        return function() {
          return dfr.always(function() {
            var ref1;
            ServerRequest.__active--;
            if ((ref1 = ez5.busyState) != null) {
              ref1.update();
            }
            if (ServerRequest.__active === 0) {

            }
          });
        };
      })(this));
    }
    if (this._dump_only) {
      console.debug("ServerRequest", this.req);
      console.debug(this.req.method, this.req.url);
      if (this.req.json_data) {
        console.debug(dump(this.req.json_data));
      }
      dfr[this._dump_only_promise_policy]();
      return;
    }
    xhr.start().done((function(_this) {
      return function(data, status, statusText) {
        if (status === 202) {
          _this.handle202(dfr, data);
          return;
        }
        return dfr.resolve.call(dfr, data, status, xhr.getXHR());
      };
    })(this)).fail((function(_this) {
      return function(data, status, statusText) {
        var error_args;
        error_args = [xhr.getXHR(), statusText];
        switch (typeof _this._handle_error === "function" ? _this._handle_error(xhr.getXHR()) : void 0) {
          case true:
            dfr.reject.apply(dfr, error_args);
            return;
        }
        if (status === 502) {
          _this.handle502(dfr);
          return;
        }
        if (!_this._error && statusText !== "abort") {
          return ez5.error_handler(xhr.getXHR()).done(function() {
            return dfr.reject.apply(dfr, error_args);
          }).fail(function() {
            return _this.__doRequest(dfr);
          });
        } else {
          return dfr.reject.apply(dfr, error_args);
        }
      };
    })(this)).progress(function() {
      return dfr.notify.apply(dfr, arguments);
    });
    return xhr;
  };

  ServerRequest.prototype.__prepareRequest = function() {
    var ref, ref1;
    this.req = {
      method: this.__type,
      url: this.__url,
      url_data: this._data,
      json_data: this._json_data,
      json_pretty: true || ((ref = ez5.session) != null ? ref.isDebug() : void 0) ? "   " : void 0,
      responseType: this._dataType,
      headers: this.__headers,
      withCredentials: this._withCredentials
    };
    if (this._add_token && ((ref1 = ez5.session) != null ? ref1.token : void 0)) {
      this.__headers["X-Easydb-Token"] = ez5.session.token;
    }
    return this.__req_url = this.req.url;
  };

  ServerRequest.prototype.getRequest = function() {
    return this.req;
  };

  return ServerRequest;

})(CUI.Element);

ez5.server = function(opts) {
  return (new ServerRequest(opts)).start();
};
// Generated by CoffeeScript 1.10.0
var ServerRequestApi,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ServerRequestApi = (function(superClass) {
  extend(ServerRequestApi, superClass);

  function ServerRequestApi(opts1) {
    var api, defaults, fn, ref;
    this.opts = opts1 != null ? opts1 : {};
    ServerRequestApi.__super__.constructor.call(this, this.opts);
    ref = ServerRequestApi.apis;
    fn = (function(_this) {
      return function(api, defaults) {
        return _this[api] = function(opts) {
          if (opts == null) {
            opts = {};
          }
          CUI.mergeMap(opts, defaults);
          return _this.__call(api, opts);
        };
      };
    })(this);
    for (api in ref) {
      defaults = ref[api];
      fn(api, defaults);
    }
    return;
  }

  ServerRequestApi.prototype.base = "/api/v1";

  ServerRequestApi.getXEasydbHeaders = function(xhr) {
    return {
      base: xhr.getResponseHeader("X-Easydb-Base-Schema-Version"),
      user: xhr.getResponseHeader("X-Easydb-User-Schema-Version"),
      solution: xhr.getResponseHeader("X-Easydb-Solution")
    };
  };

  ServerRequestApi.prototype.getFullBase = function(include_origin) {
    if (include_origin == null) {
      include_origin = false;
    }
    if (window.easydb_server_url) {
      return window.easydb_server_url + this.base;
    } else if (include_origin) {
      return window.document.location.origin + this.base;
    } else {
      return this.base;
    }
  };

  ServerRequestApi.prototype.__call = function(api, opts) {
    if (opts.api) {
      assert(opts.api.startsWith("/"), "ez5.api." + api, "opts.api needs to start with /", {
        opts: opts
      });
      opts.api = "/" + api + opts.api;
    } else {
      opts.api = "/" + api;
    }
    return (new ServerRequest(opts)).start();
  };

  ServerRequestApi.apis = {
    search: {
      type: "POST",
      data: {
        pretty: 0
      }
    },
    db: {
      type: "POST"
    },
    settings: {},
    "export": {},
    schema: {},
    objects: {},
    objecttype: {},
    collection: {},
    config: {},
    suggest: {},
    eas: {},
    settings: {},
    tags: {},
    transitions: {},
    mask: {},
    l10n: {
      withCredentials: false
    },
    plugin: {
      withCredentials: false
    },
    db_info: {
      type: "POST"
    },
    session: {},
    event: {},
    right: {},
    message: {},
    objecttype: {},
    xmlmapping: {},
    user: {},
    group: {},
    pool: {}
  };

  return ServerRequestApi;

})(CUI.Element);

ez5.api = new ServerRequestApi();
// Generated by CoffeeScript 1.10.0
var ServerErrorModal;

ServerErrorModal = (function() {
  function ServerErrorModal(error) {
    this.error = error;
  }

  ServerErrorModal.prototype.show = function() {
    return ez5.server({
      api: "/plugin/base/server/error/" + this.error.uuid
    }).done((function(_this) {
      return function(data) {
        var mod;
        return mod = new Modal({
          "class": "uuid-error-detail",
          cancel: true,
          pane: {
            header_left: new Label({
              text: $$("base.error.uuid.modal.title")
            }),
            content: function() {
              return _this.renderError(data);
            },
            footer_right: [
              {
                text: $$("base.ok"),
                onClick: function(df) {
                  return mod.destroy();
                }
              }
            ]
          }
        }).show();
      };
    })(this));
  };

  ServerErrorModal.prototype.renderError = function(d) {
    var app, table;
    table = $table("uuid-error");
    app = function(key, content) {
      if (isEmpty(content.html())) {
        content = $span$("base.empty_value");
      }
      return table.append($tr_one_row($$("base.error.uuid.modal." + key), content));
    };
    app("uuid", $text(this.error.uuid));
    app("error", $span$(d.code));
    app("description", $text(d.description));
    app("timestamp", $text(ez5.format_date_and_time(d.timestamp)));
    app("session.token", $text(d.session.token));
    app("session.created", $text(ez5.format_date_and_time(d.session.created)));
    app("request.method", $text(d.request.method));
    app("request.url", $text(d.request.url));
    app("request.header", $pre().append(CUI.DOM.htmlToNodes(d.request.header)));
    if (d.request.method !== "GET") {
      app("request.body", $pre().append(CUI.DOM.htmlToNodes(d.request.body)));
    }
    return table;
  };

  return ServerErrorModal;

})();
// Generated by CoffeeScript 1.10.0
var EventPoller,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

EventPoller = (function(superClass) {
  extend(EventPoller, superClass);

  function EventPoller() {
    return EventPoller.__super__.constructor.apply(this, arguments);
  }

  EventPoller.prototype.readOpts = function() {
    EventPoller.__super__.readOpts.call(this);
    this.stopped = true;
    this.last_poll_id = ez5.session.data.current_max_event_id;
    if (!(this.last_poll_id > 0)) {
      return console.error("EventPoller.readOpts: session.current_max_event_id not set, unable to poll.");
    } else {

    }
  };

  EventPoller.saveCustomEvent = function(event_json_data) {
    if (event_json_data == null) {
      event_json_data = {};
    }
    console.info("EventPoller.saveCustomEvent:", dump(event_json_data));
    return this.saveEvent(event_json_data, true);
  };

  EventPoller.saveEvent = function(event_json_data) {
    var log, type;
    if (event_json_data == null) {
      event_json_data = {};
    }
    CUI.Element.readOpts(event_json_data, "EventPoller.saveEvent", {
      objecttype: function() {
        return {
          check: String
        };
      },
      object_version: function() {
        return {
          check: String
        };
      },
      object_id: function() {
        return {
          check: String
        };
      },
      schema: function() {
        return {
          check: String
        };
      },
      type: {
        check: String
      },
      info: {
        check: "PlainObject"
      }
    });
    log = ez5.session.getBaseConfig().system.log;
    type = event_json_data.type.toLowerCase();
    if (log[type] !== false) {
      return ez5.api.event({
        type: "POST",
        json_data: event_json_data
      }).done((function(_this) {
        return function(data) {
          return console.info("EventPoller.saveEvent:", event_json_data, data);
        };
      })(this));
    } else {
      return CUI.resolvedPromise();
    }
  };

  EventPoller.prototype.start = function() {
    if (!(this.last_poll_id > 0)) {
      return;
    }
    this.stopped = false;
    return this.poll();
  };

  EventPoller.prototype.stop = function() {
    return this.stopped = true;
  };

  EventPoller.prototype.isStopped = function() {
    return this.stopped;
  };

  EventPoller.prototype.poll = function() {
    if (this.isStopped()) {
      return;
    }
    return this.__poll();
  };

  EventPoller.prototype.pollOnce = function() {
    return this.__poll(true);
  };

  EventPoller.prototype.__schedulePoll = function() {
    return this.__pollTimeout = CUI.setTimeout({
      ms: EventPoller.interval,
      track: false,
      call: (function(_this) {
        return function() {
          return _this.poll();
        };
      })(this)
    });
  };

  EventPoller.prototype.__poll = function(one_only) {
    if (one_only == null) {
      one_only = false;
    }
    CUI.clearTimeout(this.__pollTimeout);
    if (CUI.DOM.find(".ez5-event-poller").length === 0) {
      this.__schedulePoll();
      return;
    }
    ez5.api.event({
      type: "GET",
      hide_active: true,
      handle_error: function(xhr) {
        if (xhr.status === 502) {
          return true;
        }
      },
      api: "/poll/" + this.last_poll_id
    }).done((function(_this) {
      return function(events, status, jqXHR) {
        var _event, event, i, len;
        if (!ez5.session.checkSchemaVersions(jqXHR)) {
          return;
        }
        for (i = 0, len = events.length; i < len; i++) {
          _event = events[i];
          event = _event.event;
          if (ez5.session.isDebug()) {
            console.info("Event #" + event._id + ": " + event.type, event);
          }
          Events.trigger({
            type: "event-poller",
            info: {
              event: event,
              user: _event.user
            }
          });
          _this.last_poll_id = event._id;
        }
        if (events.length > 0) {
          Events.trigger({
            type: "event-poller",
            info: {
              batch_done: true
            }
          });
        }
        if (one_only) {
          return;
        }
        return _this.__schedulePoll();
      };
    })(this)).fail((function(_this) {
      return function() {
        if (one_only) {
          return;
        }
        return _this.__schedulePoll();
      };
    })(this));
    return this;
  };

  EventPoller.interval = 3000;

  EventPoller.listen = function(_opts) {
    var events, mypoll, opts;
    opts = CUI.Element.readOpts(_opts, "EventPoller.listen", {
      filter: {
        mandatory: true,
        check: function(v) {
          return CUI.isPlainObject(v) || CUI.isFunction(v);
        }
      },
      instance: {
        mandatory: true,
        check: function(v) {
          return v instanceof CUI.Element;
        }
      },
      call: {
        mandatory: true,
        check: Function
      }
    });
    events = [];
    mypoll = Events.listen({
      type: "event-poller",
      instance: opts.instance,
      call: (function(_this) {
        return function(ev, info) {
          var event, k, ref, ref1, v;
          if (info.batch_done) {
            if (events.length === 0) {
              return;
            }
            opts.call.call(opts.instance, events);
            events = [];
          }
          event = info.event;
          if (!event) {
            return;
          }
          if (CUI.isFunction(opts.filter)) {
            if (!opts.filter.call(opts.instance, event)) {
              return;
            }
          } else {
            ref = opts.filter;
            for (k in ref) {
              v = ref[k];
              if (CUI.isArray(v)) {
                if (ref1 = event[k], indexOf.call(v, ref1) < 0) {
                  return;
                }
              } else if (event[k] !== v) {
                return;
              }
            }
          }
          return events.push(event);
        };
      })(this)
    });
    return mypoll;
  };

  return EventPoller;

})(CUI.Element);

CUI.ready(function() {
  return Events.registerEvent({
    type: "event-poller"
  });
});

ez5.session_ready(function() {
  var pl;
  ez5.eventPoller = pl = new EventPoller();
  if (ez5.session.getPref("event_poll")) {
    return pl.start();
  } else {
    return pl.stop();
  }
});
/**
*
*  MD5 (Message-Digest Algorithm)
*  http://www.webtoolkit.info/
*
**/

var MD5 = function (string) {

	function RotateLeft(lValue, iShiftBits) {
		return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));
	}

	function AddUnsigned(lX,lY) {
		var lX4,lY4,lX8,lY8,lResult;
		lX8 = (lX & 0x80000000);
		lY8 = (lY & 0x80000000);
		lX4 = (lX & 0x40000000);
		lY4 = (lY & 0x40000000);
		lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);
		if (lX4 & lY4) {
			return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
		}
		if (lX4 | lY4) {
			if (lResult & 0x40000000) {
				return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
			} else {
				return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
			}
		} else {
			return (lResult ^ lX8 ^ lY8);
		}
 	}

 	function F(x,y,z) { return (x & y) | ((~x) & z); }
 	function G(x,y,z) { return (x & z) | (y & (~z)); }
 	function H(x,y,z) { return (x ^ y ^ z); }
	function I(x,y,z) { return (y ^ (x | (~z))); }

	function FF(a,b,c,d,x,s,ac) {
		a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
		return AddUnsigned(RotateLeft(a, s), b);
	};

	function GG(a,b,c,d,x,s,ac) {
		a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
		return AddUnsigned(RotateLeft(a, s), b);
	};

	function HH(a,b,c,d,x,s,ac) {
		a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
		return AddUnsigned(RotateLeft(a, s), b);
	};

	function II(a,b,c,d,x,s,ac) {
		a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
		return AddUnsigned(RotateLeft(a, s), b);
	};

	function ConvertToWordArray(string) {
		var lWordCount;
		var lMessageLength = string.length;
		var lNumberOfWords_temp1=lMessageLength + 8;
		var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;
		var lNumberOfWords = (lNumberOfWords_temp2+1)*16;
		var lWordArray=Array(lNumberOfWords-1);
		var lBytePosition = 0;
		var lByteCount = 0;
		while ( lByteCount < lMessageLength ) {
			lWordCount = (lByteCount-(lByteCount % 4))/4;
			lBytePosition = (lByteCount % 4)*8;
			lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount)<<lBytePosition));
			lByteCount++;
		}
		lWordCount = (lByteCount-(lByteCount % 4))/4;
		lBytePosition = (lByteCount % 4)*8;
		lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);
		lWordArray[lNumberOfWords-2] = lMessageLength<<3;
		lWordArray[lNumberOfWords-1] = lMessageLength>>>29;
		return lWordArray;
	};

	function WordToHex(lValue) {
		var WordToHexValue="",WordToHexValue_temp="",lByte,lCount;
		for (lCount = 0;lCount<=3;lCount++) {
			lByte = (lValue>>>(lCount*8)) & 255;
			WordToHexValue_temp = "0" + lByte.toString(16);
			WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);
		}
		return WordToHexValue;
	};

	function Utf8Encode(string) {
		string = string.replace(/\r\n/g,"\n");
		var utftext = "";

		for (var n = 0; n < string.length; n++) {

			var c = string.charCodeAt(n);

			if (c < 128) {
				utftext += String.fromCharCode(c);
			}
			else if((c > 127) && (c < 2048)) {
				utftext += String.fromCharCode((c >> 6) | 192);
				utftext += String.fromCharCode((c & 63) | 128);
			}
			else {
				utftext += String.fromCharCode((c >> 12) | 224);
				utftext += String.fromCharCode(((c >> 6) & 63) | 128);
				utftext += String.fromCharCode((c & 63) | 128);
			}

		}

		return utftext;
	};

	var x=Array();
	var k,AA,BB,CC,DD,a,b,c,d;
	var S11=7, S12=12, S13=17, S14=22;
	var S21=5, S22=9 , S23=14, S24=20;
	var S31=4, S32=11, S33=16, S34=23;
	var S41=6, S42=10, S43=15, S44=21;

	string = Utf8Encode(string);

	x = ConvertToWordArray(string);

	a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;

	for (k=0;k<x.length;k+=16) {
		AA=a; BB=b; CC=c; DD=d;
		a=FF(a,b,c,d,x[k+0], S11,0xD76AA478);
		d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);
		c=FF(c,d,a,b,x[k+2], S13,0x242070DB);
		b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);
		a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);
		d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);
		c=FF(c,d,a,b,x[k+6], S13,0xA8304613);
		b=FF(b,c,d,a,x[k+7], S14,0xFD469501);
		a=FF(a,b,c,d,x[k+8], S11,0x698098D8);
		d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);
		c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);
		b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);
		a=FF(a,b,c,d,x[k+12],S11,0x6B901122);
		d=FF(d,a,b,c,x[k+13],S12,0xFD987193);
		c=FF(c,d,a,b,x[k+14],S13,0xA679438E);
		b=FF(b,c,d,a,x[k+15],S14,0x49B40821);
		a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);
		d=GG(d,a,b,c,x[k+6], S22,0xC040B340);
		c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);
		b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);
		a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);
		d=GG(d,a,b,c,x[k+10],S22,0x2441453);
		c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);
		b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);
		a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);
		d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);
		c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);
		b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);
		a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);
		d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);
		c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);
		b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);
		a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);
		d=HH(d,a,b,c,x[k+8], S32,0x8771F681);
		c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);
		b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);
		a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);
		d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);
		c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);
		b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);
		a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);
		d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA);
		c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);
		b=HH(b,c,d,a,x[k+6], S34,0x4881D05);
		a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);
		d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);
		c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);
		b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);
		a=II(a,b,c,d,x[k+0], S41,0xF4292244);
		d=II(d,a,b,c,x[k+7], S42,0x432AFF97);
		c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);
		b=II(b,c,d,a,x[k+5], S44,0xFC93A039);
		a=II(a,b,c,d,x[k+12],S41,0x655B59C3);
		d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);
		c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);
		b=II(b,c,d,a,x[k+1], S44,0x85845DD1);
		a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);
		d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);
		c=II(c,d,a,b,x[k+6], S43,0xA3014314);
		b=II(b,c,d,a,x[k+13],S44,0x4E0811A1);
		a=II(a,b,c,d,x[k+4], S41,0xF7537E82);
		d=II(d,a,b,c,x[k+11],S42,0xBD3AF235);
		c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);
		b=II(b,c,d,a,x[k+9], S44,0xEB86D391);
		a=AddUnsigned(a,AA);
		b=AddUnsigned(b,BB);
		c=AddUnsigned(c,CC);
		d=AddUnsigned(d,DD);
	}

	var temp = WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);

	return temp.toLowerCase();
}


ez5.schema = ez5.schema || {};

// schema and mask relevant stuff
ez5.schema.clean_schema = function(schema) {
	delete(schema._table_by_id);
	delete(schema._table_by_name);
	delete(schema._objecttypes);
	delete(schema._objecttype_by_name);
	$.each(schema.tables, function(idx, table) {
		delete(table._column_by_id);
		delete(table._column_by_name);
		delete(table._column_by_name_localized);
		delete(table._name_localized);
		// delete(table._primary_key_column);
		delete(table._preferred_mask);
		// delete(table._all_fields_mask);
		$.each(table.columns, function(idx2, column) {
			delete(column._system_type);
			delete(column._foreign_key);
			delete(column._unique_keys);
			delete(column._name_localized);
		});
	});
}

ez5.schema.enrich_schema = function(schema, version) {
	schema._table_by_id = {};
	schema._table_by_name = {};
	schema._objecttypes = [];
	schema._objecttype_by_name = {};

	var nested_columns = [];
	var reverse_nested_columns = [];

	var table_name_localized = function(name) {
		return ez5.loca.get_user_key_localized(version, "schema."+name+".name", name);
	}

	$.each(schema.tables, function(idx, table) {
		table._column_by_id = {}
		table._column_by_name = {}
		table._column_by_name_localized = {}

		$.each(table.columns, function(idx2, column) {
			/*
			if (table.primary_key.columns[0].column_id === column.column_id) {
				table._primary_key_column = column;
				column._system_type = "primary-key-field";
			} else if (table.owned_by && table.owned_by.column_id === column.column_id) {
				column._system_type = "linked-table-field";
			}
			*/
			if (table.bidirectional) {
				$.each(table.bidirectional, function(idx3, bidi) {
					$.each(bidi.columns, function(idx4, bidi_column) {
						if (column.column_id === bidi_column.column_id) {
							column.bidirectional = true;
						}
					});
				});
			}
			switch (column.kind) {
			case "column":
				table._column_by_id[column.column_id] = column;
				column._name_localized =
					ez5.loca.get_user_key_localized(version,"schema."+table.name+".column."+column.name, column.name);
				break;
			case "link": // this is a nested_table
				column._other_table_id = column.other_table_id;
				column._other_column_id = column.other_column_id;
				column._l10n_key = "schema."+table.name+".column."+column.other_table_name_hint;
				column._name_localized =
					ez5.loca.get_user_key_localized(version, column._l10n_key,
													column.other_table_name_hint.substr((table.name+"__").length));
				nested_columns.push(column);
				break;
			case "reverse_link": // this is a reverse_link
				if (!column.is_hierarchical) {
					column._other_table_id = column.other_table_id;
					column._other_column_id = column.other_column_id;
					column._l10n_key = "schema."+table.name+".column.reverse:"+column.other_table_name_hint;
					reverse_nested_columns.push(column);
				} else {
					column._l10n_key = "schema."+table.name+".column.reverse:"+table.name;
					column._name_localized =
						ez5.loca.get_user_key_localized(version, column._l10n_key,
														table_name_localized(table.name));
				}
			}

			table._column_by_name[column.name] = column;
			if (table._column_by_name_localized[column._name_localized]) {
				// the column name already exists, we need to create a unique name
				var idx = 1, new_name; // we start at 1 so that the first visible index is 2
				do {
					idx++;
					new_name = column._name_localized+" ["+idx+"]";
				} while (table._column_by_name_localized[new_name]);
				column._name_localized = new_name;
			}
			table._column_by_name_localized[column._name_localized] = column;
		});

		table._name_localized = table_name_localized(table.name);
		schema._table_by_id[table.table_id] = table;
		schema._table_by_name[table.name] = table;
		if (!table.owned_by) {
			schema._objecttypes.push(table);
			schema._objecttype_by_name[table.name] = table;
		}
		// link foreign keys to their columns
		$.each(table.foreign_keys, function(idx, foreign_key) {
			if (foreign_key.columns.length === 1) {
				table._column_by_id[foreign_key.columns[0].column_id]._foreign_key = foreign_key;
			}
		});

		// link unique keys to their columns
		$.each(table.unique_keys, function(idx, unique_key) {
			$.each(unique_key.columns, function(idx, column) {
				if (!column.column_id) {
					// this is true for the auto_column_uplink
					return;
				}
				if (!table._column_by_id[column.column_id]._unique_keys) {
					table._column_by_id[column.column_id]._unique_keys = [];
				}
				table._column_by_id[column.column_id]._unique_keys.push(unique_key);
			})
		});
	});

	for (var idx in nested_columns) {
		col = nested_columns[idx];
		schema._table_by_id[col.other_table_id].owned_by._column = col;
	}

	for (var idx in reverse_nested_columns) {
		col = reverse_nested_columns[idx];
		// column._l10n_key = "schema."+table.name+".column.reverse:"+column.other_table_name_hint;
		var tb = schema._table_by_id[col.other_table_id];
		default_name = table_name_localized(tb.name)+' / '+tb._column_by_id[col.other_column_id]._name_localized;
		// console.debug("l10n key", col._l10n_key, default_name);
		col._name_localized = ez5.loca.get_user_key_localized(version, col._l10n_key, default_name);
	}

	schema._objecttypes.sort(function(a,b) {
		return a._name_localized.localeCompare(b._name_localized);
	});
}

ez5.schema.clean_mask_schema = function(mask_schema) {
	function delete_loca_keys(_mask) {
		$.each(_mask.fields, function(idx, field) {
			delete(field._other_table);
			delete(field._column);
			delete(field._user_hint_loca_key);
			if (field.mask) {
				delete_loca_keys(field.mask);
			}
		})
	}

	delete(mask_schema._masks_by_table_id);
	delete(mask_schema._mask_by_id);
	delete(mask_schema._mask_instance_by_name);
	delete(mask_schema._mask_by_name);

	for (var mask_idx=0; mask_idx < mask_schema.masks.length; mask_idx++) {
		var mask = mask_schema.masks[mask_idx];
		delete(mask._version);
		delete(mask._name_loca_key);
		delete(mask._user_hint_loca_key);
		delete(mask._l10n_prefix);
		delete(mask._name_localized);
		delete_loca_keys(mask);
	};
}

ez5.schema.enrich_mask_schema = function(mask_schema, version, is_all_fields, set_link_preferred) {
	mask_schema._masks_by_table_id = {};
	$.each(ez5.schema[version]._objecttypes, function(idx, table) {
		mask_schema._masks_by_table_id[table.table_id] = [];
	});

	if (!is_all_fields) {
		mask_schema._mask_by_id = {}
		mask_schema._mask_by_name = {}
		mask_schema._mask_instance_by_name = {}
	}

	$.each(mask_schema.masks, function(mask_idx, mask) {
		mask._version = version;
		mask._is_all_fields = is_all_fields

		// FIXME: once #29102 is done on the server, this is not needed any more
		if (!mask.system_fields.owner) {
			mask.system_fields.owner = copyObject(mask.system_fields.acl, true);
		}

		mask._l10n_prefix = function() {
			if (mask.name) {
				return "mask."+mask.table_id+"."+mask.name+".";
			} else {
				return "mask."+mask.table_id+"._new_.";
			}
		}

		mask._name_loca_key = function() {
			return mask._l10n_prefix()+"name";
		}
		mask._user_hint_loca_key = function() {
			return mask._l10n_prefix()+"user_hint";
		}

		function set_loca_keys(_mask, mask_stack) {
			if (!mask_stack) {
				mask_stack = [];
			}
			var l10n_prefix_arr = [];
			var l10n_prefix = "";
			var name_arr = [];
			var name_prefix = "";
			$.each(mask_stack, function(idx, mask) {
				l10n_prefix_arr.push("mask_"+mask.table_id);
				name_arr.push(mask.table_name_hint);
			});
			if (l10n_prefix_arr.length > 0) {
				l10n_prefix = l10n_prefix_arr.join(".")+".";
			}
			var mask_stack_next = mask_stack.slice(0);
			mask_stack_next.push(_mask);

			name_arr.push(_mask.table_name_hint);
			name_prefix = name_arr.join(".");

			var table = ez5.schema[version]._table_by_id[_mask.table_id];
			$.each(_mask.fields, function(idx, field) {
				switch (field.kind) {
				case "link": // this is schema kind == "column" and type == "link"
					field._other_table = ez5.schema[version]._table_by_id[field.other_table_id];
					if (is_all_fields && set_link_preferred)  {
						if (field.mask_id == 'ALL_FIELDS') {
							field.mask_id = 'PREFERRED';
						}
					}
					// no break here, continue to set _column
				case "field":
					field._column = table._column_by_id[field.column_id];
					break;
				case "linked-table": // this is schema kind == "link" / nested table
					field._other_table = ez5.schema[version]._table_by_id[field.other_table_id];
					field._name_localized = field._other_table._name_localized;
					field._other_column = field._other_table.owned_by._column;
					break;
				case "reverse-linked-table": // this is schema kind == "link"
					field._other_table = ez5.schema[version]._table_by_id[field.other_table_id];
					if (field.is_hierarchical) {
						field._name_localized = table._name_localized;
					} else {
						var current_table = ez5.schema[version]._table_by_id[_mask.table_id];
						var matched_column = null;
						for (var i = 0; i < current_table.columns.length; i++) {
							var c = current_table.columns[i];
							switch (c.kind) {
							case "reverse_link":
								if (c._other_table_id === field.other_table_id &&
									c._other_column_id === field.other_column_id) {
									matched_column = c;
									var other_table = ez5.schema[version]._table_by_id[c._other_table_id];
									for (var ii = 0; ii < other_table.columns.length; ii++) {
										var cc = other_table.columns[ii];
										if (cc.column_id == c._other_column_id) {
											matched_column._other_column = cc;
											break;
										}
									}
								}
							}
						}
						assert(matched_column, "ez5.schema.enrich_mask_schema", "No matching column for "+field.kind+" found", {
							current_table: current_table,
							field: field
						});
						field._reverse_link_column = matched_column;
						field._name_localized = matched_column._name_localized;
					}
				}

				switch (field.kind) {
				case "field":
				case "link":
					field._user_hint_loca_key = function() {
						return mask._l10n_prefix()+_mask.table_id+"."+l10n_prefix+field.kind+"."
							+field._column.column_id+".edit_user_hint";
					}
					break;
				case "linked-table":
					field._user_hint_loca_key = function() {
						return mask._l10n_prefix()+_mask.table_id+l10n_prefix+".linked-table."
							+field._other_table.table_id+".edit_user_hint";
					}
					set_loca_keys(field.mask, mask_stack_next);
					break;
				case "reverse-linked-table":
					if (field.is_hierarchical) {
						field._user_hint_loca_key = function() {
							return mask._l10n_prefix()+_mask.table_id+l10n_prefix+".reverse-linked-table."
								+mask.table_id+".edit_user_hint";
						}
					} else {
						field._user_hint_loca_key = function () {
							return mask._l10n_prefix()+_mask.table_id+l10n_prefix+".reverse-linked-table."
								+field._other_table.table_id+".edit_user_hint";
						}
					}
					if (field.mask) {
						set_loca_keys(field.mask, mask_stack_next);
					}
					break;
				}

				if (field.column_name_hint) {
					field._full_name = name_prefix+"."+field.column_name_hint;
				} else if (field._other_table) {
					field._full_name = name_prefix+"."+field._other_table.name;
				} else {
					// skip, this can be a "splitter"
				}

			});
			// FIXME: remove system columns
			for (var i=0; i < _mask.fields.length; i++) {
				if (_mask.fields[i]._column && _mask.fields[i]._column._system_type) {
					// CUI.debug ("MASK:"+_mask.name+" DISCARDING FIELD: "+_mask.fields[i]._column.name+"["+_mask.fields[i]._column._system_type+"]");
					_mask.fields.splice(i, 1);
					i--;
				}
			}

		};

		mask._version = version;

		if (mask.name == "_all_fields") {
			mask._name_localized = $$("base.all_fields_mask");
		} else {
			mask._name_localized = ez5.loca.get_user_key_localized(version, "mask."+mask.table_id+"."+mask.name+".name", mask.name);
		}

		if (!is_all_fields) {
			mask_schema._mask_by_id[mask.mask_id] = mask;
			mask_schema._mask_by_name[mask.name] = mask;
		}
		mask_schema._masks_by_table_id[mask.table_id].push(mask);


		set_loca_keys(mask);
	});
}

ez5._schema_inst = new Schema()
ez5.schema.load_schema = function(x_easydb) {
	return ez5._schema_inst.load(x_easydb);
}
// Generated by CoffeeScript 1.10.0
var SystemListManagerItem,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SystemListManagerItem = (function(superClass) {
  extend(SystemListManagerItem, superClass);

  function SystemListManagerItem() {
    this.moveNodeConfirm = bind(this.moveNodeConfirm, this);
    this.moveNodeBack = bind(this.moveNodeBack, this);
    this.moveNodeAfter = bind(this.moveNodeAfter, this);
    this.moveNodeBefore = bind(this.moveNodeBefore, this);
    this.allowRowMove = bind(this.allowRowMove, this);
    this._save = bind(this._save, this);
    this.save = bind(this.save, this);
    this._loadData = bind(this._loadData, this);
    this.get = bind(this.get, this);
    return SystemListManagerItem.__super__.constructor.apply(this, arguments);
  }

  SystemListManagerItem.prototype.initOpts = function() {
    SystemListManagerItem.__super__.initOpts.call(this);
    return this.addOpts({
      manager: {
        check: this.managerInstance()
      }
    });
  };

  SystemListManagerItem.prototype.readOpts = function() {
    SystemListManagerItem.__super__.readOpts.call(this);
    if (this._manager) {
      return this.manager = this._manager;
    }
  };

  SystemListManagerItem.prototype.setFather = function(father) {
    return SystemListManagerItem.__super__.setFather.call(this, father);
  };

  SystemListManagerItem.prototype.newText = function() {
    return $$(this.newKey);
  };

  SystemListManagerItem.prototype.managerInstance = function() {
    return SystemListManager;
  };

  SystemListManagerItem.prototype.newKey = "undefined.newKey";

  SystemListManagerItem.prototype.isDataIncomplete = function() {
    return null;
  };

  SystemListManagerItem.prototype.renderContent = function() {
    if (this.id) {
      return new Label({
        multiline: true,
        content: this.getContent()
      });
    } else {
      return new EmptyLabel({
        multiline: true,
        text: this.newText()
      });
    }
  };

  SystemListManagerItem.prototype.get = function(key, html) {
    var data;
    if (html == null) {
      html = false;
    }
    data = this.data[this.data._basetype];
    if (CUI.isPlainObject(data[key])) {
      return ez5.loca.getBestFrontendValue(data[key], html);
    }
    if (data[key + ":highlight"] && html) {
      return data[key + ":highlight"];
    } else if (data[key]) {
      if (html) {
        return toHtml(data[key]);
      } else {
        return data[key];
      }
    } else {
      return null;
    }
  };

  SystemListManagerItem.prototype.getApi = function() {
    return assert(false, (getObjectClass(this)) + ".getApi needs to be implemented");
  };

  SystemListManagerItem.prototype.load = function() {
    var dfr;
    dfr = new CUI.Deferred();
    if (this.id) {
      ez5.api[this.getApi()]({
        api: "/" + this.id
      }).done((function(_this) {
        return function(data) {
          _this._loadData(data[0]);
          return dfr.resolve(data);
        };
      })(this)).fail(function() {
        return dfr.reject();
      });
    } else {
      dfr.resolve();
    }
    dfr.done((function(_this) {
      return function() {
        return dfr.done(function() {
          return _this.update();
        });
      };
    })(this));
    return dfr.promise();
  };

  SystemListManagerItem.prototype.remove = function() {
    return SystemListManagerItem.__super__.remove.call(this).done((function(_this) {
      return function() {
        return _this.manager.setStatus();
      };
    })(this));
  };

  SystemListManagerItem.prototype._loadData = function(data) {
    this.loadData(data);
    return this.data;
  };

  SystemListManagerItem.prototype.loadData = function(data1) {
    this.data = data1;
    this.__origData = copyObject(this.data, true);
    this.id = this.data[this.data._basetype]._id;
    return this;
  };

  SystemListManagerItem.prototype.getData = function() {
    return this.data;
  };

  SystemListManagerItem.prototype.getDeleteConfirmLocaKey = function() {
    if (!this.id) {
      return "system.list.manager.item.delete_confirm_new";
    } else {
      return "system.list.manager.item.delete_confirm";
    }
  };

  SystemListManagerItem.prototype["delete"] = function() {
    var e, error;
    if (!this.id) {
      try {
        if (!this.hasChanges()) {
          return this.remove();
        }
      } catch (error) {
        e = error;
        if (!(e instanceof InvalidSaveDataException)) {
          throw e;
        }
      }
    }
    return CUI.confirm({
      text: $$(this.getDeleteConfirmLocaKey()),
      button_primary: "cancel"
    }).done((function(_this) {
      return function() {
        if (!_this.id) {
          return _this.remove();
        }
        return _this.deleteOnServer().done(function() {
          return _this.remove();
        });
      };
    })(this));
  };

  SystemListManagerItem.prototype.deleteOnServer = function() {
    return ez5.api[this.getApi()]({
      api: "/" + this.getId(),
      type: "DELETE"
    });
  };

  SystemListManagerItem.prototype.getTabs = function() {
    return assert(false, this.__cls + ".getTabs", "Needs implementation.");
  };

  SystemListManagerItem.prototype.isWritable = function() {
    return false;
  };

  SystemListManagerItem.prototype.isDeletable = function() {
    return false;
  };

  SystemListManagerItem.prototype.canBeCopied = function() {
    return false;
  };

  SystemListManagerItem.prototype.getPaneContent = function() {
    var buttons;
    buttons = [
      this.getCancelButton(), this.canBeCopied() ? this.copyButton = new LocaButton({
        loca_key: "system.list.manager.item.button.copy",
        text: $$("base.copy"),
        onClick: (function(_this) {
          return function(ev) {
            var new_node;
            if (ev.hasModifierKey()) {
              new_node = _this.copyAsNew();
              console.debug(getObjectClass(_this), "node:", _this, "copied node:", new_node);
              return;
            }
            return _this.check_deselect(ev).done(function() {
              new_node = _this.copyAsNew();
              return _this.getFather().addChild(new_node).done(function() {
                return new_node.select().fail(function() {
                  return new_node["delete"]();
                });
              }).fail(function() {
                return new_node["delete"]();
              });
            });
          };
        })(this)
      }) : void 0, this.isWritable() ? this.saveButton = new LocaButton({
        disabled: true,
        loca_key: "system.list.manager.item.button.save",
        text: $$("base.save"),
        onClick: (function(_this) {
          return function(ev) {
            return _this.save(ev);
          };
        })(this)
      }) : void 0
    ];
    buttons.unshift.apply(buttons, this.getExtraButtons());
    return this.tabs = new Tabs({
      "class": "ez5-system-list-manager-item-tabs",
      maximize: true,
      absolute: true,
      tabs: this.getTabs(),
      footer_right: buttons
    });
  };

  SystemListManagerItem.prototype.getId = function() {
    return null;
  };

  SystemListManagerItem.prototype.getCancelButton = function() {
    return new LocaButton({
      text: $$("base.cancel"),
      loca_key: "system.list.manager.item.button.cancel",
      onClick: (function(_this) {
        return function(ev) {
          _this.deselect(ev).done(function() {
            if (!_this.getId()) {
              return _this.remove();
            }
          });
        };
      })(this)
    });
  };

  SystemListManagerItem.prototype.getExtraButtons = function() {
    return [];
  };

  SystemListManagerItem.prototype.show = function() {
    var cnt;
    this.__editorPane = this.getEditorPane();
    cnt = this.manager.getContainer();
    cnt.empty().append(this.__editorPane.DOM);
    this.registerDataChangedListener(cnt);
    return this;
  };

  SystemListManagerItem.prototype.getEditorPane = function() {
    this.paneContent = this.getPaneContent();
    return new SimplePane({
      absolute: CUI.__ng__ ? void 0 : true,
      header_left: CUI.__ng__ ? void 0 : this.manager.getTitle(),
      content: this.paneContent
    });
  };

  SystemListManagerItem.prototype.hasChanges = function() {
    if (!this.initialData) {
      return false;
    }
    if (this.initialData === JSON.stringify(this.getSaveData())) {
      return false;
    } else {
      return true;
    }
  };

  SystemListManagerItem.prototype.registerDataChangedListener = function(div) {
    var e, error;
    try {
      this.initialData = JSON.stringify(this.getSaveData());
    } catch (error) {
      e = error;
      this.initialData = "__invalid__";
      if (!(e instanceof InvalidSaveDataException)) {
        throw e;
      }
    }
    Events.listen({
      type: ["data-changed", "editor-changed", "editor-update-asset-browser"],
      node: div,
      call: (function(_this) {
        return function(ev, info) {
          return _this.setStatus();
        };
      })(this)
    });
    return div;
  };

  SystemListManagerItem.prototype.setStatus = function() {
    var e, error, ref, ref1, ref2, ref3;
    try {
      if (this.hasChanges()) {
        if ((ref = this.saveButton) != null) {
          ref.enable();
        }
      } else {
        if ((ref1 = this.saveButton) != null) {
          ref1.disable();
        }
      }
    } catch (error) {
      e = error;
      if (e instanceof InvalidSaveDataException) {
        if ((ref2 = this.saveButton) != null) {
          ref2.disable();
        }
      } else {
        throw e;
      }
    }
    if ((ref3 = this.manager) != null) {
      ref3.setStatus();
    }
    return this;
  };

  SystemListManagerItem.prototype.resetDataChangedListener = function(div) {
    var ref;
    this.initialData = JSON.stringify(this.getSaveData());
    return (ref = this.saveButton) != null ? ref.disable() : void 0;
  };

  SystemListManagerItem.prototype.check_deselect = function() {
    var allow, e, error;
    allow = true;
    try {
      if (this.hasChanges()) {
        allow = false;
      }
    } catch (error) {
      e = error;
      if (e instanceof InvalidSaveDataException) {
        allow = false;
      } else {
        throw e;
      }
    }
    if (!allow) {
      return CUI.confirm({
        text: $$("main.editor.unsaved_changes")
      });
    } else {
      return CUI.resolvedPromise();
    }
  };

  SystemListManagerItem.prototype.select = function(ev) {
    var dfr, wb;
    if (ev != null) {
      ev.stopPropagation();
    }
    wb = this.getTree().____waitBlock = new WaitBlock({
      element: this.manager.getContainer()
    });
    wb.show();
    dfr = new CUI.Deferred();
    dfr.fail((function(_this) {
      return function() {
        return _this.moveNodeBack();
      };
    })(this));
    dfr.always((function(_this) {
      return function() {
        delete (_this.getTree().____waitBlock);
        wb.destroy();
        return wb = null;
      };
    })(this));
    SystemListManagerItem.__super__.select.call(this, ev).done((function(_this) {
      return function() {
        return _this.load().done(function() {
          var ret;
          if (!_this.isSelected()) {
            dfr.reject();
            return;
          }
          _this.setStatus();
          ret = _this.show();
          if (isPromise(ret)) {
            return ret.done(dfr.resolve).fail(dfr.reject);
          } else {
            return dfr.resolve();
          }
        }).fail(function() {
          _this.deselect();
          return dfr.reject();
        });
      };
    })(this)).fail(function() {
      return dfr.reject();
    });
    return dfr.promise();
  };

  SystemListManagerItem.prototype.revertData = function() {
    if (!this.__origData) {
      return;
    }
    this.loadData(this.__origData);
    this.update();
  };

  SystemListManagerItem.prototype.deselect = function(ev) {
    return SystemListManagerItem.__super__.deselect.call(this, ev).done((function(_this) {
      return function() {
        var ref;
        _this.revertData();
        _this.manager.setStatus();
        if (!_this.getTree().____waitBlock) {
          _this.manager.empty();
        }
        if ((ref = _this.paneContent) != null) {
          ref.destroy();
        }
        return _this.paneContent = null;
      };
    })(this));
  };

  SystemListManagerItem.prototype.getSaveData = function() {
    return assert(false, (getObjectClass(this)) + ".getSaveData needs to be implemented");
  };

  SystemListManagerItem.prototype.save = function(ev) {
    var save_data;
    this.saveButton.disable();
    save_data = this.getSaveData();
    ez5.splash.show('system.list.manager.item.saving');
    return this._save(ev, save_data).done((function(_this) {
      return function(data) {
        _this.moveNodeConfirm();
        _this.loadData(data[0]);
        return _this.load().done(function() {
          _this.show();
          return ez5.splash.done('system.list.manager.item.saved');
        }).fail(function() {
          return ez5.splash.hide();
        });
      };
    })(this)).fail((function(_this) {
      return function() {
        _this.saveButton.enable();
        return ez5.splash.hide();
      };
    })(this));
  };

  SystemListManagerItem.prototype._save = function(ev, save_data) {
    if (this.id) {
      save_data[save_data._basetype]._version = this.data[this.data._basetype]._version + 1;
    } else {
      save_data[save_data._basetype]._version = 1;
    }
    if (ev != null ? ev.hasModifierKey() : void 0) {
      console.debug(getObjectClass(this), dump(save_data));
      return new CUI.rejectedPromise();
    }
    return ez5.api[this.getApi()]({
      api: this.id ? "/" + this.id : "",
      type: this.id ? "POST" : "PUT",
      json_data: [save_data]
    });
  };

  SystemListManagerItem.prototype.isMovable = function() {
    return false;
  };

  SystemListManagerItem.prototype.allowRowMove = function(to_node, new_father, after) {
    if (new_father) {
      return true;
    } else {
      return false;
    }
  };

  SystemListManagerItem.prototype.moveNodeBefore = function(to_node, new_father, after) {
    var p;
    p = SystemListManagerItem.__super__.moveNodeBefore.call(this);
    if (!this.origFather) {
      this.origFather = {
        father: this.father,
        childIdx: this.getChildIdx()
      };
    }
    return p;
  };

  SystemListManagerItem.prototype.moveNodeAfter = function(to_node, new_father, after) {
    return this.hasMoved = true;
  };

  SystemListManagerItem.prototype.moveNodeBack = function() {
    if (this.hasMoved) {
      this.moveToNewFather(this.origFather.father, this.origFather.childIdx);
      delete this.hasMoved;
      delete this.origFather;
    }
    return this;
  };

  SystemListManagerItem.prototype.moveNodeConfirm = function() {
    delete this.hasMoved;
    return delete this.origFather;
  };

  SystemListManagerItem.prototype.getGroupsTab = function(type_prefixes, user) {
    return {
      name: "groups",
      text: $$("admin.system-list.tab.groups"),
      content: (function(_this) {
        return function() {
          return new Form({
            data: _this.data,
            fields: Group.getGroupFields(type_prefixes, user)
          }).start();
        };
      })(this)
    };
  };

  SystemListManagerItem.prototype.loadGroups = function() {
    var grp, i, len, ref;
    this.data.__group_ids = [];
    if (!this.data._groups) {
      return;
    }
    ref = this.data._groups;
    for (i = 0, len = ref.length; i < len; i++) {
      grp = ref[i];
      this.data.__group_ids.push(grp.group._id);
    }
    return this.data.__group_ids;
  };

  SystemListManagerItem.prototype.getGroupsSaveData = function() {
    var _groups, group_id, i, len, ref;
    _groups = [];
    ref = this.data.__group_ids;
    for (i = 0, len = ref.length; i < len; i++) {
      group_id = ref[i];
      _groups.push({
        _basetype: "group",
        group: {
          _id: group_id
        }
      });
    }
    return _groups;
  };

  return SystemListManagerItem;

})(ListViewTreeNode);
// Generated by CoffeeScript 1.10.0
var SystemListManagerHierarchyItem,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SystemListManagerHierarchyItem = (function(superClass) {
  extend(SystemListManagerHierarchyItem, superClass);

  function SystemListManagerHierarchyItem() {
    this.moveNodeAfter = bind(this.moveNodeAfter, this);
    return SystemListManagerHierarchyItem.__super__.constructor.apply(this, arguments);
  }

  SystemListManagerHierarchyItem.prototype.moveNodeAfter = function(to_node, new_father, after) {
    var pId;
    pId = new_father.id;
    this.data[this.data._basetype]._id_parent = pId;
    return this.hasMoved = true;
  };

  SystemListManagerHierarchyItem.prototype.isMovable = function() {
    return this.selected;
  };

  SystemListManagerHierarchyItem.prototype.isCreateChildAllowed = function() {
    return false;
  };

  return SystemListManagerHierarchyItem;

})(SystemListManagerItem);
// Generated by CoffeeScript 1.10.0
var SplashLayer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SplashLayer = (function(superClass) {
  extend(SplashLayer, superClass);

  function SplashLayer(opts) {
    var hostname, lbl, lr, sl;
    this.opts = opts != null ? opts : {};
    SplashLayer.__super__.constructor.call(this, this.opts);
    sl = new Template({
      name: "splash-layer"
    });
    if (window.easydb_server_url) {
      hostname = CUI.parseLocation(window.easydb_server_url).hostname;
    } else {
      hostname = document.location.hostname;
    }
    lr = this.getLayerRoot();
    lr.addClass("ez5-splash-layer");
    lbl = new Label({
      "class": "ez5-splash-layer-server",
      text: hostname
    });
    lbl.DOM[0].style.display = "none";
    lr.append(lbl);
    this.append(sl);
  }

  SplashLayer.prototype.readOpts = function() {
    this.opts.backdrop = {
      policy: "modal",
      add_bounce_class: false
    };
    this.opts.placement = "c";
    return SplashLayer.__super__.readOpts.call(this);
  };

  SplashLayer.prototype.disappear = function() {
    Events.wait({
      type: "transitionend",
      maxWait: 3000,
      node: this.getLayerRoot()
    }).always((function(_this) {
      return function() {
        _this.getLayerRoot().removeClass("ez5-splash-layer-disappear");
        return _this.hide();
      };
    })(this));
    return this.getLayerRoot().addClass("ez5-splash-layer-disappear");
  };

  return SplashLayer;

})(CUI.Layer);
// Generated by CoffeeScript 1.10.0
var AdminMessage,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AdminMessage = (function(superClass) {
  extend(AdminMessage, superClass);

  function AdminMessage() {
    this.getTabs = bind(this.getTabs, this);
    this.renderContent = bind(this.renderContent, this);
    return AdminMessage.__super__.constructor.apply(this, arguments);
  }

  AdminMessage.prototype.initOpts = function() {
    AdminMessage.__super__.initOpts.call(this);
    return this.addOpts({
      message: {
        mandatory: true,
        "default": {
          _groups: [],
          message: {}
        },
        check: "PlainObject"
      },
      manager: {
        check: AdminMessagesManager
      }
    });
  };

  AdminMessage.prototype.readOpts = function() {
    AdminMessage.__super__.readOpts.call(this);
    if (this._manager) {
      this.manager = this._manager;
    }
    return this.setData(this._message);
  };

  AdminMessage.prototype.newKey = "admin.msg.list.title.new";

  AdminMessage.prototype.getId = function() {
    return this.id;
  };

  AdminMessage.prototype.setData = function(data1) {
    var msg, ref, ref1;
    this.data = data1;
    this.data._basetype = "message";
    msg = this.data[this.data._basetype];
    msg.start_time = (ref = msg.start_time) != null ? ref.value : void 0;
    msg.end_time = (ref1 = msg.end_time) != null ? ref1.value : void 0;
    if (!this.data.message.webfrontend_props) {
      this.data.message.webfrontend_props = {};
    }
    this.id = msg._id;
    return this.data;
  };

  AdminMessage.prototype.loadData = function(data) {
    AdminMessage.__super__.loadData.call(this, data);
    this.setData(data);
    return this.loadGroups();
  };

  AdminMessage.prototype.getContent = function() {
    return this.get("title", true);
  };

  AdminMessage.prototype.getApi = function() {
    return "message";
  };

  AdminMessage.prototype.getWebfrontendType = function() {
    return this.data.message.webfrontend_type;
  };

  AdminMessage.prototype.getTitleLocalized = function() {
    return ez5.loca.getBestFrontendValue(this.data.message.title) || "";
  };

  AdminMessage.prototype.getLabel = function() {
    return this.data.message.title;
  };

  AdminMessage.prototype.getMessageLocalized = function() {
    return ez5.loca.getBestFrontendValue(this.data.message.message);
  };

  AdminMessage.prototype.getConfirmationLocalized = function() {
    return ez5.loca.getBestFrontendValue(this.data.message.confirmation);
  };

  AdminMessage.prototype.getTagfilter = function() {
    return this.data.message.webfrontend_props.tagfilter;
  };

  AdminMessage.prototype.renderContent = function() {
    var type;
    if (!this.id) {
      this.addColumn(new ListViewColumnEmpty());
    } else {
      if (this.getWebfrontendType()) {
        type = $$("admin.message.webfrontend_type." + this.getWebfrontendType());
      } else {
        type = $$("admin.message.system_message");
      }
      this.addColumn(new ListViewColumn({
        element: new Label({
          text: type
        })
      }));
    }
    return AdminMessage.__super__.renderContent.call(this);
  };

  AdminMessage.prototype.isWritable = function() {
    return true;
  };

  AdminMessage.prototype.isDeletable = function() {
    return true;
  };

  AdminMessage.prototype.getSaveData = function() {
    var i, info, k, len, msg, props, ref, save_data;
    msg = this.data.message;
    props = copyObject(msg.webfrontend_props, true);
    if (msg.webfrontend_type) {
      info = ez5.defaults["class"].AdminMessage.getWebfrontendType(msg.webfrontend_type);
      if (!info.tagfilter) {
        delete props.tagfilter;
      }
    } else {
      delete props.tagfilter;
    }
    save_data = {
      _basetype: "message",
      message: {
        _id: this.id,
        webfrontend_props: props,
        webfrontend_type: msg.webfrontend_type,
        confirm_every_version: !!msg.confirm_every_version,
        title: msg.title,
        message: msg.message,
        confirmation: msg.confirmation
      }
    };
    ref = ["start_time", "end_time"];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      if (msg[k]) {
        save_data.message[k] = {
          value: msg[k]
        };
      } else {
        save_data.message[k] = null;
      }
    }
    save_data._groups = this.getGroupsSaveData();
    return save_data;
  };

  AdminMessage.prototype.getTabs = function() {
    return [
      {
        name: "general",
        text: $$("admin.group.tab.general"),
        onFirstActivate: this.update,
        content: (function(_this) {
          return function() {
            _this.generalForm = new Form({
              fields: _this.getGeneralFields(),
              data: _this.data.message,
              onDataChanged: function() {
                CUI.debug("data changed on form", _this.generalForm.getValue());
                return _this.update();
              }
            });
            _this.generalForm.start();
            _this.setStatusGeneralForm();
            return _this.generalForm;
          };
        })(this)
      }, this.getGroupsTab(["easydb", "system"])
    ];
  };

  AdminMessage.prototype.update = function() {
    AdminMessage.__super__.update.call(this);
    this.setStatusGeneralForm();
    return this;
  };

  AdminMessage.prototype.setStatusGeneralForm = function() {
    var disable_field, i, info, len, ref, wt;
    if (!this.generalForm) {
      return;
    }
    wt = this.generalForm.getFieldsByName("webfrontend_type")[0].getValue();
    if (wt) {
      info = ez5.defaults["class"].AdminMessage.getWebfrontendType(wt);
      ref = info.disable_fields;
      for (i = 0, len = ref.length; i < len; i++) {
        disable_field = ref[i];
        this.generalForm.getFieldsByName(disable_field)[0].disable();
      }
      if (info.tagfilter) {
        return this.__tagfilterField.enable();
      } else {
        return this.__tagfilterField.disable();
      }
    } else {
      this.generalForm.getFieldsByName("confirmation")[0].enable();
      this.generalForm.getFieldsByName("confirm_every_version")[0].enable();
      return this.__tagfilterField.disable();
    }
  };

  AdminMessage.prototype.getExtraButtons = function() {
    return [
      new LocaButton({
        loca_key: "admin.message.show_preview",
        onClick: (function(_this) {
          return function() {
            return _this.showMessage();
          };
        })(this)
      })
    ];
  };

  AdminMessage.prototype.showMessage = function(msg) {
    if (msg == null) {
      msg = this.getMessageLocalized();
    }
    return ez5.defaults["class"].AdminMessage.showMessageDialog({
      confirm: this.getConfirmationLocalized(),
      title: this.getTitleLocalized(),
      message: msg || "",
      webfrontend_type: this.getWebfrontendType()
    });
  };

  AdminMessage.prototype.getGeneralFields = function() {
    var i, info, len, ref, tf, webfrontend_types;
    webfrontend_types = [
      {
        value: null,
        text: $$("admin.message.system_message")
      }
    ];
    ref = ez5.defaults["class"].AdminMessage.getWebfrontendTypes();
    for (i = 0, len = ref.length; i < len; i++) {
      info = ref[i];
      webfrontend_types.push({
        value: info.type,
        text: $$("admin.message.webfrontend_type." + info.type)
      });
    }
    tf = new TagFilter({
      tagForm: ez5.tagForm,
      data: this.data.message.webfrontend_props,
      name: "tagfilter"
    });
    this.__tagfilterField = DataField["new"](tf.getField({
      form: {
        label: $$("admin.msg.form.tagfilter")
      }
    }));
    return [
      {
        type: Select,
        name: "webfrontend_type",
        options: webfrontend_types,
        form: {
          label: $$("admin.msg.form.webfrontend_type")
        }
      }, {
        type: DateTime,
        form: {
          label: $$("admin.msg.form.start_time")
        },
        name: "start_time"
      }, {
        type: DateTime,
        form: {
          label: $$("admin.msg.form.end_time")
        },
        name: "end_time"
      }, {
        type: MultiInput,
        control: ez5.loca.getLanguageControlAdmin(),
        form: {
          label: $$("admin.msg.form.title")
        },
        name: "title"
      }, {
        type: MultiInput,
        control: ez5.loca.getLanguageControlAdmin(),
        textarea: true,
        form: {
          label: $$("admin.msg.form.message")
        },
        name: "message"
      }, {
        type: MultiInput,
        control: ez5.loca.getLanguageControlAdmin(),
        name: "confirmation",
        form: {
          label: $$("admin.msg.form.confirmation")
        }
      }, {
        type: Checkbox,
        name: "confirm_every_version",
        form: {
          label: $$("admin.msg.form.confirm_every_version")
        }
      }, this.__tagfilterField
    ];
  };

  AdminMessage.showMessageDialog = function(_opts) {
    var cls, confirm, dfr, lay, mod, ok_button, opts;
    opts = CUI.Element.readOpts(_opts, "new AdminMessage", {
      confirm: {
        check: String
      },
      message: {
        mandatory: true,
        check: String
      },
      title: {
        mandatory: true,
        check: String
      },
      webfrontend_type: {
        check: String
      }
    });
    if (opts.confirm) {
      confirm = new Checkbox({
        text: opts.confirm,
        onActivate: function() {
          return ok_button.enable();
        },
        onDeactivate: function() {
          return ok_button.disable();
        }
      }).start();
    } else {
      confirm = null;
    }
    ok_button = new Button({
      text: $$("base.ok"),
      disabled: !!confirm,
      onClick: function() {
        mod.destroy();
        return dfr.resolve();
      }
    });
    lay = new VerticalList({
      "class": "ez5-admin-message-content",
      content: [
        new Label({
          text: opts.message,
          multiline: true,
          markdown: true
        }), confirm
      ]
    });
    switch (opts.webfrontend_type) {
      case "download":
        cls = "ez5-admin-message--dialog";
        break;
      case "permanent":
        cls = "ez5-admin-message--page";
        break;
      default:
        if (CUI.__ng__) {
          cls = "ez5-admin-message--dialog";
        } else {
          cls = "ez5-session-task-message";
        }
    }
    mod = new Modal({
      "class": "cui-confirmation-dialog ez5-admin-message " + cls,
      cancel: !!confirm,
      onCancel: function() {
        mod.destroy();
        return dfr.reject();
      },
      pane: {
        header_left: new Label({
          icon: "info",
          text: opts.title
        }),
        content: lay,
        footer_right: ok_button
      }
    }).show();
    dfr = new CUI.Deferred();
    return dfr.promise();
  };

  AdminMessage.getWebfrontendTypes = function() {
    return [
      {
        type: "permanent",
        disable_fields: ["confirmation", "confirm_every_version"],
        tagfilter: false
      }, {
        type: "download",
        disable_fields: ["confirm_every_version"],
        tagfilter: true
      }
    ];
  };

  AdminMessage.getWebfrontendType = function(type) {
    var i, info, len, ref;
    ref = this.getWebfrontendTypes();
    for (i = 0, len = ref.length; i < len; i++) {
      info = ref[i];
      if (info.type === type) {
        return info;
      }
    }
    return null;
  };

  AdminMessage.load = function(webfrontend_type) {
    var dfr, now, search;
    dfr = new CUI.Deferred();
    now = new Date(Date.now()).toISOString();
    search = [
      {
        type: "in",
        "in": [webfrontend_type],
        fields: ["message.webfrontend_type"]
      }, {
        type: "complex",
        search: [
          {
            bool: "should",
            type: "in",
            fields: ["message.start_time"],
            "in": [null]
          }, {
            bool: "should",
            type: "range",
            field: "message.start_time",
            to: now
          }
        ]
      }, {
        type: "complex",
        search: [
          {
            bool: "should",
            type: "in",
            fields: ["message.end_time"],
            "in": [null]
          }, {
            bool: "should",
            type: "range",
            field: "message.end_time",
            from: now
          }
        ]
      }
    ];
    search.push({
      type: "in",
      fields: ["_groups.group._id"],
      "in": ez5.session.getGroupIds()
    });
    ez5.api.search({
      json_data: {
        type: "message",
        search: search
      }
    }).done((function(_this) {
      return function(messages) {
        var adminMessages, fn, i, len, msg, ref;
        adminMessages = [];
        ref = messages.objects;
        fn = function(msg) {
          return adminMessages.push(new ez5.defaults["class"].AdminMessage({
            message: msg
          }));
        };
        for (i = 0, len = ref.length; i < len; i++) {
          msg = ref[i];
          fn(msg);
        }
        return dfr.resolve(adminMessages);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  return AdminMessage;

})(SystemListManagerItem);
// Generated by CoffeeScript 1.10.0
var Group,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Group = (function(superClass) {
  extend(Group, superClass);

  function Group() {
    return Group.__super__.constructor.apply(this, arguments);
  }

  Group.prototype.initOpts = function() {
    Group.__super__.initOpts.call(this);
    return this.addOpts({
      group: {
        check: "PlainObject"
      }
    });
  };

  Group.prototype.readOpts = function() {
    Group.__super__.readOpts.call(this);
    if (this._group) {
      return this.loadData(this._group);
    } else {
      return this.loadData({
        _basetype: "group",
        group: {}
      });
    }
  };

  Group.prototype.newKey = "admin.group.list.name.new";

  Group.prototype.managerInstance = function() {
    return GroupManager;
  };

  Group.prototype.getId = function() {
    return this.id;
  };

  Group.prototype.isDataComplete = function() {
    return false;
  };

  Group.prototype.getName = function() {
    return this._group.group.name;
  };

  Group.prototype.getDisplayText = function() {
    return this.get("displayname", false);
  };

  Group.prototype.getContent = function() {
    var dn;
    dn = this.get("displayname", true);
    if (isEmpty(dn)) {
      return this.id + "";
    } else {
      return CUI.DOM.htmlToNodes(dn);
    }
  };

  Group.prototype.canEditSystemRights = function() {
    var ref, ref1;
    if (!this.getId()) {
      return this.isWritable() && (ez5.session.hasSystemRight("group[create_system_rights]") || ez5.session.hasSystemRight("root"));
    } else {
      return this.isWritable() && ((ref = this.data._generated_rights) != null ? (ref1 = ref.bag_write) != null ? ref1.system_rights : void 0 : void 0);
    }
  };

  Group.prototype.canEditAcl = function() {
    var ref, ref1;
    if (!this.getId()) {
      return this.isWritable() && (ez5.session.hasSystemRight("group[create_acl]") || ez5.session.hasSystemRight("root"));
    } else {
      return this.isWritable() && ((ref = this.data._generated_rights) != null ? (ref1 = ref.bag_write) != null ? ref1.acl : void 0 : void 0);
    }
  };

  Group.prototype.isWritable = function() {
    if (!this.getId() || this.data._generated_rights.bag_write) {
      return true;
    } else {
      return false;
    }
  };

  Group.prototype.isDeletable = function() {
    if (!this.getId() || this.data._generated_rights.bag_delete) {
      return true;
    } else {
      return false;
    }
  };

  Group.prototype.loadData = function(data1) {
    var i, key, len, ref;
    this.data = data1;
    Group.__super__.loadData.call(this, this.data);
    if (!this.data._system_rights) {
      this.data._system_rights = {};
    }
    if (!this.data._auth_method_group_maps) {
      this.data._auth_method_group_maps = {};
    }
    ref = Group.authMethodKeys;
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      if (!this.data._auth_method_group_maps[key]) {
        this.data._auth_method_group_maps[key] = [];
      }
    }
    if (!this.data.group.frontend_prefs) {
      this.data.group.frontend_prefs = {};
    }
    return this;
  };

  Group.prototype.getType = function() {
    return this.data.group.type;
  };

  Group.prototype.renderContent = function() {
    this.addColumn(new ListViewColumn({
      text: this.getType()
    }));
    return Group.__super__.renderContent.call(this);
  };

  Group.prototype.getApi = function() {
    return "group";
  };

  Group.authMethodKeys = ["sso", "ldap"];

  Group.prototype.getSaveData = function() {
    var i, j, key, len, len1, ref, ref1, save_data, sso;
    save_data = {
      _basetype: "group",
      group: {
        _id: this.id,
        displayname: this.data.group.displayname,
        name: this.data.group.name,
        frontend_prefs: copyObject(this.data.group.frontend_prefs, true),
        comment: this.data.group.comment
      }
    };
    if (this.aclManager) {
      save_data._acl = this.aclManager.getSaveData();
    }
    if (this.systemAclManager) {
      save_data._system_rights = this.systemAclManager.getSaveData();
    }
    if (this.__authMapping) {
      save_data._auth_method_group_maps = {};
      ref = Group.authMethodKeys;
      for (i = 0, len = ref.length; i < len; i++) {
        key = ref[i];
        save_data._auth_method_group_maps[key] = [];
        ref1 = this.data._auth_method_group_maps[key];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          sso = ref1[j];
          if (isEmpty(sso.value.trim())) {
            throw new InvalidSaveDataException();
          }
          save_data._auth_method_group_maps[key].push(copyObject(sso, true));
        }
      }
    }
    return save_data;
  };

  Group.prototype.getTabs = function() {
    var aclTab, authMappingTab, systemAclTab;
    authMappingTab = this.renderAuthMappingTab();
    if (this.canEditSystemRights()) {
      systemAclTab = this.renderSystemAclTab();
    }
    if (this.canEditAcl()) {
      aclTab = this.renderAclTab();
    }
    return [
      {
        name: "general",
        text: $$("admin.group.tab.general"),
        content: (function(_this) {
          return function() {
            return new Form({
              fields: _this.getGeneralFields(),
              data: _this.data.group,
              onDataChanged: function(data, field) {
                return _this.update();
              }
            }).start();
          };
        })(this)
      }, systemAclTab ? {
        name: "system_rights",
        text: $$("admin.group.tab.system_rights"),
        content: (function(_this) {
          return function() {
            return _this.renderSystemAclTab();
          };
        })(this)
      } : void 0, aclTab ? {
        name: "acl",
        text: $$("admin.group.tab.acl"),
        content: (function(_this) {
          return function() {
            return _this.renderAclTab();
          };
        })(this)
      } : void 0, authMappingTab ? {
        name: "auth_mapping",
        text: $$("admin.group.tab.auth_mapping"),
        content: authMappingTab
      } : void 0
    ];
  };

  Group.prototype.renderSystemAclTab = function() {
    if (!this.isWritable()) {
      return null;
    }
    this.systemAclManager = new AclRightManager({
      data: this.data,
      context: "SystemAclRight",
      name: "_system_rights"
    });
    return this.systemAclManager.getForm().start();
  };

  Group.prototype.renderAclTab = function() {
    if (!this.isWritable()) {
      return null;
    }
    this.aclManager = new AclManager({
      data: this.data._acl,
      context: this,
      right: true
    });
    return this.aclManager.getTree();
  };

  Group.prototype.getGeneralFields = function() {
    return [
      {
        type: Output,
        data: this.data,
        name: "_owner",
        form: {
          label: $$("admin.group._owner")
        },
        getValue: function(v) {
          var ref;
          return v != null ? (ref = v[v._basetype]) != null ? ref._generated_displayname : void 0 : void 0;
        },
        placeholder: $$("admin.group._owner.new")
      }, {
        type: MultiInput,
        control: ez5.loca.getLanguageControlAdmin(),
        form: {
          label: $$("admin.group.displayname")
        },
        name: "displayname"
      }, this.getNameField(), {
        type: Input,
        form: {
          label: $$("admin.group.comment")
        },
        textarea: true,
        name: "comment"
      }
    ];
  };

  Group.prototype.getNameField = function() {
    return {
      type: Input,
      form: {
        label: $$("admin.group.name")
      },
      name: "name"
    };
  };

  Group.prototype.renderAuthMappingTab = function() {
    var blocks, dt, i, j, key, len, len1, opts_method, ref, ref1;
    if (!ez5.session.hasSystemRight("rightsmanagement", "root")) {
      return null;
    }
    this.__authMapping = true;
    opts_method = [];
    ref = ["eq", "regexp"];
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      opts_method.push({
        value: key,
        text: $$("group.auth_mapping.form.method." + key)
      });
    }
    blocks = [];
    ref1 = Group.authMethodKeys;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      key = ref1[j];
      dt = new DataTable({
        data: this.data._auth_method_group_maps,
        name: key,
        fields: [
          {
            undo_and_changed_support: false,
            form: {
              label: $$("group.auth_mapping.form.method")
            },
            type: Select,
            options: opts_method,
            name: "method"
          }, {
            undo_and_changed_support: false,
            type: Input,
            form: {
              label: $$("group.auth_mapping.form.value")
            },
            name: "value"
          }
        ]
      });
      dt.start();
      blocks.push(new Block({
        header: new Label({
          text: $$("group.auth_mapping.block." + key + ".title")
        }),
        content: dt
      }));
    }
    console.debug("renderAuthMappingTab", this.data, blocks);
    return blocks;
  };

  Group.getGroupFields = function(type_prefixes, user) {
    var custom_filter_ids, fields, group, group_ids, groups, i, j, k, l, len, len1, len2, len3, options, pkey, ref, ref1, ref2, type_prefix;
    if (type_prefixes == null) {
      type_prefixes = ["easydb"];
    }
    if (user == null) {
      user = null;
    }
    fields = [];
    options = {};
    for (i = 0, len = type_prefixes.length; i < len; i++) {
      type_prefix = type_prefixes[i];
      assert(type_prefix === "easydb" || type_prefix === "custom" || type_prefix === "system", "Group.getGroupFields", "type prefix needs to be easydb, custom, or system.", {
        type_prefixes: type_prefixes
      });
      options[type_prefix] = [];
      if (type_prefix !== "custom") {
        pkey = "group.fields.label.placeholder";
      } else {
        pkey = "group.fields.label.placeholder.custom";
      }
      fields.push({
        form: {
          label: $$("group.fields.label." + type_prefix)
        },
        type: Options,
        horizontal: false,
        undo_and_changed_support: false,
        name: "__group_ids",
        placeholder: $$(pkey),
        options: options[type_prefix]
      });
    }
    groups = ez5.groupManager.getGroups();
    group_ids = (function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = groups.length; j < len1; j++) {
        group = groups[j];
        results.push(group.getId());
      }
      return results;
    })();
    if (user) {
      custom_filter_ids = [];
      ref = user.getGroups();
      for (j = 0, len1 = ref.length; j < len1; j++) {
        group = ref[j];
        custom_filter_ids.push(group.getId());
        if (ref1 = group.getId(), indexOf.call(group_ids, ref1) < 0) {
          groups.push(group);
        }
      }
    } else {
      custom_filter_ids = null;
    }
    for (k = 0, len2 = groups.length; k < len2; k++) {
      group = groups[k];
      for (l = 0, len3 = type_prefixes.length; l < len3; l++) {
        type_prefix = type_prefixes[l];
        if (type_prefix === "custom" && custom_filter_ids && (ref2 = group.getId(), indexOf.call(custom_filter_ids, ref2) < 0)) {
          continue;
        }
        if (group.getType().startsWith(type_prefix)) {
          options[type_prefix].push({
            disabled: type_prefix === "custom",
            text: group.getDisplayText(),
            value: group.getId()
          });
        }
      }
    }
    return fields;
  };

  Group.newInstance = function(opts) {
    switch (opts.group.group.type) {
      case "easydb":
        return new ez5.defaults["class"].Group(opts);
      case "system":
        return new ez5.defaults["class"].SystemGroup(opts);
      default:
        return new ez5.defaults["class"].CustomGroup(opts);
    }
  };

  return Group;

})(SystemListManagerItem);
// Generated by CoffeeScript 1.10.0
var SystemGroup,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SystemGroup = (function(superClass) {
  extend(SystemGroup, superClass);

  function SystemGroup() {
    this.getGeneralFields = bind(this.getGeneralFields, this);
    return SystemGroup.__super__.constructor.apply(this, arguments);
  }

  SystemGroup.prototype.getGeneralFields = function() {
    return [
      {
        type: MultiOutput,
        control: ez5.loca.getLanguageControlAdmin(),
        name: "displayname",
        form: {
          label: $$("admin.group.displayname")
        }
      }, this.getNameField()
    ];
  };

  SystemGroup.prototype.renderAuthMappingTab = function() {
    return null;
  };

  SystemGroup.prototype.isDeletable = function() {
    return false;
  };

  SystemGroup.prototype.getNameField = function() {
    return null;
  };

  return SystemGroup;

})(Group);
// Generated by CoffeeScript 1.10.0
var CustomGroup,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CustomGroup = (function(superClass) {
  extend(CustomGroup, superClass);

  function CustomGroup() {
    return CustomGroup.__super__.constructor.apply(this, arguments);
  }

  CustomGroup.prototype.getNameField = function() {
    return {
      type: Output,
      form: {
        label: $$("admin.group.name")
      },
      name: "name"
    };
  };

  CustomGroup.prototype.renderAuthMappingTab = function() {
    return Group.prototype.renderAuthMappingTab.call(this);
  };

  return CustomGroup;

})(SystemGroup);
// Generated by CoffeeScript 1.10.0
var User,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

User = (function(superClass) {
  extend(User, superClass);

  function User() {
    this.getManagementFields = bind(this.getManagementFields, this);
    return User.__super__.constructor.apply(this, arguments);
  }

  User.prototype.initOpts = function() {
    User.__super__.initOpts.call(this);
    return this.addOpts({
      user: {
        check: "PlainObject"
      }
    });
  };

  User.prototype.readOpts = function() {
    User.__super__.readOpts.call(this);
    if (this._user) {
      return this.loadData(this._user);
    } else {
      return this.loadData({
        _basetype: "user",
        _groups: [],
        _system_rights: {},
        _emails: [],
        user: {
          type: "easydb"
        }
      });
    }
  };

  User.defaultPicName = "user_avatar";

  User.prototype.managerInstance = function() {
    return UserManager;
  };

  User.prototype.getPrimaryEmail = function() {
    var email, i, len, ref;
    if (!this.data._emails) {
      return "";
    }
    ref = this.data._emails;
    for (i = 0, len = ref.length; i < len; i++) {
      email = ref[i];
      if (email.is_primary) {
        return email.email;
      }
    }
    return "";
  };

  User.prototype.getData = function() {
    return this.data;
  };

  User.prototype.getTrayItems = function(sessionTrayApp) {
    var items;
    return items = [
      {
        text: $$("session.tray.settings.menu"),
        _menu: "settings",
        onClick: (function(_this) {
          return function() {
            return ez5.sessionTray.userSettingsModal();
          };
        })(this)
      }, {
        text: $$("session.tray.change_password"),
        _menu: "change_password",
        hidden: function() {
          return !(ez5.session.hasSystemRight("root", "user.change_password"));
        },
        onClick: (function(_this) {
          return function() {
            return ez5.session.passwordChangeModal();
          };
        })(this)
      }, {
        divider: true
      }, {
        text: $$("session.tray.logout"),
        onClick: (function(_this) {
          return function() {
            return ez5.session.logout();
          };
        })(this)
      }
    ];
  };

  User.prototype.setData = function(data1) {
    this.data = data1;
  };

  User.prototype.getFrontendLanguage = function() {
    return this.data.user.frontend_language;
  };

  User.prototype.copy = function(remove_id) {
    var new_data;
    if (remove_id == null) {
      remove_id = false;
    }
    new_data = copyObject(this.data, true);
    if (remove_id) {
      delete new_data.user._id;
      delete new_data.user._version;
    }
    return new window[getObjectClass(this)]({
      user: new_data
    });
  };

  User.prototype.canBeCopied = function() {
    var ref;
    if (this.getId()) {
      return ((ref = ez5.session.getSystemRight("user")) != null ? ref.create : void 0) || ez5.session.hasSystemRight("root");
    } else {
      return false;
    }
  };

  User.prototype.getCopyAsNewData = function() {
    var new_data, sd;
    sd = this.getSaveData();
    new_data = {
      _basetype: "user",
      _emails: [],
      user: {
        type: sd.user.type
      },
      _groups: sd._groups,
      _acl: sd._acl,
      _system_rights: sd._system_rights
    };
    return new_data;
  };

  User.prototype.copyAsNew = function() {
    var new_data, new_user;
    new_data = this.getCopyAsNewData();
    new_user = new window[getObjectClass(this)]({
      manager: this._manager,
      user: new_data
    });
    return new_user;
  };

  User.prototype.loadData = function(data1) {
    var ref;
    this.data = data1;
    User.__super__.loadData.call(this, this.data);
    this.loadGroups();
    if (!this.data.user.frontend_prefs) {
      this.data.user.frontend_prefs = {};
    }
    this.id = (ref = this.data) != null ? ref.user._id : void 0;
    return this;
  };

  User.prototype.setDataOfPrefs = function(prefs) {
    var k, uprefs, v;
    uprefs = {};
    for (k in prefs) {
      v = prefs[k];
      if (k === "_undo") {
        continue;
      }
      if (indexOf.call(ez5.session.getCookieOnlyPrefs(), k) >= 0) {
        continue;
      }
      if (k === "database_languages" || k === "search_languages" || k === "frontend_language") {
        this.data.user[k] = v;
      } else if (!isNull(v)) {
        uprefs[k] = v;
      }
    }
    this.data.user.frontend_prefs.webfrontend = uprefs;
    return this;
  };

  User.prototype.newKey = "admin.user.list.name.new";

  User.prototype.renderContent = function() {
    this.addColumn(new ListViewColumn({
      text: this.getType()
    }));
    return User.__super__.renderContent.call(this);
  };

  User.prototype.getType = function() {
    return this.data.user.type;
  };

  User.prototype.getLogin = function() {
    return this.data.user.login;
  };

  User.prototype.getAuthUrl = function() {
    var ref;
    assert((ref = this.getType()) === "collection", "User.getAuthUrl", "User type must be collection", {
      user: this
    });
    return encodeURIComponent(this.getType()) + "=" + encodeURIComponent(this.getLogin());
  };

  User.prototype.getId = function() {
    var ref;
    return (ref = this.data.user) != null ? ref._id : void 0;
  };

  User.prototype.getApi = function() {
    return "user";
  };

  User.prototype.getDisplayText = function() {
    return this.get("_generated_displayname", false) || this.id;
  };

  User.prototype.getContent = function() {
    var dn;
    dn = this.get("_generated_displayname", true);
    if (isEmpty(dn)) {
      return this.id + "";
    } else {
      return CUI.DOM.htmlToNodes(dn);
    }
  };

  User.prototype.getLimitedSaveData = function(mode) {
    var i, k, len, ref, sd, sd_filtered;
    if (mode == null) {
      mode = "settings";
    }
    assert(mode === "settings" || mode === "register", "User.getLimitedSaveData", "mode needs to be settings or register.", {
      mode: mode
    });
    sd = this.getSaveData();
    sd.user._new_primary_email = this.data.user._new_primary_email;
    sd_filtered = {
      _basetype: sd._basetype,
      user: {}
    };
    ref = ["login", "frontend_prefs", "first_name", "last_name", "displayname", "frontend_language", "database_languages", "search_languages", "company", "department", "address_supplement", "street", "house_number", "postal_code", "town", "country", "phone", "picture", "mail_schedule", "_new_primary_email", "_password", "_id", "_version"];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      if (!((k === "_id" || k === "_version") || this.isAllowedLimited(k, mode))) {
        continue;
      }
      if (sd.user.hasOwnProperty(k)) {
        sd_filtered.user[k] = sd.user[k];
      } else if (sd.hasOwnProperty(k)) {
        sd_filtered[k] = sd[k];
      }
    }
    return sd_filtered;
  };

  User.prototype.isAllowedLimited = function(name, mode) {
    var sr;
    assert(mode === "settings" || mode === "register", "User.isAllowedLimited", "mode needs to be settings or register.", {
      mode: mode
    });
    if (name === "theme" || name === "frontend_prefs" || name === "frontend_language" || name === "database_languages" || name === "search_languages") {
      return true;
    }
    if (name === "type") {
      return false;
    }
    if (mode === "settings") {
      if (name === 'login' || name === '_password') {
        return false;
      }
      if (ez5.session.hasSystemRight("root")) {
        return true;
      }
      sr = "user.write_self";
    } else if (mode === "register") {
      sr = "user.create_new";
    }
    if (ez5.session.hasSystemRight(sr)) {
      return !!ez5.session.getSystemRight(sr)[name];
    }
    return false;
  };

  User.prototype.saveLimited = function(ev, mode) {
    assert(mode === "settings" || mode === "register", "User.saveLimited", "mode needs to be settings or register.", {
      mode: mode
    });
    return this._save(ev, this.getLimitedSaveData(mode)).done((function(_this) {
      return function(data) {
        if (CUI.isArray(data)) {
          return _this.loadData(data[0]);
        } else {
          return _this.loadData(data);
        }
      };
    })(this));
  };

  User.prototype.getSaveData = function() {
    var _email, i, j, k, l, len, len1, len2, len3, m, mom, pw1, pw2, ref, ref1, ref2, ref3, ref4, ref5, save_data;
    save_data = {
      _basetype: "user",
      user: {
        _id: this.id
      }
    };
    ref = ["login", "last_name", "type", "frontend_language", "database_languages", "search_languages", "first_name", "displayname", "mail_schedule", "company", "department", "phone", "remarks", "address_supplement", "street", "house_number", "postal_code", "town", "country"];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      if (isEmpty(this.data.user[k])) {
        save_data.user[k] = null;
      } else {
        save_data.user[k] = this.data.user[k];
      }
    }
    ref1 = ["login_disabled", "require_password_change"];
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      k = ref1[j];
      save_data.user[k] = !!this.data.user[k];
    }
    ref2 = ["login_valid_from", "login_valid_to"];
    for (l = 0, len2 = ref2.length; l < len2; l++) {
      k = ref2[l];
      if (!this.data.user[k]) {
        save_data.user[k] = null;
      } else {
        mom = DateTime.toMoment(this.data.user[k]);
        if (k === "login_valid_to") {
          mom.add(1, "day").subtract(1, "second");
        }
        save_data.user[k] = mom.toISOString();
      }
    }
    save_data._emails = copyObject(this.data._emails, true) || [];
    ref3 = save_data._emails;
    for (m = 0, len3 = ref3.length; m < len3; m++) {
      _email = ref3[m];
      if (!_email.email.match(CUI.EmailInput.regexp)) {
        throw new InvalidSaveDataException();
      }
    }
    save_data.user.frontend_prefs = copyObject(this.data.user.frontend_prefs, true);
    if ((ref4 = this.data.user.picture) != null ? ref4._id : void 0) {
      save_data.user.picture = {
        _id: this.data.user.picture._id,
        frontend_prefs: copyObject(this.data.user.picture.frontend_prefs, true)
      };
    } else {
      save_data.user.picture = null;
    }
    if (this.data.set_password) {
      if (this.data.server_set_password) {
        save_data._password = true;
      } else if (isEmpty((ref5 = this.data.password) != null ? ref5.trim() : void 0)) {
        save_data._password = false;
      } else {
        save_data._password = this.data.password.trim();
      }
    }
    if (this.data.user._password1) {
      pw1 = this.data.user._password1.trim();
      pw2 = this.data.user._password2.trim();
      if (pw1 === pw2 && pw1.length > 0) {
        save_data._password = pw1;
      }
    }
    save_data._groups = this.getGroupsSaveData();
    if (this.aclManager) {
      save_data._acl = this.aclManager.getSaveData();
    }
    if (this.systemAclManager) {
      save_data._system_rights = this.systemAclManager.getSaveData();
    }
    return save_data;
  };

  User.prototype.getTabs = function() {
    return [
      {
        name: "general",
        text: $$("admin.user.tab.general"),
        content: (function(_this) {
          return function() {
            CUI.debug("getTabs, new Form", _this.data);
            return _this.general_form = new Form({
              fields: _this.getGeneralFields(),
              data: _this.data.user
            }).start();
          };
        })(this)
      }, {
        name: "address",
        text: $$("admin.user.tab.address"),
        content: (function(_this) {
          return function() {
            return new Form({
              fields: _this.getAddressFields(),
              data: _this.data.user
            }).start();
          };
        })(this)
      }, {
        name: "management",
        text: $$("admin.user.tab.management"),
        content: (function(_this) {
          return function() {
            CUI.debug("management fields", dump(_this.data._emails));
            _this.data.user.needs_confirmation = false;
            return _this.management_form = new Form({
              fields: _this.getManagementFields(),
              data: _this.data.user
            }).start();
          };
        })(this)
      }, {
        name: "password",
        text: $$("admin.user.tab.password"),
        onFirstActivate: (function(_this) {
          return function() {
            return _this.updatePasswordForm();
          };
        })(this),
        content: (function(_this) {
          return function() {
            return _this.password_form = new Form({
              fields: _this.getPasswordFields(),
              data: _this.data,
              onDataChanged: function() {
                return _this.updatePasswordForm();
              }
            }).start();
          };
        })(this)
      }, this.getGroupsTab(["easydb", "custom"], this), this.getSystemRightsTab(), this.getAclTab()
    ];
  };

  User.prototype.getAclTab = function() {
    if (!this.canEditAcl()) {
      return null;
    }
    return {
      name: "acl",
      text: $$("admin.user.tab.acl"),
      content: (function(_this) {
        return function() {
          return _this.renderAclTab();
        };
      })(this)
    };
  };

  User.prototype.getSystemRightsTab = function() {
    if (!this.canEditSystemRights()) {
      return null;
    }
    return {
      name: "system_acl",
      text: $$("admin.user.tab.system_acl"),
      content: (function(_this) {
        return function() {
          return _this.renderSystemAclTab();
        };
      })(this)
    };
  };

  User.prototype.renderSystemAclTab = function() {
    this.systemAclManager = new AclRightManager({
      data: this.data,
      name: "_system_rights",
      context: "SystemAclRight"
    });
    return this.systemAclManager.getForm().start();
  };

  User.prototype.renderAclTab = function() {
    this.aclManager = new AclManager({
      data: this.data._acl,
      context: this,
      right: true,
      onUpdate: this.update
    });
    return this.aclManager.getTree();
  };

  User.prototype.renderPicture = function() {
    var asset, pic, ref, version;
    assert((ref = this.data) != null ? ref.user : void 0, "User.renderPicture", "data.user not found.", {
      data: this.data,
      user: this
    });
    pic = this.data.user.picture;
    if (!pic) {
      pic = ez5.session.getDefaultPicture(User.defaultPicName);
      version = "original";
    } else {
      version = Asset.getStandardVersionName(pic);
    }
    if (pic) {
      asset = new AssetPlain({
        value: pic
      });
      return $div("user-picture").append(asset.getImgElement(null, version));
    } else {
      return $div("user-picture-dummy").text("DUMMY");
    }
  };

  User.prototype.getGroups = function() {
    var group, i, len, ref, results;
    ref = this.data._groups;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      group = ref[i];
      results.push(Group.newInstance({
        group: group
      }));
    }
    return results;
  };

  User.prototype.getSystemRights = function() {
    var sr, srs;
    srs = [];
    for (sr in this.data._system_rights) {
      srs.push(ez5.aclRights.byName("SystemAclRight", sr));
    }
    return srs;
  };

  User.prototype.__getGeneralFields = function(mode) {
    var eas_field, fields, sel_field;
    eas_field = new EASField({
      name: "picture",
      "class": "user-picture",
      scale_and_position: true,
      data_changed: (function(_this) {
        return function(data, field) {};
      })(this)
    });
    if (this.getType() === "email") {
      sel_field = {
        type: Select,
        name: "type",
        onDataChanged: function(data, df) {
          if (df.getValue() === "easydb" && df.getLastValue() === "email") {
            return CUI.confirm({
              text: $$("admin.user.type.change_warning"),
              button_primary: "ok"
            }).fail((function(_this) {
              return function() {
                return df.undo();
              };
            })(this));
          }
        },
        options: [
          {
            text: this.getType(),
            value: this.getType()
          }, {
            text: "easydb",
            value: "easydb"
          }
        ]
      };
    } else {
      sel_field = {
        type: Output,
        name: "type"
      };
    }
    return fields = [
      {
        type: Output,
        name: "_id"
      }, {
        type: Output,
        data: this.data,
        name: "_owner",
        getValue: function(v) {
          var ref;
          return v != null ? (ref = v[v._basetype]) != null ? ref._generated_displayname : void 0 : void 0;
        },
        placeholder: $$("admin.user._owner.new")
      }, sel_field, {
        type: Input,
        name: "login",
        placeholder: mode === "register" ? void 0 : $$("admin.user.login_placeholder")
      }, {
        type: Input,
        name: "first_name"
      }, {
        type: Input,
        name: "last_name"
      }, {
        type: Input,
        name: "displayname"
      }, {
        type: Input,
        name: "company"
      }, {
        type: Input,
        name: "department"
      }, {
        type: Input,
        name: "phone"
      }, {
        type: DataFieldProxy,
        name: "picture",
        element: eas_field.renderEditorInput(this.data.user, User.defaultPicName)
      }, {
        type: Input,
        textarea: true,
        name: "remarks"
      }, {
        type: Output,
        name: "created_timestamp",
        getValue: (function(_this) {
          return function(v) {
            return ez5.format_date_and_time(v, true);
          };
        })(this)
      }, {
        type: Output,
        name: "last_updated_timestamp",
        getValue: (function(_this) {
          return function(v) {
            return ez5.format_date_and_time(v, true);
          };
        })(this)
      }
    ];
  };

  User.prototype.getUserSelfManagementFields = function(mode) {
    var check_pw, em, email_input_hint, f, fields, i, j, len, len1, loca_key, policy_txt, ref, ref1;
    if (mode == null) {
      mode = "settings";
    }
    fields = [];
    assert(mode === "settings" || mode === "register", "User.getUserSelfManagementFields", "mode needs to be settings or register.", {
      mode: mode
    });
    if (!isEmpty(this.data.user.login)) {
      fields.push({
        type: Output,
        name: "login"
      });
    }
    ref = this.__getGeneralFields(mode);
    for (i = 0, len = ref.length; i < len; i++) {
      f = ref[i];
      if (this.isAllowedLimited(f.name, mode)) {
        fields.push(f);
      }
    }
    ref1 = this.__getAddressFields(mode);
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      f = ref1[j];
      if (this.isAllowedLimited(f.name, mode)) {
        fields.push(f);
      }
    }
    if (mode === "settings") {
      fields.push({
        type: Output,
        name: "_primary_email",
        placeholder: $$("admin.user._primary_email.placeholder")
      });
    }
    if (this.isAllowedLimited("_new_primary_email", mode)) {
      em = this.data.user._new_primary_email;
      if (!isEmpty(em)) {
        email_input_hint = $$("admin.user._new_primary_email_requested", {
          email: em
        });
      }
      this.data.user._new_primary_email = "";
      if (isEmpty(this.data.user._primary_email)) {
        loca_key = "admin.user._new_primary_email.create";
      } else {
        loca_key = "admin.user._new_primary_email";
      }
      fields.push({
        type: EmailInput,
        form: {
          loca_key: loca_key,
          hint: email_input_hint
        },
        placeholder: em,
        name: "_new_primary_email"
      });
    }
    if (this.isAllowedLimited("mail_schedule", mode)) {
      fields.push({
        type: Form,
        name: "mail_schedule",
        undo_support: false,
        fields: ScheduleEditor.getFields()
      });
    }
    if (this.isAllowedLimited("_password", mode)) {
      check_pw = (function(_this) {
        return function(data, df) {
          var hint, pw1, pw2;
          pw1 = data._password1.trim();
          pw2 = data._password2.trim();
          if (pw1 !== pw2 && pw1.length > 0 && pw2.length > 0) {
            hint = $$("auth.error.passwords_dont_match");
          } else {
            hint = "";
          }
          return df.getForm().updateHint("_password2", hint, !window.bowser.msie);
        };
      })(this);
      policy_txt = ez5.loca.getBestFrontendValue(ez5.session.getBaseConfig().system["login.password_policy"].hint);
      fields.push.apply(fields, [
        {
          type: Password,
          undo_and_changed_support: false,
          name: "_password1",
          form: {
            hint: policy_txt
          }
        }, {
          type: Password,
          undo_and_changed_support: false,
          name: "_password2",
          onDataChanged: check_pw,
          form: {
            hint: ""
          }
        }
      ]);
    }
    return User.initFields(fields, {
      grid: "1/2"
    });
  };

  User.prototype.getUserSelfManagementFieldsNotOk = function(mode, data) {
    var field_names, i, k, keys, len, ref;
    keys = ["first_name", "last_name"];
    if (mode === 'register') {
      keys.push.apply(keys, ["login", "_new_primary_email", "_password"]);
    }
    field_names = [];
    for (i = 0, len = keys.length; i < len; i++) {
      k = keys[i];
      switch (k) {
        case "_password":
          if (isEmpty(data != null ? data[k] : void 0)) {
            field_names.push("_password1");
            field_names.push("_password2");
          }
          break;
        default:
          if (isEmpty(data != null ? (ref = data.user) != null ? ref[k] : void 0 : void 0)) {
            field_names.push(k);
          }
      }
    }
    return field_names;
  };

  User.prototype.getGeneralFields = function(mode) {
    return User.initFields(this.__getGeneralFields(mode));
  };

  User.prototype.getAddressFields = function(mode) {
    return User.initFields(this.__getAddressFields(mode));
  };

  User.prototype.__getAddressFields = function() {
    var fields, i, k, len, ref;
    fields = [];
    ref = ["address_supplement", "street", "house_number", "postal_code", "town", "country"];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      fields.push({
        type: Input,
        name: k
      });
    }
    return fields;
  };

  User.prototype.updatePasswordForm = function() {
    var fields, i, k, len, placeholder, ref;
    fields = {};
    ref = ["server_set_password", "password"];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      fields[k] = this.password_form.getFieldsByName(k)[0];
    }
    placeholder = "";
    if (this.data.set_password) {
      fields.server_set_password.enable();
      if (!this.data.server_set_password) {
        fields.password.enable();
        placeholder = "hint_delete";
      } else {
        fields.password.disable();
        placeholder = "hint_server";
      }
    } else {
      fields.server_set_password.disable();
      fields.password.disable();
    }
    if (placeholder) {
      placeholder = $$("admin.user.password." + placeholder);
    }
    fields.password.getElement().setAttribute("placeholder", placeholder);
    return this;
  };

  User.prototype.isWritable = function() {
    var ref;
    if (!this.getId() || ((ref = this.data._generated_rights) != null ? ref.write : void 0)) {
      return true;
    } else {
      return false;
    }
  };

  User.prototype.canEditSystemRights = function() {
    var ref, ref1;
    if (!this.getId()) {
      return this.isWritable() && (ez5.session.hasSystemRight("user[create_system_rights]") || ez5.session.hasSystemRight("root"));
    } else {
      return this.isWritable() && ((ref = this.data._generated_rights) != null ? (ref1 = ref.write) != null ? ref1.system_rights : void 0 : void 0);
    }
  };

  User.prototype.canEditAcl = function() {
    var ref, ref1;
    if (!this.getId()) {
      return this.isWritable() && (ez5.session.hasSystemRight("user[create_acl]") || ez5.session.hasSystemRight("root"));
    } else {
      return this.isWritable() && ((ref = this.data._generated_rights) != null ? (ref1 = ref.write) != null ? ref1.acl : void 0 : void 0);
    }
  };

  User.prototype.isDeletable = function() {
    var ref;
    if (!this.getId() || ((ref = this.data._generated_rights) != null ? ref["delete"] : void 0)) {
      return true;
    } else {
      return false;
    }
  };

  User.prototype.getManagementFields = function() {
    return User.initFields([
      {
        type: DataTable,
        name: "_emails",
        maximize_horizontal: true,
        data: this.data,
        fields: [
          {
            type: Input,
            name: "email"
          }, {
            type: Output,
            name: "requested_confirmation_date",
            getValue: function(v) {
              return ez5.format_date_and_time(v);
            }
          }, {
            type: Output,
            name: "confirmed_date",
            getValue: function(v) {
              return ez5.format_date_and_time(v);
            }
          }, {
            type: Checkbox,
            name: "needs_confirmation",
            form: {
              rotate_90: true
            }
          }, {
            type: Checkbox,
            name: "use_for_login",
            form: {
              rotate_90: true
            }
          }, {
            type: Checkbox,
            name: "use_for_email",
            form: {
              rotate_90: true
            }
          }, {
            type: Checkbox,
            name: "send_email",
            form: {
              rotate_90: true
            }
          }, {
            type: Checkbox,
            name: "send_email_include_password",
            form: {
              rotate_90: true
            }
          }, {
            type: Checkbox,
            name: "is_primary",
            form: {
              rotate_90: true
            }
          }, {
            type: Checkbox,
            name: "intended_primary",
            form: {
              rotate_90: true
            }
          }
        ]
      }, {
        type: Form,
        name: "mail_schedule",
        form: {
          label: $$("admin.user.schedule")
        },
        undo_support: false,
        fields: ScheduleEditor.getFields()
      }
    ]);
  };

  User.prototype.getPasswordFields = function() {
    return User.initFields([
      {
        type: Checkbox,
        name: "login_disabled",
        data: this.data.user
      }, {
        type: DateTime,
        name: "login_valid_from",
        display_type: "short",
        input_types: ["date", "year_month", "year"],
        data: this.data.user
      }, {
        type: DateTime,
        name: "login_valid_to",
        display_type: "short",
        input_types: ["date", "year_month", "year"],
        data: this.data.user
      }, {
        type: Checkbox,
        name: "require_password_change",
        data: this.data.user
      }, {
        type: Checkbox,
        name: "set_password"
      }, {
        type: Checkbox,
        name: "server_set_password"
      }, {
        type: Input,
        name: "password"
      }
    ]);
  };

  User.prototype.renderCard = function() {
    var name, uc;
    uc = new Template({
      name: "user-card",
      map_prefix: "ez5-user-card",
      map: {
        avatar: true,
        name: true,
        email: true
      }
    });
    uc.replace(this.renderPicture(), "avatar");
    name = ((this.get("first_name") || "") + " " + (this.get("last_name") || "")).trim();
    if (name === "") {
      name = this.getDisplayText();
    }
    uc.replace(toHtml(name), "name");
    uc.replace(toHtml(this.getPrimaryEmail()), "email");
    return uc;
  };

  User.prototype.hasFlatTrayItems = function() {
    return false;
  };

  User.initFields = function(fields, form_opts) {
    var _f, f, i, j, len, len1, ref, set_label;
    if (form_opts == null) {
      form_opts = {};
    }
    set_label = function(field, default_label) {
      var k, label, v;
      if (!field.form) {
        if (field.type === Checkbox) {
          if (!field.text) {
            field.text = $$(default_label);
          }
          return;
        }
        field.form = {};
      }
      for (k in form_opts) {
        v = form_opts[k];
        field.form[k] = v;
      }
      if (field.form.use_field_as_label) {
        return;
      }
      if (field.form.loca_key) {
        label = field.form.loca_key;
      } else {
        label = default_label;
      }
      if (field.form.label === void 0) {
        field.form.label = $$(label);
      }
      if (ez5.loca.has(label + "|hint")) {
        field.form.hint = $$(label + "|hint");
      }
      if (ez5.loca.has(label + "|hint_icon")) {
        return field.form.hint_icon = $$(label + "|hint_icon");
      }
    };
    for (i = 0, len = fields.length; i < len; i++) {
      f = fields[i];
      set_label(f, "admin.user." + f.name);
      if (f.fields) {
        ref = f.fields;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          _f = ref[j];
          set_label(_f, "admin.user." + f.name + "." + _f.name);
        }
      }
    }
    return fields;
  };

  User.getUserClassByData = function(data) {
    switch (data.user.type) {
      case "system":
        return ez5.defaults["class"].SystemUser;
      case "anonymous":
        return ez5.defaults["class"].AnonymousUser;
      default:
        return ez5.defaults["class"].User;
    }
  };

  User.newInstance = function(opts) {
    var cls;
    cls = ez5.defaults["class"].User.getUserClassByData(opts.user);
    return new cls(opts);
  };

  return User;

})(SystemListManagerItem);
// Generated by CoffeeScript 1.10.0
var AnonymousUser,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AnonymousUser = (function(superClass) {
  extend(AnonymousUser, superClass);

  function AnonymousUser() {
    return AnonymousUser.__super__.constructor.apply(this, arguments);
  }

  AnonymousUser.prototype.getTrayItems = function() {
    return [
      {
        loca_key: "session.tray.login",
        onClick: (function(_this) {
          return function() {
            return ez5.session.loginAgain();
          };
        })(this)
      }, ez5.session.hasSystemRight("user.create_new") ? {
        loca_key: "session.tray.register",
        onClick: (function(_this) {
          return function() {
            return ez5.sessionTray.userRegisterModal();
          };
        })(this)
      } : void 0
    ];
  };

  AnonymousUser.prototype.hasFlatTrayItems = function() {
    return true;
  };

  return AnonymousUser;

})(User);
// Generated by CoffeeScript 1.10.0
var SystemUser,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SystemUser = (function(superClass) {
  extend(SystemUser, superClass);

  function SystemUser() {
    return SystemUser.__super__.constructor.apply(this, arguments);
  }

  SystemUser.prototype.isDeletable = function() {
    return false;
  };

  SystemUser.prototype.getSaveData = function() {
    var save_data;
    save_data = SystemUser.__super__.getSaveData.call(this);
    delete save_data.user.login;
    delete save_data._acl;
    delete save_data._groups;
    return save_data;
  };

  SystemUser.prototype.getGroupsTab = function() {
    return null;
  };

  SystemUser.prototype.getAclTab = function() {
    return null;
  };

  SystemUser.prototype.getSystemRightsTab = function() {
    return null;
  };

  SystemUser.prototype.canBeCopied = function() {
    return false;
  };

  return SystemUser;

})(User);
// Generated by CoffeeScript 1.10.0
var Pool, PoolForPoolManagerPoolField,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Pool = (function(superClass) {
  extend(Pool, superClass);

  function Pool() {
    this.renderTransitionsTab = bind(this.renderTransitionsTab, this);
    this.initTagData = bind(this.initTagData, this);
    this.load = bind(this.load, this);
    this.getChildren = bind(this.getChildren, this);
    this.hasChildren = bind(this.hasChildren, this);
    return Pool.__super__.constructor.apply(this, arguments);
  }

  Pool.prototype.initOpts = function() {
    Pool.__super__.initOpts.call(this);
    return this.addOpts({
      pool: {
        check: "PlainObject"
      },
      id_parent: {
        check: function(v) {
          return v > 0;
        }
      }
    });
  };

  Pool.prototype.readOpts = function() {
    Pool.__super__.readOpts.call(this);
    if (this._pool) {
      return this.setData(this._pool);
    } else {
      return this.setData({
        pool: {
          _id: null,
          _id_parent: this.opts.id_parent
        },
        _standard_masks: []
      });
    }
  };

  Pool.prototype.setData = function(data1) {
    this.data = data1;
    this.data._basetype = "pool";
    return this.id = this.data.pool._id;
  };

  Pool.prototype.getData = function() {
    return this.data;
  };

  Pool.prototype.getId = function() {
    return this.id;
  };

  Pool.prototype.isRootPool = function() {
    var ref;
    if (!((ref = this.data) != null ? ref.pool : void 0)) {
      return false;
    } else if (this.data.pool._id_parent) {
      return false;
    } else {
      return true;
    }
  };

  Pool.prototype.managerInstance = function() {
    return PoolManager;
  };

  Pool.prototype.hasChildren = function() {
    return this.data._has_children;
  };

  Pool.prototype.getSortName = function() {
    var i, len, obj, parts, ref;
    parts = [];
    ref = this.data._path;
    for (i = 0, len = ref.length; i < len; i++) {
      obj = ref[i];
      parts.push(ez5.loca.getBestFrontendValue(obj.pool.name).toLocaleUpperCase());
    }
    return parts.join("||");
  };

  Pool.prototype.getChildren = function() {
    assertInstanceOf("manager", PoolManager, this.opts);
    return this.manager.loadList(null, {
      parentId: this.id
    });
  };

  Pool.prototype.newKey = "admin.pool.list.name.new";

  Pool.prototype.getDisplayText = function() {
    return this.get("name", false);
  };

  Pool.prototype.getContent = function() {
    return $span("ez-pool").append(CUI.DOM.htmlToNodes(this.get("name", true)));
  };

  Pool.prototype.isWritable = function() {
    if (!this.getId() || this.data._generated_rights.bag_write) {
      return true;
    } else {
      return false;
    }
  };

  Pool.prototype.isCreateChildAllowed = function() {
    if (this.data._generated_rights.bag_create) {
      return true;
    } else {
      return false;
    }
  };

  Pool.prototype.isDeletable = function() {
    if (!this.getId() || this.data._generated_rights.bag_delete) {
      return true;
    } else {
      return false;
    }
  };

  Pool.prototype.isStandardPool = function() {
    return this.isSystemPool() && !this.isRootPool();
  };

  Pool.prototype.isSystemPool = function() {
    return this.data.pool.is_system_pool;
  };

  Pool.prototype.copyAsNew = function() {
    var acl, i, k, len, new_data, ref, ref1, v;
    new_data = this.getSaveData();
    ref = new_data.pool.name;
    for (k in ref) {
      v = ref[k];
      if (!isEmpty(v)) {
        new_data.pool.name[k] = $$("pool.copy_as_new", {
          name: v
        });
      }
    }
    new_data.pool._id_parent = this.data.pool._id_parent;
    delete new_data.pool._id;
    delete new_data.pool._version;
    if (new_data._acl) {
      ref1 = new_data._acl;
      for (i = 0, len = ref1.length; i < len; i++) {
        acl = ref1[i];
        delete acl._id;
      }
    }
    return new Pool({
      manager: this.manager,
      pool: new_data
    });
  };

  Pool.prototype.canHaveChildren = function() {
    return !this.isRoot();
  };

  Pool.prototype.canBeCopied = function() {
    return !this.isRootPool() && !this.isRoot() && this.getId();
  };

  Pool.prototype.isSelectable = function() {
    return Pool.__super__.isSelectable.call(this) && !this._build_from_path;
  };

  Pool.prototype.canSetParent = function() {
    return !this.data.pool.is_system_pool;
  };

  Pool.prototype.getNewChild = function() {
    assertInstanceOf("manager", PoolManager, this.opts);
    return new Pool({
      manager: this.manager,
      id_parent: this.id
    });
  };

  Pool.prototype.newText = function() {
    var ref, txt;
    txt = ez5.loca.getBestFrontendValue((ref = this.data) != null ? ref.pool.name : void 0);
    if (isEmpty(txt)) {
      return Pool.__super__.newText.call(this);
    } else {
      return txt;
    }
  };

  Pool.prototype.getContact = function() {
    var ref;
    if ((ref = this.data) != null ? ref.pool.contact : void 0) {
      return User.newInstance({
        user: this.data.pool.contact
      });
    } else {
      return null;
    }
  };

  Pool.prototype.getDescription = function() {
    var ref;
    return ez5.loca.getBestFrontendValue((ref = this.data) != null ? ref.pool.description : void 0);
  };

  Pool.prototype.getInfoDiv = function() {
    var arr, contact, p, pool_ids, share_url;
    arr = [];
    if (!isEmpty(this.getDescription())) {
      arr.push(new MultilineLabel({
        "class": "ez5-info-description",
        text: this.getDescription()
      }));
    } else {
      arr.push(new EmptyLabel({
        "class": "ez5-info-description",
        text: $$("pool.info.no_description")
      }));
    }
    pool_ids = (function() {
      var i, len, ref, results;
      ref = this.find();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        p = ref[i];
        results.push(p.getId());
      }
      return results;
    }).call(this);
    share_url = document.location.origin + "/search?p=" + pool_ids.join(",");
    if (window.easydb_server_url) {
      share_url += "#server:" + encodeURI(window.easydb_server_url);
    }
    arr.push(new ButtonHref({
      href: share_url,
      appearance: "link",
      text: share_url,
      target: "_blank"
    }));
    contact = this.getContact();
    if (contact) {
      arr.push(new Label({
        "class": "ez5-info-contact",
        text: $$("pool.info.contact", {
          name: contact.getDisplayText()
        })
      }));
    }
    return new VerticalList({
      pool: "ez5-pool-info-div",
      content: arr
    });
  };

  Pool.prototype.load = function() {
    var dfr, promise;
    dfr = new CUI.Deferred();
    promise = Pool.__super__.load.call(this);
    promise.done((function(_this) {
      return function() {
        var i, j, k, len, len1, objecttype, oid, ref, ref1, ref2, standard_masks, table;
        _this.data.standard_masks = {};
        if ($.isPlainObject(_this.data._standard_masks)) {
          ref = _this.data._standard_masks;
          for (oid in ref) {
            standard_masks = ref[oid];
            if (standard_masks) {
              _this.data.standard_masks[oid] = {
                standard_masks: standard_masks,
                standard_mask_from_objecttype: false
              };
            } else {
              _this.data.standard_masks[oid] = {
                standard_masks: [],
                standard_mask_from_objecttype: true
              };
            }
          }
        }
        ref1 = ez5.schema.CURRENT._objecttypes;
        for (i = 0, len = ref1.length; i < len; i++) {
          table = ref1[i];
          if (!table.pool_link) {
            continue;
          }
          objecttype = new Objecttype(table);
          oid = objecttype.table.id();
          if (_this.data.standard_masks[oid]) {
            continue;
          }
          _this.data.standard_masks[oid] = {
            standard_masks: [],
            standard_mask_from_objecttype: true
          };
        }
        if (!_this.data.pool.watermark) {
          _this.data.pool.watermark = {};
        }
        ref2 = ["_tags", "_transitions", "_acl"];
        for (j = 0, len1 = ref2.length; j < len1; j++) {
          k = ref2[j];
          if (!_this.data[k]) {
            _this.data[k] = [];
          }
        }
        return _this.initTagForm().done(function() {
          return dfr.resolve();
        }).fail(dfr.reject);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  Pool.prototype.initTagForm = function() {
    var updateEditor;
    this.tagForm = new TagFormForManager({
      context: this
    });
    this.tagForm.getTree({
      footer_right: new Checkbox({
        data: this.data,
        name: "_private_tags",
        text: $$("admin.pool.private_tags"),
        onDataChanged: (function(_this) {
          return function() {
            CUI.debug("private tags set to", _this.data._private_tags);
            if (!_this.data._private_tags) {
              _this.data._tags.splice(0);
            }
            return updateEditor();
          };
        })(this)
      }).start()
    });
    updateEditor = (function(_this) {
      return function() {
        var prom;
        CUI.debug("Pool.initTagForm.updateEditor:", _this.getDisplayText());
        if (_this.data._private_tags) {
          _this.tagForm.setInactive(false);
        } else {
          _this.tagForm.setInactive(true);
        }
        if (!_this.father.isRoot()) {
          prom = CUI.chainedCall(function() {
            return SystemListManagerItem.prototype.load.call(_this.father);
          }, function() {
            return _this.tagForm.load();
          });
        } else {
          prom = _this.tagForm.load();
        }
        prom.done(function() {
          return CUI.debug("Pool.initTagForm.updateEditor DONE:", _this.getDisplayText());
        });
        return prom;
      };
    })(this);
    return updateEditor();
  };

  Pool.prototype.initTagData = function(tag) {
    var enabled, i, is_default, len, ref, sticky, tag_data, td;
    enabled = void 0;
    td = tag.getData();
    if (this.father.isRoot()) {
      sticky = td.sticky;
      enabled = td.enabled;
      is_default = td.is_default;
    } else {
      ref = this.father.data._compiled_tags;
      for (i = 0, len = ref.length; i < len; i++) {
        tag_data = ref[i];
        if (tag_data._id === tag.getId()) {
          enabled = tag_data.enabled;
          sticky = tag_data.sticky;
          is_default = tag_data.is_default;
          break;
        }
      }
      assert(!isUndef(enabled), "Pool.loadTag", "tag not found in available tags", {
        tagId: tag.getId(),
        availableTags: dump(this.father.data._available_tags)
      });
    }
    this.setTagDefault(tag, enabled, sticky, is_default);
    return this;
  };

  Pool.prototype.setTagDefault = function(tag, enabled, sticky, is_default) {
    var i, len, ref, tag_data, td;
    td = tag.getData();
    if (!this.data._private_tags || sticky) {
      tag.tagDisabled = true;
      td.sticky = sticky;
      td.enabled = enabled;
      td.is_default = is_default;
    } else {
      td.enabled = false;
      td.sticky = false;
      td.is_default = false;
      ref = this.data._tags;
      for (i = 0, len = ref.length; i < len; i++) {
        tag_data = ref[i];
        if (tag.getId() === tag_data._id) {
          td.enabled = tag_data.enabled;
          td.sticky = tag_data.sticky;
          td.is_default = tag_data.is_default;
          break;
        }
      }
    }
  };

  Pool.prototype.renderAclTab = function() {
    this.aclManager = new AclManager({
      data: this.data._acl,
      context: this,
      right: true,
      sticky: true,
      active: true,
      footer_right: new Checkbox({
        name: "_private_acl",
        text: $$("admin.pool.private_acl"),
        data: this.data
      }).start(),
      tagfilter: true,
      onUpdate: this.update,
      tagForm: this.tagForm
    });
    return this.aclManager.getTree();
  };

  Pool.prototype.renderTransitionsTab = function(has_objecttypes) {
    var tf, updateEditor;
    if (has_objecttypes == null) {
      has_objecttypes = true;
    }
    updateEditor = (function(_this) {
      return function() {
        if (_this.data._private_transitions) {
          return _this.transitionForm.setInactive(false);
        } else {
          return _this.transitionForm.setInactive(true);
        }
      };
    })(this);
    this.transitionForm = new TransitionFormForManager({
      footer_right: new Checkbox({
        name: "_private_transitions",
        text: $$("admin.pool.private_transitions"),
        onDataChanged: updateEditor,
        data: this.data
      }).start(),
      objecttypes: has_objecttypes,
      tagForm: this.tagForm
    });
    tf = this.transitionForm.renderEditor();
    this.transitionForm.loadTransitions(this.data._transitions);
    updateEditor();
    return tf;
  };

  Pool.prototype.getSaveData = function() {
    var dissolve_int, info, oid, pool, ref, ref1, ref2, save_data;
    pool = copyObject(this.data[this.data._basetype], true);
    save_data = {
      _basetype: "pool",
      pool: {
        _id: this.id,
        _id_parent: pool._id_parent,
        name: pool.name,
        shortname: pool.shortname,
        contact: pool.contact,
        description: pool.description,
        mapping_dc_export: getIntOrString(pool.mapping_dc_export),
        mapping_image_export: getIntOrString(pool.mapping_image_export),
        mapping_image_import: getIntOrString(pool.mapping_image_import)
      },
      _private_tags: !!this.data._private_tags,
      _private_transitions: !!this.data._private_transitions,
      _private_acl: !!this.data._private_acl,
      _standard_masks: {}
    };
    if (isEmpty(ez5.loca.getBestFrontendValue(pool.name))) {
      throw new InvalidSaveDataException();
    }
    if (!this.canSetParent()) {
      delete save_data.pool._id_parent;
    }
    if ((ref = pool.watermark) != null ? (ref1 = ref.image) != null ? ref1._id : void 0 : void 0) {
      save_data.pool.watermark = {
        image: pool.watermark.image,
        gravity: pool.watermark.gravity,
        size: pool.watermark.size,
        tile: pool.watermark.tile
      };
      dissolve_int = parseInt(pool.watermark.dissolve);
      if (dissolve_int >= 0) {
        save_data.pool.watermark.dissolve = dissolve_int;
      }
    } else {
      save_data.pool.watermark = null;
    }
    ref2 = this.data.standard_masks;
    for (oid in ref2) {
      info = ref2[oid];
      save_data._standard_masks[oid] = ObjecttypeListViewItem.prototype.getSaveDataStandardMasks(info);
    }
    if (save_data._private_tags) {
      save_data._tags = this.tagForm.getSaveData();
    }
    save_data._transitions = this.transitionForm.getSaveData();
    save_data._acl = this.aclManager.getSaveData();
    return save_data;
  };

  Pool.prototype.getApi = function() {
    return "pool";
  };

  Pool.prototype.general_fields = function() {
    var contactField, opts, ref;
    contactField = (new AclWhoManager({
      name: "contact",
      who_filter: ["user"]
    })).getWhoSelector(this.data.pool);
    opts = [
      {
        text: $$("admin.pool.asset_profile.none"),
        value: "none"
      }, {
        text: $$("admin.pool.asset_profile.objecttype"),
        value: "objecttype"
      }
    ];
    if (!((ref = this.father) != null ? ref.isRoot() : void 0)) {
      opts.push({
        text: $$("admin.pool.asset_profile.parent", {
          pool: this.father.getDisplayText()
        }),
        value: "parent"
      });
    }
    return [
      {
        type: MultiInput,
        form: {
          label: $$("admin.pool.name")
        },
        name: "name",
        control: ez5.loca.getLanguageControlAdmin()
      }, {
        type: DataFieldProxy,
        form: {
          label: $$("admin.pool.contact")
        },
        element: contactField
      }, {
        type: MultiInput,
        textarea: true,
        form: {
          label: $$("admin.pool.description")
        },
        name: "description",
        control: ez5.loca.getLanguageControlAdmin()
      }, {
        type: Input,
        form: {
          label: $$("pool.form.shortname")
        },
        name: "shortname"
      }, {
        type: Select,
        form: {
          label: $$("admin.pool.profile_for_dc_export")
        },
        name: "mapping_dc_export",
        options: ez5.metadata.getMappingOpts(opts, {
          dc_export: true
        })
      }, {
        type: Select,
        form: {
          label: $$("admin.pool.profile_for_images_export")
        },
        name: "mapping_image_export",
        options: ez5.metadata.getMappingOpts(opts, {
          exiftool_export: true
        })
      }, {
        type: Select,
        form: {
          label: $$("admin.pool.profile_for_images_import")
        },
        name: "mapping_image_import",
        options: ez5.metadata.getMappingOpts(opts, {
          exiftool_import: true
        })
      }
    ];
  };

  Pool.prototype.watermark_fields = function() {
    var eas_field, g, gravity_opts, i, len, ref;
    gravity_opts = [];
    ref = ["n", "e", "s", "w", "ne", "nw", "se", "sw", "c"];
    for (i = 0, len = ref.length; i < len; i++) {
      g = ref[i];
      gravity_opts.push({
        value: g,
        text: $$("admin.pool.watermark.gravity." + g)
      });
    }
    eas_field = new EASField({
      name: "image",
      data_changed: (function(_this) {
        return function(data, field) {
          return CUI.debug("data_changed on this field", field, data);
        };
      })(this)
    });
    return [
      {
        form: {
          label: $$("admin.pool.watermark.picture")
        },
        type: DataFieldProxy,
        element: eas_field.renderEditorInput(this.data.pool.watermark)
      }, {
        type: Input,
        placeholder: "0-100",
        form: {
          label: $$("admin.pool.watermark.dissolve")
        },
        name: "dissolve"
      }, {
        type: Select,
        options: gravity_opts,
        empty_text: "0-100",
        form: {
          label: $$("admin.pool.watermark.gravity")
        },
        name: "gravity"
      }, {
        type: Input,
        placeholder: "<width>x<height>",
        form: {
          label: $$("admin.pool.watermark.size")
        },
        name: "size"
      }, {
        type: Checkbox,
        form: {
          label: $$("admin.pool.watermark.tile")
        },
        name: "tile"
      }
    ];
  };

  Pool.prototype.standard_mask_fields = function(opts) {
    var i, j, len, len1, mask, mask_fields, options, ref, ref1, table;
    if (opts == null) {
      opts = {};
    }
    mask_fields = [];
    ref = ez5.schema.CURRENT._objecttypes;
    for (i = 0, len = ref.length; i < len; i++) {
      table = ref[i];
      if (opts.forObjecttype) {
        if (opts.forObjecttype !== true && opts.forObjecttype.table.id() !== table.table_id) {
          continue;
        }
      } else if (!table.pool_link) {
        continue;
      }
      if (!opts.forObjecttype) {
        options = [
          {
            value: "standard"
          }
        ];
        if (opts.forPoolAcl) {
          options[0].text = "Standard vom Pool";
        } else {
          if (this.father.isRoot()) {
            options[0].text = "Standard vom Objekttyp";
          } else {
            options[0].text = "Standard vom Vater-Pool";
          }
        }
      } else {
        options = [
          {
            value: "standard",
            text: "Standard vom Objekttyp"
          }
        ];
      }
      ref1 = ez5.mask.CURRENT._masks_by_table_id[table.table_id];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        mask = ref1[j];
        options.push({
          text: mask._name_localized,
          value: mask.mask_id
        });
      }
      mask_fields.push({
        type: Options,
        horizontal: 3,
        form: {
          label: table._name_localized
        },
        name: "objecttype_" + table.table_id,
        options: options
      });
    }
    return mask_fields;
  };

  Pool.prototype.standard_mask_order_fields = function() {
    var fields, i, label_from_datamodel, len, objecttype, oid, ref, table;
    fields = [];
    ref = ez5.schema.CURRENT._objecttypes;
    for (i = 0, len = ref.length; i < len; i++) {
      table = ref[i];
      if (!table.pool_link) {
        continue;
      }
      objecttype = new Objecttype(table);
      oid = objecttype.table.id();
      if (this.father.isRoot()) {
        label_from_datamodel = "admin.standard_mask.from_datamodel.pool_root";
      } else {
        label_from_datamodel = "admin.standard_mask.from_datamodel.pool_parent";
      }
      fields.push(ObjecttypeListViewItem.prototype.getStandardMaskFieldsForm.call(this, objecttype, this.data.standard_masks[oid], $$(label_from_datamodel), objecttype.nameLocalized()));
    }
    CUI.debug("Pool.standard_mask_order_fields", fields);
    return fields;
  };

  Pool.prototype.getTabs = function() {
    var tabs;
    tabs = [
      {
        name: "general",
        text: $$("admin.pool.tab.general"),
        content: (function(_this) {
          return function() {
            return new Form({
              onDataChanged: function(data, field) {
                return _this.update();
              },
              fields: _this.general_fields(),
              data: _this.data.pool
            }).start();
          };
        })(this)
      }, {
        name: "masks",
        text: $$("admin.pool.tab.watermark"),
        content: (function(_this) {
          return function() {
            return new Form({
              fields: _this.watermark_fields(),
              data: _this.data.pool.watermark
            }).start();
          };
        })(this)
      }, {
        name: "masks",
        text: $$("admin.pool.tab.masks"),
        content: (function(_this) {
          return function() {
            return new Form({
              fields: _this.standard_mask_order_fields(),
              data: _this.data.standard_masks
            }).start();
          };
        })(this)
      }, {
        name: "tags",
        text: $$("admin.pool.tab.tags"),
        content: (function(_this) {
          return function() {
            return _this.tagForm.tree;
          };
        })(this)
      }, {
        name: "transitions",
        text: $$("admin.pool.tab.transitions"),
        content: (function(_this) {
          return function() {
            return _this.renderTransitionsTab();
          };
        })(this)
      }
    ];
    if (!this.getId() || this.data._generated_rights.bag_acl) {
      tabs.push({
        name: "acl",
        text: $$("admin.pool.tab.system_rights"),
        content: (function(_this) {
          return function() {
            return _this.renderAclTab();
          };
        })(this)
      });
    }
    return tabs;
  };

  Pool.renderPoolPath = function(pool_path) {
    var i, idx, len, p, path_els;
    if (!pool_path) {
      return;
    }
    path_els = [];
    for (idx = i = 0, len = pool_path.length; i < len; idx = ++i) {
      p = pool_path[idx];
      if (idx === 0) {
        continue;
      }
      path_els.push(ez5.loca.getBestFrontendValue(p.pool.name));
    }
    return ResultObject.renderPath(path_els).DOM;
  };

  return Pool;

})(SystemListManagerHierarchyItem);

PoolForPoolManagerPoolField = (function(superClass) {
  extend(PoolForPoolManagerPoolField, superClass);

  function PoolForPoolManagerPoolField() {
    return PoolForPoolManagerPoolField.__super__.constructor.apply(this, arguments);
  }

  PoolForPoolManagerPoolField.prototype.select = function(ev) {
    return ListViewTreeNode.prototype.select.call(this, ev);
  };

  return PoolForPoolManagerPoolField;

})(Pool);
// Generated by CoffeeScript 1.10.0
var TagFilter,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

TagFilter = (function(superClass) {
  extend(TagFilter, superClass);

  function TagFilter() {
    this.findTagFormTag = bind(this.findTagFormTag, this);
    return TagFilter.__super__.constructor.apply(this, arguments);
  }

  TagFilter.prototype.initOpts = function() {
    TagFilter.__super__.initOpts.call(this);
    return this.addOpts({
      tagForm: {
        check: TagFormSimple
      },
      name: {
        mandatory: true,
        check: String
      },
      data: {
        check: "PlainObject"
      },
      conditionTypes: {
        mandatory: true,
        "default": ["any", "all", "not"],
        check: function(v) {
          return (v != null ? v.length : void 0) > 0;
        }
      }
    });
  };

  TagFilter.prototype.readOpts = function() {
    TagFilter.__super__.readOpts.call(this);
    if (this._data) {
      return this.initData(this._data);
    }
  };

  TagFilter.prototype.initData = function(data) {
    if (!data[this._name]) {
      data[this._name] = {};
    }
    return assert(CUI.isPlainObject(data[this._name]), "TagFilter.initData", "data[" + this._name + "] needs to be PlainObject", {
      data: data
    });
  };

  TagFilter.prototype.getDataFieldProxy = function(_opts) {
    var opts;
    if (_opts == null) {
      _opts = {};
    }
    opts = CUI.Element.readOpts(_opts, "TagFilter.getDataFieldProxy", {
      data: {
        "default": this._data,
        mandatory: true,
        check: "PlainObject"
      },
      onDataChanged: {
        check: Function
      }
    });
    this.initData(opts.data);
    return new DataFieldProxy({
      onDataChanged: (function(_this) {
        return function(data, df) {
          return typeof opts.onDataChanged === "function" ? opts.onDataChanged(data, df) : void 0;
        };
      })(this),
      element: (function(_this) {
        return function() {
          return _this._tagForm.renderAsFilterEditor(opts.data[_this._name], _this._conditionTypes);
        };
      })(this)
    });
  };

  TagFilter.prototype.getField = function(_opts) {
    var data, field, opts;
    if (_opts == null) {
      _opts = {};
    }
    opts = CUI.Element.readOpts(_opts, "TagFilter.getField", {
      onDataChanged: {
        check: Function
      },
      form: {}
    });
    data = null;
    if (this._data) {
      data = this._data;
    }
    return field = {
      type: FormPopover,
      undo_and_changed_support: false,
      form: opts.form,
      onDataInit: (function(_this) {
        return function(df, _data) {
          if (!_this._data) {
            data = _data;
            _this.initData(data);
          }
        };
      })(this),
      button: {
        text: $$("tag.filter.button")
      },
      onDataChanged: (function(_this) {
        return function(data, df) {
          return typeof opts.onDataChanged === "function" ? opts.onDataChanged(data, df) : void 0;
        };
      })(this),
      popover: {
        pane: {
          header_left: this._tagForm.renderFilterEditorTitle()
        }
      },
      fields: (function(_this) {
        return function(df) {
          var _data;
          if (!_this._data) {
            _data = df.getData();
          } else {
            _data = void 0;
          }
          return [
            _this.getDataFieldProxy({
              data: _data
            })
          ];
        };
      })(this),
      renderDisplayContent: (function(_this) {
        return function(df) {
          var c, condition, conds, content, div, i, j, len, len1, ref, tag, tag_id, tag_ids;
          content = [];
          conds = {};
          ref = data[_this._name];
          for (condition in ref) {
            tag_ids = ref[condition];
            for (i = 0, len = tag_ids.length; i < len; i++) {
              tag_id = tag_ids[i];
              if (!conds[condition]) {
                conds[condition] = $div("ez5-tag-filter-condition ez5-tag-filter-condition-" + condition);
                content.push(conds[condition]);
                conds[condition].append(new LocaLabel({
                  "class": "ez5-tag-filter-condition-block",
                  loca_key: "tag.filter.condition.block." + condition,
                  multiline: CUI.__ng__
                }).DOM);
              }
              tag = _this._tagForm.findTagByAnyId(tag_id);
              conds[condition].append(tag.getLabel().DOM);
            }
          }
          div = $div("ez5-tag-filter-conditions");
          if (content.length) {
            for (j = 0, len1 = content.length; j < len1; j++) {
              c = content[j];
              div.append(c);
            }
          } else {
            div.append(new EmptyLabel({
              text: $$("tag.filter.no_filter_defined")
            }).DOM);
          }
          return div;
        };
      })(this)
    };
  };

  TagFilter.prototype.findTagFormTag = function(tagFormTag) {
    var c, i, len, ref;
    ref = this.conditions;
    for (i = 0, len = ref.length; i < len; i++) {
      c = ref[i];
      if (c.findTagFormTag(tagFormTag)) {
        return tagFormTag;
      }
    }
    return null;
  };

  TagFilter.prototype.getData = function() {
    return this._data[this._name];
  };

  TagFilter.prototype.getSaveData = function() {
    var sd;
    sd = this.getData();
    if (CUI.isEmptyObject(sd)) {
      return null;
    } else {
      return sd;
    }
  };

  TagFilter.matchesTags = function(tagfilter, tags) {
    var tagfilter_ok;
    if (tagfilter) {
      tagfilter_ok = false;
      (function() {
        var all, any, i, j, k, len, len1, len2, ref, ref1, ref2, ref3, tag, tag_ids;
        tag_ids = (function() {
          var i, len, ref, results;
          ref = tags || [];
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            tag = ref[i];
            results.push(tag._id);
          }
          return results;
        })();
        if (((ref = tagfilter.any) != null ? ref.length : void 0) > 0) {
          tagfilter_ok = false;
          ref1 = tagfilter.any;
          for (i = 0, len = ref1.length; i < len; i++) {
            any = ref1[i];
            if (indexOf.call(tag_ids, any) >= 0) {
              tagfilter_ok = true;
              break;
            }
          }
          if (!tagfilter_ok) {
            return;
          }
        }
        if (tagfilter.all) {
          tagfilter_ok = true;
          ref2 = tagfilter.all;
          for (j = 0, len1 = ref2.length; j < len1; j++) {
            all = ref2[j];
            if (indexOf.call(tag_ids, all) < 0) {
              tagfilter_ok = false;
              break;
            }
          }
          if (!tagfilter_ok) {
            return;
          }
        }
        if (tagfilter.not) {
          tagfilter_ok = true;
          ref3 = tagfilter.not;
          for (k = 0, len2 = ref3.length; k < len2; k++) {
            all = ref3[k];
            if (indexOf.call(tag_ids, all) >= 0) {
              tagfilter_ok = false;
              break;
            }
          }
        }
        if (!(tagfilter.any || tagfilter.all || tagfilter.not)) {
          tagfilter_ok = true;
        }
      })();
    } else {
      tagfilter_ok = true;
    }
    return tagfilter_ok;
  };

  return TagFilter;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var ObjecttypeListViewItem,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ObjecttypeListViewItem = (function(superClass) {
  extend(ObjecttypeListViewItem, superClass);

  function ObjecttypeListViewItem() {
    this.getTabs = bind(this.getTabs, this);
    this.getSaveData = bind(this.getSaveData, this);
    return ObjecttypeListViewItem.__super__.constructor.apply(this, arguments);
  }

  ObjecttypeListViewItem.prototype.initOpts = function() {
    ObjecttypeListViewItem.__super__.initOpts.call(this);
    return this.addOpts({
      objecttype: {
        mandatory: true,
        check: Objecttype
      }
    });
  };

  ObjecttypeListViewItem.prototype.readOpts = function() {
    ObjecttypeListViewItem.__super__.readOpts.call(this);
    this.objecttype = this._objecttype;
    return this.id = this.objecttype.table.id();
  };

  ObjecttypeListViewItem.prototype.managerInstance = function() {
    return ObjecttypeAdminManager;
  };

  ObjecttypeListViewItem.prototype.getApi = function() {
    return 'objecttype';
  };

  ObjecttypeListViewItem.prototype.getObjecttype = function() {
    return this.objecttype;
  };

  ObjecttypeListViewItem.prototype.remove = function() {
    return this.manager.setStatus();
  };

  ObjecttypeListViewItem.prototype.load = function() {
    var dfr;
    dfr = new CUI.Deferred();
    ObjecttypeListViewItem.__super__.load.call(this).done((function(_this) {
      return function() {
        var i, j, k, len1, len2, promises, ref, ref1;
        ref = ["_tags", "_transitions", "_acl", '_columnfilters'];
        for (i = 0, len1 = ref.length; i < len1; i++) {
          k = ref[i];
          if (!_this.data[k]) {
            _this.data[k] = [];
          }
        }
        ref1 = ['_maskfilters'];
        for (j = 0, len2 = ref1.length; j < len2; j++) {
          k = ref1[j];
          if (!_this.data[k]) {
            _this.data[k] = {};
          }
        }
        _this.data.objecttype.standard_mask_from_objecttype = !_this.data._standard_masks;
        _this.data.objecttype.standard_masks = _this.data._standard_masks || [];
        _this.data._export_asset_filenames = _this.data._export_asset_filenames || {};
        promises = [];
        _this.tagForm = new TagFormForManager({
          context: _this
        });
        _this.tagFormMaskfilter = new TagForm({
          context: _this
        });
        promises.push(_this.tagForm.load());
        promises.push(_this.tagFormMaskfilter.load());
        return CUI.when(promises).done(dfr.resolve).fail(dfr.reject);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  ObjecttypeListViewItem.prototype.save = function(ev) {
    return ObjecttypeListViewItem.__super__.save.call(this, ev).done((function(_this) {
      return function() {
        return ez5.objecttypeRights.load();
      };
    })(this));
  };

  ObjecttypeListViewItem.prototype.isWritable = function() {
    return true;
  };

  ObjecttypeListViewItem.prototype.getDisplayName = function() {
    return this.objecttype.nameLocalized();
  };

  ObjecttypeListViewItem.prototype.getDescription = function() {
    var ref;
    return ez5.loca.getBestFrontendValue((ref = this.data) != null ? ref.objecttype.description : void 0);
  };

  ObjecttypeListViewItem.prototype.getContact = function() {
    if (this.data.objecttype.contact) {
      return User.newInstance({
        user: this.data.objecttype.contact
      });
    } else {
      return null;
    }
  };

  ObjecttypeListViewItem.prototype.renderContent = function() {
    return [
      new Label({
        "class": "ez5-objecttype-name",
        text: this.getDisplayName()
      }), new Label({
        "class": "ez5-objecttype-display-types",
        text: this.objecttype.getDisplayType(),
        size: "mini"
      })
    ];
  };

  ObjecttypeListViewItem.prototype.initTagData = function(tag) {
    var enabled, sticky, td;
    td = tag.getData();
    sticky = td.sticky;
    enabled = td.enabled;
    return Pool.prototype.setTagDefault.call(this, tag, enabled, sticky);
  };

  ObjecttypeListViewItem.prototype.renderTagsTab = function() {
    var tree, updateEditor;
    if (!this.objecttype.hasTags()) {
      return;
    }
    if (this.hasOwnTags()) {
      tree = this.tagForm.getTree({
        footer_right: new Checkbox({
          name: "_private_tags",
          text: $$("admin.objecttype.private_tags"),
          data: this.data,
          onDataChanged: (function(_this) {
            return function() {
              if (!_this.data._private_tags) {
                _this.data._tags.splice(0);
              }
              return updateEditor();
            };
          })(this)
        }).start()
      });
      updateEditor = (function(_this) {
        return function() {
          if (_this.data._private_tags) {
            _this.tagForm.setInactive(false);
          } else {
            _this.tagForm.setInactive(true);
          }
          return _this.tagForm.load(_this);
        };
      })(this);
      updateEditor();
      return tree;
    } else {
      return new EmptyLabel({
        centered: true,
        text: $$("admin.objecttypemanager.tags.not.available.hint")
      });
    }
  };

  ObjecttypeListViewItem.prototype.renderTransitionsTab = function() {
    if (!this.hasOwnTags()) {
      return;
    }
    return Pool.prototype.renderTransitionsTab.call(this, false);
  };

  ObjecttypeListViewItem.prototype.renderColumnRightsTab = function() {
    var colfilter, colfilters, cols, div, fields, i, len1, minusButton, plusButton, ref, set_status, trigger_changed;
    trigger_changed = (function(_this) {
      return function() {
        return Events.trigger({
          type: "data-changed",
          node: _this.columns_right_tree
        });
      };
    })(this);
    set_status = (function(_this) {
      return function() {
        if (_this.columns_right_tree.getSelectedNode()) {
          return minusButton.enable();
        } else {
          return minusButton.disable();
        }
      };
    })(this);
    minusButton = new LocaButton({
      icon: "minus",
      loca_key: "objecttype.list.view.item.column_rights.button.minus",
      group: "plus-minus",
      onClick: (function(_this) {
        return function() {
          var ref;
          if ((ref = _this.columns_right_tree.getSelectedNode()) != null) {
            ref.remove();
          }
          trigger_changed();
          return set_status();
        };
      })(this)
    });
    plusButton = new LocaButton({
      icon: "plus",
      loca_key: "objecttype.list.view.item.column_rights.button.plus",
      group: "plus-minus",
      onClick: (function(_this) {
        return function() {
          var cr, new_data;
          new_data = {};
          cr = new ColumnRightItem({
            tagForm: _this.tagForm,
            data: new_data,
            objecttype: _this._objecttype
          });
          _this.columns_right_tree.addNode(cr);
          trigger_changed();
          cr.select();
          return set_status();
        };
      })(this)
    });
    fields = [
      {
        th_label: "objecttype.list.view.item.colum_rights.tab.title.name"
      }, {
        th_label: "objecttype.list.view.item.colum_rights.tab.title.columns"
      }
    ];
    cols = ['auto', 'maximize'];
    if (this._objecttype.hasTags()) {
      fields.push({
        th_label: "objecttype.list.view.item.colum_rights.tab.title.tagfilter"
      });
      cols.push('auto');
    }
    fields.push({
      th_label: "objecttype.list.view.item.colum_rights.tab.title.who"
    });
    cols.push('auto');
    this.columns_right_tree = new ListViewEditTree({
      "class": 'cui-lv--has-datafields',
      cols: cols,
      fields: fields,
      rowMove: false,
      no_hierarchy: true,
      selectableRows: true,
      onSelect: set_status,
      onDeselect: set_status,
      footer_left: [plusButton, minusButton]
    });
    div = this.columns_right_tree.render();
    colfilters = [];
    ref = this.data._columnfilters || [];
    for (i = 0, len1 = ref.length; i < len1; i++) {
      colfilter = ref[i];
      colfilters.push(new ColumnRightItem({
        tagForm: this.tagForm,
        data: colfilter,
        objecttype: this._objecttype
      }));
    }
    this.columns_right_tree.load_data(colfilters);
    set_status();
    return div;
  };

  ObjecttypeListViewItem.prototype.renderAclTab = function() {
    this.aclManager = null;
    return new EmptyLabel({
      centered: true,
      text: $$("admin.objecttypemanager.acl_manager.not.available.hint")
    });
  };

  ObjecttypeListViewItem.prototype.renderMaskfilterTab = function() {
    var div, i, len1, mask, ref;
    this.maskfilters = [];
    if (this.getMasks().length < 2) {
      return;
    }
    this.maskTree = new ListViewEditTree({
      "class": 'cui-lv--has-datafields',
      no_hierarchy: true,
      fields: [
        {
          th_label: "admin.easydb.objecttype.mask.name"
        }, {
          th_label: "admin.easydb.objecttype.mask.tagfilter"
        }
      ],
      rowMove: false,
      selectableRows: false
    });
    ref = this.getMasks();
    for (i = 0, len1 = ref.length; i < len1; i++) {
      mask = ref[i];
      this.maskfilters.push(new ObjecttypeAdminManagerMaskItem({
        mask: mask,
        data: this.data._maskfilters,
        tagForm: this.tagFormMaskfilter,
        objecttypeListViewItem: this
      }));
    }
    div = this.maskTree.render();
    this.maskTree.load_data(this.maskfilters);
    return div;
  };

  ObjecttypeListViewItem.prototype.generalFields = function() {
    var base_help, contactField, eas_field, eas_fields, f, fields, fn, form_fields, i, j, l, len1, len2, len3, m, opts, ref, ref1, top_fields;
    contactField = (new AclWhoManager({
      name: "contact",
      who_filter: ["user"]
    })).getWhoSelector(this.data.objecttype);
    opts = [
      {
        text: $$("admin.objecttype.asset_profile.none"),
        value: "none"
      }
    ];
    top_fields = [
      {
        type: DataFieldProxy,
        form: {
          label: $$("admin.objecttype.contact")
        },
        element: contactField
      }, {
        type: MultiInput,
        textarea: true,
        form: {
          label: $$("admin.objecttype.description")
        },
        name: "description",
        control: ez5.loca.getLanguageControlAdmin()
      }
    ];
    top_fields.push(this.getStandardMaskFieldsForm(this.objecttype, this.data.objecttype, $$("admin.standard_mask.from_datamodel"), $$("admin.standard_mask")));
    top_fields.push({
      type: Select,
      form: {
        label: $$("admin.objecttype.profile_for_dc_export")
      },
      data: this.data.objecttype,
      name: "mapping_dc_export",
      options: ez5.metadata.getMappingOpts(opts, {
        dc_export: true
      })
    });
    this.objecttype.removeAllMasks();
    ref = this.getMasks();
    for (i = 0, len1 = ref.length; i < len1; i++) {
      m = ref[i];
      this.objecttype.addMask(m);
    }
    fields = [
      {
        type: Form,
        form: {
          label: $$("objecttype.list.view.tag.general.title")
        },
        fields: top_fields
      }
    ];
    eas_fields = this.objecttype.getEASFields();
    if (eas_fields.length > 0) {
      base_help = "";
      ref1 = this.objecttype.getFields("all", false, function(f) {
        if (!(f instanceof Field)) {
          return;
        }
        if (f instanceof NestedTable) {
          return;
        }
        if (!f.id()) {
          return;
        }
        return true;
      });
      for (j = 0, len2 = ref1.length; j < len2; j++) {
        f = ref1[j];
        if (f instanceof LinkedObject) {
          base_help += "%" + f.fullName() + "._standard.1.text%\n";
        } else {
          base_help += "%" + f.fullName() + "%\n";
        }
      }
      base_help += "%_export.name%\n";
      base_help += "%_system.easydb.name%\n";
      base_help += "%_global_object_id%\n";
      base_help += "%_system_object_id%\n";
      base_help += "%_asset.original_filename%\n";
      base_help += "%_asset.version%\n";
      base_help += "%_asset.class%\n";
      base_help += "%_asset.extension%\n";
      base_help += "%_asset.technical_metadata.width%\n";
      base_help += "%_asset.technical_metadata.height%\n";
      base_help += "%_asset.technical_metadata.max_dimension%\n";
      top_fields.push({
        type: Select,
        form: {
          label: $$("admin.objecttype.profile_for_images_export")
        },
        data: this.data.objecttype,
        name: "mapping_image_export",
        options: ez5.metadata.getMappingOpts(opts, {
          exiftool_export: true
        })
      });
      top_fields.push({
        type: Select,
        form: {
          label: $$("admin.objecttype.profile_for_images_import")
        },
        data: this.data.objecttype,
        name: "mapping_image_import",
        options: ez5.metadata.getMappingOpts(opts, {
          exiftool_import: true
        })
      });
      form_fields = [];
      for (l = 0, len3 = eas_fields.length; l < len3; l++) {
        eas_field = eas_fields[l];
        fn = eas_field.fullName();
        form_fields.push({
          form: {
            label: eas_field.fullNameLocalized()
          },
          undo_support: false,
          type: MultiInput,
          name: fn,
          control: ez5.loca.getLanguageControlAdmin(),
          textarea: true
        });
      }
      form_fields.push({
        type: FormButton,
        text: $$("objecttype.list.view.item.export_asset_filenames.help"),
        form: {
          use_field_as_label: !CUI.__ng__
        },
        onClick: (function(_this) {
          return function(ev, btn) {
            return new CUI.Popover({
              placement: 'n',
              element: btn.getElementForLayer(),
              "class": "ez5-objecttype-list-view-item-help",
              pane: {
                padded: true,
                content: function() {
                  return new Label({
                    multiline: true,
                    text: base_help
                  });
                }
              }
            }).show();
          };
        })(this)
      });
      fields.push({
        type: Form,
        data: this.data,
        name: "_export_asset_filenames",
        undo_support: false,
        form: {
          label: $$("objecttype.list.view.item.export_asset_filenames")
        },
        fields: form_fields
      });
    }
    return fields;
  };

  ObjecttypeListViewItem.prototype.getStandardMaskFieldsForm = function(objecttype, data, text_for_checkbox, label_for_checkbox) {
    var fields, hint, i, idx, j, len1, len2, m, mask, masks;
    assert(CUI.isPlainObject(data), (getObjectClass(this)) + ".getStandardMaskFields", "data needs to be PlainObject", {
      objecttype: objecttype,
      data: data
    });
    assert(CUI.isArray(data.standard_masks), (getObjectClass(this)) + ".getStandardMaskFields", "data.standard_masks needs to be Array", {
      objecttype: objecttype,
      data: data
    });
    assert(isBoolean(data.standard_mask_from_objecttype), (getObjectClass(this)) + ".getStandardMaskFields", "data.standard_mask_from_objecttype.set needs to be Boolean", {
      objecttype: objecttype,
      data: data
    });
    fields = [
      {
        type: Checkbox,
        text: text_for_checkbox,
        data: data,
        name: "standard_mask_from_objecttype",
        onDataChanged: function(data, field) {
          if (data.standard_mask_from_objecttype) {
            return field.getOtherField("standard_masks_internal").disable();
          } else {
            return field.getOtherField("standard_masks_internal").enable();
          }
        }
      }, {
        type: DataTable,
        name: "standard_masks_internal",
        data: data,
        new_rows: "none",
        no_header: true,
        rowMove: true,
        onNodeAdd: (function(_this) {
          return function(node) {
            if (node.getData().divider) {
              node.setClass("ez5-objecttype-list-view-item-mask-select-divider");
              node.setSelectable(false);
              node.isMovable = function() {
                return false;
              };
            }
          };
        })(this),
        disabled: data.standard_mask_from_objecttype,
        fields: [
          {
            type: Output,
            name: "name"
          }
        ]
      }
    ];
    masks = ObjecttypeListViewItem.prototype.getMasks.call(this, objecttype);
    for (idx = i = 0, len1 = masks.length; i < len1; idx = ++i) {
      m = masks[idx];
      m.__idx = idx;
    }
    masks.sort(function(a, b) {
      var a_id, a_idx, b_id, b_idx, len;
      a_id = a.id();
      b_id = b.id();
      len = data.standard_masks.length;
      a_idx = data.standard_masks.indexOf(a_id);
      b_idx = data.standard_masks.indexOf(b_id);
      if (a_idx > -1) {
        a_id = a_idx - len;
      } else {
        a_id = a.__idx;
      }
      if (b_idx > -1) {
        b_id = b_idx - len;
      } else {
        b_id = b.__idx;
      }
      return compareIndex(a_id, b_id);
    });
    data.standard_masks_internal = [];
    for (idx = j = 0, len2 = masks.length; j < len2; idx = ++j) {
      mask = masks[idx];
      data.standard_masks_internal.push({
        name: mask.nameLocalized() + " (" + mask.id() + ")",
        mask_id: mask.id()
      });
      if (idx + 1 === data.standard_masks.length && !data.standard_mask_from_objecttype) {
        data.standard_masks_internal.push({
          divider: true
        });
      }
    }
    if (data.standard_mask_from_objecttype) {
      data.standard_masks_internal.push({
        divider: true
      });
    }
    hint = CUI.DOM.element("DIV", {
      "class": "cui-form-hint"
    });
    hint.textContent = $$("objecttype.list.view.item.mask_select.hint");
    return new Form({
      form: {
        label: label_for_checkbox
      },
      fields: fields,
      bottom: hint
    });
  };

  ObjecttypeListViewItem.prototype.getMasks = function(objecttype) {
    var i, len1, m, masks, ref;
    if (objecttype == null) {
      objecttype = this.objecttype;
    }
    masks = [];
    ref = ez5.mask.CURRENT._masks_by_table_id[objecttype.table.id()];
    for (i = 0, len1 = ref.length; i < len1; i++) {
      m = ref[i];
      masks.push(ez5.mask.CURRENT._mask_instance_by_name[m.name]);
    }
    return masks;
  };

  ObjecttypeListViewItem.prototype.getSaveDataStandardMasks = function(data) {
    var i, len1, mask, ref, save_data;
    save_data = null;
    if (!data.standard_mask_from_objecttype) {
      save_data = [];
      ref = data.standard_masks_internal || [];
      for (i = 0, len1 = ref.length; i < len1; i++) {
        mask = ref[i];
        if (mask.divider) {
          break;
        }
        save_data.push(mask.mask_id);
      }
    }
    return save_data;
  };

  ObjecttypeListViewItem.prototype.loadDataStandardMasks = function(data) {};

  ObjecttypeListViewItem.prototype.getSaveData = function() {
    var i, j, len1, len2, mf, node, ref, ref1, save_data;
    save_data = {
      _basetype: "objecttype",
      objecttype: {
        _id: this.id,
        standard_mask: this.data.objecttype.standard_mask,
        mapping_dc_export: getIntOrString(this.data.objecttype.mapping_dc_export),
        mapping_image_export: getIntOrString(this.data.objecttype.mapping_image_export),
        mapping_image_import: getIntOrString(this.data.objecttype.mapping_image_import),
        description: copyObject(this.data.objecttype.description, true),
        contact: this.data.objecttype.contact
      },
      _export_asset_filenames: this.data._export_asset_filenames
    };
    save_data._standard_masks = this.getSaveDataStandardMasks(this.data.objecttype);
    if (this.hasOwnTags()) {
      save_data._private_tags = !!this.data._private_tags;
      if (save_data._private_tags) {
        save_data._tags = this.tagForm.getSaveData();
      }
    }
    if (this.transitionForm) {
      save_data._private_transitions = !!this.data._private_transitions;
      save_data._transitions = this.transitionForm.getSaveData();
    }
    if (this.aclManager) {
      save_data._acl = this.aclManager.getSaveData();
    }
    if (this.maskfilters) {
      save_data._maskfilters = {};
      ref = this.maskfilters;
      for (i = 0, len1 = ref.length; i < len1; i++) {
        mf = ref[i];
        mf.getSaveData(save_data._maskfilters);
      }
    }
    if (this.columns_right_tree) {
      save_data._columnfilters = [];
      ref1 = this.columns_right_tree.root.children;
      for (j = 0, len2 = ref1.length; j < len2; j++) {
        node = ref1[j];
        if (!(node instanceof ColumnRightItem)) {
          continue;
        }
        save_data._columnfilters.push(node.getSaveData());
      }
    }
    return save_data;
  };

  ObjecttypeListViewItem.prototype.getTabs = function() {
    var tabs;
    tabs = [
      {
        name: "general",
        text: $$("admin.pool.tab.general"),
        onActivate: this.update,
        content: (function(_this) {
          return function() {
            return new Form({
              onDataChanged: function() {
                return _this.update();
              },
              fields: _this.generalFields(),
              data: _this.data.objecttype
            }).start();
          };
        })(this)
      }
    ];
    if (this.hasOwnTags() || this.objecttype.hasTags()) {
      tabs.push({
        name: "tags",
        text: $$("admin.pool.tab.tags"),
        content: (function(_this) {
          return function() {
            return _this.renderTagsTab();
          };
        })(this)
      });
    }
    if (this.hasOwnTags()) {
      tabs.push({
        name: "transitions",
        text: $$("admin.pool.tab.transitions"),
        content: (function(_this) {
          return function() {
            return _this.renderTransitionsTab();
          };
        })(this)
      });
    }
    tabs.push({
      name: "acl",
      text: $$("admin.pool.tab.system_rights"),
      content: (function(_this) {
        return function() {
          return _this.renderAclTab();
        };
      })(this)
    });
    if (this.getMasks().length >= 2) {
      tabs.push({
        name: "maskfilter",
        text: $$("admin.rights.objecttype.tab.maskfilter"),
        content: (function(_this) {
          return function() {
            return _this.renderMaskfilterTab();
          };
        })(this)
      });
    }
    tabs.push({
      name: "column_rights",
      text: $$("admin.pool.tab.column_rights"),
      content: (function(_this) {
        return function() {
          return _this.renderColumnRightsTab();
        };
      })(this)
    });
    return tabs;
  };

  ObjecttypeListViewItem.prototype.hasOwnTags = function() {
    return this.objecttype.hasTags() && !this.objecttype.poolLink();
  };

  return ObjecttypeListViewItem;

})(SystemListManagerItem);
// Generated by CoffeeScript 1.10.0
var ObjecttypeWithoutPoolListViewItem,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ObjecttypeWithoutPoolListViewItem = (function(superClass) {
  extend(ObjecttypeWithoutPoolListViewItem, superClass);

  function ObjecttypeWithoutPoolListViewItem() {
    return ObjecttypeWithoutPoolListViewItem.__super__.constructor.apply(this, arguments);
  }

  ObjecttypeWithoutPoolListViewItem.prototype.renderAclTab = function() {
    this.aclManager = new AclManager({
      data: this.data._acl,
      context: this,
      right: true,
      active: true,
      tagfilter: true,
      onUpdate: this.update,
      tagForm: this.tagForm
    });
    return this.aclManager.getTree();
  };

  return ObjecttypeWithoutPoolListViewItem;

})(ObjecttypeListViewItem);
// Generated by CoffeeScript 1.10.0
var Table,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Table = (function(superClass) {
  extend(Table, superClass);

  function Table(version, id_or_schema) {
    var ref;
    this.version = version;
    this.poolLink = bind(this.poolLink, this);
    this.hasTags = bind(this.hasTags, this);
    this.inMainSearch = bind(this.inMainSearch, this);
    this.aclTable = bind(this.aclTable, this);
    if ($.isPlainObject(id_or_schema)) {
      this.schema = id_or_schema;
      this._id = this.schema.table_id;
    } else {
      this._id = id_or_schema;
      this.schema = (ref = ez5.schema[this.version]) != null ? ref._table_by_id[this._id] : void 0;
    }
    assert(this.schema && this._id, "new Table", "version and id/schema must be set and schema found", {
      version: this.version,
      id_or_schema: id_or_schema
    });
  }

  Table.prototype.name = function() {
    return this.schema.name;
  };

  Table.prototype.preferredMask = function() {
    return ez5.mask[this.version]._mask_instance_by_name[this.schema._preferred_mask.name];
  };

  Table.prototype.nameLocalized = function() {
    return this.schema._name_localized;
  };

  Table.prototype.id = function() {
    return this._id;
  };

  Table.prototype.getSchema = function() {
    return this.schema;
  };

  Table.prototype.isHierarchy = function() {
    if (this.schema.is_hierarchical) {
      return true;
    } else {
      return false;
    }
  };

  Table.prototype.aclTable = function() {
    return this.schema.acl_table;
  };

  Table.prototype.inMainSearch = function() {
    return this.schema.in_main_search;
  };

  Table.prototype.hasTags = function() {
    return this.schema.has_tags;
  };

  Table.prototype.poolLink = function() {
    return this.schema.pool_link;
  };

  Table.prototype.getDisplayType = function() {
    var cap, eas_fields_count, i, len, mask_count, ref, ref1, types;
    types = [];
    ref = this.getCapabilities();
    for (i = 0, len = ref.length; i < len; i++) {
      cap = ref[i];
      types.push($$("table.capability." + cap));
    }
    if ((mask_count = (ref1 = ez5.mask.CURRENT._masks_by_table_id[this.id()]) != null ? ref1.length : void 0) > 1) {
      types.push($$("table.capability.masks", {
        count: mask_count
      }));
    }
    if ((eas_fields_count = this.getEASColumns().length) > 1) {
      types.push($$("table.capability.eas_fields", {
        count: eas_fields_count
      }));
    }
    return types.join(", ");
  };

  Table.prototype.getCapabilities = function() {
    var caps;
    caps = [];
    if (this.inMainSearch()) {
      caps.push("main-search");
    }
    if (this.hasTags()) {
      caps.push("tags");
    }
    if (this.poolLink()) {
      caps.push("pool");
    }
    if (this.aclTable()) {
      caps.push("acl");
    }
    if (this.isHierarchy()) {
      caps.push("hierarchy");
    }
    return caps;
  };

  Table.prototype.getEASColumns = function(eas_cols, table_ids_checked) {
    var col, i, len, ref, ref1, ref2, tb;
    if (eas_cols == null) {
      eas_cols = [];
    }
    if (table_ids_checked == null) {
      table_ids_checked = [];
    }
    ref = this.schema.columns;
    for (i = 0, len = ref.length; i < len; i++) {
      col = ref[i];
      if (col.name) {
        if (col.type === "eas") {
          eas_cols.push(col);
        }
      } else if ((ref1 = col.kind) === "link" || ref1 === "reverse_link") {
        if (col.is_hierarchical) {
          continue;
        }
        if (ref2 = col.other_table_id, indexOf.call(table_ids_checked, ref2) >= 0) {
          continue;
        }
        table_ids_checked.push(col.other_table_id);
        tb = new Table(this.version, col.other_table_id);
        tb.getEASColumns(eas_cols, table_ids_checked);
      } else {
        CUI.error("Unknown column type:", col);
      }
    }
    return eas_cols;
  };

  Table.prototype.getCapabilityClasses = function(prefix) {
    var cap;
    if (prefix == null) {
      prefix = "";
    }
    return ((function() {
      var i, len, ref, results;
      ref = this.getCapabilities();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        cap = ref[i];
        results.push(prefix + cap);
      }
      return results;
    }).call(this)).join(" ");
  };

  return Table;

})(CUI.Dummy);
// Generated by CoffeeScript 1.10.0
var Request,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Request = (function(superClass) {
  extend(Request, superClass);

  function Request(opts) {
    var k, v;
    this.__allowedKeys = Object.keys(this.__map);
    this.__allowedKeys.push.apply(this.__allowedKeys, ["debug", "page_request", "has_user_input", "searchManagers", "exclusive", "exclusive_show", "counter", "for_export", "update", "scroll_into_view_offset", "ignore_hierarchy"]);
    for (k in opts) {
      v = opts[k];
      assert(indexOf.call(this.__allowedKeys, k) >= 0, "new Request", ("Key " + k + " not allowed, supported are: ") + this.__allowedKeys.join(", "));
      this[k] = v;
    }
  }

  Request.prototype.copy = function() {
    var copy, k, v;
    copy = {};
    for (k in this) {
      v = this[k];
      if (indexOf.call(this.__allowedKeys, k) < 0) {
        continue;
      }
      switch (typeof v) {
        case "number":
        case "boolean":
        case "object":
        case "string":
          copy[k] = copyObject(v, true);
      }
    }
    return new Request(copy);
  };

  Request.prototype.__map = {
    offset: "offset",
    limit: "limit",
    aggregations: "aggregations",
    generate_rights: "generate_rights",
    type: "type",
    search: "search",
    fields: "fields",
    exclude_fields: "exclude_fields",
    best_mask_filter: "best_mask_filter",
    format: "format",
    sort: "sort",
    ids_only: "ids_only",
    tokens: "tokens",
    highlight: "highlight",
    objecttypes: "objecttypes"
  };

  Request.prototype.cleanRequestForSearch = function() {
    var k, req;
    req = {};
    for (k in this.__map) {
      if (this.hasOwnProperty(k)) {
        req[this.__map[k]] = this[k];
      }
    }
    if (req.limit === -1) {
      req.limit = 1000000000;
    }
    return req;
  };

  Request.prototype.merge = function(request) {
    var i, j, k, len, len1, ref, ref1;
    assert(request instanceof Request, "Request.merge: request needs to be instance of Request", {
      request: request
    });
    ref = ["search", "aggregations", "objecttypes", "fields", "sort"];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      if (request[k]) {
        if (!this[k]) {
          this[k] = [];
        }
        this[k].push.apply(this[k], request[k]);
      }
    }
    ref1 = ["offset", "type", "best_mask_filter", "ids_only", "limit"];
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      k = ref1[j];
      if (request.hasOwnProperty(k)) {
        this[k] = request[k];
      }
    }
    return this;
  };

  return Request;

})(CUI.Dummy);
// Generated by CoffeeScript 1.10.0
var Objecttype,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Objecttype = (function(superClass) {
  extend(Objecttype, superClass);

  function Objecttype(mask_or_table) {
    this.nameLocalized = bind(this.nameLocalized, this);
    if (!isNaN(parseInt(mask_or_table != null ? mask_or_table.table_id : void 0))) {
      mask_or_table = new Table("CURRENT", mask_or_table.table_id);
    }
    this.masks = [];
    assert(mask_or_table instanceof Mask || mask_or_table instanceof Table, "new Objecttype", "mask_or_table must be instance of Mask or Table", {
      mask_or_table: mask_or_table
    });
    if (mask_or_table instanceof Mask) {
      this.addMask(mask_or_table);
      this.table = mask_or_table.table;
    } else {
      this.table = mask_or_table;
    }
    this.__dbg_name = this.name();
  }

  Objecttype.prototype.addAllMasks = function() {
    var found, i, j, len, len1, m, mask, ref, ref1;
    ref = ez5.mask.CURRENT._masks_by_table_id[this.id()];
    for (i = 0, len = ref.length; i < len; i++) {
      mask = ref[i];
      found = false;
      ref1 = this.masks;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        m = ref1[j];
        if (m.name() === mask.name) {
          found = true;
        }
      }
      if (found) {
        continue;
      }
      this.addMask(ez5.mask.CURRENT._mask_instance_by_name[mask.name]);
    }
    return this;
  };

  Objecttype.prototype.getMask = function() {
    var ref;
    return (ref = this.masks) != null ? ref[0] : void 0;
  };

  Objecttype.prototype.id = function() {
    return this.table.id();
  };

  Objecttype.prototype.getTable = function() {
    return this.table;
  };

  Objecttype.prototype.name = function() {
    return this.table.name();
  };

  Objecttype.prototype.removeAllMasks = function() {
    return this.masks = [];
  };

  Objecttype.prototype.nameLocalized = function() {
    return this.table.nameLocalized();
  };

  Objecttype.prototype.addMask = function(mask) {
    assert(mask instanceof Mask, "Objecttype.addMask", "mask needs to be instance of Mask.", {
      mask: mask
    });
    if (this.masks.length > 0 && this.name() !== mask.table.name()) {
      throw "Cannot addMask of type " + (mask.table.name()) + " to Objecttype with type " + (masks[0].table.name());
    }
    mask.objecttype = this;
    this.masks.push(mask);
    return this;
  };

  Objecttype.prototype.isHierarchy = function() {
    return this.table.isHierarchy();
  };

  Objecttype.prototype.getDisplayType = function() {
    return this.table.getDisplayType();
  };

  Objecttype.prototype.getCapabilities = function() {
    return this.table.getCapabilities();
  };

  Objecttype.prototype.getCapabilityClasses = function(prefix) {
    return this.table.getCapabilityClasses(prefix + "objecttype-is-");
  };

  Objecttype.prototype.inMainSearch = function() {
    return this.table.inMainSearch();
  };

  Objecttype.prototype.hasTags = function() {
    return this.table.hasTags();
  };

  Objecttype.prototype.aclTable = function() {
    return this.table.aclTable();
  };

  Objecttype.prototype.poolLink = function() {
    return this.table.poolLink();
  };

  Objecttype.prototype.getEASFields = function(mode, eas_fields) {
    if (mode == null) {
      mode = "all";
    }
    if (eas_fields == null) {
      eas_fields = [];
    }
    return this.getFields(mode, true, (function(f) {
      return f instanceof EASColumn;
    }), eas_fields);
  };

  Objecttype.prototype.getAllFields = function(mode, fields) {
    if (mode == null) {
      mode = "all";
    }
    if (fields == null) {
      fields = [];
    }
    return this.getFields(mode, true, (function(f) {
      return f instanceof Field;
    }), fields);
  };

  Objecttype.prototype.getFields = function(mode, dive, filter_func, fields) {
    var i, len, m, ref;
    if (mode == null) {
      mode = "all";
    }
    if (dive == null) {
      dive = true;
    }
    if (filter_func == null) {
      filter_func = (function(f) {
        return f instanceof Field;
      });
    }
    if (fields == null) {
      fields = [];
    }
    assert(this.masks.length > 0, "Objecttype.getFields", "This objecttype instance has not been initialized with masks, so no fields can be found.", {
      table: this.table,
      masks: this.masks
    });
    ref = this.masks;
    for (i = 0, len = ref.length; i < len; i++) {
      m = ref[i];
      m.invokeOnFields(mode, dive, (function(_this) {
        return function(f) {
          var f2, j, len1;
          if (filter_func(f)) {
            for (j = 0, len1 = fields.length; j < len1; j++) {
              f2 = fields[j];
              if (f2.identifier() === f.identifier()) {
                return;
              }
            }
            return fields.push(f);
          }
        };
      })(this));
    }
    return fields;
  };

  Objecttype.prototype.getInfoDiv = function() {
    var dfr, ot;
    dfr = new CUI.Deferred();
    ot = new ObjecttypeListViewItem({
      objecttype: this
    });
    ot.load().done((function(_this) {
      return function() {
        var arr, contact;
        arr = [];
        contact = ot.getContact();
        if (contact) {
          arr.push(new Label({
            "class": "ez5-info-contact",
            text: contact.getDisplayText()
          }));
        }
        if (!isEmpty(ot.getDescription())) {
          arr.push(new MultilineLabel({
            "class": "ez5-info-description",
            text: ot.getDescription()
          }));
        } else {
          arr.push(new EmptyLabel({
            "class": "ez5-info-description",
            text: $$("objecttype.no_description")
          }));
        }
        return dfr.resolve(arr);
      };
    })(this)).fail((function(_this) {
      return function() {
        return dfr.reject();
      };
    })(this));
    return dfr.promise();
  };

  Objecttype.getExcludeFieldsForEASFields = function(ot_name) {
    var append, eas_field, eas_fields, ex_fields, f, fn, i, j, k, len, len1, len2, ot, ref, ref1, ref2;
    ot = new Objecttype(ez5.schema.CURRENT._objecttype_by_name[ot_name]);
    ot.addAllMasks();
    ex_fields = [];
    eas_fields = [];
    ref = ot.getEASFields();
    for (i = 0, len = ref.length; i < len; i++) {
      f = ref[i];
      eas_fields.push(f.fullName());
    }
    ref1 = ot.getAllFields();
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      f = ref1[j];
      fn = f.fullName();
      if (fn === '_objecttype' || fn === '_mask') {
        continue;
      }
      if ((ref2 = f.name()) === '_id') {
        continue;
      }
      append = true;
      for (k = 0, len2 = eas_fields.length; k < len2; k++) {
        eas_field = eas_fields[k];
        if (eas_field.startsWith(fn)) {
          append = false;
          break;
        }
      }
      if (append) {
        ex_fields.push(fn);
      }
    }
    if (ot.isHierarchy()) {
      ex_fields.push('_path');
    }
    return ex_fields;
  };

  return Objecttype;

})(CUI.Dummy);
// Generated by CoffeeScript 1.10.0
var LocaLabel, k, ref, v,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LocaLabel = (function(superClass) {
  extend(LocaLabel, superClass);

  function LocaLabel(opts) {
    this.opts = opts != null ? opts : {};
    LocaLabel.__super__.constructor.call(this, this.opts);
    this.addClass("cui-label");
    if (this._loca_key) {
      this.DOM.attr("ez5-loca-key", this._loca_key);
    }
  }

  LocaLabel.prototype.initOpts = function() {
    LocaLabel.__super__.initOpts.call(this);
    return this.addOpts(LocaLabel.opts);
  };

  LocaLabel.prototype.readOpts = function() {
    if (this.opts.loca_key) {
      if (ez5.loca.has(this.opts.loca_key)) {
        this.opts.text = ez5.loca.str(this.opts.loca_key, this.opts.loca_key_attrs);
      }
    }
    this.initLocaOpts(["text", "icon"]);
    if (!this.opts.text && !this.opts.icon && this.opts.loca_key) {
      this.opts.text = $$(this.opts.loca_key + "|text", this.opts.loca_key_attrs);
    }
    LocaLabel.__super__.readOpts.call(this);
    return this.initTooltip();
  };

  LocaLabel.prototype.initTooltip = function() {
    var tooltip;
    if (!this._loca_key) {
      return;
    }
    tooltip = ez5.loca.get_key(this._loca_key + "|tooltip");
    if (tooltip) {
      if (!this._tooltip) {
        this._tooltip = {};
      }
      if (!this._tooltip.text && !this._tooltip.content) {
        this._tooltip.text = tooltip;
      }
    }
    return this;
  };

  LocaLabel.prototype.initLocaOpts = function(keys) {
    var data, i, k, len, loca_key;
    if (!this.opts.loca_key) {
      return;
    }
    if (ez5.session.isDebug()) {
      this.__title = this.opts.loca_key;
    }
    for (i = 0, len = keys.length; i < len; i++) {
      k = keys[i];
      loca_key = this.opts.loca_key + "|" + k;
      data = ez5.loca.get_key(loca_key);
      if (isEmpty(data)) {
        continue;
      }
      this.opts[k] = ez5.loca.str(loca_key, this.opts.loca_key_attrs);
    }
    return this;
  };

  LocaLabel.prototype.initTitle = function() {
    if (this.__title) {
      return this.DOM.prop("title", this.__title);
    }
  };

  LocaLabel.prototype.setText = function(txt) {
    LocaLabel.__super__.setText.call(this, txt);
    return this.initTitle();
  };

  LocaLabel.opts = {
    loca_key: {
      check: String
    },
    loca_key_attrs: {
      check: function(v) {
        return CUI.isArray(v) || CUI.isPlainObject(v);
      }
    }
  };

  LocaLabel.getStandardOpts = function(loca_key, keys) {
    var caller, i, key, len, set_keys;
    if (keys == null) {
      keys = ["text", "icon"];
    }
    if (ez5.loca.has(loca_key)) {
      return {
        text: $$(loca_key)
      };
    } else {
      caller = {
        opts: {
          loca_key: loca_key
        }
      };
      LocaLabel.prototype.initLocaOpts.call(caller, keys);
      ({
        text: $$(loca_key)
      });
      set_keys = {};
      for (i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        if (caller.opts.hasOwnProperty(key)) {
          set_keys[key] = caller.opts[key];
        }
      }
      return set_keys;
    }
  };

  return LocaLabel;

})(Label);

CUI.defaults["class"].Label = LocaLabel;

CUI.ConfirmationChoice.choiceOpts.text.mandatory = false;

ref = LocaLabel.opts;
for (k in ref) {
  v = ref[k];
  CUI.ConfirmationChoice.choiceOpts[k] = v;
}
// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ez5.HintPopover = (function(superClass) {
  extend(HintPopover, superClass);

  function HintPopover(opts) {
    this.opts = opts;
    HintPopover.__super__.constructor.call(this, this.opts);
    if (this._content) {
      this.append(this._content);
    } else {
      this.DOM.textContent = this._text;
    }
    this.getLayerRoot().addClass("ez5-hint-popover");
  }

  HintPopover.prototype.initOpts = function() {
    HintPopover.__super__.initOpts.call(this);
    this.addOpts({
      content: {
        check: function(v) {
          return isContent(v);
        }
      },
      text: {
        check: function(v) {
          return isString(v);
        }
      }
    });
    this.mergeOpt("backdrop", {
      "default": {
        policy: "click"
      }
    });
    return this.mergeOpt("pointer", {
      "default": "arrow"
    });
  };

  HintPopover.prototype.readOpts = function() {
    HintPopover.__super__.readOpts.call(this);
    return assert(this._content || this._text, "new ez5.HintPopover", "opts.content or opts.text need to be set.", {
      opts: this.opts
    });
  };

  return HintPopover;

})(CUI.Layer);
// Generated by CoffeeScript 1.10.0
var EmptyLocaLabel,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

EmptyLocaLabel = (function(superClass) {
  extend(EmptyLocaLabel, superClass);

  function EmptyLocaLabel(opts) {
    this.opts = opts != null ? opts : {};
    EmptyLocaLabel.__super__.constructor.call(this, this.opts);
    this.addClass("cui-empty-label");
  }

  EmptyLocaLabel.prototype.readOpts = function() {
    EmptyLabel.prototype.readOpts.call(this);
    return EmptyLocaLabel.__super__.readOpts.call(this);
  };

  return EmptyLocaLabel;

})(LocaLabel);
// Generated by CoffeeScript 1.10.0
var LocaButton,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LocaButton = (function(superClass) {
  extend(LocaButton, superClass);

  function LocaButton(opts) {
    this.opts = opts != null ? opts : {};
    LocaButton.__super__.constructor.call(this, this.opts);
    this.addClass("cui-button");
    if (this._loca_key) {
      this.DOM.attr("ez5-loca-key", this._loca_key);
    }
  }

  LocaButton.prototype.initOpts = function() {
    LocaButton.__super__.initOpts.call(this);
    return this.addOpts({
      loca_key: {
        check: String
      },
      loca_key_attrs: {
        check: function(v) {
          return $.isArray(v) || $.isPlainObject(v);
        }
      },
      tooltip_active: {
        check: String
      },
      tooltip_inactive: {
        check: String
      },
      tooltip_disabled: {
        check: String
      }
    });
  };

  LocaButton.prototype.readOpts = function() {
    LocaLabel.prototype.initLocaOpts.call(this, ["text", "text_active", "text_inactive", "icon", "size", "icon_active", "icon_inactive"]);
    if (!this.opts.text && !this.opts.icon && !this.opts.icon_active && !this.opts.icon_inactive && this.opts.loca_key) {
      this.opts.text = ez5.loca.getLanguage() + ":" + this.opts.loca_key + "|text";
    }
    LocaButton.__super__.readOpts.call(this);
    this.initTooltip();
    return this;
  };

  LocaButton.prototype.initTooltip = function() {
    var has_tooltip, i, k, key, len, ref, tooltip, tooltip_txt;
    if (this._tooltip) {
      return;
    }
    tooltip_txt = ez5.loca.get_key(this._loca_key + "|tooltip");
    has_tooltip = false;
    tooltip = {};
    ref = ["active", "inactive", "disabled"];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      key = "tooltip_" + k;
      if (this._loca_key) {
        tooltip[k] = ez5.loca.get_key(this._loca_key + "|" + key);
      }
      if (isEmpty(tooltip[k])) {
        tooltip[k] = this["_" + key];
      }
      if (isEmpty(tooltip[k])) {
        tooltip[k] = tooltip_txt;
      }
      if (!isEmpty(tooltip[k])) {
        has_tooltip = true;
      }
    }
    if (has_tooltip) {
      this._tooltip = {
        text: (function(_this) {
          return function() {
            if (_this.isDisabled()) {
              return tooltip.disabled;
            } else if (_this.isActive()) {
              return tooltip.active;
            } else {
              return tooltip.inactive;
            }
          };
        })(this)
      };
    }
    return this;
  };

  LocaButton.prototype.setText = function(txt) {
    LocaButton.__super__.setText.call(this, txt);
    return LocaLabel.prototype.initTitle.call(this);
  };

  return LocaButton;

})(Button);

CUI.defaults["class"].Button = LocaButton;
// Generated by CoffeeScript 1.10.0
var LocaButtonHref,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LocaButtonHref = (function(superClass) {
  extend(LocaButtonHref, superClass);

  function LocaButtonHref(opts) {
    this.opts = opts != null ? opts : {};
    LocaButtonHref.__super__.constructor.call(this, this.opts);
    this.addClass("cui-button-href");
  }

  LocaButtonHref.prototype.initOpts = function() {
    LocaButtonHref.__super__.initOpts.call(this);
    return LocaButton.prototype.initOpts.call(this);
  };

  LocaButtonHref.prototype.readOpts = function() {
    LocaLabel.prototype.initLocaOpts.call(this, ["text", "icon"]);
    LocaButtonHref.__super__.readOpts.call(this);
    return LocaButton.prototype.initTooltip.call(this);
  };

  LocaButtonHref.prototype.setText = function(txt) {
    return LocaButton.prototype.setText.call(this, txt);
  };

  return LocaButtonHref;

})(ButtonHref);
// Generated by CoffeeScript 1.10.0
var DataFieldProxy,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DataFieldProxy = (function(superClass) {
  extend(DataFieldProxy, superClass);

  function DataFieldProxy() {
    return DataFieldProxy.__super__.constructor.apply(this, arguments);
  }

  DataFieldProxy.prototype.readOpts = function() {
    DataFieldProxy.__super__.readOpts.call(this);
    return this.__element = null;
  };

  DataFieldProxy.prototype.initOpts = function() {
    DataFieldProxy.__super__.initOpts.call(this);
    return this.addOpts({
      call_others: {
        "default": true,
        check: Boolean
      },
      element: {
        mandatory: true,
        check: function(v) {
          return isContent(v);
        }
      },
      getDefaultValue: {
        check: Function
      }
    });
  };

  DataFieldProxy.prototype.getFields = function() {
    var _el, df, el, fields, i, len, ref, search_el;
    fields = [];
    if (!this._call_others) {
      return fields;
    }
    if (!this.__element) {
      if ($.isFunction(this._element)) {
        return fields;
      }
      search_el = this._element;
    } else {
      search_el = this.__element;
    }
    if (search_el instanceof CUI.DOM) {
      if (search_el.isDestroyed()) {
        return fields;
      }
      _el = search_el.DOM[0];
    } else {
      _el = search_el[0];
    }
    ref = CUI.DOM.matchSelector(_el, "[cui-data-field-name]");
    for (i = 0, len = ref.length; i < len; i++) {
      el = ref[i];
      df = DOM.data(el, "element");
      if (!df) {
        continue;
      }
      fields.push(df);
    }
    return fields;
  };

  DataFieldProxy.prototype.remove = function() {
    this.__detach();
    return DataFieldProxy.__super__.remove.call(this);
  };

  DataFieldProxy.prototype.__detach = function() {
    var base;
    if (!this.__element) {
      return this;
    }
    Events.ignore({
      type: "data-changed",
      node: this.__element
    });
    if (this.__element.DOM) {
      this.__element.DOM.detach();
    } else {
      if (typeof (base = this.__element).detach === "function") {
        base.detach();
      }
    }
    this.__element = null;
    return this;
  };

  DataFieldProxy.prototype.destroy = function() {
    this.__detach();
    return DataFieldProxy.__super__.destroy.call(this);
  };

  DataFieldProxy.prototype.render = function() {
    if ($.isFunction(this._element)) {
      this.__element = this._element.call(this, this);
    } else {
      this.__element = this._element;
    }
    this.replace(this.__element);
    Events.listen({
      type: "data-changed",
      node: this.__element,
      call: (function(_this) {
        return function(ev, info) {
          ev.stopImmediatePropagation();
          info.element = _this;
          return Events.trigger({
            type: "data-changed",
            node: _this.DOM,
            info: info
          });
        };
      })(this)
    });
    DataFieldProxy.__super__.render.call(this);
    return this;
  };

  DataFieldProxy.prototype.setCheckChangedValue = function() {};

  DataFieldProxy.prototype.initData = function() {};

  return DataFieldProxy;

})(DataField);
// Generated by CoffeeScript 1.10.0
var App,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

App = (function(superClass) {
  extend(App, superClass);

  function App(opts) {
    this.opts = opts != null ? opts : {};
    assert(getObjectClass(this) !== "App", "new App()", "Cannot call directly, only from subclasses");
    App.__super__.constructor.call(this, this.opts);
    this.loaded = false;
    this.__initialized = false;
  }

  App.prototype.register = function(appManager, idxInAppManager) {
    this.appManager = appManager;
    this.idxInAppManager = idxInAppManager;
    return this;
  };

  App.prototype.getIdxInAppManager = function() {
    return this.idxInAppManager;
  };

  App.prototype.is_allowed = function() {
    return true;
  };

  App.is_allowed = function() {
    return true;
  };

  App.prototype.isLoaded = function() {
    return this.__loaded;
  };

  App.prototype.update_path = function(path) {
    return CUI.resolvedPromise();
  };

  App.prototype.load = function(path) {
    this.__loaded = true;
    return CUI.resolvedPromise();
  };

  App.prototype.allow_unload = function() {
    return CUI.resolvedPromise();
  };

  App.prototype.unload = function() {
    this.__loaded = false;
    return CUI.resolvedPromise();
  };

  App.prototype.reload = function() {
    return CUI.resolvedPromise();
  };

  return App;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var AppManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AppManager = (function(superClass) {
  extend(AppManager, superClass);

  function AppManager() {
    return AppManager.__super__.constructor.apply(this, arguments);
  }

  AppManager.prototype.readOpts = function() {
    AppManager.__super__.readOpts.call(this);
    this.__apps = [];
    return this.__allowed_apps = null;
  };

  AppManager.prototype.loadApps = function() {
    return this.loadAvailableApps();
  };

  AppManager.prototype.loadAvailableApps = function() {
    var append_next_app, dfr, idx;
    dfr = new CUI.Deferred();
    idx = -1;
    this.__allowed_apps = [];
    append_next_app = (function(_this) {
      return function() {
        idx = idx + 1;
        if (idx > _this.__apps.length - 1) {
          dfr.resolve();
          return;
        }
        return CUI.decide(_this.__apps[idx].is_allowed()).done(function() {
          _this.__allowed_apps.push(_this.__apps[idx]);
          return append_next_app();
        }).fail(function() {
          return append_next_app();
        });
      };
    })(this);
    append_next_app();
    return dfr.promise();
  };

  AppManager.prototype.getAllowedApps = function() {
    assert(this.hasAllowedApps(), "AppManager.getAllowedApps", "init wasnt be called.");
    return this.__allowed_apps.slice(0);
  };

  AppManager.prototype.hasAllowedApps = function() {
    return this.__allowed_apps !== null;
  };

  AppManager.prototype.getApps = function() {
    return this.__apps;
  };

  AppManager.prototype.checkApp = function(app) {
    return assert(app instanceof App, (getObjectClass(this)) + ".registerApp", "app needs to be instance of App", {
      app: app
    });
  };

  AppManager.prototype.registerApp = function(app) {
    this.checkApp(app);
    assert(ez5.state === "session_ready", (getObjectClass(this)) + ".registerApp", "ez5.state is not \"session_ready\" yet but \"" + ez5.state + "\". App is " + (getObjectClass(app)) + ".", {
      app: app
    });
    this.__apps.push(app);
    if (app instanceof App) {
      app.register(this, this.__apps.length - 1);
    }
    return app;
  };

  return AppManager;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var Tray,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Tray = (function(superClass) {
  extend(Tray, superClass);

  function Tray() {
    return Tray.__super__.constructor.apply(this, arguments);
  }

  Tray.prototype.readOpts = function() {
    Tray.__super__.readOpts.call(this);
    return this.trayDiv = $div("tray");
  };

  Tray.prototype.checkApp = function(app) {
    return assert(app instanceof TrayApp, (getObjectClass(this)) + ".registerApp", "app needs to be instance of RootMenuApp", {
      app: app
    });
  };

  Tray.prototype.reloadApps = function() {
    return this.loadApps();
  };

  Tray.prototype.loadApps = function() {
    var apps, sort_value;
    apps = null;
    this.trayDiv.empty();
    sort_value = (function(_this) {
      return function(app) {
        var sort;
        sort = app.getSortValue();
        if (isNull(sort)) {
          sort = 0;
        } else {
          assert(isInteger(sort), "Tray.init", ".getSortValue needs to return an integer", {
            app: app
          });
        }
        return sort += apps.length - app.getIdxInAppManager() - 1;
      };
    })(this);
    return this.loadAvailableApps().done((function(_this) {
      return function() {
        var app, i;
        apps = _this.getAllowedApps();
        apps.sort(function(a, b) {
          return compareIndex(sort_value(a), sort_value(b));
        });
        for (i = apps.length - 1; i >= 0; i += -1) {
          app = apps[i];
          CUI.DOM.prepend(_this.trayDiv, app.getDisplay());
        }
      };
    })(this));
  };

  Tray.prototype.getDisplay = function() {
    return this.trayDiv;
  };

  return Tray;

})(AppManager);
// Generated by CoffeeScript 1.10.0
var TrayApp,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TrayApp = (function(superClass) {
  extend(TrayApp, superClass);

  function TrayApp() {
    return TrayApp.__super__.constructor.apply(this, arguments);
  }

  TrayApp.prototype.getDisplay = function() {
    return this.display = $div("tray-item");
  };

  TrayApp.prototype.getSortValue = function() {};

  return TrayApp;

})(App);
// Generated by CoffeeScript 1.10.0
var RootMenu,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

RootMenu = (function(superClass) {
  extend(RootMenu, superClass);

  function RootMenu() {
    return RootMenu.__super__.constructor.apply(this, arguments);
  }

  RootMenu.prototype.readOpts = function() {
    var bd;
    RootMenu.__super__.readOpts.call(this);
    bd = $div("ez5-root-menu-backdrop");
    bd.appendTo(document.body);
    Events.listen({
      type: "keyup",
      node: document,
      call: (function(_this) {
        return function(ev) {
          if (ev.keyCode() !== 27 || !_this.isMenuOpen()) {
            return;
          }
          ev.stopPropagation();
          ev.preventDefault();
          _this.closeMenu();
          return false;
        };
      })(this)
    });
    Events.listen({
      type: "click",
      node: bd,
      call: (function(_this) {
        return function() {
          return _this.closeMenu();
        };
      })(this)
    });
    Events.listen({
      type: "popstate",
      node: window,
      call: (function(_this) {
        return function(ev) {
          _this.findAppByLocation(document.location).done(function(app) {
            var ref;
            if (((ref = _this.__activeApp) != null ? ref.__app_function : void 0) === app) {
              _this.__activeApp.update_path(_this.getLocationPath());
              return;
            }
            return _this.loadApp(app).fail(function(active_app) {
              return active_app != null ? active_app.pushState() : void 0;
            });
          });
        };
      })(this)
    });
    this.menuBtn = new LocaButton({
      icon: "menu",
      loca_key: "root.menu.button.open_close_menu",
      "class": "ez5-main-menu-button",
      onClick: (function(_this) {
        return function() {
          _this.toggleMenu();
          if (_this.root_menu_button) {
            return _this.root_menu_button.setActive(true);
          }
        };
      })(this)
    });
    return this.__title = $div("ez5-title");
  };

  RootMenu.prototype.findAppByLocation = function(location) {
    var apps, dfr, get_apps, idx, load_app, try_next;
    dfr = new CUI.Deferred();
    get_apps = (function(_this) {
      return function() {
        var apps;
        apps = _this.getAllowedApps();
        return apps.sort(function(a, b) {
          return compareIndex((typeof b.getPathname === "function" ? b.getPathname().length : void 0) || 0, (typeof a.getPathname === "function" ? a.getPathname().length : void 0) || 0);
        });
      };
    })(this);
    load_app = (function(_this) {
      return function() {
        var app, app_path, i, idx, len, pathname, ref;
        pathname = location.pathname;
        ref = get_apps();
        for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
          app = ref[idx];
          app_path = typeof app.getPathname === "function" ? app.getPathname() : void 0;
          if (isEmpty(app_path)) {
            continue;
          }
          if (app_path === pathname.substring(0, app_path.length)) {
            dfr.resolve(app);
            return;
          }
        }
        dfr.reject();
      };
    })(this);
    apps = get_apps();
    idx = -1;
    try_next = (function(_this) {
      return function() {
        idx = idx + 1;
        if (idx === _this.__appLoader.length) {
          load_app();
          return;
        }
        _this.__appLoader[idx].findAppByLocation(location, apps).done(function(app) {
          return dfr.resolve(app);
        }).fail(function() {
          return try_next();
        });
      };
    })(this);
    try_next();
    return dfr.promise();
  };

  RootMenu.prototype.findFirstStartApp = function() {
    var app, i, len, ref;
    ref = this.getAllowedApps();
    for (i = 0, len = ref.length; i < len; i++) {
      app = ref[i];
      if (app.isStartApp()) {
        return app;
      }
    }
    return null;
  };

  RootMenu.prototype.checkApp = function(app) {
    return assert(app instanceof Function, (getObjectClass(this)) + ".registerApp", "app needs to be Function", {
      app: app
    });
  };

  RootMenu.prototype.getAppInstance = function(_app) {
    var app;
    app = new _app();
    app.__app_function = _app;
    app.register(this, idxInArray(app, this.getApps()));
    assert(app instanceof RootMenuApp, "RootMenu.getAppInstance", "Function for App did not return instanceof RootMenuApp.", {
      app: app
    });
    return app;
  };

  RootMenu.prototype.getActiveApp = function() {
    return this.__activeApp;
  };

  RootMenu.prototype.loadAppFromPath = function() {
    var dfr, load_app;
    dfr = new CUI.Deferred();
    load_app = (function(_this) {
      return function(start_app) {
        return _this.loadApp(start_app).done(dfr.resolve).fail(dfr.reject);
      };
    })(this);
    this.findAppByLocation(document.location).fail((function(_this) {
      return function() {
        var start_app;
        start_app = _this.findFirstStartApp();
        if (start_app) {
          return load_app(start_app);
        } else {
          return dfr.reject();
        }
      };
    })(this)).done((function(_this) {
      return function(start_app) {
        return load_app(start_app);
      };
    })(this));
    return dfr.promise();
  };

  RootMenu.prototype.getLocationPath = function() {
    var i, idx, len, part, path, ref;
    path = [];
    ref = document.location.pathname.split("/");
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      part = ref[idx];
      if (idx === 0) {
        continue;
      }
      if (part.length === 0) {
        continue;
      }
      path.push(part);
    }
    return path;
  };

  RootMenu.prototype.loadApp = function(app, pushState) {
    var appInst, dfr, load, path, promise;
    if (pushState == null) {
      pushState = false;
    }
    assert(app instanceof Function, "RootMenu.loadApp", "Can only load dynamic App, app needs to be instanceof Function.");
    if (this.__load_dfr) {
      console.warn("already loading an app... ignoring click");
      return CUI.rejectedPromise();
    }
    path = this.getLocationPath();
    dfr = this.__load_dfr = new CUI.Deferred();
    appInst = null;
    dfr.done((function(_this) {
      return function() {
        return _this.__activeApp = appInst;
      };
    })(this));
    dfr.always((function(_this) {
      return function() {
        return _this.__load_dfr = null;
      };
    })(this));
    load = (function(_this) {
      return function() {
        var promise;
        appInst = _this.getAppInstance(app);
        if (pushState) {
          appInst.pushState();
        }
        promise = appInst.load(path);
        assert(isPromise(promise), "RootMenu.loadApp", appInst.__cls + ".load() needs to return CUI.Promise.", {
          promise: promise
        });
        return promise.done(function() {
          return dfr.resolve(app, appInst);
        }).fail(function() {
          return dfr.reject();
        });
      };
    })(this);
    if (this.__activeApp) {
      promise = this.__activeApp.allow_unload();
      assert(isPromise(promise), "RootMenu.loadApp", this.__activeApp.__cls + ".allow_unload() needs to return CUI.Promise.", {
        promise: promise
      });
      promise.done((function(_this) {
        return function() {
          return _this.__unloadActiveApp().always(function() {
            return load();
          });
        };
      })(this)).fail((function(_this) {
        return function() {
          _this.closeMenu();
          return dfr.reject(_this.__activeApp);
        };
      })(this));
    } else {
      load();
    }
    return dfr.promise();
  };

  RootMenu.prototype.loadApps = function() {
    var active_app, active_apps, dfr, load;
    if (this.__loadingApps) {
      return this.loadAvailableApps();
    }
    this.__loadingApps = true;
    active_apps = this.getActiveApps();
    active_app = this.__activeApp;
    dfr = new CUI.Deferred();
    dfr.always((function(_this) {
      return function() {
        return _this.__loadingApps = false;
      };
    })(this));
    dfr.fail((function(_this) {
      return function() {
        var hint;
        hint = new EmptyLabel({
          text: $$("root.menu.no_app_allowed"),
          centered: true,
          multiline: true
        });
        return ez5.rootLayout.replace(hint, "center");
      };
    })(this));
    load = (function(_this) {
      return function() {
        return _this.loadAvailableApps().done(function() {
          return _this.loadAppFromPath().done(dfr.resolve).fail(dfr.reject);
        }).fail(function() {
          return dfr.reject();
        });
      };
    })(this);
    if (this.__activeApp) {
      this.__unloadActiveApp().always((function(_this) {
        return function() {
          _this.__activeApp = null;
          return load();
        };
      })(this));
    } else {
      load();
    }
    return dfr.promise();
  };

  RootMenu.prototype.__unloadActiveApp = function() {
    var promise;
    promise = this.__activeApp.unload();
    assert(isPromise(promise), "RootMenu.loadApp", this.__activeApp.__cls + ".unload() needs to return CUI.Promise.", {
      promise: promise
    });
    return promise.always((function(_this) {
      return function() {
        return _this.__activeApp = null;
      };
    })(this));
  };

  RootMenu.prototype.loadAvailableApps = function() {
    return RootMenu.__super__.loadAvailableApps.call(this).done((function(_this) {
      return function() {
        var app, apps, apps_per_group, fn, get_items, group, groups, i, icon, itemList, j, len, len1, ng_bottom, root_items, span, submenu, submenus;
        apps = _this.getAllowedApps();
        _this.__submenu_buttons = [];
        _this.__app_button_by_unique_id = {};
        submenus = [];
        groups = {};
        apps_per_group = {};
        for (i = 0, len = apps.length; i < len; i++) {
          app = apps[i];
          assert(app.group instanceof Function, "App needs 'group' method.", {
            app: app
          });
          submenu = app.submenu();
          group = submenu + "." + app.group();
          if (!groups[submenu]) {
            groups[submenu] = [];
            submenus.push(submenu);
          }
          if (indexOf.call(groups[submenu], group) < 0) {
            groups[submenu].push(group);
            apps_per_group[group] = [];
          }
          apps_per_group[group].push(app);
        }
        get_items = function(submenu, for_menu) {
          var _groups, cls, fn, items, j, k, len1, len2, ref;
          if (for_menu == null) {
            for_menu = false;
          }
          if (submenu === "root") {
            cls = "ez5-root-menu-button";
          } else {
            cls = "ez5-root-menu-submenu-button";
          }
          items = [];
          if (!groups[submenu]) {
            return items;
          }
          _groups = groups[submenu].slice(0);
          _groups.sort(function(a, b) {
            var group_a, group_b;
            group_a = a.split('.')[1];
            group_b = b.split('.')[1];
            return compareIndex(group_a, group_b);
          });
          for (j = 0, len1 = _groups.length; j < len1; j++) {
            group = _groups[j];
            items.push({
              label: {
                "class": "ez5-root-menu-group ez5-root-menu-group--" + submenu,
                loca_key: "root.menu.group." + (group.split('.')[1])
              }
            });
            ref = apps_per_group[group];
            fn = function(app) {
              var item;
              item = app.getDisplay();
              if (!for_menu) {
                item.onConstruct = function(btn) {
                  return _this.__app_button_by_unique_id[app.label()] = btn;
                };
              }
              if (!item["class"]) {
                item["class"] = "";
              }
              item["class"] += " " + cls;
              item.__app = app;
              return items.push(item);
            };
            for (k = 0, len2 = ref.length; k < len2; k++) {
              app = ref[k];
              assert(app.getDisplay instanceof Function, "App needs 'getDisplay' method.", {
                app: app
              });
              assert(app.label instanceof Function, "App needs 'label' method.", {
                app: app
              });
              fn(app);
            }
          }
          return items;
        };
        root_items = get_items("root");
        submenus.sort(function(a, b) {
          var group_a, group_b;
          if (a === "root") {
            return -1;
          }
          group_a = groups[a][0].split(".")[1];
          group_b = groups[b][0].split(".")[1];
          return compareIndex(group_a, group_b);
        });
        fn = function(submenu) {
          var hide_timeout, il, rb;
          hide_timeout = null;
          il = new ItemList({
            "class": "ez5-root-menu-submenu",
            items: get_items(submenu),
            maximize: false
          });
          il.render();
          rb = new LocaButton({
            loca_key: "root.menu.submenu." + submenu,
            "class": "ez5-root-menu-button ez5-root-menu-button--has-submenu",
            right: [
              new Icon({
                icon: "south",
                "class": "ez-root-menu--south"
              }), new Icon({
                icon: "west",
                "class": "ez-root-menu--west"
              })
            ],
            menu: {
              placement: "es",
              placements: ["es", "en"],
              pointer: "arrow",
              active_item_idx: null,
              items: function(ev, itemList) {
                var item, items, k, l, len2, len3;
                if (document.body.classList.contains("ez5-root-menu--wide")) {
                  CUI.DOM.toggleClass(il.DOM, "ez5-root-menu--submenu-hide");
                  CUI.DOM.toggleClass(rb.DOM, "ez5-root-menu--submenu-hide");
                  return;
                }
                items = get_items(submenu, true);
                apps = _this.getActiveApps();
                for (k = 0, len2 = items.length; k < len2; k++) {
                  item = items[k];
                  item.active = false;
                  for (l = 0, len3 = apps.length; l < len3; l++) {
                    app = apps[l];
                    if (app === item.__app) {
                      item.active = true;
                      break;
                    }
                  }
                }
                return items;
              }
            }
          });
          root_items.push(rb);
          rb.__submenu = submenu;
          _this.__submenu_buttons.push(rb);
          return root_items.push({
            content: il.DOM
          });
        };
        for (j = 0, len1 = submenus.length; j < len1; j++) {
          submenu = submenus[j];
          if (submenu === "root") {
            continue;
          }
          fn(submenu);
        }
        icon = new Icon({
          icon: 'svg-easydb'
        });
        span = CUI.DOM.element("SPAN", {
          "class": "ez5-branding ez5-busy-state"
        });
        span.appendChild(icon.DOM);
        ez5.busyState = {
          update: function() {
            var on_off;
            on_off = CUI.countTimeouts() || ServerRequest.hasRequests();
            return CUI.DOM.setClass(span, "ez5-busy-state-busy", on_off);
          }
        };
        ez5.busyState.update();
        CUI.registerTimeoutChangeCallback(function(counter) {
          return ez5.busyState.update();
        });
        ng_bottom = {
          content: span
        };
        _this.root_menu_button = new LocaButton({
          loca_key: "root.menu.burger",
          "class": "ez5-root-menu-burger-button ez5-root-menu-button",
          "switch": true,
          onActivate: function() {
            document.body.classList.add("ez5-root-menu--wide");
            return Events.trigger({
              type: "viewport-resize"
            });
          },
          onDeactivate: function() {
            document.body.classList.remove("ez5-root-menu--wide");
            return Events.trigger({
              type: "viewport-resize"
            });
          }
        });
        itemList = new ItemList({
          auto_buttonbar: false,
          top: {
            content: _this.root_menu_button
          },
          bottom: ng_bottom,
          "class": "ez5-root-menu-item-list",
          items: root_items
        });
        itemList.render();
        Events.listen({
          type: "click",
          node: itemList,
          call: function() {
            return _this.closeMenu();
          }
        });
        if (!_this.__menuPane) {
          _this.__menuPane = $div("ez5-root-menu");
          _this.__menuPane.appendTo(document.body);
        } else {
          _this.__menuPane.empty();
        }
        return _this.__menuPane.append(itemList.DOM);
      };
    })(this));
  };

  RootMenu.prototype.getDisplay = function() {
    return [this.menuBtn.DOM, this.__title];
  };

  RootMenu.prototype.setTitle = function(label) {
    this.__title.empty();
    if (label) {
      this.__title.append(new Label({
        text: $$(label)
      }).DOM);
    }
    return this;
  };

  RootMenu.prototype.getTitle = function() {
    return this.__title;
  };

  RootMenu.prototype.closeMenu = function() {
    return document.body.classList.remove("root-menu");
  };

  RootMenu.prototype.openMenu = function() {
    return document.body.classList.add("root-menu");
  };

  RootMenu.prototype.isMenuOpen = function() {
    if (document.body.classList.contains("root-menu")) {
      return true;
    } else {
      return false;
    }
  };

  RootMenu.prototype.toggleMenu = function() {
    if (this.isMenuOpen()) {
      return this.closeMenu();
    } else {
      return this.openMenu();
    }
  };

  RootMenu.prototype.getActiveApps = function() {
    var app, apps, i, len, ref;
    apps = [];
    if (!this.hasAllowedApps()) {
      return apps;
    }
    ref = this.getAllowedApps();
    for (i = 0, len = ref.length; i < len; i++) {
      app = ref[i];
      if (this.getAppButton(app).isActive()) {
        apps.push(app);
      }
    }
    return apps;
  };

  RootMenu.prototype.__findSubmenuButton = function(submenu) {
    var i, len, ref, sb;
    ref = this.__submenu_buttons;
    for (i = 0, len = ref.length; i < len; i++) {
      sb = ref[i];
      if (sb.__submenu === submenu) {
        return sb;
      }
    }
  };

  RootMenu.prototype.getAppButton = function(app) {
    return this.__app_button_by_unique_id[app.label()];
  };

  RootMenu.prototype.setActiveApp = function(app) {
    var sb;
    if (!app) {
      return this;
    }
    this.getAppButton(app).activate();
    sb = this.__findSubmenuButton(app.submenu());
    if (sb) {
      sb.activate();
    }
    return this;
  };

  RootMenu.prototype.unsetActiveApp = function(app) {
    var sb;
    if (!app) {
      return this;
    }
    this.getAppButton(app).deactivate();
    sb = this.__findSubmenuButton(app.submenu());
    if (sb) {
      sb.deactivate();
    }
    return this;
  };

  RootMenu.prototype.__appLoader = [];

  RootMenu.prototype.registerAppLoader = function(loader) {
    assert(loader instanceof RootMenuAppLoader, "RootMenu.registerAppLoader", "loader needs to be instance of RootMenuAppLoader.", loader);
    return this.__appLoader.push(loader);
  };

  return RootMenu;

})(AppManager);
// Generated by CoffeeScript 1.10.0
var RootMenuApp,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

RootMenuApp = (function(superClass) {
  extend(RootMenuApp, superClass);

  function RootMenuApp() {
    return RootMenuApp.__super__.constructor.apply(this, arguments);
  }

  RootMenuApp.prototype.label = function() {
    return window[getObjectClass(this)].label.call(this);
  };

  RootMenuApp.prototype.submenu = function() {
    return window[getObjectClass(this)].submenu.call(this);
  };

  RootMenuApp.getDisplay = function() {
    var label, loca_key, text;
    label = this.label();
    if (this.submenu() === "root") {
      loca_key = "root.menu." + label;
      text = void 0;
    } else {
      loca_key = void 0;
      text = $$(label);
    }
    return {
      text: text,
      loca_key: loca_key,
      "class": "ez5-root-menu-button-" + this.label().replace(/\./g, "-"),
      onClick: (function(_this) {
        return function(ev) {
          return _this.click(ev);
        };
      })(this)
    };
  };

  RootMenuApp.getId = function() {
    return this.label();
  };

  RootMenuApp.path = function() {};

  RootMenuApp.click = function(ev) {
    return ez5.rootMenu.loadApp(this, true);
  };

  RootMenuApp.getPathname = function() {
    var path;
    path = this.path();
    if (!path) {
      return "";
    }
    return "/" + path.join("/");
  };

  RootMenuApp.group = function() {
    return "main";
  };

  RootMenuApp.submenu = function() {
    return "root";
  };

  RootMenuApp.label = function() {
    return assert(false, (getObjectClass(this)) + ".label", "needs to be overloaded");
  };

  RootMenuApp.isStartApp = function() {
    return true;
  };

  RootMenuApp.prototype.pushState = function(path) {
    if (path == null) {
      path = [];
    }
    return this.__setState(path, "pushState");
  };

  RootMenuApp.prototype.replaceState = function(path) {
    if (path == null) {
      path = [];
    }
    return this.__setState(path, "replaceState");
  };

  RootMenuApp.prototype.__setState = function(path, funcName) {
    var full_path, pathname;
    pathname = window[this.__cls].getPathname();
    if (path.length > 0) {
      full_path = pathname + "/" + path.join("/");
    } else {
      full_path = pathname;
    }
    if (document.location.pathname === full_path) {
      console.warn(this.__cls + "." + funcName + ": Path already active: ", full_path);
      return;
    }
    return window.history[funcName]({}, null, full_path);
  };

  RootMenuApp.prototype.setTitle = function(label) {
    return this.appManager.setTitle(label);
  };

  RootMenuApp.prototype.getAppCssClassName = function() {
    return "ez5-app-" + toDash(this.__cls);
  };

  RootMenuApp.prototype.destroy = function() {};

  RootMenuApp.prototype.load = function(path) {
    this.setTitle(this.label());
    this.appManager.setActiveApp(this);
    this.appManager.closeMenu();
    document.documentElement.classList.add(this.getAppCssClassName());
    RootMenuApp.__super__.load.call(this);
    Events.trigger({
      node: document.body,
      type: "viewport-resize"
    });
    return CUI.resolvedPromise();
  };

  RootMenuApp.prototype.unload = function() {
    this.appManager.unsetActiveApp(this);
    this.setTitle();
    document.documentElement.classList.remove(this.getAppCssClassName());
    RootMenuApp.__super__.unload.call(this);
    Events.trigger({
      node: document.body,
      type: "viewport-resize"
    });
    return CUI.resolvedPromise();
  };

  RootMenuApp.prototype.reload = function() {
    return this.setTitle(this.label());
  };

  return RootMenuApp;

})(App);
// Generated by CoffeeScript 1.10.0
var RootMenuAppLoader,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

RootMenuAppLoader = (function(superClass) {
  extend(RootMenuAppLoader, superClass);

  function RootMenuAppLoader() {
    return RootMenuAppLoader.__super__.constructor.apply(this, arguments);
  }

  RootMenuAppLoader.prototype.findAppByPathname = function(apps, pathname) {
    return assert(false, this.__cls + ".findAppByPathname", "Not implemented.");
  };

  return RootMenuAppLoader;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var Session,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Session = (function(superClass) {
  extend(Session, superClass);

  function Session() {
    return Session.__super__.constructor.apply(this, arguments);
  }

  Session.request_cookieauth = true;

  Session.prototype.readOpts = function() {
    Session.__super__.readOpts.call(this);
    return this.loadPrefs();
  };

  Session.prototype.getClientDefault = function(key) {
    var d, ref, ref1;
    if (key == null) {
      key = null;
    }
    d = (ref = this.config) != null ? (ref1 = ref.defaults) != null ? ref1.client : void 0 : void 0;
    if (!CUI.isPlainObject(d)) {
      return null;
    }
    if (key === null) {
      return d;
    }
    if (d.hasOwnProperty(key)) {
      return d[key];
    }
    return null;
  };

  Session.prototype.isDebug = function() {
    var debug_mode_overwrite;
    debug_mode_overwrite = this.getPref("debug_mode_overwrite");
    if (debug_mode_overwrite) {
      return debug_mode_overwrite === "on";
    }
    return isTrue(this.getClientDefault("debug"));
  };

  Session.prototype.reload = function() {
    return this.get(this.token);
  };

  Session.prototype.deauthenticate = function() {
    return ez5.api.session({
      type: "POST",
      api: "/deauthenticate"
    }).done((function(_this) {
      return function(data) {
        _this.setSessionData(data);
        return CUI.setSessionStorage("token", void 0);
      };
    })(this));
  };

  Session.prototype.authenticate = function(data) {
    var dfr;
    dfr = new CUI.Deferred();
    ez5.api.session({
      type: "POST",
      api: "/authenticate",
      data: data
    }).done((function(_this) {
      return function(data) {
        return _this.setSessionData(data).done(function() {
          return dfr.resolve(data);
        }).fail(dfr.reject);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  Session.prototype.get = function(token, dfr) {
    var params;
    if (dfr == null) {
      dfr = new CUI.Deferred();
    }
    params = {};
    if (token) {
      params.token = token;
    } else {
      params.language = ez5.loca.getLanguage();
      if (Session.request_cookieauth) {
        params.cookieauth = 1;
      }
    }
    ez5.api.session({
      data: params,
      error: function() {}
    }).done((function(_this) {
      return function(data, status, xhr) {
        _this.__x_easydb = ServerRequestApi.getXEasydbHeaders(xhr);
        _this.__current_schema = null;
        _this.checkSchemaVersions(xhr);
        return _this.setSessionData(data).done(dfr.resolve).fail(dfr.reject);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  Session.prototype.getSchemaInfo = function() {
    assert(this.__current_schema, "Session.getSchemaInfo", "No current schema found.");
    return this.__current_schema;
  };

  Session.prototype.checkSchemaVersions = function(jqXHR) {
    var current;
    if (this.__handleSchemaUpdate) {
      return false;
    }
    current = ServerRequestApi.getXEasydbHeaders(jqXHR);
    if (!this.__current_schema) {
      this.__current_schema = current;
      return true;
    }
    if (this.__current_schema.base !== current.base || this.__current_schema.user !== current.user || this.__current_schema.solution !== current.solution) {
      this.handleSchemaUpdate();
      return false;
    }
    return true;
  };

  Session.prototype.handleSchemaUpdate = function() {
    return this.__handleSchemaUpdate = new CUI.Alert({
      title: $$("admin.schema.update.modal.title"),
      text: $$("admin.schema.update.modal.explain"),
      button_text_ok: $$("admin.schema.update.modal.button")
    }).open().done((function(_this) {
      return function() {
        return document.location.reload();
      };
    })(this));
  };

  Session.prototype.getXEasydb = function() {
    return this.__x_easydb;
  };

  Session.prototype.setSessionData = function(data1) {
    var ref;
    this.data = data1;
    this.token = this.data.token;
    CUI.setSessionStorage("token", this.token);
    this.frontend_language = this.data.frontend_language;
    this.frontend_locale = this.data.frontend_locale;
    assert(!CUI.isEmptyObject(this.frontend_locale), "Session.set", "Session did not return a frontend_locale. Cannot set session.", {
      data: this.data
    });
    this.config = this.data.config || {};
    if (this.data.user) {
      this.user = User.newInstance({
        user: this.data.user
      });
    } else {
      this.user = null;
    }
    this.pendingTasks = ((ref = this.data.pending_tasks) != null ? ref.slice() : void 0) || [];
    assert(!this.authenticated || this.user, "Session.set", "user not set in authenticated session", {
      session: this
    });
    if (this.isDebug()) {
      CUI.defaults.debug = true;
      document.body.classList.add("ez5-session-debug");
    }
    this.loadPrefs();
    this.system_rights = this.data.system_rights || {};
    return this.setLanguage().always((function(_this) {
      return function() {
        return _this.__setDocumentTitle();
      };
    })(this));
  };

  Session.prototype.__setDocumentTitle = function() {
    return document.title = this.getSystemName();
  };

  Session.prototype.getSystemName = function() {
    var dn, ref, ref1;
    dn = (ref = this.getBaseConfig().system.displayname) != null ? (ref1 = ref.value) != null ? ref1[this.frontend_language] : void 0 : void 0;
    if (isString(dn) && !isEmpty(dn.trim())) {
      return dn;
    } else {
      return "easydb 5";
    }
  };

  Session.prototype.__getSystemRights = function() {
    return this.system_rights;
  };

  Session.prototype.getSystemRight = function(sr) {
    var _sr, part_name, part_value, parts, value;
    if (!sr.match(/^(plugin\.|system\.)/)) {
      sr = "system." + sr;
    }
    parts = sr.match(/^(.*?)(?:|\[([^\]]+)\])(?:|\[([^\]]+)\])$/);
    if (parts[2] && parts[3]) {
      part_name = parts[2];
      part_value = parts[3];
    } else if (!parts[2] && parts[3]) {
      part_name = parts[3];
      part_value = null;
    } else {
      part_name = null;
      part_value = null;
    }
    _sr = this.__getSystemRights()[parts[1]];
    if (!_sr) {
      return null;
    }
    if (isNull(part_name)) {
      return _sr;
    }
    if (!_sr.hasOwnProperty(part_name)) {
      return null;
    }
    value = _sr[part_name];
    if (isNull(part_value)) {
      return value;
    }
    if (value === false) {
      if (isFalse(part_value)) {
        return value;
      } else {
        return null;
      }
    }
    if (value === true) {
      if (isTrue(part_value)) {
        return value;
      } else {
        return null;
      }
    }
    if (isString(value)) {
      if (value === part_value) {
        return value;
      } else {
        return null;
      }
    }
    if ($.isArray(value)) {
      if (indexOf.call(value, part_value) >= 0) {
        return [part_value];
      } else {
        return null;
      }
    }
    return null;
  };

  Session.prototype.hasSystemRight = function() {
    var i, len, sr;
    for (i = 0, len = arguments.length; i < len; i++) {
      sr = arguments[i];
      if (this.getSystemRight(sr)) {
        return true;
      }
    }
    return false;
  };

  Session.prototype.getData = function() {
    return this.data;
  };

  Session.prototype.getDisplayName = function() {
    if (!this.user) {
      return "(no user)";
    } else {
      return this.user.getDisplayText();
    }
  };

  Session.prototype.getAuthMethod = function() {
    var ref;
    return (ref = this.getData().authenticated) != null ? ref.method : void 0;
  };

  Session.prototype.isAuthenticated = function() {
    return !!this.user;
  };

  Session.prototype.getUser = function() {
    assert(this.user instanceof User, "Session.getUser", "Session not authenticated, unable to get user", {
      session: this
    });
    return this.user;
  };

  Session.prototype.getLanguage = function() {
    return this.frontend_language;
  };

  Session.prototype.loadPrefs = function() {
    var cookiePrefs, cookie_only_prefs, cookies, db_langs, e, error, i, j, k, lang, len, len1, ref, ref1, ref2, ref3, ref4, v;
    this.__prefs = {};
    if (this.user) {
      ref = this.user.getData().user.frontend_prefs.webfrontend;
      for (k in ref) {
        v = ref[k];
        this.__prefs[k] = copyObject(v, true);
      }
      ref1 = ["database_languages", "search_languages", "frontend_language"];
      for (i = 0, len = ref1.length; i < len; i++) {
        k = ref1[i];
        this.__prefs[k] = this.user.getData().user[k];
      }
      db_langs = ez5.session.getConfigDatabaseLanguages();
      ref2 = {
        database_languages: "Database",
        search_languages: "Search"
      };
      for (k in ref2) {
        v = ref2[k];
        if (!this.__prefs[k]) {
          continue;
        }
        ref3 = this.__prefs[k];
        for (j = 0, len1 = ref3.length; j < len1; j++) {
          lang = ref3[j];
          if (indexOf.call(db_langs, lang) < 0) {
            CUI.error(("Session.loadPrefs: " + v + " language \"" + lang + "\" is not enabled in Base Config. Base Config enabled languages are: ") + db_langs.join(", "));
          }
        }
      }
    }
    cookiePrefs = this.getCookieDefaultPrefs();
    try {
      if (window.localStorage.getItem("webfrontend")) {
        cookies = JSON.parse(window.localStorage.getItem("webfrontend"));
      } else {
        cookies = {};
      }
    } catch (error) {
      e = error;
      cookies = {};
    }
    cookie_only_prefs = this.getCookieOnlyPrefs();
    for (k in cookiePrefs) {
      v = cookiePrefs[k];
      if (!isNull(this.__prefs[k]) && indexOf.call(cookie_only_prefs, k) < 0) {
        continue;
      }
      if (cookies.hasOwnProperty(k)) {
        this.__prefs[k] = cookies[k];
      } else {
        this.__prefs[k] = v;
      }
    }
    ref4 = this.getDefaultPrefs();
    for (k in ref4) {
      v = ref4[k];
      if (isNull(this.__prefs[k])) {
        this.__prefs[k] = v;
      }
    }
    return this;
  };

  Session.prototype.getDefaultPrefs = function() {
    var defaults;
    defaults = {
      show_asset_browser: true,
      detail_sidebar_show_hierarchy: false,
      NestedTable_append_prepend: "prepend",
      spellcheck: false
    };
    if (this.config) {
      defaults.database_languages = [this.getConfigDatabaseLanguages()[0]];
      defaults.search_languages = [this.getConfigDatabaseLanguages()[0]];
    }
    return defaults;
  };

  Session.prototype.clearPrefs = function(ev) {
    var user;
    assert(this.user, "Session.clearPrefs", "No user found.");
    return this.savePrefs(ev, {}, user = this.user).done((function(_this) {
      return function() {
        try {
          return window.localStorage.clear();
        } catch (undefined) {}
      };
    })(this));
  };

  Session.prototype.savePrefs = function(ev, prefs, user, mode) {
    var dfr, update_user, user_copy;
    if (prefs == null) {
      prefs = this.__prefs;
    }
    if (mode == null) {
      mode = "settings";
    }
    assert(mode === "settings" || mode === "register", "Session.savePrefs", "mode needs to be settings or register.", {
      mode: mode
    });
    dfr = new CUI.Deferred();
    if (ev != null ? ev.hasModifierKey() : void 0) {
      console.debug("Preferences:", dump(prefs));
      if (!this.user) {
        return dfr.reject();
      }
    }
    this.saveCookiePrefs(prefs);
    if (this.user) {
      update_user = (function(_this) {
        return function(_user) {
          _user.setDataOfPrefs(prefs);
          return _user.saveLimited(ev, mode).done(function() {
            if (!user) {
              console.debug("Session.savePrefs: ", _user.getData());
              _this.user.loadData(_user.getData());
            }
            _this.__prefs = prefs;
            return dfr.resolve();
          }).fail(dfr.reject);
        };
      })(this);
      if (user) {
        update_user(user);
      } else {
        user_copy = this.user.copy();
        user_copy.load().done((function(_this) {
          return function() {
            return update_user(user_copy);
          };
        })(this));
      }
    } else {
      this.__prefs = prefs;
      dfr.resolve();
    }
    return dfr.promise();
  };

  Session.prototype.getPrefs = function() {
    return copyObject(this.__prefs, true);
  };

  Session.prototype.setPref = function(pref, value) {
    this.__prefs[pref] = value;
    return this;
  };

  Session.prototype.saveCookiePrefs = function(cprefs) {
    var cookies, k, ref, v;
    if (cprefs == null) {
      cprefs = this.__prefs;
    }
    cookies = {};
    ref = this.getCookieDefaultPrefs();
    for (k in ref) {
      v = ref[k];
      this.__prefs[k] = cprefs[k];
      if (cprefs[k] !== v) {
        cookies[k] = cprefs[k];
      }
    }
    try {
      window.localStorage.setItem("webfrontend", JSON.stringify(cookies));
    } catch (undefined) {}
    return this;
  };

  Session.prototype.saveCookiePref = function(pref, value) {
    assert(this.getCookieDefaultPrefs().hasOwnProperty(pref), "Session.saveCookiePref", "Pref \"" + pref + "\" is not a Cookie Pref");
    this.setPref(pref, value);
    this.saveCookiePrefs();
    return this;
  };

  Session.prototype.savePref = function(pref, value) {
    this.setPref(pref, value);
    return this.savePrefs();
  };

  Session.prototype.getPref = function(pref) {
    return this.__prefs[pref];
  };

  Session.prototype.getCookieOnlyPrefs = function() {
    return ["skip_anonymous", "preferred_language", "show_asset_browser", "detail_sidebar_show_hierarchy", "remember_me", "event_poll", "css_mode", "css_developer_theme", "debug_mode_overwrite", "easydb_server_url", "easydb_server_url_history", "plugins_load_from_remote", "warn_about_not_latest_version"];
  };

  Session.prototype.getCookieDefaultPrefs = function() {
    return {
      theme: Start.knownCSSThemes[0],
      skip_anonymous: false,
      css_developer_theme: null,
      remember_me: false,
      event_poll: true,
      preferred_language: null,
      css_mode: null,
      debug_mode_overwrite: null,
      plugins_load_from_remote: true,
      show_asset_browser: true,
      detail_sidebar_show_hierarchy: false,
      easydb_server_url_history: [],
      warn_about_not_latest_version: true,
      easydb_server_url: null
    };
  };

  Session.prototype.getConfigDatabaseLanguages = function() {
    var ref;
    return ((ref = this.getBaseConfig().system.languages) != null ? ref.database : void 0) || [];
  };

  Session.prototype.getConfigFrontendLanguages = function() {
    var ref;
    return ((ref = this.getBaseConfig().system.languages) != null ? ref.frontend : void 0) || [];
  };

  Session.prototype.loadTheme = function() {
    var css_mode, css_modes, i, len, prefs, ref, ref1, ref2, theme, theme_name, theme_names;
    theme_names = ["ng"];
    prefs = {
      theme: this.getPref("theme"),
      developer_theme: this.getPref("css_developer_theme"),
      css_mode: this.getPref("css_mode")
    };
    if ((ref = prefs.developer_theme) === "light" || ref === "dark") {
      theme_names.push(prefs.developer_theme);
    }
    css_modes = Start.getCSSModes();
    if (prefs.developer_theme) {
      theme = prefs.developer_theme;
    } else {
      theme = prefs.theme;
    }
    css_mode = this.getPref("css_mode");
    if (!css_mode || indexOf.call(css_modes, css_mode) < 0) {
      css_mode = css_modes[0];
    }
    if (!theme || indexOf.call(theme_names, theme) < 0) {
      theme = theme_names[0];
    }
    for (i = 0, len = theme_names.length; i < len; i++) {
      theme_name = theme_names[i];
      CUI.CSS.registerTheme({
        name: theme_name,
        url: Start.getCSSUrl(theme_name, css_mode)
      });
    }
    if (((ref1 = this.__current_theme) != null ? ref1.theme : void 0) === theme && ((ref2 = this.__current_theme) != null ? ref2.mode : void 0) === css_mode) {
      console.warn("Session.loadTheme: Already loaded.");
      return CUI.resolvedPromise();
    }
    return CUI.CSS.loadTheme(theme).done((function(_this) {
      return function() {
        if (CUI.__ng__) {
          ez5.defaults.focusClass = "cui-selected";
        } else {
          ez5.defaults.focusClass = "ez-focus";
        }
        return _this.__current_theme = {
          theme: theme,
          mode: css_mode
        };
      };
    })(this)).fail((function(_this) {
      return function(path) {
        return CUI.problem({
          text: $$("session.load_theme_error", {
            path: path,
            theme: theme,
            mode: css_mode
          }),
          markdown: true
        });
      };
    })(this));
  };

  Session.prototype.getLoginBackdrop = function() {
    var backdrop, cls, dim, img, value;
    value = this.getConfigPicture("background");
    if (!value) {
      return;
    }
    dim = CUI.DOM.getDimensions(window);
    img = Asset.getBestImageForViewport(new AssetPlain({
      value: value
    }), dim.width, dim.height);
    if (!img) {
      return;
    }
    if (img.width > img.height) {
      cls = "landscape";
    } else {
      cls = "portrait";
    }
    backdrop = $div("login-backdrop " + cls).css({
      backgroundImage: "url(" + img.url + ")"
    });
    return backdrop;
  };

  Session.prototype.getDefaults = function() {
    var ref;
    return ((ref = this.config) != null ? ref.defaults : void 0) || {
      client: {},
      server: {}
    };
  };

  Session.prototype.getEASConfig = function() {
    var ref;
    return ((ref = this.config) != null ? ref.eas : void 0) || {};
  };

  Session.prototype.getBaseConfig = function() {
    var ref;
    return ((ref = this.config) != null ? ref.base : void 0) || {
      system: {},
      "default": {}
    };
  };

  Session.prototype.getCustomDataTypes = function() {
    return this.getDefaults().server.custom_data_types || {};
  };

  Session.prototype.getInstance = function() {
    return this.data.instance || {};
  };

  Session.prototype.getInstanceGlobalName = function() {
    return this.getInstance().name;
  };

  Session.prototype.getConfigPicture = function(name) {
    var img, key, ref;
    switch (name) {
      case "background":
      case "logo":
        key = {
          background: ["login.background_image", "image"],
          logo: ["logo", "logo"]
        }[name];
        img = (ref = this.getBaseConfig().system[key[0]]) != null ? ref[key[1]] : void 0;
        if (!img) {

        }
        if ((img != null ? img.status : void 0) === "done") {
          return img;
        }
        break;
      default:
        assert(false, "Session.getConfigPicture", "Unknown picture \"" + name + "}");
    }
    return null;
  };

  Session.prototype.getDefaultPicture = function(name) {
    var ref;
    return (ref = this.getBaseConfig().defaults.pictures) != null ? ref[name] : void 0;
  };

  Session.prototype.workPendingTasks = function(master_dfr, task_count) {
    var pt;
    if (!master_dfr) {
      master_dfr = new CUI.Deferred();
      task_count = this.pendingTasks.length;
    }
    if (this.pendingTasks.length === 0) {
      return master_dfr.resolve(task_count);
    }
    this.workPendingTask(pt = this.pendingTasks.shift()).fail((function(_this) {
      return function(reason) {
        if (reason === "user_rejected") {
          return CUI.confirm({
            text: $$("session.pending_tasks.cancel_warning"),
            button_text_ok: $$("session.pending_tasks.cancel_warning.button"),
            button_primary: "cancel"
          }).done(function() {
            return master_dfr.reject(reason);
          }).fail(function() {
            _this.pendingTasks.splice(0, 0, pt);
            return _this.workPendingTasks(master_dfr, task_count);
          });
        } else {
          return master_dfr.reject(reason);
        }
      };
    })(this)).done((function(_this) {
      return function() {
        CUI.debug("next ", _this.pendingTasks.length);
        return _this.workPendingTasks(master_dfr, task_count);
      };
    })(this));
    return master_dfr.promise();
  };

  Session.prototype.workPendingTask = function(pt) {
    var dfr;
    CUI.debug("working pending task", pt);
    dfr = new CUI.Deferred();
    switch (pt.type) {
      case "message":
        this.pendingTaskMessage(dfr, pt.message);
        break;
      case "system_message":
        this.pendingTaskSystemMessage(dfr, pt.system_message);
        break;
      case "set_password":
        this.pendingTaskSetPassword(dfr);
        break;
      case "logout":
        this.logoutSilent();
        break;
      default:
        CUI.error("Unknown pending task", pt.type, pt);
        CUI.problem({
          text: $$("session.pending_tasks.unknown_pending_task", {
            pending_task: pt.type
          }),
          button_text_ok: $$("session.pending_tasks.unknown_pending_task.button")
        }).done((function(_this) {
          return function() {
            return _this.logout();
          };
        })(this));
    }
    return dfr.promise();
  };

  Session.prototype.logoutSilent = function() {
    var ref;
    if ((ref = ez5.eventPoller) != null) {
      ref.stop();
    }
    return this.deauthenticate().always((function(_this) {
      return function() {
        return document.location.assign("/");
      };
    })(this));
  };

  Session.prototype.logout = function() {
    var ref;
    this.logoutSilent();
    return;
    if ((ref = ez5.eventPoller) != null) {
      ref.stop();
    }
    return this.deauthenticate().always((function(_this) {
      return function() {
        if (ez5.rootLayout) {
          CUI.DOM.remove(ez5.rootLayout.DOM);
        }
        ez5.start.showSplash();
        return CUI.alert({
          text: $$("session.logout.message"),
          button_text_ok: $$("session.logout.message.start_over")
        }).done(function() {
          return document.location.assign("/login");
        });
      };
    })(this));
  };

  Session.prototype.pendingTaskMessage = function(dfr, msg) {
    AdminMessage.showMessageDialog({
      webfrontend_type: msg.webfrontend_type,
      confirm: msg.confirm,
      title: msg.title,
      message: msg.message
    }).done((function(_this) {
      return function() {
        return ez5.api.session({
          type: "POST",
          api: "/messages_confirm",
          json_data: [msg.message_key]
        }).done(function() {
          return dfr.resolve();
        }).fail(function(xhr) {
          return dfr.reject(xhr);
        });
      };
    })(this)).fail((function(_this) {
      return function() {
        return dfr.reject("user_rejected");
      };
    })(this));
    return this;
  };

  Session.prototype.pendingTaskSystemMessage = function(dfr, msg) {
    var params;
    params = msg.parameters;
    return CUI.alert({
      markdown: true,
      text: $$(msg.code, params)
    }).done(function() {
      return dfr.resolve();
    });
  };

  Session.prototype.pendingTaskSetPassword = function(dfr) {
    return this.passwordChangeModal("set_password").done(function() {
      return dfr.resolve();
    }).fail(function() {
      return dfr.reject("user_rejected");
    });
  };

  Session.prototype.getMethod = function(method) {
    var auth_method, found_method, i, len, ref;
    ref = this.data.authentication_methods;
    for (i = 0, len = ref.length; i < len; i++) {
      auth_method = ref[i];
      if (auth_method.method === method) {
        found_method = auth_method;
        break;
      }
    }
    if (!found_method) {
      return null;
    }
    return found_method;
  };

  Session.prototype.loginAgain = function(load_apps, allowCancel) {
    var dfr;
    if (load_apps == null) {
      load_apps = true;
    }
    if (allowCancel == null) {
      allowCancel = true;
    }
    dfr = new CUI.Deferred();
    ez5.login.showLogin(allowCancel).done((function(_this) {
      return function() {
        return _this.setLanguage().always(function() {
          return _this.workPendingTasks().done(function() {
            ez5.start.showSplash();
            return ez5.load_defaults().done(function() {
              if (load_apps) {
                return ez5.start.loadApps().always(dfr.resolve);
              } else {
                return dfr.resolve();
              }
            });
          }).fail(dfr.reject);
        });
      };
    })(this));
    dfr.always((function(_this) {
      return function() {
        return ez5.start.hideSplash();
      };
    })(this));
    return dfr.promise();
  };

  Session.prototype.getReady = function() {
    var auth, auth_error, dfr, goto_login, login_by_method, match, ref, sso, url_parms, work_pending_tasks;
    dfr = new CUI.Deferred();
    work_pending_tasks = (function(_this) {
      return function() {
        _this.workPendingTasks().done(function() {
          return ez5.load_defaults().done(function() {
            return dfr.resolve();
          }).fail(function() {
            return dfr.reject({
              error: "session.authenticate_failure"
            });
          });
        }).fail(function() {
          return dfr.reject("goto_login");
        });
        return dfr.promise();
      };
    })(this);
    goto_login = (function(_this) {
      return function() {
        dfr.reject("goto_login");
        return dfr.promise();
      };
    })(this);
    login_by_method = (function(_this) {
      return function(method) {
        _this.authenticate({
          method: method
        }).done(function() {
          return work_pending_tasks();
        }).fail(function() {
          return dfr.reject({
            error: "session.authenticate_failure",
            error_args: arguments
          });
        });
        return dfr.promise();
      };
    })(this);
    url_parms = CUI.decodeUrlData(document.location.search.substring(1));
    sso = this.getMethod("sso");
    if (!isEmpty(url_parms.login) && !isEmpty(url_parms.password)) {
      ez5.start.removeFromUrl("login");
      ez5.start.removeFromUrl("password");
      auth = {
        method: "easydb",
        login: url_parms.login,
        password: url_parms.password
      };
    }
    match = document.location.pathname.match("^/collection/(.*)$");
    if (match) {
      if (url_parms.collection) {
        auth = {
          method: "collection",
          login: match[1],
          collection: match[1],
          password: url_parms.collection
        };
      } else if (url_parms.email && url_parms.acl) {
        auth = {
          method: "email",
          login: url_parms.email,
          password: url_parms.acl
        };
      } else if (!this.getAuthMethod() && !auth) {
        return goto_login();
      }
    } else {
      match = document.location.pathname.match("^/task?(.*)$");
      if (match) {
        window.history.pushState({}, null, "/");
        auth = {
          method: "task",
          login: url_parms.email,
          password: url_parms.code
        };
        auth_error = null;
      }
    }
    if (document.location.pathname.match("^/login(\/|)$")) {
      window.history.pushState({}, null, "/");
      return goto_login();
    }
    if (this.getAuthMethod() && !auth) {
      work_pending_tasks();
      return dfr.promise();
    }
    if (auth) {
      if (this.getAuthMethod()) {
        console.warn("User is already authenticated, overloading with new authorization.");
      }
      if (this.getMethod(auth.method)) {
        this.authenticate(auth).done((function(_this) {
          return function() {
            return work_pending_tasks();
          };
        })(this)).fail((function(_this) {
          return function() {
            if (!auth_error) {
              return goto_login();
            } else {
              if (!auth_error) {
                goto_login();
              } else {

              }
              return CUI.problem({
                text: $$(auth_error)
              }).done(function() {
                return goto_login();
              });
            }
          };
        })(this));
      } else {
        return goto_login();
      }
    } else if (this.getPref("remember_me") && this.getMethod("easydb_cookie")) {
      login_by_method("easydb_cookie");
    } else if (sso && ((ref = sso.client) != null ? ref.autostart : void 0)) {
      this.loginByMethodSSO().done((function(_this) {
        return function() {
          return work_pending_tasks();
        };
      })(this)).fail((function(_this) {
        return function(reason) {
          if (reason === "sso_try_anonymous" && _this.getMethod("anonymous") && !_this.getPref("skip_anonymous")) {
            return login_by_method("anonymous");
          } else if (reason === "sso_needs_login") {
            return goto_login();
          } else {
            return dfr.reject({
              error: "session.authenticate_failure",
              error_args: arguments
            });
          }
        };
      })(this));
    } else if (this.getMethod("anonymous") && !this.getPref("skip_anonymous")) {
      login_by_method("anonymous");
    } else {
      goto_login();
    }
    return dfr.promise();
  };

  Session.prototype.getGroups = function() {
    var grp, i, len, ref, results;
    ref = this.data.groups;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      grp = ref[i];
      results.push(Group.newInstance({
        group: grp
      }));
    }
    return results;
  };

  Session.prototype.getGroupIds = function() {
    var grp, i, len, ref, results;
    ref = this.data.groups;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      grp = ref[i];
      results.push(grp.group._id);
    }
    return results;
  };

  Session.prototype.dumpGroups = function() {
    var grp, i, len, ref;
    ref = this.getGroups();
    for (i = 0, len = ref.length; i < len; i++) {
      grp = ref[i];
      console.debug(grp.getDisplayText());
    }
  };

  Session.prototype.passwordChangeModal = function(mode) {
    var cancel, changeBtn, checkBtn, data, dfr, form, modal;
    if (mode == null) {
      mode = "change_password";
    }
    assert(mode === "change_password" || mode === "set_password", "Session.passwordChangeModal", "Only change_password and set_password are supported for mode.", {
      mode: mode
    });
    modal = null;
    dfr = new CUI.Deferred();
    data = {
      current_password: "",
      new_password_1: "",
      new_password_2: ""
    };
    cancel = function() {
      modal.destroy();
      return dfr.reject();
    };
    changeBtn = new LocaButton({
      loca_key: "auth.button." + mode,
      disabled: true,
      onClick: (function(_this) {
        return function(ev) {
          var sd;
          sd = {
            new_password: data.new_password_1
          };
          if (mode === "change_password") {
            sd.password = data.current_password;
          }
          if (ev.shiftKey() || ev.altKey() || ev.ctrlKey()) {
            console.debug(dump(sd));
            return;
          }
          return ez5.api.session({
            type: "POST",
            api: "/" + mode,
            json_data: sd
          }).done(function() {
            return CUI.alert({
              text: $$("session.password_changed_success")
            }).done(function() {
              modal.destroy();
              return dfr.resolve();
            });
          });
        };
      })(this)
    });
    checkBtn = function() {
      data.new_password_1 = data.new_password_1.trim();
      data.new_password_2 = data.new_password_2.trim();
      changeBtn.disable();
      form.updateHint("new_password_2", "");
      if (data.new_password_1.length === 0 || data.new_password_2.length === 0) {
        return false;
      }
      if (data.new_password_1 !== data.new_password_2) {
        form.updateHint("new_password_2", $$("auth.error.passwords_dont_match"));
        return false;
      }
      if (mode === "change_password" && data.current_password.trim().length === 0) {
        return false;
      }
      changeBtn.enable();
      return true;
    };
    form = new Form({
      fields: [
        mode === "change_password" ? {
          type: Password,
          mark_changed: false,
          form: {
            label: $$("auth.form.current_password")
          },
          name: "current_password"
        } : void 0, {
          type: Password,
          mark_changed: false,
          form: {
            label: $$("auth.form.new_password_1")
          },
          name: "new_password_1"
        }, {
          type: Password,
          mark_changed: false,
          form: {
            label: $$("auth.form.new_password_2"),
            hint: ""
          },
          name: "new_password_2"
        }, {
          type: Checkbox,
          mark_changed: false,
          form: {
            label: $$("auth.form.show_passwords")
          },
          name: "show_passwords",
          onDataChanged: (function(_this) {
            return function(data, df) {
              var arr, fn, func, i, len, results;
              if (data.show_passwords) {
                func = "show";
              } else {
                func = "hide";
              }
              if (mode === "set_password") {
                arr = ["new_password_1", "new_password_2"];
              } else {
                arr = ["current_password", "new_password_1", "new_password_2"];
              }
              results = [];
              for (i = 0, len = arr.length; i < len; i++) {
                fn = arr[i];
                results.push(df.getOtherField(fn)[func + "Password"]());
              }
              return results;
            };
          })(this)
        }
      ],
      onDataChanged: checkBtn,
      data: data
    }).start();
    modal = new Modal({
      "class": "ez5-password-change-modal ez5-auth-" + mode,
      pane: {
        header_left: new Label({
          text: $$("auth.title." + mode)
        }),
        content: form,
        footer_right: changeBtn
      },
      cancel: true,
      onCancel: (function(_this) {
        return function() {
          return cancel();
        };
      })(this)
    }).show();
    return dfr.promise();
  };

  Session.prototype.setLanguage = function() {
    var _lang, dfr, frontend_languages, i, lang, len, ref, ref1;
    dfr = new CUI.Deferred();
    frontend_languages = (ref = this.getBaseConfig().system.languages) != null ? ref.frontend : void 0;
    lang = null;
    ref1 = [this.getPref("preferred_language"), this.frontend_language, ez5.loca.getPreferredNavigatorLanguage(), frontend_languages != null ? frontend_languages[0] : void 0];
    for (i = 0, len = ref1.length; i < len; i++) {
      _lang = ref1[i];
      if ((!frontend_languages || indexOf.call(frontend_languages, _lang) >= 0) && indexOf.call(ez5.loca.cultures, _lang) >= 0) {
        lang = _lang;
        break;
      }
    }
    if (!lang) {
      lang = ez5.loca.cultures[0];
    }
    ez5.loca.setLanguage(lang).fail(dfr.reject).done((function(_this) {
      return function() {
        if (!_this.user) {
          dfr.resolve();
          return;
        }
        if (_this.frontend_language !== lang) {
          _this.setPref("frontend_language", lang);
          console.info("Language in localStorage '" + lang + "' differs from the session's (" + _this.frontend_language + "), we update the user to '" + lang + "' and reload the session.");
          _this.savePrefs().fail(dfr.reject).done(function() {
            return _this.reload().done(dfr.resolve).fail(dfr.reject);
          });
          return;
        }
        dfr.resolve();
      };
    })(this));
    return dfr.promise();
  };

  Session.prototype.SSOAuthAttended = function(visible, show_errors, timeout, window_open) {
    var dfr;
    dfr = new CUI.Deferred();
    return this.__SSOAuth(visible, show_errors, timeout, window_open).done((function(_this) {
      return function(data) {
        return _this.setSessionData(data).done(dfr.resolve).fail(dfr.reject);
      };
    })(this)).fail((function(_this) {
      return function(reason) {
        return dfr.reject(reason);
      };
    })(this));
  };

  Session.prototype.loginByMethodSSO = function() {
    var dfr, show_errors, sso, timeout, visible;
    sso = this.getMethod("sso");
    console.error("loginByMethodSSO", sso);
    visible = sso.client.autostart.visible;
    show_errors = sso.client.autostart.show_errors;
    timeout = sso.client.autostart.timeout;
    dfr = new CUI.Deferred();
    this.__SSOAuth(visible, show_errors, timeout).done((function(_this) {
      return function(data) {
        return _this.setSessionData(data).done(dfr.resolve).fail(dfr.reject);
      };
    })(this)).fail((function(_this) {
      return function(reason) {
        if (sso.client.autostart.anonymous_fallback) {
          console.warn("Session: Autostart SSO failed, trying anonymous.", reason);
          return dfr.reject("sso_try_anonymous");
        } else {
          CUI.warn("Session: Unattended SSO failed, redirecting to Login.", reason);
          return dfr.reject("sso_needs_login");
        }
      };
    })(this));
    return dfr.promise();
  };

  Session.prototype.__SSOAuth = function(visible, show_errors, timeout, window_open) {
    var answer, finish_master_dfr, get_func, iframe, interval, msg_lsn, postee, sso, sso_deferred, sso_master_dfr, sso_modal, url, win;
    if (visible == null) {
      visible = true;
    }
    if (show_errors == null) {
      show_errors = true;
    }
    if (timeout == null) {
      timeout = null;
    }
    if (window_open == null) {
      window_open = null;
    }
    sso = this.getMethod("sso");
    sso_master_dfr = new CUI.Deferred();
    sso_deferred = new CUI.Deferred();
    answer = null;
    url = ez5.getAbsoluteURL(sso.authenticate_base);
    if (url.match(/\?/)) {
      url += "&";
    } else {
      url += "?";
    }
    if (window_open === null) {
      postee = "window.parent";
    } else {
      postee = "window.opener";
    }
    get_func = (function(_this) {
      return function(type) {
        return "var func = function(parm) {\n    var s = {\n	    login: '" + type + "',\n		easydb: true\n	};\n	s.response = parm;\n	" + postee + ".postMessage(s, '*'); };\n\nfunc";
      };
    })(this);
    url += CUI.encodeUrlData({
      success: get_func("success"),
      error: get_func("error"),
      token: this.token
    });
    console.debug("__SSOAuth", "visible:", visible, "show_errors:", show_errors, sso, url);
    interval = null;
    if (window_open === null) {
      iframe = $element("iframe", "", {
        src: url
      });
    } else {
      win = window.open(url, "_blank", window_open);
      interval = window.setInterval((function(_this) {
        return function() {
          if (win.closed) {
            console.error("window closed!", win);
            return finish_master_dfr();
          }
        };
      })(this), 500);
      console.debug("window opened:", win, interval);
      window.addEventListener("unload", (function(_this) {
        return function() {
          return win.close();
        };
      })(this));
    }
    msg_lsn = Events.listen({
      type: "message",
      node: window,
      call: (function(_this) {
        return function(ev, info) {
          var data;
          data = ev.getNativeEvent().data;
          console.debug("Session message received", data);
          if (!data.easydb) {
            return;
          }
          Events.ignore(msg_lsn);
          if (data.auth_required) {
            sso_deferred.reject({
              code: "session.sso.auth_required"
            });
            return;
          }
          switch (data.login) {
            case "success":
              sso_deferred.resolve(data.response);
              break;
            case "error":
              sso_deferred.reject(data.response);
          }
        };
      })(this)
    });
    finish_master_dfr = (function(_this) {
      return function() {
        if (interval) {
          window.clearInterval(interval);
          interval = null;
        }
        Events.ignore(msg_lsn);
        switch (sso_deferred.state()) {
          case "rejected":
            sso_master_dfr.reject(answer);
            break;
          case "resolved":
            sso_master_dfr.resolve(answer);
            break;
          default:
            sso_master_dfr.reject();
        }
      };
    })(this);
    sso_deferred.fail((function(_this) {
      return function(reason) {
        var msg;
        answer = reason;
        if (show_errors) {
          msg = $$(reason.code, reason.parameters);
          return new CUI.ConfirmationChoice({
            text: msg,
            title: $$("session.sso.auth_failed.title"),
            choices: [
              {
                text: $$("session.sso.auth_failed.choice.more_info"),
                onClick: function() {
                  if (iframe) {
                    return sso_modal.setVisible(true);
                  } else {
                    return win.show();
                  }
                }
              }, {
                text: $$("session.sso.auth_failed.choice.ok"),
                onClick: function() {
                  if (iframe) {
                    return sso_modal.destroy();
                  } else {
                    return win.close();
                  }
                }
              }
            ]
          }).open();
        } else if (visible) {

        } else {
          if (iframe) {
            return sso_modal.destroy();
          } else {
            return win.close();
          }
        }
      };
    })(this));
    sso_deferred.done((function(_this) {
      return function(data) {
        answer = data;
        if (iframe) {
          return sso_modal.destroy();
        } else {
          return win.close();
        }
      };
    })(this));
    if (iframe) {
      sso_modal = new Modal({
        "class": "ez5-session-sso-modal",
        cancel: true,
        visible: visible,
        onHide: (function(_this) {
          return function() {
            return finish_master_dfr();
          };
        })(this),
        pane: {
          header_left: new Label({
            text: $$("session.sso.modal.title")
          }),
          content: iframe
        }
      });
      if (!visible && (timeout > 0 || timeout === null)) {
        CUI.setTimeout({
          ms: timeout || 5000,
          call: (function(_this) {
            return function() {
              if (sso_deferred.state() === "pending") {
                sso_deferred.reject({
                  code: "session.sso.auth_failed.timeout"
                });
              }
            };
          })(this)
        });
      }
      sso_modal.show();
    }
    return sso_master_dfr.promise();
  };

  Session.cleanServerUrl = function(server) {
    var parsed, s;
    s = server.trim();
    parsed = CUI.parseLocation(server);
    return (parsed != null ? parsed.url : void 0) || "";
  };

  return Session;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var Login,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Login = (function(superClass) {
  extend(Login, superClass);

  function Login() {
    return Login.__super__.constructor.apply(this, arguments);
  }

  Login.prototype.__showLoginMessage = function(code) {
    var loc, txt;
    if (window.easydb_server_url) {
      loc = CUI.parseLocation(window.easydb_server_url);
      txt = loc.hostname;
    } else {
      txt = "";
    }
    return this.__loginMessage.setText(txt);
  };

  Login.prototype.__submitForm = function() {
    var eurl, rem_me, submit_url, surl;
    eurl = document.location.origin + "/web/error.html";
    surl = document.location.origin + "/web/success.html";
    if (ez5.session.getPref("remember_me")) {
      rem_me = "&remember_me=1";
    } else {
      rem_me = "";
    }
    submit_url = ez5.api.getFullBase() + "/session/authenticate?token=" + ez5.session.token + "&success=" + surl + "&error=" + eurl + rem_me;
    CUI.DOM.setAttribute(this.__form, "action", submit_url);
    return this.__form.submit();
  };

  Login.prototype.showLogin = function(allowCancel) {
    var anonymous_start_page_btn, cannot_access, cannot_access_btn, loginFormExtra, loginFormMain, loginPane, ref, ref1, set_content, sso, sso_preferred, sso_start_btn, use_login_btn, welcome_lbl, welcome_text;
    if (allowCancel == null) {
      allowCancel = false;
    }
    this.__initForm();
    this.__loginDeferred = new CUI.Deferred();
    cannot_access = ez5.session.getBaseConfig().system["login.forgotten_password_process"];
    if (cannot_access && cannot_access.value && cannot_access.show_in_login_dialog) {
      cannot_access_btn = new LocaButton({
        loca_key: "auth.button.cannot_access",
        "class": "ez5-login-cannot-access",
        appearance: "link",
        onClick: (function(_this) {
          return function() {
            return _this.cannot_access();
          };
        })(this)
      });
    } else {
      cannot_access_btn = null;
    }
    welcome_text = ez5.loca.getBestFrontendValue((ref = ez5.session.getBaseConfig().system["login.welcome_text"]) != null ? ref.value : void 0);
    this.__loginMessage = new Label({
      "class": "ez5-login-message"
    });
    this.__loginButton = new LocaButton({
      loca_key: "auth.button.login",
      left: true,
      onClick: (function(_this) {
        return function() {
          return _this.__doLogin();
        };
      })(this)
    });
    sso = ez5.session.getMethod("sso");
    sso_preferred = null;
    if (sso && ((ref1 = sso.client) != null ? ref1.login : void 0)) {
      if (sso.client.login.visually_preferred) {
        sso_preferred = true;
      }
      sso_start_btn = new LocaButton({
        loca_key: sso_preferred ? 'session.sso.button.preferred.start' : 'session.sso.button.start',
        appearance: !sso_preferred ? 'link' : void 0,
        onClick: (function(_this) {
          return function(ev) {
            var show_errors, timeout, visible, window_open;
            if (ev.ctrlKey()) {
              visible = true;
              show_errors = true;
              timeout = 0;
            } else {
              visible = sso.client.login.visible;
              show_errors = sso.client.login.show_errors;
              timeout = sso.client.login.timeout;
            }
            if (ev.altKey()) {
              if (sso.client.login.window_open !== void 0) {
                window_open = null;
              } else {
                window_open = "";
              }
            } else {
              window_open = sso.client.login.window_open;
            }
            return ez5.session.SSOAuthAttended(visible, show_errors, timeout, window_open).done(function() {
              _this.__loginModal.destroy();
              return _this.__loginDeferred.resolve();
            });
          };
        })(this)
      });
    }
    if (ez5.session.getMethod("anonymous") && (!allowCancel || ez5.session.getAuthMethod() !== "anonymous")) {
      anonymous_start_page_btn = new LocaButton({
        loca_key: "auth.button.login_as_anonymous",
        appearance: "link",
        onClick: (function(_this) {
          return function() {
            return ez5.session.authenticate({
              method: "anonymous"
            }).done(function() {
              _this.__loginModal.destroy();
              return _this.__loginDeferred.resolve();
            }).fail(function() {
              return CUI.problem({
                text: $$("session.authenticate_failure")
              });
            });
          };
        })(this)
      });
    }
    this.__loginAuthError = new Label({
      "class": "ez5-authentication-error",
      multiline: true
    });
    welcome_lbl = new LocaLabel({
      multiline: true,
      markdown: true,
      "class": "ez5-session-login-welcome-text",
      text: welcome_text
    });
    loginFormMain = new Form({
      "class": "ez5-session-login-input-fields",
      data: {},
      fields: [
        {
          type: DataFieldProxy,
          element: this.__form
        }
      ],
      top: [],
      bottom: this.__loginMessage.DOM
    }).start();
    loginFormExtra = this.getLoginForm();
    use_login_btn = new LocaButton({
      loca_key: "login.button.use_login",
      "switch": true,
      appearance: 'link',
      activate_initial: false,
      onActivate: (function(_this) {
        return function() {
          return set_content(false);
        };
      })(this),
      onDeactivate: (function(_this) {
        return function() {
          return set_content(true);
        };
      })(this)
    });
    loginPane = new CUI.SimplePane({
      header_left: (function(_this) {
        return function() {
          return new LocaLabel({
            loca_key: "login.modal.title",
            loca_key_attrs: {
              easydb: ez5.session.getSystemName()
            }
          });
        };
      })(this),
      header_right: (function(_this) {
        return function() {
          var fn, i, items, lang, len, ref2;
          if (allowCancel) {
            return;
          }
          items = [];
          ref2 = ez5.session.getConfigFrontendLanguages();
          fn = function(lang) {
            return items.push({
              onClick: function() {
                if (lang === ez5.session.getLanguage()) {
                  return;
                }
                _this.__loginModal.disableAllButtons();
                ez5.session.saveCookiePref("preferred_language", lang);
                ez5.api.session({
                  data: {
                    token: ez5.session.token,
                    language: lang
                  }
                }).done(function() {
                  if (document.location.pathname === "/") {
                    return document.location.assign("/login");
                  } else {
                    return document.location.reload();
                  }
                });
              },
              active: lang === ez5.session.getLanguage(),
              text: $$("base.culture." + lang + ".tag") + " " + $$("base.culture." + lang)
            });
          };
          for (i = 0, len = ref2.length; i < len; i++) {
            lang = ref2[i];
            fn(lang);
          }
          if (items.length < 2) {
            return;
          }
          return new LocaButton({
            text: $$("base.culture." + (ez5.session.getLanguage()) + ".tag"),
            loca_key: "session.language.switch",
            menu: {
              items: items
            }
          });
        };
      })(this),
      footer_left: this.__loginMessage
    });
    set_content = (function(_this) {
      return function(show_sso) {
        var content;
        switch (show_sso) {
          case null:
            content = [welcome_lbl, DOM.space(), _this.__loginAuthError, loginFormMain, cannot_access_btn, sso_start_btn, anonymous_start_page_btn, DOM.space(), loginFormExtra];
            loginPane.replace(_this.__loginButton, 'footer_right');
            break;
          case false:
            content = [welcome_lbl, DOM.space(), _this.__loginAuthError, use_login_btn, DOM.space(), loginFormMain, cannot_access_btn, anonymous_start_page_btn, DOM.space(), loginFormExtra];
            loginPane.replace(_this.__loginButton, 'footer_right');
            break;
          case true:
            content = [welcome_lbl, DOM.space(), _this.__loginAuthError, use_login_btn];
            loginPane.replace(sso_start_btn, 'footer_right');
        }
        return loginPane.replace(content);
      };
    })(this);
    set_content(sso_preferred);
    this.__loginModal = new Modal({
      "class": "ez5-session-login",
      cancel: allowCancel,
      onCancel: (function(_this) {
        return function() {
          if (allowCancel) {
            _this.__loginModal.destroy();
            _this.__loginDeferred.reject();
            return;
          }
        };
      })(this),
      pane: loginPane
    });
    this.__loginModal.show();
    this.__showLoginMessage();
    CUI.setTimeout((function(_this) {
      return function() {
        return _this.__login.focus();
      };
    })(this));
    return this.__loginDeferred.promise();
  };

  Login.prototype.__doLogin = function() {
    this.__loginButton.setIcon("spinner");
    this.__loginButton.disable();
    this.saveLoginLogoutForm();
    this.__preAuthenticate().done((function(_this) {
      return function() {
        var listen;
        listen = Events.listen({
          type: "message",
          node: window,
          only_once: true,
          call: function(ev) {
            var ref;
            if (((ref = ev.getNativeEvent().data) != null ? ref.login : void 0) === "success") {
              CUI.DOM.insertAfter(CUI.DOM.find("iframe[name='login_form_target']")[0], _this.__form);
              _this.__loginModal.destroy();
              _this.__loginDeferred.resolve();
            }
          }
        });
        _this.__submitForm();
      };
    })(this));
  };

  Login.prototype.__loginFormUpdate = function() {
    return this.__showLoginMessage();
  };

  Login.prototype.__initForm = function() {
    var init;
    if (!this.__form) {
      this.__form = document.getElementById("login_form");
      init = true;
    } else {
      init = false;
    }
    assert(isElement(this.__form), "Session.__initForm", "Fixed Login Form not found in HTML markup, make sure you have loaded login.html");
    this.__login = CUI.DOM.matchSelector(this.__form, 'input[type="text"]')[0];
    this.__password = CUI.DOM.matchSelector(this.__form, 'input[type="password"]')[0];
    CUI.DOM.setAttribute(this.__login, "placeholder", $$("session.login.placeholder"));
    CUI.DOM.setAttribute(this.__password, "placeholder", $$("session.password.placeholder"));
    if (!init) {
      return;
    }
    Events.listen({
      node: this.__password,
      type: "keyup",
      call: (function(_this) {
        return function(ev) {
          _this.__loginFormUpdate();
          if (ev.keyCode() === 13) {
            return _this.__doLogin();
          }
        };
      })(this)
    });
    Events.listen({
      node: this.__login,
      type: "keyup",
      call: (function(_this) {
        return function(ev) {
          _this.__loginFormUpdate();
          if (ev.keyCode() === 13) {
            return _this.__password.focus();
          }
        };
      })(this)
    });
  };

  Login.prototype.__preAuthenticate = function() {
    return ez5.api.session({
      type: "POST",
      api: "/authenticate",
      data: {
        login: this.__login.value,
        password: this.__password.value
      },
      error: function() {}
    }).done((function(_this) {
      return function(data) {
        return ez5.session.setSessionData(data);
      };
    })(this)).fail((function(_this) {
      return function(xhr) {
        var err;
        _this.__loginButton.setIcon();
        _this.__loginButton.enable();
        err = xhr.responseJSON;
        if ((err != null ? err.realm : void 0) === "user") {
          _this.__loginAuthError.setText($$(err.code, err.parameters));
          _this.__loginModal.position();
        } else {
          ez5.error_handler(xhr);
        }
      };
    })(this));
  };

  Login.prototype.cannot_access = function() {
    var btn_forgot, forgot_data, modal;
    forgot_data = {};
    btn_forgot = new LocaButton({
      loca_key: "auth.forgotpassword.button",
      disabled: false,
      onClick: (function(_this) {
        return function(ev) {
          if (isEmpty(forgot_data.forgot)) {
            return;
          }
          if (ev.shiftKey() || ev.altKey() || ev.ctrlKey()) {
            CUI.debug(dump(forgot_data));
            return;
          }
          return ez5.api.session({
            type: "POST",
            api: "/forgot_password",
            json_data: {
              forgot: forgot_data.forgot
            }
          }).done(function(msg) {
            modal.destroy();
            return CUI.alert({
              text: $$("auth.forgotpassword.email.confirm.text")
            });
          });
        };
      })(this)
    });
    modal = new CUI.ConfirmationDialog({
      cancel: true,
      "class": "ez5-password-reset",
      title: $$('auth.forgotpassword.title'),
      content: (function(_this) {
        return function() {
          var $form;
          return $form = new Form({
            fields: [
              {
                type: Input,
                mark_changed: false,
                name: "forgot",
                form: {
                  label: $$("auth.forgotpassword.input.forgot")
                },
                onDataChanged: function(data, df) {
                  if (isEmpty(df.getValue())) {
                    return btn_forgot.disable();
                  } else {
                    return btn_forgot.enable();
                  }
                }
              }
            ],
            data: forgot_data,
            top: new Label({
              text: $$("auth.forgotpassword.text"),
              multiline: true
            })
          }).start();
        };
      })(this),
      buttons: [btn_forgot]
    });
    return modal.show();
  };

  Login.prototype.saveLoginLogoutForm = function() {
    if (!this.__cookie_prefs) {
      return;
    }
    ez5.session.saveCookiePrefs(this.__cookie_prefs);
    this.__cookie_prefs = null;
    return this;
  };

  Login.prototype.getLoginForm = function(fields) {
    if (fields == null) {
      fields = [];
    }
    return this.__getLoginLogoutForm(true, fields);
  };

  Login.prototype.getLogoutForm = function(fields) {
    if (fields == null) {
      fields = [];
    }
    return this.__getLoginLogoutForm(false, fields);
  };

  Login.prototype.__getLoginLogoutForm = function(is_login, fields) {
    if (is_login == null) {
      is_login = false;
    }
    this.__cookie_prefs = ez5.session.getPrefs();
    if (ez5.session.getMethod("anonymous")) {
      fields.push({
        type: Checkbox,
        name: "skip_anonymous",
        mark_changed: false,
        undo_support: false,
        text: $$("auth.button.skip_anonymous")
      });
    }
    if (is_login) {
      fields.push({
        type: Checkbox,
        name: "remember_me",
        mark_changed: false,
        undo_support: false,
        text: $$("auth.button.remember_me")
      });
    }
    if (fields.length === 0) {
      this.__cookie_prefs = null;
      return;
    }
    return new Form({
      "class": "ez5-session-login-options",
      data: this.__cookie_prefs,
      fields: fields
    }).start();
  };

  return Login;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var LanguageTrayApp,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LanguageTrayApp = (function(superClass) {
  extend(LanguageTrayApp, superClass);

  function LanguageTrayApp() {
    return LanguageTrayApp.__super__.constructor.apply(this, arguments);
  }

  LanguageTrayApp.prototype.getDisplay = function() {
    LanguageTrayApp.__super__.getDisplay.call(this);
    return this.display.append((new LocaButton({
      "class": "ez5-language-control-tray-button",
      loca_key: "language.tray.app.button.tray",
      text: $$("base.culture." + ez5.loca.culture + ".tag"),
      onClick: function(ev, item) {
        return ez5.loca.getLanguageControl().showUserControl();
      }
    })).DOM);
  };

  return LanguageTrayApp;

})(TrayApp);

ez5.session_ready(function() {
  return ez5.tray.registerApp(new LanguageTrayApp());
});
// Generated by CoffeeScript 1.10.0
var LanguageControl,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

LanguageControl = (function(superClass) {
  extend(LanguageControl, superClass);

  function LanguageControl() {
    return LanguageControl.__super__.constructor.apply(this, arguments);
  }

  LanguageControl.prototype.getKeys = function() {
    var i, keys, lang, len, ref;
    keys = [];
    ref = this.getLanguages();
    for (i = 0, len = ref.length; i < len; i++) {
      lang = ref[i];
      keys.push({
        name: lang,
        tag: $$("base.culture." + lang + ".tag")
      });
    }
    return keys;
  };

  LanguageControl.prototype.getLanguages = function() {
    var langs, pref;
    langs = ez5.session.getConfigDatabaseLanguages();
    pref = ez5.session.getPref("database_languages");
    langs.sort(function(a, b) {
      return compareIndex(pref.indexOf(a), pref.indexOf(b));
    });
    return langs;
  };

  LanguageControl.prototype.isEnabled = function(lang) {
    return ez5.session.getPref("database_languages").indexOf(lang) > -1;
  };

  LanguageControl.prototype.isEnabledSearch = function(lang) {
    return ez5.session.getPref("search_languages").indexOf(lang) > -1;
  };

  LanguageControl.prototype.getPreferredKey = function() {
    var i, j, key, keys, lang, len, len1, ref;
    keys = this.getKeys();
    ref = ez5.session.getConfigFrontendLanguages();
    for (i = 0, len = ref.length; i < len; i++) {
      lang = ref[i];
      for (j = 0, len1 = keys.length; j < len1; j++) {
        key = keys[j];
        if (key.name === lang) {
          return key;
        }
      }
    }
    return keys[0];
  };

  LanguageControl.prototype.showUserControl = function() {
    var data, database_opts, fields, form, frontend_opts, i, j, k, l, lang, len, len1, len2, len3, mod, push_opt, ref, ref1, ref2, ref3, search_opts, spellcheck;
    spellcheck = ez5.session.getPref("spellcheck");
    data = {
      frontend: null,
      database: [],
      search: [],
      spellcheck: spellcheck
    };
    frontend_opts = [];
    ref = ez5.session.getConfigFrontendLanguages();
    for (i = 0, len = ref.length; i < len; i++) {
      lang = ref[i];
      frontend_opts.push({
        value: lang,
        text: $$("base.culture." + lang)
      });
    }
    data.frontend = ez5.loca.culture;
    database_opts = [];
    search_opts = [];
    push_opt = function(lang, opts) {
      return opts.push({
        value: lang,
        text: $$("base.culture." + lang)
      });
    };
    ref1 = ez5.session.getPref("database_languages");
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      lang = ref1[j];
      data.database.push(lang);
      push_opt(lang, database_opts);
    }
    ref2 = ez5.session.getPref("search_languages");
    for (k = 0, len2 = ref2.length; k < len2; k++) {
      lang = ref2[k];
      data.search.push(lang);
      push_opt(lang, search_opts);
    }
    ref3 = ez5.session.getBaseConfig().system.languages.database;
    for (l = 0, len3 = ref3.length; l < len3; l++) {
      lang = ref3[l];
      if (indexOf.call(data.database, lang) < 0) {
        push_opt(lang, database_opts);
      }
      if (indexOf.call(data.search, lang) < 0) {
        push_opt(lang, search_opts);
      }
    }
    fields = [
      {
        type: Select,
        form: {
          label: $$("language.control.frontend")
        },
        name: "frontend",
        options: frontend_opts
      }, {
        type: Options,
        "class": "ez5-language-control-database-languages",
        form: {
          label: $$("language.control.database")
        },
        sortable: true,
        name: "database",
        min_checked: 1,
        options: database_opts,
        sortable_hint: $$("options.order_hint")
      }, {
        type: Checkbox,
        form: {
          label: $$("language.control.spellcheck")
        },
        name: "spellcheck"
      }, {
        type: Options,
        "class": "ez5-language-control-search-languages",
        form: {
          label: $$("language.control.search")
        },
        sortable: true,
        name: "search",
        min_checked: 1,
        options: search_opts,
        sortable_hint: $$("options.order_hint")
      }
    ];
    form = new Form({
      data: data,
      fields: fields
    }).start();
    return mod = new Modal({
      "class": "ez5-language-control",
      cancel: true,
      pane: {
        footer_right: new Button({
          text: $$("base.apply"),
          onClick: (function(_this) {
            return function(ev) {
              mod.disableAllButtons();
              ez5.session.setPref("database_languages", data.database);
              ez5.session.setPref("search_languages", data.search);
              ez5.session.setPref("frontend_language", data.frontend);
              ez5.session.setPref("spellcheck", data.spellcheck);
              ez5.session.setPref("preferred_language", data.frontend);
              return ez5.session.savePrefs(ev).done(function() {
                var el, inp, len4, m, ref4;
                mod.destroy();
                if (data.frontend !== ez5.loca.getLanguage()) {
                  CUI.warn("reload switch language or new spellcheck");
                  return document.location.reload();
                } else {
                  if (spellcheck !== data.spellcheck) {
                    ref4 = CUI.DOM.matchSelector(document.documentElement, ".cui-input,cui-multi-input-input");
                    for (m = 0, len4 = ref4.length; m < len4; m++) {
                      el = ref4[m];
                      inp = CUI.DOM.data(el, "element");
                      if (getObjectClass(inp) === "Input" || inp instanceof MultiInputInput) {
                        inp.setSpellcheck(data.spellcheck);
                      }
                    }
                  }
                  return Events.trigger({
                    type: "multi-input-control-update"
                  });
                }
              }).fail(function() {
                return mod.enableAllButtons();
              });
            };
          })(this)
        }),
        header_left: new Label({
          text: $$("language.control.title")
        }),
        content: form
      }
    }).show();
  };

  return LanguageControl;

})(MultiInputControl);
// Generated by CoffeeScript 1.10.0
var LanguageControlAdmin,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LanguageControlAdmin = (function(superClass) {
  extend(LanguageControlAdmin, superClass);

  function LanguageControlAdmin() {
    return LanguageControlAdmin.__super__.constructor.apply(this, arguments);
  }

  LanguageControlAdmin.prototype.hasUserControl = function() {
    return false;
  };

  LanguageControlAdmin.prototype.getLanguages = function() {
    return ez5.session.getConfigFrontendLanguages();
  };

  LanguageControlAdmin.prototype.isEnabled = function(lang) {
    return true;
  };

  return LanguageControlAdmin;

})(LanguageControl);
// Generated by CoffeeScript 1.10.0
var SessionTrayApp,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

SessionTrayApp = (function(superClass) {
  extend(SessionTrayApp, superClass);

  function SessionTrayApp() {
    return SessionTrayApp.__super__.constructor.apply(this, arguments);
  }

  SessionTrayApp.prototype.getTrayButtons = function() {
    var buttons, i, item, len, ref, user;
    user = ez5.session.getUser();
    if (user.hasFlatTrayItems()) {
      buttons = [];
      ref = user.getTrayItems(this);
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        if (CUI.isPlainObject(item)) {
          buttons.push(new CUI.defaults["class"].Button(item));
        } else {
          buttons.push(item);
        }
      }
      return buttons;
    }
    return new LocaButton({
      icon: "user",
      "class": "ez5-session-tray-app-button",
      loca_key: "session.tray.app.button.tray",
      icon_right: false,
      text: ez5.session.getDisplayName(),
      menu: {
        top: {},
        items: (function(_this) {
          return function(ev, itemList) {
            itemList.replace(ez5.session.getUser().renderCard(), "top");
            return ez5.session.getUser().getTrayItems(_this);
          };
        })(this)
      }
    });
  };

  SessionTrayApp.prototype.cancelPrefsModal = function() {
    if (this.__theme_changed) {
      ez5.session.loadTheme();
    }
    return this.closePrefsModal();
  };

  SessionTrayApp.prototype.closePrefsModal = function() {
    var ref;
    if ((ref = this.modal) != null) {
      ref.destroy();
    }
    this.modal = null;
    return this;
  };

  SessionTrayApp.prototype.userRegisterModal = function() {
    return this.userPrefsModal("register");
  };

  SessionTrayApp.prototype.userSettingsModal = function() {
    return this.userPrefsModal("settings");
  };

  SessionTrayApp.prototype.userPrefsModal = function(mode) {
    var prefs, user;
    this.__currentThemeName = CUI.CSS.getActiveTheme().name;
    if (mode === "register") {
      user = new ez5.defaults["class"].AnonymousUser();
    } else {
      user = ez5.session.user.copy(false);
    }
    prefs = ez5.session.getPrefs();
    this.__theme_changed = false;
    user.load().done((function(_this) {
      return function() {
        var all_required, clearPrefsButton, f, fields, i, idx, infoblock_txt, j, len, len1, ref, ref1, saveButton, thank_you_txt, theme, theme_opts, update_btn, user_data;
        if (mode === "register") {
          infoblock_txt = ez5.loca.getBestFrontendValue(ez5.session.getBaseConfig().system.self_register.introduction_text);
          thank_you_txt = ez5.loca.getBestFrontendValue(ez5.session.getBaseConfig().system.self_register.thank_you_text);
          if (isEmpty(thank_you_txt)) {
            thank_you_txt = $$("session.tray.register.confirmation_dialog.text.md");
          }
        } else {
          infoblock_txt = ez5.loca.getBestFrontendValue(ez5.session.getBaseConfig().system.self_register.welcome_text);
          if (isEmpty(infoblock_txt)) {
            infoblock_txt = $$("session.tray.settings.infoblock.md");
          }
          clearPrefsButton = new LocaButton({
            loca_key: "session.tray.clear_prefs.button",
            left: true,
            onClick: function() {
              return CUI.confirm({
                text: $$("session.tray.clear_prefs.confirm")
              }).done(function(confirmation, btn, ev) {
                clearPrefsButton.startSpinner();
                return ez5.session.clearPrefs(ev).always(function() {
                  clearPrefsButton.stopSpinner();
                  return _this.cancelPrefsModal();
                }).done(function() {
                  return document.location.reload();
                });
              });
            }
          });
        }
        saveButton = new LocaButton({
          loca_key: "session.tray." + mode + ".button.save",
          onClick: function(ev) {
            var email, ref;
            if (_this.__currentThemeName !== CUI.CSS.getActiveTheme().name) {
              _this.__theme_changed = true;
              delete prefs["css_developer_theme"];
              delete prefs["css_mode"];
            }
            email = ((ref = user.getData().user._new_primary_email) != null ? ref.trim() : void 0) || "";
            return ez5.session.savePrefs(ev, prefs, user, mode).done(function() {
              var go_on;
              saveButton.disable();
              if (mode === "settings") {
                go_on = function() {
                  if (_this.__theme_changed) {
                    if (xor(_this.__currentThemeName.startsWith("ng"), CUI.__ng__)) {
                      document.location.reload();
                      return;
                    }
                  }
                  return ez5.session.reload().always(function() {
                    saveButton.enable();
                    _this.updateDisplay();
                    return _this.closePrefsModal();
                  });
                };
                if (email.length > 0) {
                  return CUI.alert({
                    markdown: true,
                    text: $$("session.tray.settings.new_primary_email_saved_confirmation.md", {
                      email: email
                    })
                  }).done(function() {
                    return go_on();
                  });
                } else {
                  return go_on();
                }
              } else {
                return CUI.alert({
                  title: $$("session.tray.register.confirmation_dialog.title"),
                  markdown: true,
                  text: thank_you_txt
                }).done(function() {
                  _this.closePrefsModal();
                  return saveButton.enable();
                });
              }
            });
          }
        });
        _this.saveButtonMessage = new Label({
          "class": "ez5-session-tray-app-message",
          text: "",
          multiline: true
        });
        update_btn = function() {
          var data, e, enable, error, f, i, is_ok, len, not_ok, ref, ref1, ref2;
          saveButton.disable();
          enable = true;
          try {
            data = user.getLimitedSaveData(mode);
          } catch (error) {
            e = error;
            if (!(e instanceof InvalidSaveDataException)) {
              throw e;
            }
            data = {};
            enable = false;
          }
          not_ok = user.getUserSelfManagementFieldsNotOk(mode, data);
          ref = _this.form.getFields();
          for (i = 0, len = ref.length; i < len; i++) {
            f = ref[i];
            if ((typeof f.getInputState === "function" ? f.getInputState() : void 0) === "invalid") {
              is_ok = false;
              enable = false;
            } else {
              is_ok = (ref1 = f.getName(), indexOf.call(not_ok, ref1) < 0);
            }
            if (ref2 = f.getName(), indexOf.call(all_required, ref2) < 0) {
              continue;
            }
            if (is_ok) {
              _this.form.removeClassFromField(f.getName(), "ez5-form-field--not-ok");
              _this.form.addClassToField(f.getName(), "ez5-form-field--ok");
            } else {
              _this.form.addClassToField(f.getName(), "ez5-form-field--not-ok");
              _this.form.removeClassFromField(f.getName(), "ez5-form-field--ok");
              enable = false;
            }
          }
          if (enable) {
            saveButton.enable();
          }
        };
        user_data = user.getData();
        theme_opts = [];
        ref = Object.keys(CUI.CSS.getThemes());
        for (i = 0, len = ref.length; i < len; i++) {
          theme = ref[i];
          theme_opts.push({
            text: ez5.loca.str_default("session.tray.app.theme.name." + theme, theme),
            value: theme
          });
        }
        fields = [];
        if (false && user.isAllowedLimited("theme", mode) && user.isAllowedLimited("frontend_prefs", mode)) {
          fields.push({
            type: Select,
            data: prefs,
            form: {
              label: $$("session.tray.prefs.theme")
            },
            options: theme_opts,
            onDataChanged: function() {
              var wb;
              wb = new WaitBlock({
                fullscreen: true,
                inactive: true,
                icon: "spinner"
              }).show();
              return CUI.CSS.loadTheme(prefs.theme).always((function(_this) {
                return function() {
                  return wb.destroy();
                };
              })(this));
            },
            name: "theme"
          });
        }
        ref1 = user.getUserSelfManagementFields(mode);
        for (idx = j = 0, len1 = ref1.length; j < len1; idx = ++j) {
          f = ref1[idx];
          fields.push(f);
        }
        _this.form = new Form({
          fields: fields,
          "class": 'ez5-form--required-fields',
          render_as_grid: true,
          onDataChanged: function() {
            return update_btn();
          },
          data: user_data.user
        }).start();
        all_required = user.getUserSelfManagementFieldsNotOk(mode);
        update_btn();
        _this.modal = new Modal({
          "class": "ez5-session-tray-modal-dialog ez5-session-tray--mode-" + mode,
          cancel: true,
          onCancel: function() {
            return _this.cancelPrefsModal();
          },
          pane: {
            padded: true,
            header_left: new Label({
              text: $$("session.tray." + mode + ".title")
            }),
            content: function() {
              return [
                _this.saveButtonMessage, new Block({
                  content: new Label({
                    multiline: true,
                    markdown: true,
                    text: infoblock_txt
                  })
                }), _this.form
              ];
            },
            footer_right: function() {
              return [
                {
                  loca_key: "session.trayapp.cancel.button",
                  onClick: function() {
                    return _this.cancelPrefsModal();
                  }
                }, clearPrefsButton, saveButton
              ];
            }
          }
        });
        return _this.modal.show();
      };
    })(this));
    return this;
  };

  SessionTrayApp.prototype.getDisplay = function() {
    SessionTrayApp.__super__.getDisplay.call(this);
    return CUI.DOM.append(this.display, this.getTrayButtons());
  };

  SessionTrayApp.prototype.updateDisplay = function() {
    this.display.empty();
    return CUI.DOM.append(this.display, this.getTrayButtons());
  };

  return SessionTrayApp;

})(TrayApp);

ez5.session_ready(function() {
  ez5.sessionTray = new SessionTrayApp();
  return ez5.tray.registerApp(ez5.sessionTray);
});
// Generated by CoffeeScript 1.10.0
var DeveloperMenu,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

DeveloperMenu = (function(superClass) {
  extend(DeveloperMenu, superClass);

  function DeveloperMenu() {
    return DeveloperMenu.__super__.constructor.apply(this, arguments);
  }

  DeveloperMenu.prototype.readOpts = function() {
    return DeveloperMenu.__super__.readOpts.call(this);
  };

  DeveloperMenu.prototype.start = function() {
    return Events.listen({
      type: "keydown",
      capture: true,
      node: window,
      call: (function(_this) {
        return function(ev) {
          if (ev.getKeyboard() === "Control+Alt+D" && !_this.__dialog) {
            _this.showDeveloperMenu();
            return ev.stop();
          }
          if (ev.getKeyboard() === "Control+Alt+S") {
            debugger;
          }
        };
      })(this)
    });
  };

  DeveloperMenu.prototype.showDeveloperMenu = function() {
    var check_ok_btn, check_server, cookie_defaults, counter, current_data, data, debug_opts, dialog_ok, form, i, j, k, l, len, len1, len2, len3, mode, mode_opts, ok_btn, on_off, pref_key, pref_keys, prefs_at_default, ref, ref1, reload_for_keys, server_input, server_input_cb, server_input_menu, theme, theme_opts;
    theme_opts = [
      {
        text: $$("developer.menu.theme.select", {
          theme: ez5.session.getPref("theme")
        }),
        value: null
      }
    ];
    ref = Start.knownCSSThemes;
    for (i = 0, len = ref.length; i < len; i++) {
      theme = ref[i];
      theme_opts.push({
        text: theme,
        value: theme
      });
    }
    mode_opts = [
      {
        text: "",
        value: null
      }
    ];
    ref1 = Start.getCSSModes();
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      mode = ref1[j];
      mode_opts.push({
        text: mode,
        value: mode
      });
    }
    if (isTrue(ez5.session.getClientDefault("debug"))) {
      on_off = "is_on";
    } else {
      on_off = "is_off";
    }
    debug_opts = [
      {
        text: $$("developer.menu.debug_mode_overwrite.option.from_server." + on_off),
        value: null
      }, {
        text: $$("developer.menu.debug_mode_overwrite.option.on"),
        value: "on"
      }, {
        text: $$("developer.menu.debug_mode_overwrite.option.off"),
        value: "off"
      }
    ];
    pref_keys = ["css_developer_theme", "css_mode", "plugins_load_from_remote", "debug_mode_overwrite", "easydb_server_url", "easydb_server_url_history", "event_poll"];
    reload_for_keys = ["css_developer_theme", "css_mode", "debug_mode_overwrite", "easydb_server_url", "plugins_load_from_remote"];
    data = {};
    for (k = 0, len2 = pref_keys.length; k < len2; k++) {
      pref_key = pref_keys[k];
      data[pref_key] = ez5.session.getPref(pref_key);
    }
    if (data.easydb_server_url) {
      data.easydb_server_url_cb = true;
    } else {
      data.easydb_server_url_cb = false;
    }
    if (data.easydb_server_url !== window.easydb_server_url) {
      data.easydb_server_url = window.easydb_server_url;
      data.easydb_server_url_cb = false;
    }
    if (isEmpty(data.easydb_server_url)) {
      data.easydb_server_url = "";
    }
    data.__server_url = data.easydb_server_url;
    server_input = null;
    server_input_cb = null;
    server_input_menu = null;
    current_data = copyObject(data, true);
    check_ok_btn = function() {
      if (data.easydb_server_url.trim() === "") {
        server_input_cb.disable();
        data.__server_url = null;
        server_input.checkInput();
        ok_btn.enable();
        return;
      }
      ok_btn.disable();
      data.__server_url = Session.cleanServerUrl(data.easydb_server_url);
      if (data.__server_url) {
        return check_server(data.__server_url, ++counter);
      } else {
        return server_input.checkInput();
      }
    };
    check_server = function(server, req_counter) {
      return ez5.server({
        local_url: server + ez5.api.base + "/plugin",
        add_token: false,
        error: function(xhr) {
          if (req_counter === counter) {
            ok_btn.disable();
            data.__server_url = null;
          }
        }
      }).always((function(_this) {
        return function() {
          return server_input.displayValue();
        };
      })(this)).done(function() {
        if (req_counter === counter) {
          data.easydb_server_url = data.__server_url;
          server_input_cb.enable();
          return ok_btn.enable();
        }
      });
    };
    form = new CUI.Form({
      data: data,
      undo_and_changed_support: false,
      fields: [
        {
          form: {
            label: $$("developer.menu.css_developer_theme.label")
          },
          type: Select,
          options: theme_opts,
          name: "css_developer_theme"
        }, {
          form: {
            label: $$("developer.menu.css_mode.label")
          },
          type: Select,
          options: mode_opts,
          name: "css_mode"
        }, {
          text: $$("developer.menu.event_poll.label"),
          type: Checkbox,
          name: "event_poll"
        }, {
          text: $$("developer.menu.load_plugins_from_remote.label"),
          type: Checkbox,
          name: "plugins_load_from_remote"
        }, {
          form: {
            label: $$("developer.menu.debug_mode_overwrite.label")
          },
          type: Select,
          options: debug_opts,
          name: "debug_mode_overwrite"
        }, {
          type: Form,
          form: {
            label: $$("developer.menu.easydb_server_url.label")
          },
          fields: [
            {
              type: Input,
              name: "easydb_server_url",
              onInit: (function(_this) {
                return function(inp) {
                  var items, l, len3, ref2, url;
                  server_input = inp;
                  items = [];
                  ref2 = data.easydb_server_url_history;
                  for (l = 0, len3 = ref2.length; l < len3; l++) {
                    url = ref2[l];
                    items.push({
                      text: url,
                      value: url
                    });
                  }
                  return server_input_menu = new Menu({
                    element: inp.DOM,
                    backdrop: false,
                    use_element_width_as_min_width: true,
                    itemList: {
                      items: items,
                      onClick: function(ev, btn, item) {
                        server_input.setValue(item.value);
                        server_input.getElement().blur();
                        return check_ok_btn();
                      }
                    }
                  });
                };
              })(this),
              onFocus: (function(_this) {
                return function() {
                  if (server_input_menu.hasItems()) {
                    return server_input_menu.show();
                  }
                };
              })(this),
              onBlur: (function(_this) {
                return function() {
                  return server_input_menu.hide();
                };
              })(this),
              checkInput: (function(_this) {
                return function() {
                  if (data.__server_url) {
                    return true;
                  } else {
                    return false;
                  }
                };
              })(this),
              placeholder: document.location.hostname,
              onDataChanged: (function(_this) {
                return function() {
                  return CUI.scheduleCallback({
                    ms: 200,
                    call: check_ok_btn
                  });
                };
              })(this)
            }, {
              type: Checkbox,
              onConstruct: (function(_this) {
                return function(cb) {
                  return server_input_cb = cb;
                };
              })(this),
              text: $$("developer.menu.easydb_server_url.cookie_save"),
              name: "easydb_server_url_cb"
            }
          ]
        }
      ]
    });
    dialog_ok = (function(_this) {
      return function() {
        var info, l, len3, ref2, ref3, reload;
        reload = false;
        for (l = 0, len3 = pref_keys.length; l < len3; l++) {
          pref_key = pref_keys[l];
          if (pref_key === "easydb_server_url" && !data.easydb_server_url_cb) {
            ez5.session.setPref(pref_key, null);
          } else {
            ez5.session.setPref(pref_key, data[pref_key]);
          }
          if (indexOf.call(reload_for_keys, pref_key) >= 0 && current_data[pref_key] !== data[pref_key]) {
            reload = true;
          }
        }
        if (current_data.easydb_server_url !== data.easydb_server_url && data.easydb_server_url) {
          pushOntoArray(data.easydb_server_url, data.easydb_server_url_history);
        }
        ez5.session.saveCookiePrefs();
        if (current_data.easydb_server_url !== data.easydb_server_url || current_data.easydb_server_url_cb !== data.easydb_server_url_cb) {
          info = {};
          if (!data.easydb_server_url_cb && data.easydb_server_url) {
            CUI.setSessionStorage("server", data.easydb_server_url);
          } else {
            CUI.setSessionStorage("server", void 0);
          }
          CUI.setSessionStorage("token", void 0);
          reload = true;
        }
        if (reload) {
          document.location.reload();
          return;
        }
        if (data.event_poll) {
          return (ref2 = ez5.eventPoller) != null ? ref2.start() : void 0;
        } else {
          return (ref3 = ez5.eventPoller) != null ? ref3.stop() : void 0;
        }
      };
    })(this);
    counter = 0;
    prefs_at_default = true;
    cookie_defaults = ez5.session.getCookieDefaultPrefs();
    for (l = 0, len3 = pref_keys.length; l < len3; l++) {
      pref_key = pref_keys[l];
      if (data[pref_key] !== cookie_defaults[pref_key]) {
        prefs_at_default = false;
      }
    }
    if (!CUI.isEmptyObject(CUI.getLocalStorage())) {
      prefs_at_default = false;
    }
    ok_btn = new LocaButton({
      text: $$("base.ok"),
      onClick: (function(_this) {
        return function() {
          dialog_ok();
          _this.__dialog.destroy();
          return _this.__dialog = null;
        };
      })(this)
    });
    return this.__dialog = new CUI.ConfirmationDialog({
      title: $$("developer.menu.title"),
      content: form.start(),
      cancel: true,
      onHide: (function(_this) {
        return function() {
          return _this.__dialog = null;
        };
      })(this),
      buttons: [
        {
          loca_key: "developer.menu.throw_error.button",
          onClick: (function(_this) {
            return function(ev) {
              if (ev.altKey()) {
                return assert(false, "DeveloperMenu", "This is a test Assert.");
              } else {
                throw new Error("This is a test Error.");
              }
            };
          })(this)
        }, {
          loca_key: "developer.menu.reset_local_storage.button",
          disabled: prefs_at_default,
          onClick: (function(_this) {
            return function() {
              window.localStorage.clear();
              document.location.reload();
            };
          })(this)
        }, ok_btn
      ]
    }).show();
  };

  return DeveloperMenu;

})(CUI.Element);

CUI.ready((function(_this) {
  return function() {
    return (new DeveloperMenu()).start();
  };
})(this));
// Generated by CoffeeScript 1.10.0
var SystemListManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SystemListManager = (function(superClass) {
  extend(SystemListManager, superClass);

  function SystemListManager() {
    return SystemListManager.__super__.constructor.apply(this, arguments);
  }

  SystemListManager.submenu = function() {
    return "settings";
  };

  SystemListManager.prototype.getTreeOpts = function() {
    return {
      no_hierarchy: true
    };
  };

  SystemListManager.prototype.hasFooter = function() {
    return true;
  };

  SystemListManager.prototype.initFilterData = function() {
    return this.__filter = null;
  };

  SystemListManager.prototype.readOpts = function() {
    SystemListManager.__super__.readOpts.call(this);
    return this.initFilterData();
  };

  SystemListManager.prototype.getExtraButton = function() {};

  SystemListManager.prototype.load = function() {
    var opts, ref;
    SystemListManager.__super__.load.call(this);
    this.__lastData = null;
    this.__lastSearchOptions = null;
    this.initFilterData();
    opts = this.getTreeOpts();
    CUI.mergeMap(opts, {
      absolute: true,
      "class": "ez5-system-list-manager-list-view-edit-tree",
      fields: this.getListFields(),
      selectableRows: true,
      force_footer: true,
      rowMove: false,
      footer_left: (function(_this) {
        return function() {
          var buttons;
          if (!_this.hasFooter()) {
            return;
          }
          buttons = [_this.getPlusButton(), _this.getMinusButton(), _this.getExtraButton()];
          return buttons;
        };
      })(this)
    });
    if (((ref = opts.fields) != null ? ref.length : void 0) === 1) {
      opts.no_header = true;
    }
    if (this.loadFilter && !opts.filterManager) {
      opts.filter = (function(_this) {
        return function(filter) {
          return _this.loadFilter(filter);
        };
      })(this);
    }
    this.tree = new ListViewEditTree(opts);
    this.tree.root.canHaveChildren = (function(_this) {
      return function() {
        return _this.rootCanHaveChildren();
      };
    })(this);
    this.__layout = new HorizontalLayout({
      absolute: true,
      "class": "ez5-system-list-manager-layout ez5-event-poller ez5-" + toDash(getObjectClass(this)) + "-layout",
      left: {
        "class": "ez5-main-left",
        content: this.getTreePaneContent(),
        flexHandle: {
          label: this.getMenuTitle(),
          state_name: "admin-manager-left",
          hidden: false
        }
      }
    });
    this.loadInternal();
    this.empty();
    return this.loadTree();
  };

  SystemListManager.prototype.unload = function() {
    var ref, ref1;
    SystemListManager.__super__.unload.call(this);
    if ((ref = this.tree) != null) {
      ref.destroy();
    }
    if ((ref1 = this.__layout) != null) {
      ref1.destroy();
    }
    return CUI.resolvedPromise();
  };

  SystemListManager.prototype.allow_unload = function(path, ev, info) {
    var promise, ref;
    promise = (ref = this.tree.getSelectedNode()) != null ? typeof ref.check_deselect === "function" ? ref.check_deselect(ev) : void 0 : void 0;
    if (promise) {
      return promise;
    }
    return CUI.resolvedPromise();
  };

  SystemListManager.prototype.getTreePaneContent = function() {
    return this.tree.render();
  };

  SystemListManager.prototype.getTree = function() {
    return this.tree;
  };

  SystemListManager.prototype.getHeaderRight = function() {};

  SystemListManager.prototype.loadTree = function() {
    return this.loadList().done((function(_this) {
      return function(nodes, data1) {
        _this.nodes = nodes;
        _this.data = data1;
        _this.loadNodes();
        _this.__data_nodes = _this.tree.root.children.length;
        return _this.setStatus();
      };
    })(this));
  };

  SystemListManager.prototype.loadFilter = function(__filter, opts) {
    this.__filter = __filter;
    if (opts == null) {
      opts = {};
    }
    return this.loadList(this.__filter, opts).done((function(_this) {
      return function(nodes, data1) {
        _this.nodes = nodes;
        _this.data = data1;
        _this.loadNodes();
        _this.__data_nodes = _this.tree.root.children.length;
        return _this.setStatus();
      };
    })(this));
  };

  SystemListManager.prototype.loadInternal = function() {
    return ez5.rootLayout.replace(this.__layout, "center");
  };

  SystemListManager.prototype.getContainer = function() {
    return this.__layout.center();
  };

  SystemListManager.prototype.getLeft = function() {
    return this.__layout.left();
  };

  SystemListManager.prototype.rootCanHaveChildren = function() {
    return true;
  };

  SystemListManager.prototype.__isAlive = function() {
    if (!this.tree || this.tree.isDestroyed()) {
      return false;
    }
    if (!this.__layout || this.__layout.isDestroyed()) {
      return false;
    }
    return true;
  };

  SystemListManager.prototype.loadNodes = function() {
    if (!this.__isAlive()) {
      return;
    }
    this.tree.load_data(this.nodes);
    return this;
  };

  SystemListManager.prototype.setStatus = function() {
    var correction, navi, node, ref, ref1;
    if (!this.__isAlive()) {
      return;
    }
    if (this.hasFooter()) {
      correction = this.tree.root.children.length - this.__data_nodes;
      navi = SystemListManager.renderNavigation({
        count: this.data.count + correction,
        limit: this.data.limit + correction,
        offset: this.data.offset,
        callback: (function(_this) {
          return function(offset) {
            return _this.loadFilter(_this.__filter, {
              searchOpts: {
                offset: offset
              }
            });
          };
        })(this)
      });
      this.tree.replace(navi, "footer_right");
    }
    node = this.tree.getSelectedNode();
    if (node && node.isDeletable()) {
      if ((ref = this.minusButton) != null) {
        ref.enable();
      }
    } else {
      if ((ref1 = this.minusButton) != null) {
        ref1.disable();
      }
    }
  };

  SystemListManager.prototype.getMinusButton = function() {
    return this.minusButton = new LocaButton({
      loca_key: "system.list.manager.button.minus",
      icon: "minus",
      group: "plus-minus",
      "class": "btn-mini",
      onClick: (function(_this) {
        return function() {
          var ref;
          return (ref = _this.tree.getSelectedNode()) != null ? ref["delete"]() : void 0;
        };
      })(this)
    });
  };

  SystemListManager.prototype.getPlusButton = function() {
    return this.plusButton = new LocaButton({
      loca_key: "system.list.manager.button.plus",
      icon: "plus",
      group: "plus-minus",
      onClick: (function(_this) {
        return function() {
          _this.addRow();
          _this.setStatus();
          return _this;
        };
      })(this)
    });
  };

  SystemListManager.prototype.allowCopy = function() {
    return false;
  };

  SystemListManager.prototype.getMenuTitle = function() {
    return new Label({
      text: $$(this.label())
    });
  };

  SystemListManager.prototype.getTitle = function() {
    return new Label({
      text: $$("system.list.manager.editor.title")
    });
  };

  SystemListManager.prototype.getMissingName = function() {
    return (getObjectClass(this)) + ".getMissingName needs to be overwritten";
  };

  SystemListManager.prototype.addRow = function() {
    return (getObjectClass(this)) + ".addRow needs to be overwritten";
  };

  SystemListManager.prototype.getMissingLabel = function() {
    return new EmptyLabel({
      centered: true,
      text: $$("admin.systemlistmanager.empty_pane.hint", [this.getMissingName()])
    });
  };

  SystemListManager.prototype.empty = function() {
    this.getContainer().empty().append(this.getMissingLabel());
    return this;
  };

  SystemListManager.prototype.getListSearchOptions = function(sopts, filter) {
    if (sopts == null) {
      sopts = {};
    }
  };

  SystemListManager.prototype.loadList = function(filter, opts) {
    var dfr, f, phrase, ref, ref1, sopts, str;
    if (opts == null) {
      opts = {};
    }
    CUI.Element.readOpts(opts, (getObjectClass(this)) + ".loadList", {
      newInstanceFunc: {
        mandatory: true,
        check: Function
      },
      searchOpts: {
        mandatory: true,
        check: "PlainObject"
      }
    });
    sopts = opts.searchOpts;
    if (!isEmpty(filter)) {
      ref = Search.getPhrase(filter), str = ref[0], phrase = ref[1];
      f = {
        type: "match",
        bool: "must",
        mode: "fulltext",
        phrase: phrase,
        string: str
      };
      if (CUI.isArray(sopts.search)) {
        sopts.search.push(f);
      } else {
        sopts.search = [f];
      }
    }
    sopts.highlight = {};
    if ((ref1 = this.__searchRequest) != null) {
      ref1.abort();
    }
    this.__lastSearchOptions = sopts;
    dfr = new CUI.Deferred();
    this.__searchRequest = ez5.api.search({
      json_data: sopts
    }).always((function(_this) {
      return function() {
        return delete _this.__searchRequest;
      };
    })(this)).done((function(_this) {
      return function(data) {
        var i, len, o, objects, ref2, req;
        req = new Request(sopts);
        objects = [];
        ref2 = data.objects;
        for (i = 0, len = ref2.length; i < len; i++) {
          o = ref2[i];
          objects.push(opts.newInstanceFunc(o, req));
        }
        dfr.resolve(objects, data);
        return _this.__lastData = data;
      };
    })(this)).fail((function(_this) {
      return function() {
        _this.__lastData = null;
        return dfr.reject();
      };
    })(this));
    return dfr.promise();
  };

  SystemListManager.prototype.getLastSearchOptions = function() {
    return this.__lastSearchOptions;
  };

  SystemListManager.prototype.getLastData = function() {
    return this.__lastData;
  };

  SystemListManager.renderNavigation = function(_opts) {
    var bb, lower, opts, upper;
    opts = CUI.Element.readOpts(_opts, "SystemListManager.renderNavi", {
      count: {
        mandatory: true,
        check: "Integer"
      },
      limit: {
        mandatory: true,
        check: "Integer"
      },
      offset: {
        mandatory: true,
        check: "Integer"
      },
      callback: {
        mandatory: true,
        check: Function
      }
    });
    bb = new Buttonbar();
    if (opts.count === 0) {
      bb.addButton(new Label({
        text: $$("system.list.manager.no_objects")
      }));
    } else {
      upper = Math.min(opts.count, opts.offset + opts.limit);
      lower = opts.offset + 1;
      bb.addButton(new Label({
        text: $$("system.list.manager.objects_chunk_info", {
          lower: ez5.format_number(lower),
          upper: ez5.format_number(upper),
          count: ez5.format_number(opts.count)
        })
      }));
      bb.addButton({
        icon: "left",
        loca_key: "system.list.manager.button.left",
        disabled: opts.offset === 0,
        group: "nav",
        onClick: (function(_this) {
          return function(ev) {
            return opts.callback(opts.offset - opts.limit);
          };
        })(this)
      });
      bb.addButton({
        icon: "right",
        loca_key: "system.list.manager.button.right",
        disabled: upper === opts.count,
        group: "nav",
        onClick: (function(_this) {
          return function(ev) {
            return opts.callback(opts.offset + opts.limit);
          };
        })(this)
      });
    }
    return bb;
  };

  return SystemListManager;

})(RootMenuApp);
// Generated by CoffeeScript 1.10.0
var SystemListHierarchyManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SystemListHierarchyManager = (function(superClass) {
  extend(SystemListHierarchyManager, superClass);

  function SystemListHierarchyManager() {
    return SystemListHierarchyManager.__super__.constructor.apply(this, arguments);
  }

  SystemListHierarchyManager.prototype.getTreeOpts = function() {
    return {};
  };

  SystemListHierarchyManager.prototype.getNewNode = function() {
    return assert(false, (getObjectClass(this)) + ".getNewNode", "Method needs implementation.");
  };

  SystemListHierarchyManager.prototype.getPlusButton = function() {
    return this.plusButton = new LocaButton({
      icon: "plus",
      loca_key: "system.list.manager.button.plus",
      group: "plus-minus",
      menu: {
        items: (function(_this) {
          return function() {
            var click, items, nodes, selNode;
            click = function(ev, item) {
              var new_node, ret;
              if (item._value) {
                new_node = item._value.getNewChild();
                ret = item._value.addChild(new_node);
              } else {
                new_node = _this.getNewNode();
                ret = _this.tree.addNode(new_node);
              }
              ret.done(function() {
                return new_node.select().fail(function() {
                  return new_node["delete"]();
                }).done(function() {
                  _this.setStatus();
                  return new_node.scrollIntoView();
                });
              });
              return ret.fail(function() {
                return new_node["delete"]();
              });
            };
            items = [];
            selNode = _this.tree.getSelectedNode();
            if ((selNode != null ? selNode.id : void 0) && selNode.canHaveChildren()) {
              while (selNode.father) {
                items.push({
                  text: $$("system.list.hierarchy.manager.button.new", {
                    parent: selNode.getDisplayText()
                  }),
                  value: selNode,
                  disabled: !selNode.isCreateChildAllowed(),
                  onClick: click
                });
                if (!selNode.father) {
                  break;
                }
                selNode = selNode.father;
              }
            } else {
              nodes = _this.tree.root.find(function(node) {
                return node.canHaveChildren();
              });
              if (nodes[0]) {
                items.push({
                  text: $$("system.list.hierarchy.manager.button.new", {
                    parent: nodes[0].getDisplayText()
                  }),
                  value: nodes[0],
                  onClick: click
                });
              }
            }
            if (!items.length) {
              items.push({
                text: _this.getNewRootText(),
                disabled: !_this.tree.root.canHaveChildren(),
                onClick: click
              });
            }
            return items.reverse();
          };
        })(this)
      }
    });
  };

  SystemListHierarchyManager.prototype.loadList = function(filter, opts) {
    var dfr, ref, sopts;
    if (opts == null) {
      opts = {};
    }
    assert($.isFunction(opts.newInstanceFunc), "SystemListHierarchyManager", "opts.newInstanceFunc needs to be Function.", {
      opts: opts
    });
    sopts = opts.searchOpts || {};
    dfr = new CUI.Deferred();
    if (!sopts.search) {
      if (!isEmpty(filter)) {
        sopts.search = [
          {
            type: "match",
            bool: "must",
            mode: "fulltext",
            string: filter
          }
        ];
      } else if (opts.parentField) {
        sopts.search = [
          {
            type: "in",
            bool: "must",
            fields: [opts.parentField],
            "in": [opts.parentId]
          }
        ];
      } else {
        sopts.search = [];
      }
    }
    CUI.mergeMap(sopts, {
      highlight: {},
      format: "short"
    });
    if ((ref = this.__searchRequest) != null) {
      ref.abort();
    }
    this.__searchRequest = ez5.api.search({
      json_data: sopts
    }).always((function(_this) {
      return function() {
        return delete _this.__searchRequest;
      };
    })(this)).done((function(_this) {
      return function(data) {
        var doOpen, idx, o, objects, req;
        req = new Request(sopts);
        if (opts.doOpen === false) {
          doOpen = false;
        } else {
          doOpen = true;
        }
        if (!isEmpty(filter) || opts.buildTree) {
          objects = ez5.buildObjectTree({
            objects: data.objects,
            objectKey: opts.objectKey,
            objectKeyId: opts.objectKeyId,
            doOpen: doOpen,
            newInstanceFunc: function(o) {
              return opts.newInstanceFunc(o, req);
            }
          });
        } else {
          objects = (function() {
            var i, len, ref1, results;
            ref1 = data.objects;
            results = [];
            for (idx = i = 0, len = ref1.length; i < len; idx = ++i) {
              o = ref1[idx];
              results.push(opts.newInstanceFunc(o, req));
            }
            return results;
          })();
        }
        return dfr.resolve(objects, data);
      };
    })(this));
    return dfr.promise();
  };

  return SystemListHierarchyManager;

})(SystemListManager);
// Generated by CoffeeScript 1.10.0
var FieldsForm,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FieldsForm = (function(superClass) {
  extend(FieldsForm, superClass);

  function FieldsForm() {
    return FieldsForm.__super__.constructor.apply(this, arguments);
  }

  FieldsForm.prototype.initOpts = function() {
    FieldsForm.__super__.initOpts.call(this);
    return this.addOpts({
      otm: {
        mandatory: true,
        check: ObjecttypeManager
      },
      data: {
        mandatory: true,
        check: "PlainObject"
      },
      treeNodeClass: {
        mandatory: true,
        check: function(v) {
          return v instanceof Function;
        }
      },
      treeOpts: {
        mandatory: true,
        "default": {},
        check: "PlainObject"
      },
      formWrapper: {
        check: XMLFormWrapper
      },
      acceptField: {
        mandatory: true,
        check: Function,
        "default": function(field) {
          return !(field instanceof MaskSplitter);
        }
      }
    });
  };

  FieldsForm.prototype.readOpts = function() {
    FieldsForm.__super__.readOpts.call(this);
    this.otm = this._otm;
    this.data = this._data;
    this.treeNodeClass = this._treeNodeClass;
    this.treeOpts = this._treeOpts;
    return this;
  };

  FieldsForm.prototype.getTreeOpts = function(opts) {
    var k, ref, treeOpts, v;
    treeOpts = {};
    ref = this.treeOpts;
    for (k in ref) {
      v = ref[k];
      treeOpts[k] = v;
    }
    for (k in opts) {
      v = opts[k];
      if (!treeOpts.hasOwnProperty(k)) {
        treeOpts[k] = v;
      }
    }
    return treeOpts;
  };

  FieldsForm.prototype.renderForm = function() {
    var add_field_to_children, div_common, div_unique, f, form_fields, i, idx, j, l, len, len1, len2, len3, m, n, ot, ot_form, ref, ref1, ref2, ref3, t, tn, top_level_fields, top_level_fields_by_name, tree_options, unique_masks;
    form_fields = $div("export-manager-form-fields cui-flex-container");
    top_level_fields = [];
    top_level_fields_by_name = {};
    add_field_to_children = (function(_this) {
      return function(children, opts) {
        var tn;
        if (!_this._acceptField(opts.field)) {
          return;
        }
        if (opts.field.isTopLevelField()) {
          if (!top_level_fields_by_name[opts.field.fullName()]) {
            top_level_fields_by_name[opts.field.fullName()] = true;
            tn = new _this.treeNodeClass(opts);
            top_level_fields.push(tn);
            return tn.nodeAdded();
          }
        } else {
          tn = new _this.treeNodeClass(opts);
          children.push(tn);
          return tn.nodeAdded();
        }
      };
    })(this);
    ref = this.otm.getObjecttypes();
    for (i = 0, len = ref.length; i < len; i++) {
      ot = ref[i];
      ot_form = $div("export-manager-ot-form fields-form-ot-form form-is-open");
      unique_masks = [];
      ref1 = ot.masks;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        m = ref1[j];
        if (!m.uniqueFields.length) {
          continue;
        }
        div_unique = $div("export-manager-ot-form-mask");
        tn = [];
        ref2 = m.uniqueFields;
        for (idx = l = 0, len2 = ref2.length; l < len2; idx = ++l) {
          f = ref2[idx];
          if (f.depth() > 0) {
            continue;
          }
          add_field_to_children(tn, {
            field: f,
            data: this.data,
            formWrapper: this._formWrapper,
            acceptField: this._acceptField
          });
        }
        if (tn.length) {
          unique_masks.push(m);
          t = new ListViewTree(this.getTreeOpts({
            children: tn
          }));
          div_unique.append($div("export-manager-ot-form-mask-title").text(m.nameLocalized()));
          div_unique.append(t.render(false)).appendTo(ot_form);
          t.root.open();
        }
      }
      if (ot.commonFields.length) {
        div_common = $div("export-manager-ot-form-common");
        if (unique_masks.length > 0) {
          div_common.append($div("export-manager-ot-form-common-title").text("In allen oder mehreren Masken"));
        }
        tn = [];
        ref3 = ot.commonFields;
        for (n = 0, len3 = ref3.length; n < len3; n++) {
          f = ref3[n];
          if (f.depth() > 0) {
            continue;
          }
          add_field_to_children(tn, {
            field: f,
            data: this.data,
            formWrapper: this._formWrapper,
            acceptField: this._acceptField
          });
        }
        if (tn.length) {
          tree_options = this.getTreeOpts({
            children: tn
          });
          t = new ListViewTree(tree_options);
          div_common.append(t.render(false)).prependTo(ot_form);
          t.root.open();
        }
      }
      if (ot_form.children.length) {
        new Panel({
          text: ot.nameLocalized(),
          content: ot_form
        }).DOM.appendTo(form_fields);
      }
    }
    tree_options = this.getTreeOpts({
      children: top_level_fields
    });
    this.__tree = new ListViewTree(tree_options);
    this.__tree.render(false).prependTo(form_fields);
    return form_fields;
  };

  FieldsForm.prototype.open = function() {
    assert(this.__tree, "FieldsForm.open", "Cannot open before .renderForm was called.", {
      fieldsForm: this
    });
    return this.__tree.root.open();
  };

  return FieldsForm;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var FieldsFormNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

FieldsFormNode = (function(superClass) {
  extend(FieldsFormNode, superClass);

  function FieldsFormNode() {
    return FieldsFormNode.__super__.constructor.apply(this, arguments);
  }

  FieldsFormNode.prototype.readOpts = function() {
    FieldsFormNode.__super__.readOpts.call(this);
    return this.field = this._field;
  };

  FieldsFormNode.prototype.initOpts = function() {
    FieldsFormNode.__super__.initOpts.call(this);
    return this.addOpts({
      data: {
        mandatory: true,
        check: "PlainObject"
      },
      formWrapper: {
        check: XMLFormWrapper
      },
      acceptField: {
        mandatory: true,
        check: Function,
        "default": function(field) {
          return !(field instanceof MaskSplitter);
        }
      },
      field: {
        mandatory: true,
        check: function(v) {
          return v instanceof Field || v instanceof MaskSplitter;
        }
      }
    });
  };

  FieldsFormNode.prototype.getModeForNested = function() {
    return assert(false, "FieldsFormNode.getModeForNested", "Needs to be overwritten.");
  };

  FieldsFormNode.prototype.nodeAdded = function() {
    var f, i, j, len, len1, ref, ref1, ref2, tn;
    if (this.field instanceof NestedTable && !this.field.FieldSchema.hierarchical_mask_hint) {
      ref = this.field.mask.getFields(this.getModeForNested());
      for (i = 0, len = ref.length; i < len; i++) {
        f = ref[i];
        if (!this._acceptField(f)) {
          continue;
        }
        tn = new window[getObjectClass(this)]({
          field: f,
          formWrapper: this._formWrapper,
          data: this._data
        });
        this.addChild(tn);
        tn.nodeAdded();
      }
    }
    if (this.field instanceof LinkedObject) {
      if (ref1 = this.field.linkMask().table.name(), indexOf.call(this.getTableNamePath(), ref1) >= 0) {

      } else {
        ref2 = this.field.linkMask().getFields(this.getModeForNested());
        for (j = 0, len1 = ref2.length; j < len1; j++) {
          f = ref2[j];
          if (f instanceof TreeColumn || f instanceof ReverseLinkedTable || f instanceof MaskSplitter) {
            continue;
          }
          if (!this._acceptField(f)) {
            continue;
          }
          tn = new window[getObjectClass(this)]({
            field: f,
            formWrapper: this._formWrapper,
            data: this._data
          });
          this.addChild(tn);
          tn.nodeAdded();
        }
      }
    }
    if (!this._data[this.fullFieldName()]) {
      this._data[this.fullFieldName()] = {
        _enabled: false,
        display_name: this.field.nameLocalized()
      };
    } else if (!this._data[this.fullFieldName()].hasOwnProperty("_enabled")) {
      this._data[this.fullFieldName()]._enabled = true;
    }
    return this.data = this._data[this.fullFieldName()];
  };

  FieldsFormNode.prototype.getTableNamePath = function() {
    var i, len, p, path, ref, t;
    path = [];
    ref = this.getPath(true);
    for (i = 0, len = ref.length; i < len; i++) {
      p = ref[i];
      if (t = typeof p.fieldTable === "function" ? p.fieldTable() : void 0) {
        path.push(t.name());
      }
    }
    return path;
  };

  FieldsFormNode.prototype.dumpString = function() {
    var cn;
    cn = getObjectClass(this.field);
    if (this.field instanceof LinkedObject) {
      cn += " (" + this.field.linkMask().table.name() + ")";
    }
    return this.field.name() + " [" + cn + "] " + this.fullFieldName();
  };

  FieldsFormNode.prototype.fullFieldName = function(for_path) {
    var ffn;
    if (for_path == null) {
      for_path = false;
    }
    if (this.father instanceof FieldsFormNode) {
      ffn = this.father.fullFieldName(true) + "." + this.__fieldName();
    } else if (this.field.isTopLevelField()) {
      ffn = this.field.name();
    } else {
      ffn = this.field.getMainMask().table.name() + "." + this.__fieldName();
    }
    if (!for_path && this.field instanceof LinkedObject) {
      ffn += "._standard.1.text";
    }
    return ffn;
  };

  FieldsFormNode.prototype.__fieldName = function() {
    var ref;
    if (((ref = this.father) != null ? ref.field : void 0) instanceof LinkedObject && !this.field.isTopLevelField()) {
      return this.field.getMainMask().table.name() + "." + this.field.name();
    } else {
      return this.field.name();
    }
  };

  FieldsFormNode.prototype.fieldTable = function() {
    var ref;
    if (((ref = this.father) != null ? ref.field : void 0) instanceof LinkedObject) {
      return this.father.field.linkMask().table;
    } else if (!(this.father instanceof FieldsFormNode)) {
      return this.field.getMainMask().table;
    }
  };

  return FieldsFormNode;

})(ListViewTreeNode);
// Generated by CoffeeScript 1.10.0
var ListViewEditTree,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ListViewEditTree = (function(superClass) {
  extend(ListViewEditTree, superClass);

  function ListViewEditTree(opts) {
    var field, i, idx, j, len, len1, num_fixed_columns, ref, ref1, ref2, ref3;
    if (opts == null) {
      opts = {};
    }
    this.load_data = bind(this.load_data, this);
    if (isUndef(opts.rowMove)) {
      opts.rowMove = true;
    }
    if (opts.rowMode && isUndef(opts.rowMoveWithinNodesOnly)) {
      opts.rowMoveWithinNodesOnly = true;
    }
    if (opts.fields) {
      if (opts.no_header) {
        opts.fixedRows = 0;
      } else {
        opts.fixedRows = 1;
      }
    } else {
      opts.fixedRows = 0;
    }
    if (opts.extra_header) {
      opts.fixedRows++;
    }
    if (opts.extra_header_below) {
      opts.fixedRows++;
    }
    assert(!opts.search || $.isFunction(opts.search), "new ListViewEditTree", "opts.search needs to be empty or Function");
    assert(!(opts.filter && opts.filterManager), "new ListViewEditTree", "opts.filter and opts.filterManager are mutually exclusive.", {
      opts: opts
    });
    if (opts.filter) {
      opts.header_center = this.getFilterManager(opts.filter);
    }
    if (opts.filterManager) {
      opts.header_center = opts.filterManager();
    }
    if (opts.fields) {
      this.fields = opts.fields;
      assert(((ref = this.fields) != null ? ref.length : void 0) > 0, "new " + (getObjectClass(this)), "opts.fields must be an non-empty Array or opts.no_header and opts.cols must be given.", {
        opts: opts
      });
    } else {
      assert(((ref1 = opts.cols) != null ? ref1.length : void 0) > 0, "new " + (getObjectClass(this)), "opts.cols must be an non-empty Array, if opts.fields are not given.", {
        opts: opts
      });
    }
    if (!opts.cols) {
      opts.cols = [];
      num_fixed_columns = 0;
      if (opts.fixedCols) {
        num_fixed_columns = opts.fixedCols;
      }
      ref2 = this.fields;
      for (idx = i = 0, len = ref2.length; i < len; idx = ++i) {
        field = ref2[idx];
        if (idx === num_fixed_columns && opts.maximize !== false) {
          opts.cols.push("maximize");
        } else {
          opts.cols.push("auto");
        }
      }
    } else {
      assert(!this.fields || this.fields.length === opts.cols.length, "new ListViewEditTree", "opts.fields must be of same length as opts.cols", {
        opts: opts
      });
    }
    if (!opts.colClasses && this.fields) {
      opts.colClasses = [];
      ref3 = this.fields;
      for (idx = j = 0, len1 = ref3.length; j < len1; idx = ++j) {
        field = ref3[idx];
        opts.colClasses[idx] = [];
        if (field.th_label) {
          opts.colClasses[idx].push("ez5-col-" + field.th_label.replace(/\./g, "-"));
        }
        if (field.th_rotate_90) {
          opts.colClasses[idx].push("cui-lv-td-rotate-90");
        }
      }
    }
    ListViewEditTree.__super__.constructor.call(this, opts);
  }

  ListViewEditTree.prototype.initOpts = function() {
    ListViewEditTree.__super__.initOpts.call(this);
    this.addOpts({
      filter: {
        check: Function
      },
      filterManager: {
        check: Function
      },
      no_header: {
        check: Boolean
      },
      extra_header: {
        check: (function(_this) {
          return function(v) {
            return $.isArray(v) || v instanceof ListViewHeaderRow;
          };
        })(this)
      },
      end_add_row: {
        check: Function
      },
      fields: {
        check: "Array"
      }
    });
    return this.removeOpt("getChildren");
  };

  ListViewEditTree.prototype.readOpts = function() {
    ListViewEditTree.__super__.readOpts.call(this);
    return this.__isLoaded = false;
  };

  ListViewEditTree.prototype.isLoaded = function() {
    return this.__isLoaded;
  };

  ListViewEditTree.prototype.render = function() {
    return ListViewEditTree.__super__.render.call(this, false);
  };

  ListViewEditTree.prototype.load_data = function(nodes) {
    var i, len, n, ref, ref1;
    this.nodes = nodes;
    if ((ref = this.__layout) != null ? ref.isDestroyed() : void 0) {
      return CUI.rejectedPromise();
    }
    if (this.isLoaded()) {
      ref1 = this.root.find();
      for (i = 0, len = ref1.length; i < len; i++) {
        n = ref1[i];
        n.setFather(null);
      }
      this.root.removeFromDOM(false);
    } else {
      if (this._extra_header) {
        if (this._extra_header instanceof ListViewHeaderRow) {
          this.appendRow(this._extra_header);
        } else {
          this.addHeader(this._extra_header);
        }
      }
      if (!this.opts.no_header && this.fields) {
        this.addHeader(this.fields);
      }
      this.__isLoaded = true;
    }
    this.root.children = this.nodes;
    return this.root.open();
  };

  ListViewEditTree.prototype.addHeader = function(fields) {
    var field, header, i, idx, len, loca_key, text;
    header = new ListViewHeaderRow();
    for (idx = i = 0, len = fields.length; i < len; idx = ++i) {
      field = fields[idx];
      if (field === null) {
        header.addColumn(new ListViewColumnEmpty());
      } else {
        if (field.th_label) {
          loca_key = field.th_label;
        } else if (field.th_text) {
          text = field.th_text;
        } else if (field.label) {
          loca_key = field.label;
        } else {
          text = field.text;
        }
        header.addColumn(new ListViewHeaderColumn({
          spacer: idx === 0,
          colspan: field.th_colspan,
          rotate_90: field.th_rotate_90,
          label: {
            loca_key: loca_key,
            text: text
          }
        }));
      }
    }
    return this.appendRow(header);
  };

  ListViewEditTree.prototype.getFilterManager = function(filterFunc) {
    var filter_data, run_filter;
    filter_data = {};
    run_filter = (function(_this) {
      return function() {
        return filterFunc(filter_data.filter);
      };
    })(this);
    this.__filterInput = new Input({
      "class": "ez5-quicksearch-input",
      name: "filter",
      placeholder: $$("list.view.edit.tree.filter.placeholder"),
      data: filter_data,
      undo_support: false,
      mark_changed: false,
      check_changed: false,
      onDataChanged: (function(_this) {
        return function() {
          return CUI.scheduleCallback({
            ms: 200,
            call: run_filter
          });
        };
      })(this)
    });
    return this.__filterInput.start().DOM;
  };

  ListViewEditTree.prototype.getFilterInput = function() {
    return this.__filterInput;
  };

  return ListViewEditTree;

})(ListViewTree);
// Generated by CoffeeScript 1.10.0
var ListViewEditTreeNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ListViewEditTreeNode = (function(superClass) {
  extend(ListViewEditTreeNode, superClass);

  function ListViewEditTreeNode() {
    return ListViewEditTreeNode.__super__.constructor.apply(this, arguments);
  }

  ListViewEditTreeNode.prototype.initOpts = function() {
    ListViewEditTreeNode.__super__.initOpts.call(this);
    return this.addOpts({
      data: {
        check: "PlainObject"
      }
    });
  };

  ListViewEditTreeNode.prototype.readOpts = function() {
    ListViewEditTreeNode.__super__.readOpts.call(this);
    return this.dataFields = [];
  };

  ListViewEditTreeNode.prototype.getEditFields = function() {
    var fields;
    fields = this.opts.fields || this.getTree().fields;
    assert($.isArray(fields), (getObjectClass(this)) + ".getEditFields", "Fields need to be an Array", {
      fields: fields,
      opts: this.opts
    });
    return fields;
  };

  ListViewEditTreeNode.prototype.getFieldsByName = function() {
    return Form.prototype.getFieldsByName.apply(this, arguments);
  };

  ListViewEditTreeNode.prototype.getFieldByIdx = function(idx) {
    return Form.prototype.getFieldByIdx.apply(this, arguments);
  };

  ListViewEditTreeNode.prototype.getDataFields = function() {
    return Form.prototype.getDataFields.apply(this, arguments);
  };

  ListViewEditTreeNode.prototype.getOtherField = function(name) {
    var ref, ref1;
    return (ref = this.dataFields) != null ? (ref1 = ref[0]) != null ? ref1.getOtherField(name) : void 0 : void 0;
  };

  ListViewEditTreeNode.prototype.getData = function() {
    return this.opts.data;
  };

  ListViewEditTreeNode.prototype.renderContent = function() {
    var c, df, field, i, idx, len, ref, ret;
    this.dataFields = [];
    ref = this.getEditFields();
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      field = ref[idx];
      if (isNull(field)) {
        this.addColumn(new ListViewColumnEmpty());
        continue;
      }
      if (field instanceof ListViewColumn) {
        if (idx === 0) {
          ret = field.render();
        } else {
          this.addColumn(field);
        }
        continue;
      }
      if (field instanceof DataField) {
        assert(false, (getObjectClass(this)) + ".renderContent", "field cannot be instance of DataField");
      }
      if (CUI.isFunction(field.type)) {
        assert(!(field.icon instanceof Icon), "ListViewEditTreeNode.renderContent", "field.icon cannot be instance of Icon", {
          field: field
        });
        assert(!(field.icon_left instanceof Icon), "ListViewEditTreeNode.renderContent", "field.icon_right cannot be instance of Icon", {
          field: field
        });
        assert(!(field.icon_right instanceof Icon), "ListViewEditTreeNode.renderContent", "field.icon_left cannot be instance of Icon", {
          field: field
        });
        df = DataField["new"](field, ["th_label", "th_rotate_90", "colspan"], {
          data: this.getData()
        });
        df.setForm(this);
        if (idx === 0) {
          ret = df.DOM;
        } else {
          this.addColumn(new ListViewColumn({
            colspan: field.colspan,
            element: df.DOM
          }));
        }
        this.dataFields.push(df);
        continue;
      } else if (CUI.isFunction(field.renderContent)) {
        c = field.renderContent(c, this);
      } else {
        assert(false, (getObjectClass(this)) + ".renderContent", "Unable to render field. Needs to be ListViewColumn, null, field.type be set or field.renderContent", {
          field: field
        });
      }
      if (idx === 0) {
        ret = c;
      } else {
        this.addColumn(new ListViewColumn({
          colspan: field.colspan,
          element: c
        }));
      }
    }
    if (this.opts.renderContent) {
      return this.opts.renderContent(ret, this);
    } else {
      return ret;
    }
  };

  ListViewEditTreeNode.prototype.getFields = function(func) {
    if (func === "render" || func === "displayValue") {
      return [];
    }
    return this.dataFields;
  };

  ListViewEditTreeNode.prototype.addedToListView = function() {
    var df, i, len, ref, ref1, ref2;
    ref = this.dataFields;
    for (i = 0, len = ref.length; i < len; i++) {
      df = ref[i];
      if (df.isRendered()) {
        continue;
      }
      df.start();
    }
    ListViewEditTreeNode.__super__.addedToListView.call(this);
    if ((ref1 = this.getTree()) != null) {
      if ((ref2 = ref1.opts.end_add_row) != null) {
        ref2.call(this, this);
      }
    }
    return this;
  };

  ListViewEditTreeNode.prototype.updateFields = function(opts) {
    var df, f, i, j, k, l, len, len1, len2, len3, m, ref, ref1, ref2, ref3, ref4, ref5;
    ref = this.getData()._fields;
    for (i = 0, len = ref.length; i < len; i++) {
      f = ref[i];
      f.$element[0].style.display = "";
      f.$element.enable();
    }
    ref1 = this.dataFields;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      df = ref1[j];
      df.show();
      df.enable();
      if (df instanceof Checkbox && opts.button_group) {
        df.setGroup(df.getName() + "-" + opts.button_group);
      }
    }
    ref2 = opts.hide;
    for (l = 0, len2 = ref2.length; l < len2; l++) {
      k = ref2[l];
      if (isInteger(k)) {
        df = this.getFieldByIdx(k);
      } else {
        df = (ref3 = this.getFieldsByName(k)) != null ? ref3[0] : void 0;
      }
      if (df) {
        df.hide();
      } else {

      }
    }
    ref4 = opts.disable;
    for (m = 0, len3 = ref4.length; m < len3; m++) {
      k = ref4[m];
      if (isInteger(k)) {
        df = this.getFieldByIdx(k);
      } else {
        df = (ref5 = this.getFieldsByName(k)) != null ? ref5[0] : void 0;
      }
      if (df) {
        df.disable();
      } else {

      }
    }
    return this;
  };

  return ListViewEditTreeNode;

})(ListViewTreeNode);
// Generated by CoffeeScript 1.10.0
var TagSimple,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TagSimple = (function(superClass) {
  extend(TagSimple, superClass);

  function TagSimple() {
    this.equals = bind(this.equals, this);
    return TagSimple.__super__.constructor.apply(this, arguments);
  }

  TagSimple.pseudoIdCounter = 0;

  TagSimple.prototype.initOpts = function() {
    TagSimple.__super__.initOpts.call(this);
    return this.addOpts({
      tagFormGroup: {
        check: TagGroupSimple
      }
    });
  };

  TagSimple.prototype.readOpts = function() {
    if (this.opts instanceof TagSimple) {
      assert(false, "Tag cannot be initialized using a Tag");
    }
    this.initData();
    this.pseudoId = -(++TagSimple.pseudoIdCounter);
    return TagSimple.__super__.readOpts.call(this);
  };

  TagSimple.prototype.initData = function() {
    this.data = this.opts.data;
    assert($.isPlainObject(this.data.tag), "new Tag", "opts.data.tag needs to be plain object", {
      opts: this.opts
    });
    this.tagFormGroup = this.opts.tagFormGroup;
    if (!this.data._acl) {
      this.data._acl = [];
    }
    if (!this.data.tag.frontend_prefs) {
      this.data.tag.frontend_prefs = {};
    }
    if (!this.data.tag.frontend_prefs.webfrontend) {
      return this.data.tag.frontend_prefs.webfrontend = {};
    }
  };

  TagSimple.prototype.initTooltip = function(el) {
    var desc, text;
    text = this.tagFormGroup.getDisplayName() + ": " + this.getDisplayName();
    if (!isEmpty(desc = this.getDescription())) {
      text += "\n\n" + desc;
    }
    if (!isEmpty(text)) {
      new Tooltip({
        element: el,
        text: text
      });
    }
    return this;
  };

  TagSimple.prototype.available = function() {
    return true;
  };

  TagSimple.prototype.getData = function() {
    return this.data.tag;
  };

  TagSimple.prototype.getDisplayName = function() {
    return ez5.loca.getBestFrontendValue(this.data.tag.displayname);
  };

  TagSimple.prototype.getDisplayType = function() {
    return this.data.tag.displaytype;
  };

  TagSimple.prototype.getId = function() {
    return this.data.tag._id;
  };

  TagSimple.prototype.getLabel = function(icon, tooltip) {
    var lb;
    if (icon == null) {
      icon = true;
    }
    if (tooltip == null) {
      tooltip = false;
    }
    lb = new Label({
      "class": "ez5-tag " + this.getColorCls(),
      icon: icon ? this.getIcon() : void 0,
      text: this.getDisplayName()
    });
    if (tooltip) {
      this.initTooltip(lb);
    }
    return lb;
  };

  TagSimple.prototype.getIcon = function() {
    var ref, ref1;
    return ((ref = this.data) != null ? (ref1 = ref.tag.frontend_prefs.webfrontend) != null ? ref1.icon : void 0 : void 0) || null;
  };

  TagSimple.prototype.getColorCls = function() {
    var color, ref, ref1;
    color = (ref = this.data) != null ? (ref1 = ref.tag.frontend_prefs.webfrontend) != null ? ref1.color : void 0 : void 0;
    if (!color) {
      return '';
    }
    return 'ez5-tag-color-' + color;
  };

  TagSimple.prototype.getIconElement = function(tooltip) {
    var color, el, icon;
    if (tooltip == null) {
      tooltip = true;
    }
    icon = this.getIcon();
    color = this.getColorCls();
    if (icon) {
      el = new Icon({
        icon: icon
      }).DOM.addClass("ez5-tag-icon").addClass(this.getColorCls());
      this.initTooltip(el);
      return el;
    } else {
      return null;
    }
  };

  TagSimple.prototype.getDescription = function() {
    return ez5.loca.getBestFrontendValue(this.data.tag.description);
  };

  TagSimple.prototype.equals = function(tagFormTag) {
    return this.getAnyId() === tagFormTag.getAnyId();
  };

  TagSimple.prototype.getAnyId = function() {
    return this.getId() || this.pseudoId;
  };

  TagSimple.sortList = function(tags) {
    return tags.sort(function(a, b) {
      var a_d, b_d;
      a_d = a.getData();
      b_d = b.getData();
      if (a_d._group_idx < b_d._group_idx) {
        return -1;
      } else if (a_d._group_idx > b_d._group_idx) {
        return 1;
      } else if (a_d._idx < b_d._idx) {
        return -1;
      } else if (a_d._idx > b_d._idx) {
        return 1;
      } else {
        return 0;
      }
    });
  };

  return TagSimple;

})(ListViewEditTreeNode);
// Generated by CoffeeScript 1.10.0
var Tag,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Tag = (function(superClass) {
  extend(Tag, superClass);

  function Tag() {
    this.getSaveData = bind(this.getSaveData, this);
    return Tag.__super__.constructor.apply(this, arguments);
  }

  Tag.prototype.initOpts = function() {
    Tag.__super__.initOpts.call(this);
    return this.addOpts({
      fields: {
        check: Array
      }
    });
  };

  Tag.prototype.initData = function() {
    Tag.__super__.initData.call(this);
    return this.opts.fields = this.getFieldDefs();
  };

  Tag.prototype.getBaseFieldDefs = function() {
    return {
      displayname: {
        type: MultiInput,
        control: ez5.loca.getLanguageControlAdmin(),
        name: "displayname"
      },
      enabled: {
        type: Checkbox,
        disabled: (function(_this) {
          return function() {
            return _this.tagDisabled;
          };
        })(this),
        name: "enabled",
        onDataChanged: (function(_this) {
          return function(data, field) {
            if (!_this.data.tag.enabled) {
              return field.getOtherField("is_default").setValue(false).disable();
            } else {
              return field.getOtherField("is_default").enable();
            }
          };
        })(this)
      },
      is_default: {
        type: Checkbox,
        name: "is_default",
        disabled: (function(_this) {
          return function() {
            return _this.tagDisabled || !_this.data.tag.enabled;
          };
        })(this),
        onDataChanged: (function(_this) {
          return function(data, field) {
            var c, i, len, ref;
            CUI.debug("opts.data", _this.data, _this.father.data);
            if (_this.data.tag.is_default && _this.father.data.taggroup.type === "choice") {
              ref = _this.father.children;
              for (i = 0, len = ref.length; i < len; i++) {
                c = ref[i];
                if (c === _this || c.tagDisabled) {
                  continue;
                }
                c.getOtherField("is_default").setValue(false);
              }
            }
            return null;
          };
        })(this)
      },
      sticky: {
        type: Checkbox,
        disabled: (function(_this) {
          return function() {
            return _this.tagDisabled;
          };
        })(this),
        name: "sticky"
      }
    };
  };

  Tag.prototype.getFieldDefs = function() {
    var base_fields, color, color_opts, i, icon, icon_opts, j, len, len1, ref, ref1, ref2, ref3, tag_color, tag_colors, tag_icon, tag_icons;
    base_fields = this.getBaseFieldDefs();
    this.aclManager = new AclManager({
      data: this.data._acl,
      right: true,
      active: true,
      context: this,
      tagfilter: true,
      tagForm: this.tagFormGroup.getTagForm()
    });
    icon_opts = [
      {
        text: "",
        value: null
      }
    ];
    color_opts = [
      {
        text: '',
        value: null
      }
    ];
    tag_icons = (ref = ez5.session.getDefaults().client.tag_icons) != null ? ref.trim() : void 0;
    if (!tag_icons) {
      tag_icons = "bolt,check,cloud,warning,legal";
    }
    tag_colors = (ref1 = ez5.session.getDefaults().client.tag_colors) != null ? ref1.trim() : void 0;
    if (!tag_colors) {
      tag_colors = "green,red,blue,yellow";
    }
    ref2 = tag_icons.split(",");
    for (i = 0, len = ref2.length; i < len; i++) {
      tag_icon = ref2[i];
      icon = tag_icon.trim();
      icon_opts.push({
        icon: icon,
        value: icon
      });
    }
    ref3 = tag_colors.split(",");
    for (j = 0, len1 = ref3.length; j < len1; j++) {
      tag_color = ref3[j];
      color = tag_color.trim();
      color_opts.push({
        icon: 'css-swatch ez5-tag-color-' + color,
        value: color
      });
    }
    return [
      base_fields.displayname, {
        type: Select,
        name: "type",
        options: function() {
          var k, l, len2, ref4, results;
          ref4 = ["individual", "all_versions"];
          results = [];
          for (l = 0, len2 = ref4.length; l < len2; l++) {
            k = ref4[l];
            results.push({
              text: $$("tag.form.type." + k),
              value: k
            });
          }
          return results;
        }
      }, {
        type: Select,
        name: "displaytype",
        options: function() {
          var k, l, len2, ref4, results;
          ref4 = ["search", "detail", "editor", "hidden"];
          results = [];
          for (l = 0, len2 = ref4.length; l < len2; l++) {
            k = ref4[l];
            results.push({
              text: $$("tag.form.displaytype." + k),
              value: k
            });
          }
          return results;
        }
      }, {
        type: FormPopover,
        popover: {
          pane: {
            padded: true
          }
        },
        fields: [
          {
            type: Output,
            text: $$("admin.tagform.col.description"),
            "class": "cui-output--no-padding"
          }, {
            type: MultiInput,
            name: "description",
            control: ez5.loca.getLanguageControlAdmin(),
            textarea: true
          }
        ],
        button: {
          icon_active: "file_text_active",
          icon_inactive: "file_text"
        },
        renderDisplayButton: (function(_this) {
          return function(df, data) {
            var k, ref4, v;
            ref4 = data.description;
            for (k in ref4) {
              v = ref4[k];
              if (!isEmpty(v)) {
                return true;
              }
            }
            return false;
          };
        })(this)
      }, base_fields.enabled, base_fields.is_default, base_fields.sticky, {
        type: Select,
        "class": "ez5-tag-icon-select",
        name: "icon",
        data: this.data.tag.frontend_prefs.webfrontend,
        disabled: (function(_this) {
          return function() {
            return _this.tagDisabled;
          };
        })(this),
        options: icon_opts
      }, {
        type: Select,
        "class": "ez5-tag-icon-select",
        name: "color",
        data: this.data.tag.frontend_prefs.webfrontend,
        disabled: (function(_this) {
          return function() {
            return _this.tagDisabled;
          };
        })(this),
        options: color_opts
      }, this.aclManager.getField()
    ];
  };

  Tag.prototype.renderAsButton = function(editorData) {
    var button, setIcon;
    setIcon = (function(_this) {
      return function() {
        var icon;
        switch (editorData[_this.getAnyId()]) {
          case null:
          case void 0:
            icon = null;
            break;
          case false:
            icon = "minus";
            break;
          case true:
            icon = "plus";
        }
        button.setIcon(icon);
      };
    })(this);
    button = new Button({
      text: this.getDisplayName(),
      "class": "ez5-tag-editor-button",
      left: true,
      onClick: (function(_this) {
        return function(ev) {
          var nd;
          switch (editorData[_this.getAnyId()]) {
            case null:
            case void 0:
              nd = true;
              break;
            case true:
              nd = false;
              break;
            case false:
              nd = null;
          }
          editorData[_this.getAnyId()] = nd;
          Events.trigger({
            node: button,
            type: "data-changed"
          });
          return setIcon();
        };
      })(this)
    });
    setIcon();
    return button.DOM;
  };

  Tag.prototype.getSaveData = function() {
    var i, j, k, l, len, len1, len2, ref, ref1, ref2, save_data;
    save_data = {
      tag: {}
    };
    ref = ["displayname", "description", "displaytype", "type", "_id"];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      save_data.tag[k] = this.data.tag[k];
    }
    ref1 = ["sticky", "is_default", "enabled"];
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      k = ref1[j];
      save_data.tag[k] = !!this.data.tag[k];
    }
    save_data.tag.frontend_prefs = copyObject(this.data.tag.frontend_prefs, true);
    save_data.tag.frontend_prefs.webfrontend = {};
    ref2 = ["icon", 'color'];
    for (l = 0, len2 = ref2.length; l < len2; l++) {
      k = ref2[l];
      save_data.tag.frontend_prefs.webfrontend[k] = this.data.tag.frontend_prefs.webfrontend[k];
    }
    save_data._acl = this.aclManager.getSaveData();
    save_data._pseudo_id = this.pseudoId;
    return save_data;
  };

  return Tag;

})(TagSimple);
// Generated by CoffeeScript 1.10.0
var TagGroupSimple,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TagGroupSimple = (function(superClass) {
  extend(TagGroupSimple, superClass);

  function TagGroupSimple(opts) {
    var i, len, ref, tag_data, tag_idx;
    this.opts = opts != null ? opts : {};
    this.findTagByDisplayName = bind(this.findTagByDisplayName, this);
    this.findTagByAnyId = bind(this.findTagByAnyId, this);
    this.tagForm = this.opts.tagForm;
    this.children = [];
    this.data = this.opts.data || {
      taggroup: {}
    };
    if (!this.data._tags) {
      this.data._tags = [];
    }
    ref = this.opts.data._tags;
    for (tag_idx = i = 0, len = ref.length; i < len; tag_idx = ++i) {
      tag_data = ref[tag_idx];
      tag_data.tag._idx = tag_idx;
      tag_data.tag._group_idx = this.data.taggroup._idx;
      this.children.push(new this.tagFormTagClass({
        data: tag_data,
        tagFormGroup: this
      }));
    }
    if (this.children.length) {
      this.do_open = true;
    }
    TagGroupSimple.__super__.constructor.call(this, this.opts);
  }

  TagGroupSimple.prototype.initOpts = function() {
    TagGroupSimple.__super__.initOpts.call(this);
    return this.addOpts({
      tagForm: {
        check: TagFormSimple
      }
    });
  };

  TagGroupSimple.prototype.tagFormTagClass = TagSimple;

  TagGroupSimple.prototype.getData = function() {
    return this.data.taggroup;
  };

  TagGroupSimple.prototype.getTagForm = function() {
    return this.tagForm;
  };

  TagGroupSimple.prototype.getType = function() {
    return this.data.taggroup.type;
  };

  TagGroupSimple.prototype.isChoice = function() {
    return this.getType() === "choice";
  };

  TagGroupSimple.prototype.getDisplayName = function() {
    return ez5.loca.getBestFrontendValue(this.opts.data.taggroup.displayname);
  };

  TagGroupSimple.prototype.findTagByAnyId = function(anyId) {
    var i, len, ref, tag;
    ref = this.children;
    for (i = 0, len = ref.length; i < len; i++) {
      tag = ref[i];
      if ("" + tag.getAnyId() === "" + anyId) {
        return tag;
      }
    }
    return null;
  };

  TagGroupSimple.prototype.findTagByDisplayName = function(name) {
    var i, len, ref, tag;
    ref = this.children;
    for (i = 0, len = ref.length; i < len; i++) {
      tag = ref[i];
      if (tag.getDisplayName() === name) {
        return tag;
      }
    }
    return null;
  };

  return TagGroupSimple;

})(ListViewEditTreeNode);
// Generated by CoffeeScript 1.10.0
var TagGroup,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TagGroup = (function(superClass) {
  extend(TagGroup, superClass);

  function TagGroup(opts) {
    this.opts = opts != null ? opts : {};
    this.opts.fields = this.getFieldDefs();
    TagGroup.__super__.constructor.call(this, this.opts);
  }

  TagGroup.prototype.initOpts = function() {
    TagGroup.__super__.initOpts.call(this);
    return this.addOpts({
      tagForm: {
        check: TagForm
      },
      fields: {
        check: Array
      }
    });
  };

  TagGroup.prototype.tagFormTagClass = Tag;

  TagGroup.prototype.loadData = function(data, context) {};

  TagGroup.prototype.addTag = function() {
    var tag, tag_data;
    tag_data = {
      tag: {
        enabled: true
      }
    };
    this.data._tags.push(tag_data);
    tag = new this.tagFormTagClass({
      data: tag_data,
      tagFormGroup: this
    });
    this.addNode(tag);
    return this;
  };

  TagGroup.prototype.getFieldDefs = function() {
    return [
      {
        type: MultiInput,
        name: "displayname",
        control: ez5.loca.getLanguageControlAdmin()
      }, {
        type: Select,
        name: "type",
        options: [
          {
            text: $$("tag.group.type.checkbox"),
            value: "checkbox"
          }, {
            text: $$("tag.group.type.choice"),
            value: "choice"
          }
        ],
        onDataChanged: (function(_this) {
          return function() {
            var c, first, i, len, ref;
            if (_this.data.taggroup.type === "choice") {
              first = false;
              ref = _this.children;
              for (i = 0, len = ref.length; i < len; i++) {
                c = ref[i];
                if (!c.data.tag.is_default) {
                  continue;
                }
                if (!first) {
                  first = true;
                  continue;
                }
                c.getOtherField("is_default").setValue(false);
              }
            }
            return null;
          };
        })(this)
      }
    ];
  };

  TagGroup.prototype.renderForEditor = function(editorData) {
    var c, child_div, div, i, len, ref;
    div = $div("ez5-tag-editor-group");
    div.append($div("ez5-tag-editor-group-title").text(this.getDisplayName()));
    child_div = $div("ez5-tag-editor-group-tags").appendTo(div);
    ref = this.children;
    for (i = 0, len = ref.length; i < len; i++) {
      c = ref[i];
      child_div.append(c.renderAsButton(editorData));
    }
    return div;
  };

  TagGroup.prototype.getSaveData = function() {
    var c, i, j, k, len, len1, ref, ref1, save_data;
    save_data = {
      taggroup: {}
    };
    ref = ["displayname", "type", "_id"];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      save_data.taggroup[k] = this.opts.data.taggroup[k];
    }
    save_data._tags = [];
    if (this.children) {
      ref1 = this.children;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        c = ref1[j];
        save_data._tags.push(c.getSaveData());
      }
    }
    return save_data;
  };

  return TagGroup;

})(TagGroupSimple);
// Generated by CoffeeScript 1.10.0
var TagFormSimple,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TagFormSimple = (function(superClass) {
  extend(TagFormSimple, superClass);

  function TagFormSimple() {
    return TagFormSimple.__super__.constructor.apply(this, arguments);
  }

  TagFormSimple.prototype.tagFormGroupClass = TagGroupSimple;

  TagFormSimple.prototype.load = function() {
    return ez5.api.tags().done((function(_this) {
      return function(data1) {
        var group_data, group_idx, i, len, ref, tagGroup;
        _this.data = data1;
        _this.tagGroups = [];
        ref = _this.data;
        for (group_idx = i = 0, len = ref.length; i < len; group_idx = ++i) {
          group_data = ref[group_idx];
          group_data.taggroup._idx = group_idx;
          tagGroup = new _this.tagFormGroupClass({
            data: group_data,
            tagForm: _this
          });
          _this.tagGroups.push(tagGroup);
        }
      };
    })(this));
  };

  TagFormSimple.prototype.findTagByAnyId = function(anyId) {
    var c, found, i, len, ref;
    assert(this.tagGroups, "TagForm.findTagByAnyId", "Not loaded yet", {
      anyId: anyId
    });
    ref = this.tagGroups;
    for (i = 0, len = ref.length; i < len; i++) {
      c = ref[i];
      found = c.findTagByAnyId(anyId);
      if (found) {
        return found;
      }
    }
    return null;
  };

  TagFormSimple.prototype.findTagByDisplayName = function(name) {
    var c, found, i, len, ref;
    assert(this.tagGroups, "TagForm.findTagByDisplayName", "Not loaded yet.");
    ref = this.tagGroups;
    for (i = 0, len = ref.length; i < len; i++) {
      c = ref[i];
      found = c.findTagByDisplayName(name);
      if (found) {
        return found;
      }
    }
    return null;
  };

  TagFormSimple.prototype.getAllTags = function() {
    var c, i, len, ref, tags;
    tags = [];
    ref = this.tagGroups;
    for (i = 0, len = ref.length; i < len; i++) {
      c = ref[i];
      tags.push.apply(tags, c.children);
    }
    return tags;
  };

  TagFormSimple.prototype.getTagsByData = function(_tags) {
    var _tag, i, len, tags;
    tags = [];
    if (_tags != null ? _tags.length : void 0) {
      for (i = 0, len = _tags.length; i < len; i++) {
        _tag = _tags[i];
        tags.push(this.findTagByAnyId(_tag._id));
      }
    }
    TagSimple.sortList(tags);
    return tags;
  };

  TagFormSimple.prototype.renderFilterEditorTitle = function() {
    return new LocaLabel({
      loca_key: "tag.form.editor.title"
    }).DOM;
  };

  TagFormSimple.prototype.renderAsFilterEditor = function(data, conditionTypes) {
    var fn, group, group_added, i, idx, j, k, len, len1, len2, len3, len4, m, mapped_data, n, o, ref, ref1, table, tag, tagId, tr, v;
    table = $table("ez5-tag-form-filter-table");
    tr = $tr().appendTo(table);
    tr.append($th());
    fn = function(idx) {
      var l;
      l = new LocaLabel({
        loca_key: "tag.form.tagfilter.header." + k
      });
      return tr.append($th().append(l.DOM));
    };
    for (idx = i = 0, len = conditionTypes.length; i < len; idx = ++i) {
      k = conditionTypes[idx];
      fn(idx);
    }
    assert(this.tagGroups, "TagForm.renderAsFilterEditor", "tagGroups are not loaded yet, cannot render");
    mapped_data = {};
    for (k in data) {
      v = data[k];
      if (v === false) {
        continue;
      }
      for (j = 0, len1 = v.length; j < len1; j++) {
        tagId = v[j];
        mapped_data[tagId] = k;
      }
    }
    ref = this.tagGroups;
    for (m = 0, len2 = ref.length; m < len2; m++) {
      group = ref[m];
      group_added = false;
      ref1 = group.children;
      for (n = 0, len3 = ref1.length; n < len3; n++) {
        tag = ref1[n];
        if (!tag.available()) {
          continue;
        }
        if (!group_added) {
          if (CUI.__ng__) {
            table.append($tr("ez5-tag-form-tag-group-row").append($td().append(new Label({
              text: group.getDisplayName(),
              multiline: true,
              appearance: "title"
            }).DOM)));
          } else {
            table.append($tr("ez5-tag-form-tag-group-row").attr({
              colspan: 4
            }).append($td().append(new Label({
              text: group.getDisplayName(),
              appearance: "title"
            }).DOM)));
          }
          group_added = true;
        }
        tagId = tag.getAnyId() + "";
        tr = $tr("ez5-tag-form-tag-row");
        if (CUI.__ng__) {
          tr.append($td("ez5-tag-form-tag-label").append(new Label({
            text: tag.getDisplayName(),
            multiline: true
          }).DOM));
        } else {
          tr.append($td("ez5-tag-form-tag-label").append(new Label({
            text: tag.getDisplayName()
          }).DOM));
        }
        for (o = 0, len4 = conditionTypes.length; o < len4; o++) {
          k = conditionTypes[o];
          tr.append($td("ez5-tag-form-tag-type-" + k).append(new Checkbox({
            name: tagId,
            undo_support: false,
            radio: tagId,
            radio_allow_null: true,
            value: k,
            data: mapped_data,
            onDataChanged: function() {
              for (k in data) {
                delete data[k];
              }
              for (k in mapped_data) {
                v = mapped_data[k];
                if (v === false) {
                  continue;
                }
                if (!data[v]) {
                  data[v] = [];
                }
                data[v].push(parseInt(k));
              }
            }
          }).DOM));
        }
        table.append(tr);
      }
    }
    return table;
  };

  return TagFormSimple;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var TagForm,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TagForm = (function(superClass) {
  extend(TagForm, superClass);

  function TagForm() {
    return TagForm.__super__.constructor.apply(this, arguments);
  }

  TagForm.prototype.readOpts = function() {
    TagForm.__super__.readOpts.call(this);
    return this.context = this._context;
  };

  TagForm.prototype.initOpts = function() {
    TagForm.__super__.initOpts.call(this);
    return this.addOpts({
      context: {
        mandatory: true,
        check: function(v) {
          return !!v;
        }
      },
      header: {}
    });
  };

  TagForm.prototype.tagFormGroupClass = TagGroup;

  TagForm.prototype.setInactive = function(set) {
    return this.tree.setInactive(set);
  };

  TagForm.prototype.getPlusItems = function() {
    var items;
    items = [
      {
        loca_key: "tag.form.plus.group",
        onClick: (function(_this) {
          return function() {
            return _this.addTagGroup();
          };
        })(this)
      }, {
        loca_key: "tag.form.plus.tag",
        onClick: (function(_this) {
          return function() {
            return _this.tree.getSelectedNode().addTag();
          };
        })(this)
      }
    ];
    if (!(this.tree.getSelectedNode() instanceof TagGroup)) {
      items[1].disabled = true;
    }
    return items;
  };

  TagForm.prototype.addTagGroup = function() {
    var tg, tg_data;
    tg_data = {
      taggroup: {}
    };
    this.data.push(tg_data);
    tg = new TagGroup({
      data: tg_data,
      tagForm: this
    });
    this.tree.addNode(tg).done((function(_this) {
      return function() {
        return tg.select();
      };
    })(this));
    return Events.trigger({
      type: "data-changed",
      node: this.tree
    });
  };

  TagForm.prototype.load = function() {
    var prom;
    prom = TagForm.__super__.load.call(this);
    return prom.done((function(_this) {
      return function() {
        return prom.done(function() {
          if (_this.tree && !_this.tree.isDestroyed()) {
            return _this.tree.load_data(_this.tagGroups);
          }
        });
      };
    })(this));
  };

  TagForm.prototype.getTree = function(tree_opts) {
    var k, ref, v;
    if (tree_opts == null) {
      tree_opts = {};
    }
    ref = {
      fixedRows: 1,
      "class": 'cui-lv--has-datafields',
      cols: ["maximize", "auto", "auto", "auto", "auto", "auto", "auto", "auto", "auto", "auto"],
      fixedCols: 0,
      rowMove: true,
      onRowMove: (function(_this) {
        return function() {
          return Events.trigger({
            type: "data-changed",
            node: _this.tree
          });
        };
      })(this),
      selectableRows: true,
      fields: [
        {
          th_label: "admin.tagform.col.name"
        }, {
          th_label: "admin.tagform.col.type"
        }, {
          th_label: "admin.tagform.col.displaytype"
        }, {
          th_label: "admin.tagform.col.description",
          th_rotate_90: true
        }, {
          th_label: "admin.tagform.col.enabled",
          th_rotate_90: true
        }, {
          th_label: "admin.tagform.col.is_default",
          th_rotate_90: true
        }, {
          th_label: "admin.tagform.col.sticky",
          th_rotate_90: true
        }, {
          th_label: "admin.tagform.col.icon"
        }, {
          th_label: "admin.tagform.col.color"
        }, {
          th_label: "admin.tagform.col.acl"
        }
      ],
      header_left: this._header,
      footer_left: [
        {
          icon: "plus",
          loca_key: "tag.form.list.plus",
          group: "plus-minus",
          menu: {
            items: (function(_this) {
              return function() {
                return _this.getPlusItems();
              };
            })(this)
          }
        }, {
          icon: "minus",
          loca_key: "tag.form.list.minus",
          group: "plus-minus",
          onClick: (function(_this) {
            return function() {
              var ref;
              if ((ref = _this.tree.getSelectedNode()) != null) {
                ref.remove(true);
              }
              return Events.trigger({
                type: "data-changed",
                node: _this.tree
              });
            };
          })(this)
        }
      ]
    };
    for (k in ref) {
      v = ref[k];
      if (tree_opts.hasOwnProperty(k)) {
        continue;
      }
      tree_opts[k] = v;
    }
    this.tree = new ListViewEditTree(tree_opts);
    this.tree.render();
    if (this.tagGroups) {
      this.tree.load_data(this.tagGroups);
    }
    return this.tree;
  };

  TagForm.prototype.renderForEditor = function(editorData) {
    var div, group, i, len, ref;
    assert(this.tagGroups, "TagForm.renderForEditor", "Not loaded yet", {
      editorData: editorData
    });
    div = $div("ez5-tag-editor");
    ref = this.tagGroups;
    for (i = 0, len = ref.length; i < len; i++) {
      group = ref[i];
      div.append(group.renderForEditor(editorData));
    }
    return div;
  };

  TagForm.prototype.getSaveData = function() {
    var c, i, len, ref, save_data;
    save_data = [];
    if (this.tagGroups) {
      ref = this.tagGroups;
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        save_data.push(c.getSaveData());
      }
    }
    return save_data;
  };

  TagForm.prototype.destroy = function() {
    var ref;
    if ((ref = this.tree) != null) {
      ref.destroy();
    }
    delete this.tree;
    return TagForm.__super__.destroy.call(this);
  };

  return TagForm;

})(TagFormSimple);
// Generated by CoffeeScript 1.10.0
var TagForManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TagForManager = (function(superClass) {
  extend(TagForManager, superClass);

  function TagForManager() {
    return TagForManager.__super__.constructor.apply(this, arguments);
  }

  TagForManager.prototype.getSaveData = function() {
    var save_data, tag;
    if (this.tagDisabled) {
      return null;
    }
    tag = this.data.tag;
    if (!tag.enabled && !tag.sticky) {
      return null;
    }
    save_data = {
      _id: tag._id,
      enabled: tag.enabled,
      is_default: !!tag.is_default
    };
    if (this.__getContext() instanceof Pool) {
      save_data.sticky = !!tag.sticky;
    }
    return save_data;
  };

  TagForManager.prototype.__getContext = function() {
    return this.opts.tagFormGroup.tagForm.context;
  };

  TagForManager.prototype.getFieldDefs = function() {
    var base_fields, field, fields, i, len, name, ref;
    base_fields = this.getBaseFieldDefs();
    fields = [];
    ref = ["displayname", "enabled", "is_default", "sticky"];
    for (i = 0, len = ref.length; i < len; i++) {
      name = ref[i];
      field = base_fields[name];
      if (name === "displayname") {
        field.type = MultiOutput;
      }
      if (name === "sticky") {
        if (this.__getContext() instanceof Pool) {
          fields.push(field);
        }
      } else {
        fields.push(field);
      }
    }
    return fields;
  };

  TagForManager.prototype.available = function() {
    return this.data.tag.enabled;
  };

  return TagForManager;

})(Tag);
// Generated by CoffeeScript 1.10.0
var TagGroupForManager,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TagGroupForManager = (function(superClass) {
  extend(TagGroupForManager, superClass);

  function TagGroupForManager() {
    this.getSaveData = bind(this.getSaveData, this);
    this.initTagData = bind(this.initTagData, this);
    return TagGroupForManager.__super__.constructor.apply(this, arguments);
  }

  TagGroupForManager.prototype.initTagData = function(context) {
    var c, i, len, ref;
    assert(context, (getObjectClass(this)) + ".initTagData", "context needs to be set");
    ref = this.children;
    for (i = 0, len = ref.length; i < len; i++) {
      c = ref[i];
      if (typeof context.initTagData === "function") {
        context.initTagData(c);
      }
    }
  };

  TagGroupForManager.prototype.renderContent = function(element) {
    return new Label({
      text: this.getDisplayName()
    });
  };

  TagGroupForManager.prototype.tagFormTagClass = TagForManager;

  TagGroupForManager.prototype.getSaveData = function(save_data) {
    var c, i, len, ref, sd;
    ref = this.children;
    for (i = 0, len = ref.length; i < len; i++) {
      c = ref[i];
      sd = c.getSaveData();
      if (sd) {
        save_data.push(sd);
      }
    }
    return save_data;
  };

  return TagGroupForManager;

})(TagGroup);
// Generated by CoffeeScript 1.10.0
var TagFormForManager,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TagFormForManager = (function(superClass) {
  extend(TagFormForManager, superClass);

  function TagFormForManager() {
    this.getSaveData = bind(this.getSaveData, this);
    this.getTree = bind(this.getTree, this);
    return TagFormForManager.__super__.constructor.apply(this, arguments);
  }

  TagFormForManager.prototype.tagFormGroupClass = TagGroupForManager;

  TagFormForManager.prototype.getTree = function(tree_opts) {
    var f, fields, k, ref, v;
    if (tree_opts == null) {
      tree_opts = {};
    }
    fields = this.getFields();
    ref = {
      fixedRows: 1,
      rowMove: false,
      cols: (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = fields.length; i < len; i++) {
          f = fields[i];
          results.push("auto");
        }
        return results;
      })(),
      fields: fields,
      footer_left: null
    };
    for (k in ref) {
      v = ref[k];
      if (tree_opts.hasOwnProperty(k)) {
        continue;
      }
      tree_opts[k] = v;
    }
    return TagFormForManager.__super__.getTree.call(this, tree_opts);
  };

  TagFormForManager.prototype.load = function() {
    var prom;
    prom = TagFormForManager.__super__.load.call(this);
    return prom.done((function(_this) {
      return function() {
        var i, len, ref, tagGroup;
        ref = _this.tagGroups;
        for (i = 0, len = ref.length; i < len; i++) {
          tagGroup = ref[i];
          tagGroup.initTagData(_this.context);
        }
      };
    })(this));
  };

  TagFormForManager.prototype.getFields = function() {
    var fields;
    fields = [
      {
        th_label: "admin.tagform.col.name"
      }, {
        th_label: "admin.tagform.col.enabled",
        th_rotate_90: true
      }, {
        th_label: "admin.tagform.col.is_default",
        th_rotate_90: true
      }
    ];
    if (this.context instanceof Pool) {
      fields.push({
        th_label: "admin.tagform.col.sticky",
        th_rotate_90: true
      });
    }
    return fields;
  };

  TagFormForManager.prototype.getSaveData = function() {
    var c, i, len, ref, save_data;
    save_data = [];
    if (this.tagGroups) {
      ref = this.tagGroups;
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        c.getSaveData(save_data);
      }
    }
    return save_data;
  };

  return TagFormForManager;

})(TagForm);
// Generated by CoffeeScript 1.10.0
var TransitionAction,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TransitionAction = (function(superClass) {
  extend(TransitionAction, superClass);

  function TransitionAction() {
    return TransitionAction.__super__.constructor.apply(this, arguments);
  }

  TransitionAction.classMap = {};

  TransitionAction.registeredActions = [];

  TransitionAction.registerAction = function(action) {
    assert(action != null ? action.__transitionActionAction : void 0, "TransitionAction.registerAction", "Action needs to be extendes class of TransitionActionAction", {
      action: action
    });
    this.classMap[action.getType()] = action;
    return this.registeredActions.push(action.getType());
  };

  TransitionAction.prototype.initOpts = function() {
    TransitionAction.__super__.initOpts.call(this);
    return this.addOpts({
      data: {
        check: "Array"
      },
      tagForm: {
        check: TagForm
      }
    });
  };

  TransitionAction.prototype.readOpts = function() {
    var action_data, cls, i, len, ref;
    TransitionAction.__super__.readOpts.call(this);
    this.data = this._data;
    this.tagForm = this._tagForm;
    this.actions = [];
    if (this.data.length > 0) {
      ref = this.data;
      for (i = 0, len = ref.length; i < len; i++) {
        action_data = ref[i];
        cls = TransitionAction.classMap[action_data != null ? action_data.type : void 0];
        if (!cls) {
          CUI.warn("Skipping unknown TransitionAction:", action_data.type, action_data);
          continue;
        }
        this.newAction(cls, {
          data: action_data
        });
      }
    }
    return this;
  };

  TransitionAction.prototype.getField = function() {
    var field;
    return field = {
      type: FormPopover,
      maximize: true,
      button: {
        text: $$("transition.action.button.text")
      },
      popover: {
        pane: {
          "class": "ez5-transition-action-popover",
          header_left: new Label({
            text: $$("transition.action.popover.title")
          })
        }
      },
      fields: (function(_this) {
        return function() {
          return [
            {
              type: DataFieldProxy,
              call_others: false,
              element: function() {
                return _this.getTree();
              }
            }
          ];
        };
      })(this),
      renderDisplayContent: (function(_this) {
        return function() {
          return ez5.getLabelForCount("transition.action.counter", _this.actions.length);
        };
      })(this)
    };
  };

  TransitionAction.prototype.newAction = function(actionClass, classOpts) {
    var action;
    if (classOpts == null) {
      classOpts = {};
    }
    classOpts.data = classOpts.data || {};
    classOpts.transitionAction = this;
    action = new actionClass(classOpts);
    if (this.tree) {
      this.tree.addNode(action);
      Events.trigger({
        type: "content-resize",
        node: this.tree
      });
      Events.trigger({
        type: "data-changed",
        node: this.tree
      });
    } else {
      this.actions.push(action);
    }
    return null;
  };

  TransitionAction.prototype.getTree = function() {
    this.tree = new ListViewEditTree({
      cols: ["auto", "auto"],
      fixedCols: 1,
      "class": 'cui-lv--has-datafields',
      no_hierarchy: true,
      rowMove: true,
      selectable: true,
      fields: [
        {
          th_label: "admin.transition.action.col.action"
        }, {
          th_label: "admin.transition.action.col.info"
        }
      ],
      footer_left: (function(_this) {
        return function() {
          var action, fn, i, items, len, ref;
          items = [];
          ref = TransitionAction.registeredActions;
          fn = function(action) {
            var cls;
            cls = TransitionAction.classMap[action];
            return items.push({
              text: cls.getDisplayName(),
              onClick: function() {
                return _this.newAction(cls);
              }
            });
          };
          for (i = 0, len = ref.length; i < len; i++) {
            action = ref[i];
            fn(action);
          }
          return [
            {
              icon: "plus",
              loca_key: "transition.action.list.plus",
              group: "plus-minus",
              menu: {
                items: items
              }
            }, {
              icon: "minus",
              loca_key: "transition.action.list.minus",
              group: "plus-minus",
              onClick: function() {
                var ref1;
                if ((ref1 = _this.tree.getSelectedNode()) != null) {
                  ref1.remove();
                }
                Events.trigger({
                  type: "content-resize",
                  node: _this.tree
                });
                return Events.trigger({
                  type: "data-changed",
                  node: _this.tree
                });
              }
            }
          ];
        };
      })(this)
    });
    this.tree.render();
    this.tree.load_data(this.actions);
    return this.tree;
  };

  TransitionAction.prototype.getSaveData = function() {
    var action, action_data, i, len, ref, save_data;
    save_data = [];
    ref = this.actions;
    for (i = 0, len = ref.length; i < len; i++) {
      action = ref[i];
      action_data = action.getSaveData();
      if (action_data) {
        save_data.push(action_data);
      }
    }
    return save_data;
  };

  return TransitionAction;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var TransitionActionAction,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TransitionActionAction = (function(superClass) {
  extend(TransitionActionAction, superClass);

  function TransitionActionAction(opts) {
    var lv_column;
    this.opts = opts != null ? opts : {};
    TransitionActionAction.__super__.constructor.call(this, this.opts);
    lv_column = this.getListViewColumn();
    assert(lv_column instanceof ListViewColumn || ($.isPlainObject(lv_column) && $.isFunction(lv_column.type)), (getObjectClass(this)) + ".getListViewColumn", "Needs to return instance of listViewColumn or DataField object opts", {
      listViewColumn: lv_column
    });
    this.opts.fields.push(lv_column);
  }

  TransitionActionAction.prototype.initOpts = function() {
    TransitionActionAction.__super__.initOpts.call(this);
    return this.addOpts({
      transitionAction: {
        mandatory: true,
        check: TransitionAction
      },
      fields: {
        check: Array
      }
    });
  };

  TransitionActionAction.prototype.readOpts = function() {
    this.opts.fields = [
      new ListViewColumn({
        text: window[this.__cls].getDisplayName()
      })
    ];
    TransitionActionAction.__super__.readOpts.call(this);
    return this.transitionAction = this._transitionAction;
  };

  TransitionActionAction.prototype.getListViewColumn = function() {};

  TransitionActionAction.prototype.getData = function() {
    return this.data;
  };

  TransitionActionAction.prototype.getSaveData = function() {};

  TransitionActionAction.__transitionActionAction = true;

  TransitionActionAction.getType = function() {
    return assert(false, this.name + ".getType", "Needs implementation");
  };

  TransitionActionAction.getDisplayName = function() {
    return assert(false, this.name + ".getDisplayName", "Needs implementation");
  };

  return TransitionActionAction;

})(ListViewEditTreeNode);
// Generated by CoffeeScript 1.10.0
var TransitionActionEmail,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TransitionActionEmail = (function(superClass) {
  extend(TransitionActionEmail, superClass);

  function TransitionActionEmail() {
    return TransitionActionEmail.__super__.constructor.apply(this, arguments);
  }

  TransitionActionEmail.prototype.readOpts = function() {
    var i, len, rec, ref, results;
    TransitionActionEmail.__super__.readOpts.call(this);
    if (this.opts.data.info) {
      this.data = this.opts.data.info;
      this.data.__recipients = [];
      if (this.data.recipients) {
        ref = this.data.recipients;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          rec = ref[i];
          results.push(this.data.__recipients.push({
            address: rec
          }));
        }
        return results;
      }
    } else {
      return this.data = {
        __recipients: []
      };
    }
  };

  TransitionActionEmail.prototype.getListViewColumn = function() {
    return {
      type: FormPopover,
      button: {
        icon: "email",
        text: $$("transition.action.email.button")
      },
      fields: [
        {
          form: {
            label: $$("transition.action.email.form.recipients")
          },
          type: DataTable,
          no_header: true,
          name: "__recipients",
          fields: [
            {
              type: DataFieldProxy,
              element: (function(_this) {
                return function(df) {
                  CUI.debug("datafield", df, df.getData());
                  return (new AclWhoManager({
                    name: "address",
                    allowEmailUser: true,
                    filter_system_groups: true
                  })).getWhoSelector(df.getData());
                };
              })(this),
              name: "address"
            }
          ]
        }, {
          form: {
            label: $$("transition.action.email.form.subject")
          },
          name: "subject",
          control: ez5.loca.getLanguageControlAdmin(),
          type: MultiInput
        }, {
          form: {
            label: $$("transition.action.email.form.message")
          },
          name: "message",
          control: ez5.loca.getLanguageControlAdmin(),
          type: MultiInput,
          textarea: true
        }, {
          form: {
            label: $$("transition.action.email.form.batchable")
          },
          name: "batchable",
          type: Checkbox
        }
      ]
    };
  };

  TransitionActionEmail.prototype.getSaveData = function() {
    var i, j, k, len, len1, rec, ref, ref1, sd;
    sd = {
      type: "email",
      info: {}
    };
    ref = ["subject", "message", "batchable"];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      sd.info[k] = this.data[k];
    }
    sd.info.recipients = [];
    ref1 = this.data.__recipients;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      rec = ref1[j];
      sd.info.recipients.push(rec.address);
    }
    return sd;
  };

  TransitionActionEmail.getDisplayName = function() {
    return $$("transition.action.email.displayname");
  };

  TransitionActionEmail.getType = function() {
    return "email";
  };

  return TransitionActionEmail;

})(TransitionActionAction);

TransitionAction.registerAction(TransitionActionEmail);
// Generated by CoffeeScript 1.10.0
var TransitionActionSetTags,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TransitionActionSetTags = (function(superClass) {
  extend(TransitionActionSetTags, superClass);

  function TransitionActionSetTags(opts) {
    var i, len, ref, tag;
    this.opts = opts != null ? opts : {};
    this.getListViewColumn = bind(this.getListViewColumn, this);
    TransitionActionSetTags.__super__.constructor.call(this, this.opts);
    this.data = {};
    if (this.opts.data.info) {
      ref = this.opts.data.info.tags;
      for (i = 0, len = ref.length; i < len; i++) {
        tag = ref[i];
        this.data[tag._id] = tag.set;
      }
    }
    return;
  }

  TransitionActionSetTags.prototype.getListViewColumn = function() {
    var lv_column;
    lv_column = new ListViewColumn();
    lv_column.render = (function(_this) {
      return function() {
        var editor_div;
        editor_div = _this.transitionAction.tagForm.renderForEditor(_this.data);
        return editor_div;
      };
    })(this);
    return lv_column;
  };

  TransitionActionSetTags.prototype.getSaveData = function() {
    var list, ref, tag, tagAnyId, value;
    list = [];
    ref = this.data;
    for (tagAnyId in ref) {
      value = ref[tagAnyId];
      if (tagAnyId === "_node") {
        continue;
      }
      tag = this.transitionAction.tagForm.findTagByAnyId(tagAnyId);
      if (!tag || !(value === false || value === true)) {
        continue;
      }
      list.push({
        "_id": tag.getId(),
        set: value
      });
    }
    if (list.length) {
      return {
        type: "set_tags",
        info: {
          tags: list
        }
      };
    } else {
      return null;
    }
  };

  TransitionActionSetTags.getDisplayName = function() {
    return $$("transition.action.set.tags.displayname");
  };

  TransitionActionSetTags.getType = function() {
    return "set_tags";
  };

  return TransitionActionSetTags;

})(TransitionActionAction);

TransitionAction.registerAction(TransitionActionSetTags);
// Generated by CoffeeScript 1.10.0
var TransitionForm, TransitionFormForManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TransitionForm = (function(superClass) {
  extend(TransitionForm, superClass);

  function TransitionForm() {
    return TransitionForm.__super__.constructor.apply(this, arguments);
  }

  TransitionForm.prototype.initOpts = function() {
    TransitionForm.__super__.initOpts.call(this);
    return this.addOpts({
      tagForm: {
        check: TagForm
      },
      footer_right: {},
      objecttypes: {
        "default": true,
        check: Boolean
      }
    });
  };

  TransitionForm.prototype.readOpts = function() {
    TransitionForm.__super__.readOpts.call(this);
    this.tagForm = this._tagForm;
    return this.transitions = [];
  };

  TransitionForm.prototype.setInactive = function(set) {
    if (set) {
      this.__plusMinusButtonbar.disable();
    } else {
      this.__plusMinusButtonbar.enable();
    }
    return this.tree.setInactive(set);
  };

  TransitionForm.prototype.hasObjecttypes = function() {
    return this._objecttypes;
  };

  TransitionForm.prototype.renderEditor = function() {
    var cols, extra_header, fields, i, max_col;
    fields = [
      {
        th_label: "admin.transitionform.col.insert",
        th_rotate_90: true
      }, {
        th_label: "admin.transitionform.col.update",
        th_rotate_90: true
      }, {
        th_label: "admin.transitionform.col.delete",
        th_rotate_90: true
      }, {
        th_label: "admin.transitionform.col.type"
      }, {
        th_label: "admin.transitionform.col.objecttypes"
      }, {
        th_label: "admin.transitionform.col.acl"
      }, {
        th_label: "admin.transitionform.col.tagfilter.before"
      }, {
        th_label: "admin.transitionform.col.tagfilter.after"
      }, {
        th_label: "admin.transitionform.col.confirm"
      }, {
        th_label: "admin.transitionform.col.action"
      }, {
        th_label: "admin.transitionform.col.sticky",
        th_rotate_90: true
      }
    ];
    extra_header = [
      {
        th_label: "admin.transitionform.col.operation",
        th_colspan: 3
      }, null, null, null, {
        th_label: "admin.transitionform.col.tags",
        th_colspan: 2
      }, null, null, null
    ];
    if (!this.hasObjecttypes()) {
      removeFromArray(null, fields, function(v) {
        return v.th_label === "admin.transitionform.col.objecttypes";
      });
      extra_header.splice(2, 1);
      max_col = 4;
    } else {
      max_col = 5;
    }
    cols = (function() {
      var j, ref, results;
      results = [];
      for (i = j = 0, ref = fields.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        results.push("auto");
      }
      return results;
    })();
    cols[max_col] = 'maximize';
    this.__plusMinusButtonbar = new Buttonbar({
      buttons: [
        {
          icon: "plus",
          loca_key: "transition.form.list.plus",
          group: "plus-minus",
          onClick: (function(_this) {
            return function() {
              var transition;
              transition = new TagTransition({
                transitionForm: _this,
                data: {}
              });
              _this.tree.addNode(transition);
              return Events.trigger({
                type: "data-changed",
                node: _this.tree
              });
            };
          })(this)
        }, {
          icon: "minus",
          loca_key: "transition.form.list.minus",
          group: "plus-minus",
          onClick: (function(_this) {
            return function() {
              var ref;
              if ((ref = _this.tree.getSelectedNode()) != null) {
                ref.remove();
              }
              return Events.trigger({
                type: "data-changed",
                node: _this.tree
              });
            };
          })(this)
        }
      ]
    });
    this.tree = new ListViewEditTree({
      cols: cols,
      rowMove: true,
      "class": 'cui-lv--has-datafields',
      no_hierarchy: true,
      fixedCols: 1,
      selectableRows: true,
      footer_right: this._footer_right,
      extra_header: extra_header,
      fields: fields,
      footer_left: this.__plusMinusButtonbar
    });
    this.tree.render();
    if (this.transitions) {
      this.tree.load_data(this.transitions);
    }
    return this.tree;
  };

  TransitionForm.prototype.getTree = function() {
    return this.tree;
  };

  TransitionForm.prototype.loadTransitions = function(transitions) {
    var j, len, transition;
    this.transitions = [];
    for (j = 0, len = transitions.length; j < len; j++) {
      transition = transitions[j];
      this.transitions.push(new TagTransition({
        data: transition,
        transitionForm: this
      }));
    }
    if (this.tree && !this.tree.isDestroyed()) {
      return this.tree.load_data(this.transitions);
    }
  };

  TransitionForm.prototype.load = function() {
    return ez5.api.transitions().done((function(_this) {
      return function(data) {
        return _this.loadTransitions(data);
      };
    })(this));
  };

  TransitionForm.prototype.getSaveData = function() {
    var c, j, len, ref, save_data;
    save_data = [];
    ref = this.transitions;
    for (j = 0, len = ref.length; j < len; j++) {
      c = ref[j];
      save_data.push(c.getSaveData());
    }
    return save_data;
  };

  TransitionForm.prototype.destroy = function() {
    var ref;
    if ((ref = this.tree) != null) {
      ref.destroy();
    }
    delete this.tree;
    delete this.transitions;
    return TransitionForm.__super__.destroy.call(this);
  };

  return TransitionForm;

})(CUI.Element);

TransitionFormForManager = (function(superClass) {
  extend(TransitionFormForManager, superClass);

  function TransitionFormForManager() {
    return TransitionFormForManager.__super__.constructor.apply(this, arguments);
  }

  return TransitionFormForManager;

})(TransitionForm);
// Generated by CoffeeScript 1.10.0
var TagTransition,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TagTransition = (function(superClass) {
  extend(TagTransition, superClass);

  function TagTransition() {
    this.getSaveData = bind(this.getSaveData, this);
    return TagTransition.__super__.constructor.apply(this, arguments);
  }

  TagTransition.prototype.initOpts = function() {
    TagTransition.__super__.initOpts.call(this);
    return this.addOpts({
      transitionForm: {
        mandatory: true,
        check: TransitionForm
      },
      data: {
        check: "PlainObject"
      }
    });
  };

  TagTransition.prototype.readOpts = function() {
    var i, j, k, l, len, len1, len2, op, ref, ref1, ref2, type_opts, who;
    TagTransition.__super__.readOpts.call(this);
    this.data = this._data;
    this.transitionForm = this._transitionForm;
    this.tagfilterBefore = new TagFilter({
      data: this.data,
      name: "tagfilter:before",
      tagForm: this.transitionForm.tagForm
    });
    this.tagfilterAfter = new TagFilter({
      data: this.data,
      name: "tagfilter:after",
      tagForm: this.transitionForm.tagForm,
      conditionTypes: ["any", "all", "not", "changed"]
    });
    if (!this.data.actions) {
      this.data.actions = [];
    }
    this.action = new TransitionAction({
      data: this.data.actions,
      tagForm: this.transitionForm.tagForm
    });
    this.data.acl = [];
    if (this.data.who) {
      ref = this.data.who;
      for (i = 0, len = ref.length; i < len; i++) {
        who = ref[i];
        this.data.acl.push({
          who: who
        });
      }
    }
    this.aclManager = new AclManager({
      data: this.data.acl,
      tagForm: this.transitionForm.tagForm,
      right: false,
      tagfilter: false,
      onUpdate: (function(_this) {
        return function() {
          return _this.update();
        };
      })(this)
    });
    if (this.data.operations) {
      ref1 = this.data.operations;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        op = ref1[j];
        this.data[op.toLowerCase()] = true;
      }
    }
    type_opts = [];
    ref2 = ["process", "resolve", "reject", "exit_resolve", "exit_reject"];
    for (l = 0, len2 = ref2.length; l < len2; l++) {
      k = ref2[l];
      type_opts.push({
        value: k,
        text: $$("tag.transition.type." + k)
      });
    }
    this.opts.fields = [
      {
        type: Checkbox,
        name: "insert"
      }, {
        type: Checkbox,
        name: "update"
      }, {
        type: Checkbox,
        name: "delete"
      }, {
        type: Select,
        name: "type",
        options: type_opts
      }, {
        type: FormPopover,
        button: {
          loca_key: "tag.transition.objecttype.button"
        },
        renderDisplayContent: function(popover, data) {
          var d, id, len3, m, ref3;
          if (data.objecttype_ids.length === 0) {
            return new EmptyLabel({
              text: $$("tag.transition.objecttype.no_filter")
            });
          } else {
            d = $div("ez5-tag-transition-objecttypes");
            ref3 = data.objecttype_ids;
            for (m = 0, len3 = ref3.length; m < len3; m++) {
              id = ref3[m];
              d.append(new Label({
                "class": "ez5-tag-transition-objecttype-label",
                text: ez5.schema.CURRENT._table_by_id[id]._name_localized
              }).DOM);
            }
            return d;
          }
        },
        fields: [
          AclRight.prototype.getFieldForObjecttypeSelectParameter.call(this, {
            name: "objecttype_ids"
          }, false)
        ]
      }, this.aclManager.getField(), this.tagfilterBefore.getField({
        onDataChanged: (function(_this) {
          return function() {
            return _this.update();
          };
        })(this)
      }), this.tagfilterAfter.getField({
        onDataChanged: (function(_this) {
          return function() {
            return _this.update();
          };
        })(this)
      }), {
        type: FormPopover,
        button: {
          text: $$("admin.transitionform.col.confirm.button-text")
        },
        popover: {
          pane: {
            padded: true,
            header_left: new Label({
              text: $$("admin.transitionform.col.confirm.popup-text")
            })
          },
          "class": "ez5-tag-transition-confirm-text-popover"
        },
        fields: [
          {
            type: MultiInput,
            name: "confirm",
            control: ez5.loca.getLanguageControlAdmin(),
            textarea: true
          }
        ],
        renderDisplayContent: (function(_this) {
          return function(data) {
            if (_this.data.confirm) {
              return new Label({
                text: _this.data.confirm[ez5.loca.culture],
                multiline: CUI.__ng__
              }).DOM;
            } else {
              return null;
            }
          };
        })(this)
      }, this.action.getField(), {
        type: Checkbox,
        name: "sticky"
      }
    ];
    if (!this.hasObjecttypes()) {
      this.opts.fields.splice(4, 1);
    }
    return this;
  };

  TagTransition.prototype.operations = ["insert", "update", "delete"];

  TagTransition.prototype.hasObjecttypes = function() {
    return this.transitionForm.hasObjecttypes();
  };

  TagTransition.prototype.getSaveData = function() {
    var acl, i, j, k, len, len1, ref, ref1, ref2, save_data;
    save_data = {
      _id: this.data._id
    };
    if (!isEmpty(ez5.loca.getBestFrontendValue(this.data.confirm))) {
      save_data.confirm = this.data.confirm;
    }
    save_data.operations = [];
    ref = ["insert", "update", "delete"];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      if (this.data[k]) {
        save_data.operations.push(k.toUpperCase());
      }
    }
    save_data.sticky = !!this.data.sticky;
    save_data.type = this.data.type || "process";
    if (this.hasObjecttypes()) {
      if (((ref1 = this.data.objecttype_ids) != null ? ref1.length : void 0) > 0) {
        save_data.objecttype_ids = this.data.objecttype_ids;
      } else {
        save_data.objecttype_ids = null;
      }
    }
    save_data["tagfilter:before"] = this.tagfilterBefore.getSaveData();
    save_data["tagfilter:after"] = this.tagfilterAfter.getSaveData();
    save_data.actions = this.action.getSaveData();
    save_data.who = [];
    ref2 = this.aclManager.getSaveData();
    for (j = 0, len1 = ref2.length; j < len1; j++) {
      acl = ref2[j];
      save_data.who.push(acl.who);
    }
    if (save_data.who.length === 0 || save_data.operations.length === 0) {
      throw new InvalidSaveDataException();
    }
    return save_data;
  };

  return TagTransition;

})(ListViewEditTreeNode);
// Generated by CoffeeScript 1.10.0
var RightPreset,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

RightPreset = (function(superClass) {
  extend(RightPreset, superClass);

  function RightPreset(data) {
    if (data == null) {
      data = {};
    }
    RightPreset.__super__.constructor.call(this);
    if (data instanceof RightPreset) {
      this.setData(data.getData());
    } else {
      this.setData(data);
    }
  }

  RightPreset.prototype.setData = function(data1) {
    this.data = data1 != null ? data1 : {};
    assert(this.data._basetype === "right_preset", "new RightPreset", "data._basetype needs to be \"right_preset\"");
    this.__right_preset = this.data.right_preset;
    return this.__signature = null;
  };

  RightPreset.prototype.storeSaveData = function() {
    return this.__signature = JSON.stringify(this.getSaveData());
  };

  RightPreset.prototype.getStoredSaveData = function() {
    return this.__signature;
  };

  RightPreset.prototype.setManager = function(manager) {
    this.manager = manager;
    return assert(this.manager instanceof RightPresetManager, "RightPreset.setManager", "manager needs to be instance of RightPresetManager", {
      manager: this.manager
    });
  };

  RightPreset.prototype.getData = function() {
    return this.data;
  };

  RightPreset.prototype.getManageRecord = function() {
    var i, k, len, rec, ref;
    rec = {
      _id: this.getId(),
      _instance: this
    };
    ref = ["displayname", "description"];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      if (this.__right_preset.displayname) {
        rec[k] = copyObject(this.__right_preset[k], true);
      } else {
        rec[k] = {};
      }
    }
    CUI.debug("manage record", dump(rec));
    return rec;
  };

  RightPreset.prototype.getSaveData = function() {
    var sd;
    sd = copyObject(this.getData(), true);
    delete sd.right_preset._undo;
    if (CUI.isEmptyObject(sd.right_preset.preset.tagfilter)) {
      sd.right_preset.preset.tagfilter = null;
    }
    return sd;
  };

  RightPreset.prototype.getId = function() {
    return this.__right_preset._id || null;
  };

  RightPreset.prototype.setPosition = function(pos) {
    return this.__right_preset._position = pos;
  };

  RightPreset.prototype.getPosition = function() {
    if (isNull(this.__right_preset._position)) {
      return null;
    } else {
      return this.__right_preset._position;
    }
  };

  RightPreset.prototype.getPreset = function() {
    return copyObject(this.__right_preset.preset, true);
  };

  RightPreset.prototype.setPreset = function(preset) {
    return this.__right_preset.preset = preset;
  };

  RightPreset.prototype.getDisplayname = function() {
    return ez5.loca.getBestFrontendValue(this.__right_preset.displayname);
  };

  RightPreset.prototype.renderContent = function() {
    if (this.getId()) {
      return new Label({
        text: this.getDisplayname()
      });
    } else {
      return new Label({
        content: $empty$("right.preset.new")
      });
    }
  };

  RightPreset.prototype.isEmptyPreset = function() {
    var has_object, k, ref, v;
    has_object = false;
    ref = this.getPreset();
    for (k in ref) {
      v = ref[k];
      if (!$.isEmptyObject(v)) {
        has_object = true;
        break;
      }
    }
    if (!has_object) {
      return true;
    } else {
      return false;
    }
  };

  RightPreset.prototype.check_deselect = function() {
    if (this.isChanged()) {
      return CUI.confirm({
        text: $$("main.editor.unsaved_changes")
      });
    } else {
      return CUI.resolvedPromise();
    }
  };

  RightPreset.prototype.isChanged = function() {
    var a;
    if (this.getStoredSaveData() === null) {
      return false;
    } else if ((a = JSON.stringify(this.getSaveData())) !== this.getStoredSaveData()) {
      return true;
    } else {
      return false;
    }
  };

  RightPreset.prototype.getDescription = function() {
    return ez5.loca.getBestFrontendValue(this.__right_preset.description);
  };

  RightPreset.prototype.getSelectOption = function() {
    var description, opts;
    opts = {
      text: this.getDisplayname(),
      value: this.getId()
    };
    description = this.getDescription();
    if (description) {
      opts.tooltip = {
        text: description
      };
    }
    return opts;
  };

  RightPreset.prototype.applyPreset = function(data) {
    var key, ref, value;
    ref = this.getPreset();
    for (key in ref) {
      value = ref[key];
      data[key] = value;
    }
    return this;
  };

  RightPreset.prototype.deselect = function(ev) {
    return RightPreset.__super__.deselect.call(this, ev).done((function(_this) {
      return function() {
        _this.setData(JSON.parse(_this.getStoredSaveData()));
        if (ev) {
          _this.manager.emptyEditPane();
        }
        return _this.update();
      };
    })(this));
  };

  RightPreset.prototype["delete"] = function(ev) {
    var dfr, remove;
    remove = (function(_this) {
      return function() {
        _this.manager.emptyEditPane();
        _this.remove();
        return dfr.resolve();
      };
    })(this);
    dfr = new CUI.Deferred();
    if (!this.getId()) {
      remove();
    } else {
      ez5.api.right({
        type: "DELETE",
        api: "/" + this.manager.getServerContext() + "/presets/" + this.getId()
      }).done(function() {
        return remove();
      }).fail(function() {
        return dfr.reject();
      });
    }
    return dfr.promise();
  };

  RightPreset.prototype.save = function(ev) {
    var maxPos, sd;
    sd = this.getSaveData();
    if (!sd.right_preset._version) {
      sd.right_preset._version = 1;
      if (isNull(sd.right_preset._position)) {
        maxPos = this.manager.getMaxPresetPosition();
        if (maxPos === null) {
          sd.right_preset._position = 0;
        } else {
          sd.right_preset._position = maxPos + 1;
        }
      }
    } else {
      sd.right_preset._version++;
    }
    if (ev.hasModifierKey()) {
      CUI.debug(dump(sd));
      return new CUI.Deferred().reject().promise();
    }
    ez5.splash.show('system.list.manager.item.saving');
    return ez5.api.right({
      type: "POST",
      api: "/" + this.manager.getServerContext() + "/presets",
      json_data: [sd]
    }).done((function(_this) {
      return function(data) {
        _this.setData(data[0]);
        RightPresetManager.load();
        _this.show();
        return ez5.splash.done('system.list.manager.item.saved');
      };
    })(this)).fail((function(_this) {
      return function() {
        return ez5.splash.hide();
      };
    })(this));
  };

  RightPreset.prototype.show = function() {
    var wb;
    wb = new WaitBlock({
      element: this.manager.getEditPane(),
      text: $$("right.preset.manager.loading")
    }).show();
    return CUI.setTimeout((function(_this) {
      return function() {
        _this.__show();
        return wb.destroy();
      };
    })(this), 0);
  };

  RightPreset.prototype.__show = function() {
    var data_changed, i, key, len, ref, save_btn, t, tabs, update_save_btn;
    this.aclRightManager = new AclRightManager({
      context: AclRights.getFrontendContextByServerContext(this.manager.getServerContext()),
      data: this.data.right_preset.preset,
      name: "rights"
    });
    this.tagFilter = new TagFilter({
      tagForm: this.manager.getTagForm(),
      data: this.data.right_preset.preset,
      name: "tagfilter"
    });
    save_btn = new Button({
      disabled: true,
      text: $$("base.save"),
      onClick: (function(_this) {
        return function(ev) {
          return _this.save(ev).done(function() {
            update_save_btn();
            return _this.update();
          });
        };
      })(this)
    });
    update_save_btn = (function(_this) {
      return function() {
        if (_this.isChanged() && !isEmpty(_this.getDisplayname()) && !$.isEmptyObject(_this.__right_preset.preset.rights)) {
          return save_btn.enable();
        } else {
          return save_btn.disable();
        }
      };
    })(this);
    data_changed = (function(_this) {
      return function() {
        return update_save_btn();
      };
    })(this);
    tabs = [
      {
        text: $$("right.preset.tab.general"),
        content: (function(_this) {
          return function() {
            return new Form({
              data: _this.data.right_preset,
              onDataChanged: data_changed,
              fields: [
                {
                  form: {
                    label: $$("right.preset.manager.id")
                  },
                  type: Output,
                  name: "_id"
                }, {
                  form: {
                    label: $$("right.preset.manager.displayname")
                  },
                  name: "displayname",
                  type: MultiInput,
                  placeholder: ez5.loca.get_complete_key("right.preset.manager.displayname.new"),
                  control: ez5.loca.getLanguageControlAdmin()
                }, {
                  form: {
                    label: $$("right.preset.manager.description")
                  },
                  name: "description",
                  type: MultiInput,
                  textarea: true,
                  control: ez5.loca.getLanguageControlAdmin()
                }
              ]
            }).start();
          };
        })(this)
      }
    ];
    ref = this.manager.getPresetKeys();
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      tabs.push((function() {
        switch (key) {
          case "rights":
            return {
              text: $$("right.preset.tab.rights"),
              content: (function(_this) {
                return function() {
                  var right_form;
                  return right_form = _this.aclRightManager.getForm({
                    onDataChanged: data_changed
                  }).start();
                };
              })(this)
            };
          case "tagfilter":
            return {
              text: $$("right.preset.tab.tagfilter"),
              content: (function(_this) {
                return function() {
                  var tagfilter_field;
                  return tagfilter_field = _this.tagFilter.getDataFieldProxy({
                    onDataChanged: data_changed
                  }).start();
                };
              })(this)
            };
        }
      }).call(this));
    }
    t = new Tabs({
      "class": "ez5-rights-preset-tabs",
      tabs: tabs,
      footer_right: [
        {
          text: $$("base.cancel"),
          onClick: (function(_this) {
            return function(ev) {
              return _this.deselect(ev);
            };
          })(this)
        }, save_btn
      ]
    });
    this.manager.getEditPane().replace(t, "center");
    if (this.getStoredSaveData() === null) {
      this.storeSaveData();
    }
    return update_save_btn();
  };

  RightPreset;

  RightPreset.createNew = function(preset) {
    var right_preset;
    if (preset == null) {
      preset = {};
    }
    right_preset = {
      _basetype: "right_preset",
      right_preset: {
        displayname: {},
        description: {},
        preset: preset
      }
    };
    return new RightPreset(right_preset);
  };

  return RightPreset;

})(ListViewTreeNode);
// Generated by CoffeeScript 1.10.0
var RightPresetManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

RightPresetManager = (function(superClass) {
  extend(RightPresetManager, superClass);

  function RightPresetManager() {
    return RightPresetManager.__super__.constructor.apply(this, arguments);
  }

  RightPresetManager.prototype.initOpts = function() {
    RightPresetManager.__super__.initOpts.call(this);
    return this.addOpts({
      manager: {
        check: RightPresetManagerAdmin
      },
      server_context: {
        mandatory: true,
        check: function(v) {
          if (AclRights.getFrontendContextByServerContext(v)) {
            return true;
          } else {
            return "server_context \"" + v + "\" does not exist.";
          }
        }
      }
    });
  };

  RightPresetManager.prototype.readOpts = function() {
    RightPresetManager.__super__.readOpts.call(this);
    return this.__server_context_displayname = AclRights.getDisplaynameByServerContext(this._server_context);
  };

  RightPresetManager.prototype.getServerContextDisplayname = function() {
    return this.__server_context_displayname;
  };

  RightPresetManager.prototype.getServerContext = function() {
    return this._server_context;
  };

  RightPresetManager.prototype.renderContent = function() {
    return new Label({
      text: this.getServerContextDisplayname()
    });
  };

  RightPresetManager.prototype.getPresets = function() {
    return RightPresetManager.getByServerContext(this._server_context);
  };

  RightPresetManager.prototype.getField = function(_opts) {
    var _data, opts;
    if (_opts == null) {
      _opts = {};
    }
    _data = null;
    opts = CUI.Element.readOpts(_opts, "RightPresetManager.getField", {
      onDataChanged: {
        check: Function
      },
      allow_custom: {
        "default": false,
        check: Boolean
      }
    });
    return {
      type: Select,
      form: {
        label: $$("right.preset.manager.form.label")
      },
      name: "_right_preset",
      onDataInit: function(df, __data) {
        _data = __data;
        return CUI.debug("data set to ", _data);
      },
      tooltip: {
        text: (function(_this) {
          return function() {
            if (_data._right_preset === null) {
              return;
            }
            return _this.__getPresetById(_data._right_preset).getDescription();
          };
        })(this)
      },
      onDataChanged: (function(_this) {
        return function(data, df) {
          var preset;
          preset = _this.__getPresetById(data[df.getName()]);
          if (preset) {
            preset.applyPreset(data);
            if (typeof opts.onDataChanged === "function") {
              opts.onDataChanged(data, df);
            }
          }
        };
      })(this),
      options: (function(_this) {
        return function(df) {
          var i, len, options, preset, presets;
          options = [];
          preset = df.getValue();
          presets = _this.getPresets();
          for (i = 0, len = presets.length; i < len; i++) {
            preset = presets[i];
            options.push(preset.getSelectOption());
          }
          options.push({
            disabled: !opts.allow_custom,
            text: $$("right.preset.manager.preset.custom"),
            value: null
          });
          if (presets.length === 0) {
            options.push({
              disabled: true,
              text: $$("right.preset.manager.preset.no_presets"),
              value: void 0
            });
          }
          return options;
        };
      })(this)
    };
  };

  RightPresetManager.prototype.getPresetData = function(data) {
    var i, key, len, preset, ref;
    preset = {};
    ref = this.getPresetKeys();
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      if (data[key]) {
        preset[key] = copyObject(data[key], true);
      } else {
        preset[key] = null;
      }
    }
    return preset;
  };

  RightPresetManager.prototype.getPresetKeys = function() {
    return ["rights", "tagfilter"];
  };

  RightPresetManager.prototype.__getPresetById = function(id) {
    if (id === null) {
      return null;
    }
    return findInArray(id, this.getPresets(), function(preset, id) {
      return preset.getId() === id;
    });
  };

  RightPresetManager.prototype.getSaveData = function() {
    return this.data;
  };

  RightPresetManager.prototype.getEditPane = function() {
    return this.editPane;
  };

  RightPresetManager.prototype.emptyEditPane = function() {
    return this.editPane.replace(new EmptyLabel({
      centered: true,
      multiline: true,
      text: $$("right.preset.manager.empty")
    }), "center");
  };

  RightPresetManager.prototype.hasChanges = function() {
    var i, len, preset, ref;
    if (!this.tree) {
      return false;
    }
    ref = this.tree.root.children;
    for (i = 0, len = ref.length; i < len; i++) {
      preset = ref[i];
      if (preset.isChanged()) {
        return true;
      }
    }
    return false;
  };

  RightPresetManager.prototype.getTagForm = function() {
    return this.tagForm;
  };

  RightPresetManager.prototype.load = function() {
    return CUI.resolvedPromise();
  };

  RightPresetManager.prototype.getMaxPresetPosition = function() {
    var i, idx, len, maxPos, pos, preset, ref;
    maxPos = null;
    ref = this.getPresets();
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      preset = ref[idx];
      pos = preset.getPosition();
      CUI.debug(maxPos, preset, pos, idx);
      if (pos > maxPos || maxPos === null) {
        maxPos = pos;
      }
    }
    return maxPos;
  };

  RightPresetManager.prototype.show = function() {
    var hl, i, len, minus_btn, plus_btn, preset, presets, ref, rightPreset, update_minus_btn;
    plus_btn = new LocaButton({
      icon: "plus",
      loca_key: "right.present.manager.list.button.plus",
      group: "plusminus",
      onClick: (function(_this) {
        return function() {
          var rightPreset;
          rightPreset = RightPreset.createNew(_this.getPresetData({}));
          return _this.tree.addNode(rightPreset).done(function() {
            rightPreset.setManager(_this);
            return rightPreset.select().done(function() {
              return rightPreset.show();
            }).fail(function() {
              return rightPreset.remove();
            }).always(function() {
              return update_minus_btn();
            });
          });
        };
      })(this)
    });
    minus_btn = new LocaButton({
      icon: "minus",
      loca_key: "right.present.manager.list.button.minus",
      disabled: true,
      group: "plusminus",
      onClick: (function(_this) {
        return function(ev) {
          var preset, remove_node;
          preset = _this.tree.getSelectedNode();
          remove_node = function() {
            return preset.deselect().done(function() {
              return preset["delete"]().done(function() {
                return RightPresetManager.load();
              });
            });
          };
          if (preset.getId()) {
            return CUI.confirm({
              text: $$("right.present.manager.list.button.minus.confirm"),
              button_primary: "cancel"
            }).done(remove_node);
          } else {
            return remove_node();
          }
        };
      })(this)
    });
    update_minus_btn = (function(_this) {
      return function() {
        if (_this.tree.getSelectedNode()) {
          return minus_btn.enable();
        } else {
          return minus_btn.disable();
        }
      };
    })(this);
    presets = [];
    ref = this.getPresets();
    for (i = 0, len = ref.length; i < len; i++) {
      preset = ref[i];
      rightPreset = new RightPreset(preset);
      rightPreset.setManager(this);
      presets.push(rightPreset);
    }
    this.tree = new ListViewTree({
      "class": "ez5-preset-list-view-tree",
      cols: ["maximize"],
      selectableRows: true,
      onSelect: (function(_this) {
        return function(ev, info) {
          update_minus_btn();
          return info.node.show();
        };
      })(this),
      onDeselect: (function(_this) {
        return function(ev, info) {
          return update_minus_btn();
        };
      })(this),
      fixedCols: 1,
      rowMove: true,
      no_hierarchy: true,
      children: presets,
      footer_left: [plus_btn, minus_btn]
    });
    Events.listen({
      node: this.tree,
      type: "row_moved",
      call: (function(_this) {
        return function(ev, info) {
          var idx, j, len1, ref1, save_data, sd;
          save_data = [];
          ref1 = _this.tree.getRootChildren();
          for (idx = j = 0, len1 = ref1.length; j < len1; idx = ++j) {
            preset = ref1[idx];
            preset.setPosition(idx);
            sd = preset.getSaveData();
            if (preset.getId()) {
              sd.right_preset._version++;
            }
            save_data.push(sd);
          }
          return ez5.api.right({
            type: "POST",
            api: "/" + _this.getServerContext() + "/presets",
            json_data: save_data
          }).done(function(data) {
            return RightPresetManager.load();
          });
        };
      })(this)
    });
    this.editPane = new SimplePane({
      header_left: new LocaLabel({
        loca_key: "right.preset.manager.editor.title"
      })
    });
    hl = new HorizontalLayout({
      absolute: true,
      left: {
        "class": "ez5-right-preset-manager-left",
        content: new SimplePane({
          header_left: new LocaLabel({
            loca_key: "right.preset.manager.presetlist.title"
          }),
          content: this.tree.render(false)
        }),
        flexHandle: {
          state_name: 'right-preset-manager'
        }
      },
      center: {
        content: this.editPane
      }
    });
    this.tagForm = new TagForm({
      context: AclRights.getFrontendContextByServerContext(this.getServerContext())
    });
    this.tree.root.open();
    this.tagForm.load().done((function(_this) {
      return function() {
        var cnt;
        _this.emptyEditPane();
        cnt = _this.manager.getContainer();
        return cnt.empty().append(hl.DOM);
      };
    })(this));
    return this;
  };

  RightPresetManager.__presetsByServerContext = {};

  RightPresetManager.getServerContexts = function() {
    return Object.keys(this.__presetsByServerContext);
  };

  RightPresetManager.getByServerContext = function(server_context) {
    var presets;
    presets = this.__presetsByServerContext[server_context];
    assert($.isArray(presets), "RightPresetManager.getByServerContext", "presets not found for server context: \"" + server_context + "\".", {
      allPresets: this.__presetsByServerContext
    });
    return presets;
  };

  RightPresetManager.load = function(aclRights) {
    RightPresetManager.__presetsByServerContext = {};
    return ez5.api.right().done((function(_this) {
      return function(contexts) {
        var context, i, info, len, preset, ref;
        for (context in contexts) {
          info = contexts[context];
          if (!info.capabilities.preset) {
            continue;
          }
          _this.__presetsByServerContext[context] = [];
          if (!info.presets) {
            continue;
          }
          ref = info.presets;
          for (i = 0, len = ref.length; i < len; i++) {
            preset = ref[i];
            _this.__presetsByServerContext[context].push(new RightPreset(preset));
          }
        }
      };
    })(this));
  };

  return RightPresetManager;

})(SystemListManagerItem);
// Generated by CoffeeScript 1.10.0
var AclManager,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

AclManager = (function(superClass) {
  extend(AclManager, superClass);

  function AclManager(opts1) {
    this.opts = opts1 != null ? opts1 : {};
    this.WEGdisableAclWho = bind(this.WEGdisableAclWho, this);
    this.loadFromData = bind(this.loadFromData, this);
    AclManager.__super__.constructor.call(this, this.opts);
    this.aclWhoManager = new AclWhoManager({
      name: "who",
      allowEmailUser: this._allowEmailUser,
      allowMatchAny: this._allowMatchAny,
      filter_system_groups: this._filter_system_groups
    });
    this.loadFromData(this._data);
  }

  AclManager.prototype.initOpts = function() {
    AclManager.__super__.initOpts.call(this);
    return this.addOpts({
      context: {},
      onUpdate: {
        check: Function
      },
      allowMatchAny: {
        check: Boolean
      },
      allowCollectionUser: {
        check: Boolean
      },
      filter_system_groups: {
        check: Boolean
      },
      allow_empty_rights: {
        "default": false,
        mandatory: true,
        check: Boolean
      },
      allowEmailUser: {
        check: Boolean
      },
      tagForm: {
        check: TagForm
      },
      data: {
        check: "Array"
      },
      footer_right: {},
      date_created: {
        check: Boolean
      },
      preset: {
        check: Boolean
      },
      right: {
        check: Boolean
      },
      tagfilter: {
        check: Boolean
      },
      sticky: {
        check: Boolean
      },
      valid_from: {
        check: Boolean
      },
      valid_to: {
        check: Boolean
      },
      active: {
        check: Boolean
      },
      email_notification: {
        check: Boolean
      },
      email_notification_form: {
        check: Boolean
      },
      share_link: {
        check: Boolean
      },
      expert_menu: {
        check: (function(_this) {
          return function(v) {
            var col, cols, i, len;
            if (!$.isArray(v) || v.length === 0) {
              return "needs to be Array";
            }
            cols = _this.availableColumns();
            for (i = 0, len = v.length; i < len; i++) {
              col = v[i];
              if (indexOf.call(cols, col) < 0) {
                return ("\"" + col + "\" needs to be one of ") + cols.join(", ");
              }
            }
            return true;
          };
        })(this)
      }
    });
  };

  AclManager.prototype.readOpts = function() {
    var cap, cap_server, i, len, ref, results;
    AclManager.__super__.readOpts.call(this);
    if (this._right || this._tagfilter) {
      assert(this._context, "AclManager", "With opts.right or opts.tagfilter set to true, opts.context is required.", {
        opts: this.opts
      });
    }
    if (this._context) {
      ref = {
        active: "active",
        email_notification: "email",
        preset: "preset",
        sticky: "sticky",
        tagfilter: "tagfilter",
        valid_from: "valid",
        valid_to: "value"
      };
      results = [];
      for (cap_server = i = 0, len = ref.length; i < len; cap_server = ++i) {
        cap = ref[cap_server];
        if (!this.hasColumn(cap)) {
          continue;
        }
        results.push(assert(AclRights.hasCapByContext(cap_server, this._context), "context " + (AclRights.getServerContextByFrontendContext(this._context)) + " has no capability \"" + cap_server + "\"."));
      }
      return results;
    }
  };

  AclManager.prototype.hasColumn = function(column) {
    if (!this["_" + column] && (!this._expert_menu || indexOf.call(this._expert_menu, column) < 0)) {
      return false;
    } else {
      return true;
    }
  };

  AclManager.prototype.availableColumns = function() {
    return ["active", "who", "preset", "right", "tagfilter", "sticky", "valid_from", "valid_to", "email_notification_form", "email_notification", "email_language", "email_notification_text", "share_link", "date_created", "expert_menu"];
  };

  AclManager.prototype.getColumns = function() {
    var col, cols, i, len, ref;
    cols = [];
    ref = this.availableColumns();
    for (i = 0, len = ref.length; i < len; i++) {
      col = ref[i];
      if (col === "who" || this["_" + col]) {
        cols.push(col);
      }
    }
    return cols;
  };

  AclManager.prototype.getExpertMenuColumns = function() {
    return this._expert_menu;
  };

  AclManager.prototype.getAllColumns = function() {
    var all_cols, col, expert_menu, i, len;
    all_cols = this.getColumns().slice(0);
    expert_menu = this.getExpertMenuColumns();
    if (expert_menu) {
      for (i = 0, len = expert_menu.length; i < len; i++) {
        col = expert_menu[i];
        if (indexOf.call(all_cols, col) < 0) {
          all_cols.push(col);
        }
      }
    }
    return all_cols;
  };

  AclManager.prototype.getContext = function() {
    return this._context;
  };

  AclManager.prototype.getTagForm = function() {
    assert(this._tagForm instanceof TagForm, "AclManager.getTagForm", "tagForm needs to be set", {
      tagForm: this._tagForm
    });
    return this._tagForm;
  };

  AclManager.prototype.getAclWhoManager = function() {
    return this.aclWhoManager;
  };

  AclManager.prototype.loadFromData = function(data) {
    var acl_data, i, len, results;
    this.acl = [];
    if (data != null ? data.length : void 0) {
      results = [];
      for (i = 0, len = data.length; i < len; i++) {
        acl_data = data[i];
        results.push(this.acl.push(new AclItem({
          data: acl_data,
          aclManager: this
        })));
      }
      return results;
    }
  };

  AclManager.prototype.getField = function(opts) {
    if (opts == null) {
      opts = {};
    }
    return {
      onConstruct: (function(_this) {
        return function(__popoverButton) {
          _this.__popoverButton = __popoverButton;
        };
      })(this),
      type: FormPopover,
      maximize: true,
      "class": "ez5-acl-manager-popover-starter",
      button: {
        loca_key: "acl.manager.button.open_popover"
      },
      popover: {
        pane: {
          header_left: new Label({
            text: $$("acl.manager.popover.title")
          })
        },
        placement: "w",
        "class": "acl-manager-popover",
        onHide: (function(_this) {
          return function() {
            if (_this.__dataChanged) {
              if (typeof _this._onUpdate === "function") {
                _this._onUpdate();
              }
              Events.trigger({
                node: _this.__popoverButton,
                type: "editor-changed"
              });
            }
          };
        })(this)
      },
      fields: [
        {
          type: DataFieldProxy,
          call_others: false,
          onDataChanged: function(data, df) {
            return CUI.debug("data changed in acl manager", df.getForm());
          },
          element: (function(_this) {
            return function() {
              return _this.getTree();
            };
          })(this)
        }
      ],
      renderDisplayContent: (function(_this) {
        return function() {
          if (_this.acl.length === 0 && opts.empty_loca_key) {
            return new EmptyLabel({
              text: $$(opts.empty_loca_key)
            });
          } else {
            return ez5.getLabelForCount("acl.manager.acl-counter", _this.acl.length);
          }
        };
      })(this)
    };
  };

  AclManager.prototype.newAclItem = function(data) {
    var action;
    if (data == null) {
      data = {};
    }
    if (!data.hasOwnProperty("active")) {
      data.active = true;
    }
    action = new AclItem({
      data: data,
      aclManager: this
    });
    return this.tree.addNode(action).done((function(_this) {
      return function() {
        Events.trigger({
          type: "data-changed",
          node: _this.tree
        });
        return action.select();
      };
    })(this));
  };

  AclManager.prototype.getTree = function() {
    var add_user_group, btn_opts, col, i, items, len, ref, th_col, tree_opts;
    this.minusButton = new LocaButton({
      "class": "ez5-remove-right-button",
      loca_key: "acl.manager.button.minus",
      icon: "minus",
      disabled: true,
      group: "plusminus",
      onClick: (function(_this) {
        return function() {
          var ref;
          if ((ref = _this.tree.getSelectedNode()) != null) {
            ref.remove();
          }
          return Events.trigger({
            type: "data-changed",
            node: _this.tree
          });
        };
      })(this)
    });
    btn_opts = {
      "class": "ez5-add-right-button",
      loca_key: "acl.manager.button.plus",
      icon: "plus",
      group: "plusminus"
    };
    items = [];
    if (this._allowCollectionUser) {
      items.push({
        text: $$("acl.manager.anoymous_access"),
        onClick: (function(_this) {
          return function() {
            return _this.newAclItem({
              who: {
                _basetype: "user",
                user: {
                  login: ez5.generateUUID(),
                  type: "collection"
                }
              }
            });
          };
        })(this)
      });
    }
    add_user_group = (function(_this) {
      return function() {
        return _this.newAclItem();
      };
    })(this);
    if (items.length) {
      items.splice(0, 0, {
        text: this.aclWhoManager.getPlaceholderText(),
        onClick: add_user_group
      });
      btn_opts.menu = {
        items: items
      };
    } else {
      btn_opts.onClick = add_user_group;
    }
    this.plusButton = new LocaButton(btn_opts);
    tree_opts = {
      "class": "ez5-acl-manager-tree cui-lv--has-datafields",
      cols: [],
      fields: [],
      rowMove: true,
      no_hierarchy: true,
      onSelect: (function(_this) {
        return function() {
          return _this.checkButtons();
        };
      })(this),
      onDeselect: (function(_this) {
        return function() {
          return _this.checkButtons();
        };
      })(this),
      selectableRows: true,
      onRowMove: (function(_this) {
        return function() {
          return Events.trigger({
            type: "data-changed",
            node: _this.tree
          });
        };
      })(this),
      footer_left: [this.plusButton, this.minusButton],
      footer_right: this._footer_right
    };
    ref = this.getColumns();
    for (i = 0, len = ref.length; i < len; i++) {
      col = ref[i];
      tree_opts.cols.push("auto");
      th_col = {
        th_label: "admin.aclmanager.col." + col
      };
      if (col === "sticky") {
        th_col.th_rotate_90 = true;
      }
      tree_opts.fields.push(th_col);
    }
    this.tree = new ListViewEditTree(tree_opts);
    this.tree.render();
    Events.listen({
      node: this.tree,
      type: "data-changed",
      call: (function(_this) {
        return function(ev, info) {
          var ref1;
          _this.checkButtons();
          if (!_this.__popoverButton) {
            if (typeof _this._onUpdate === "function") {
              _this._onUpdate(ev);
            }
          } else {
            _this.__dataChanged = true;
            if ((ref1 = _this.__popoverButton.getPopover()) != null) {
              ref1.position();
            }
          }
        };
      })(this)
    });
    this.tree.load_data(this.acl);
    return this.tree;
  };

  AclManager.prototype.checkButtons = function() {
    if (this.tree.getSelectedNode()) {
      return this.minusButton.enable();
    } else {
      return this.minusButton.disable();
    }
  };

  AclManager.prototype.getSaveData = function() {
    var acl_item, acl_item_data, i, len, ref, save_data;
    save_data = [];
    ref = this.acl;
    for (i = 0, len = ref.length; i < len; i++) {
      acl_item = ref[i];
      acl_item_data = acl_item.getSaveData();
      if (!acl_item_data.who) {
        throw new InvalidSaveDataException();
      }
      if (this.hasColumn("right") && !this._allow_empty_rights) {
        if (CUI.isEmptyObject(acl_item_data.rights) && !acl_item_data._right_preset) {
          throw new InvalidSaveDataException();
        }
      }
      if (acl_item_data) {
        save_data.push(acl_item_data);
      }
    }
    return save_data;
  };

  AclManager.prototype.WEGdisableAclWho = function(aclWho) {
    var aclItem, i, len, ref;
    ref = this.acl;
    for (i = 0, len = ref.length; i < len; i++) {
      aclItem = ref[i];
      if (typeof aclItem.getAclWho === "function" ? aclItem.getAclWho().equals(aclWho) : void 0) {
        return true;
      }
    }
    return false;
  };

  return AclManager;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var AclItem, SystemAclItem,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

AclItem = (function(superClass) {
  extend(AclItem, superClass);

  function AclItem() {
    return AclItem.__super__.constructor.apply(this, arguments);
  }

  AclItem.prototype.initOpts = function() {
    AclItem.__super__.initOpts.call(this);
    return this.addOpts({
      aclManager: {
        mandatory: true,
        check: AclManager
      },
      data: {
        "default": {},
        check: "PlainObject"
      }
    });
  };

  AclItem.prototype.readOpts = function() {
    AclItem.__super__.readOpts.call(this);
    this.aclManager = this._aclManager;
    this.data = this._data;
    if (!this.data.hasOwnProperty("_right_preset") && (this.data.tagfilter || this.data.rights)) {
      this.data._right_preset = null;
    }
    if (!this.data.tagfilter) {
      this.data.tagfilter = {};
    }
    if (!this.data.rights) {
      this.data.right = {};
    }
    if (this.data.when) {
      if (this.data.when.from) {
        this.data.valid_from = this.data.when.from;
      }
      if (this.data.when.to) {
        this.data.valid_to = this.data.when.to;
      }
    }
    return this.init();
  };

  AclItem.prototype.getData = function() {
    return this.data;
  };

  AclItem.prototype.init = function() {
    var _field, all_cols, col, cols, i, j, len, len1, ref, whoManager;
    cols = this.aclManager.getColumns();
    all_cols = this.aclManager.getAllColumns();
    if (indexOf.call(cols, "preset") >= 0) {
      this.__allow_custom = ez5.session.hasSystemRight("root", "allow_custom_in_right_with_preset");
    } else {
      this.__allow_custom = true;
    }
    this.opts.fields = [];
    for (i = 0, len = all_cols.length; i < len; i++) {
      col = all_cols[i];
      switch (col) {
        case "right":
          this.aclRightManager = new AclRightManager({
            context: this.aclManager.getContext(),
            data: this.data,
            name: "rights"
          });
          break;
        case "tagfilter":
          this.tagFilter = new TagFilter({
            tagForm: this.aclManager.getTagForm(),
            data: this.data,
            name: "tagfilter"
          });
          break;
        case "preset":
          this.presetManager = new RightPresetManager({
            server_context: AclRights.getServerContextByFrontendContext(this.aclManager.getContext())
          });
      }
    }
    ref = this.aclManager.getColumns();
    for (j = 0, len1 = ref.length; j < len1; j++) {
      col = ref[j];
      switch (col) {
        case "who":
          whoManager = this.aclManager.getAclWhoManager().copy();
          this.opts.fields.push({
            type: DataFieldProxy,
            onDataChanged: (function(_this) {
              return function() {
                return _this.update();
              };
            })(this),
            element: (function(_this) {
              return function() {
                return whoManager.getWhoSelector(_this.data);
              };
            })(this)
          });
          break;
        case "preset":
          _field = this.presetManager.getField({
            allow_custom: this.__allow_custom && (indexOf.call(cols, "right") >= 0 || indexOf.call(cols, "tagfilter") >= 0),
            onDataChanged: (function(_this) {
              return function() {
                _this.init();
                return _this.update();
              };
            })(this)
          });
          this.opts.fields.push(_field);
          break;
        case "date_created":
        case "sticky":
        case "valid_from":
        case "valid_to":
        case "active":
        case "right":
        case "tagfilter":
        case "share_link":
        case "preset":
        case "email_notification":
          this.opts.fields.push(this.getField(col));
          break;
        case "email_notification_form":
          if (this.getWho() instanceof AclWhoCollection) {
            this.opts.fields.push(new ListViewColumnEmpty());
          } else {
            this.opts.fields.push({
              type: FormPopover,
              button: {
                icon_active: "envelope_active",
                icon_inactive: "envelope"
              },
              fields: (function(_this) {
                return function() {
                  return [_this.getField("email_notification"), _this.getField("email_language"), _this.getField("email_notification_text")];
                };
              })(this),
              renderDisplayButton: (function(_this) {
                return function(df, data) {
                  if (!_this.getWho()) {
                    df.disable();
                  } else {
                    df.enable();
                  }
                  return data.email_notification;
                };
              })(this)
            });
          }
          break;
        case "expert_menu":
          this.opts.fields.push({
            type: FormButton,
            icon: "menu",
            onClick: (function(_this) {
              return function() {
                return _this.openExpertEditor();
              };
            })(this)
          });
          break;
        default:
          assert(false, "new AclItem", "Unsupported column type \"" + col + "\"");
      }
    }
    return this;
  };

  AclItem.prototype.addedToListView = function() {
    AclItem.__super__.addedToListView.call(this);
    return this.setActiveStateOnRow();
  };

  AclItem.prototype.setActiveStateOnRow = function() {
    if (!this._active) {
      return;
    }
    if (!this.data.active) {
      return this.addClass("inactive");
    } else {
      return this.removeClass("inactive");
    }
  };

  AclItem.prototype.getField = function(col) {
    var field;
    field = ((function(_this) {
      return function() {
        var who;
        switch (col) {
          case "date_created":
            return {
              type: Output,
              text: ez5.format_date_and_time(_this.data.date_created)
            };
          case "right":
            return _this.aclRightManager.getField({
              onDataChanged: function() {
                var ref;
                return (ref = _this.getOtherField("_right_preset")) != null ? ref.setValue(null) : void 0;
              }
            });
          case "tagfilter":
            return _this.tagFilter.getField({
              onDataChanged: function() {
                var ref;
                return (ref = _this.getOtherField("_right_preset")) != null ? ref.setValue(null) : void 0;
              }
            });
          case "sticky":
            return {
              type: Checkbox,
              name: "sticky"
            };
          case "valid_from":
            return {
              type: DateTime,
              display_type: "short",
              name: "valid_from"
            };
          case "valid_to":
            return {
              type: DateTime,
              display_type: "short",
              name: "valid_to"
            };
          case "active":
            return {
              type: Checkbox,
              onDataChanged: function() {
                return _this.setActiveStateOnRow();
              },
              name: "active"
            };
          case "email_notification":
            who = _this.getWho();
            if (who instanceof AclWhoCollection) {
              return null;
            }
            return {
              type: Checkbox,
              name: "email_notification"
            };
          case "email_language":
            who = _this.getWho();
            CUI.debug("email language", who);
            if (!(who != null ? who.getFrontendLanguage : void 0)) {
              return null;
            } else {
              return {
                type: Output,
                text: $$("base.culture." + (who.getFrontendLanguage()))
              };
            }
            break;
          case "email_notification_text":
            return {
              type: Input,
              textarea: true,
              placeholder: $$("acl.item.col.email_notification_text_placeholder"),
              name: "email_notification_text"
            };
          case "share_link":
            who = _this.getWho();
            return {
              "class": "ez5-acl-item-share-url-form-popover",
              type: FormPopover,
              button: {
                loca_key: "acl.item.col.share_link.button"
              },
              popover: {
                pane: {
                  title: $$("acl.item.col.share_link.popover.title")
                },
                onShow: function(pop, formPopover) {
                  return formPopover.getFieldsByName("__share_url")[0].focus();
                }
              },
              fields: [
                AclItem.shareLinkField(function() {
                  return _this.aclManager.getContext().getShareUrl(who);
                })
              ]
            };
          default:
            return assert(false, "AclItem.getField", "Unknown col \"" + col + "\"");
        }
      };
    })(this))();
    if (field && !(field instanceof DataField)) {
      assert($.isPlainObject(field), "AclItem.getField", "\"" + col + "\": field needs to be PlainObject", {
        field: field
      });
      if (!field.form) {
        field.form = {};
      }
      if (!field.form.label) {
        field.form.label = $$("acl.item.col." + col);
      }
    }
    return field;
  };

  AclItem.prototype.getWho = function() {
    return this.aclManager.getAclWhoManager().getWho(this.data);
  };

  AclItem.prototype.openExpertEditor = function() {
    var apply_btn, cls, rowData, rowSaveData, set_apply_btn;
    rowData = copyObject(this.data, true);
    rowSaveData = JSON.stringify(this.getSaveData());
    apply_btn = new Button({
      text: $$("base.apply"),
      disabled: true,
      onClick: (function(_this) {
        return function(ev) {
          if (ev.hasModifierKey()) {
            CUI.debug(dump(_this.getSaveData()));
            return;
          }
          return _this.__modal.destroy();
        };
      })(this)
    });
    set_apply_btn = (function(_this) {
      return function() {
        CUI.debug(rowSaveData, JSON.stringify(_this.getSaveData()));
        if (rowSaveData !== JSON.stringify(_this.getSaveData())) {
          return apply_btn.enable();
        } else {
          return apply_btn.disable();
        }
      };
    })(this);
    if (this.__allow_custom) {
      cls = " ez5-acl-expert-editor-custom-allowed";
    } else {
      cls = "";
    }
    this.__modal = new CUI.Modal({
      "class": "ez5-acl-expert-editor" + cls,
      cancel: true,
      onCancel: (function(_this) {
        return function() {
          CUI.debug("cancel copy back data", rowData, _this.data);
          return _this.data = rowData;
        };
      })(this),
      onHide: (function(_this) {
        return function() {
          _this.init();
          _this.update();
          if (_this.data !== rowData) {
            CUI.debug("hiding dialog, updateing...");
            Events.trigger({
              type: "data-changed",
              node: _this.aclManager.tree
            });
          }
          return delete _this.__modal;
        };
      })(this),
      pane: {
        header_left: new Label({
          text: $$("acl.item.modal.title")
        }),
        footer_right: apply_btn,
        content: this.getExpertEditorContent()
      }
    });
    Events.listen({
      type: "data-changed",
      node: this.__modal,
      call: function() {
        return set_apply_btn();
      }
    });
    this.__modal.show();
    return this;
  };

  AclItem.prototype.getExpertEditorContent = function() {
    var col, expert_menu, form1, form1_fields, form2, form2_fields, i, lay, len, preset_form, right_block, tagfilter_block, update_preset, update_rightsmanagement, who, whoManager;
    form1_fields = [];
    form2_fields = [];
    expert_menu = this.aclManager.getExpertMenuColumns();
    for (i = 0, len = expert_menu.length; i < len; i++) {
      col = expert_menu[i];
      switch (col) {
        case "who":
          whoManager = this.aclManager.getAclWhoManager().copy();
          form1_fields.push({
            form: {
              label: $$("acl.item.col.who")
            },
            type: DataFieldProxy,
            onDataChanged: (function(_this) {
              return function() {
                if (_this.data.who) {
                  return _this.__modal.replace(_this.getExpertEditorContent());
                }
              };
            })(this),
            element: (function(_this) {
              return function() {
                return whoManager.getWhoSelector(_this.data);
              };
            })(this)
          });
          break;
        case "active":
        case "sticky":
        case "valid_from":
        case "valid_to":
          form1_fields.push(this.getField(col));
          break;
        case "share_link":
          who = this.getWho();
          if (who instanceof AclWhoCollection) {
            form1_fields.push(AclItem.shareLinkField((function(_this) {
              return function() {
                return _this.aclManager.getContext().getShareUrl(who);
              };
            })(this)));
          }
          break;
        case "email_notification":
        case "email_language":
        case "email_notification_text":
          if (!(this.getWho() instanceof AclWhoCollection)) {
            form2_fields.push(this.getField(col));
          }
          break;
        case "right":
        case "tagfilter":
        case "preset":
          break;
        default:
          assert(false, "AclItem.openExpertEditor", "\"" + col + "\" unsupported by expert menu", {
            expert_menu: expert_menu
          });
      }
    }
    lay = new VerticalLayout();
    if (form1_fields.length) {
      form1 = new Form({
        "class": "ez5-acl-expert-editor-form1",
        data: this.data,
        fields: form1_fields
      }).start();
      lay.append(new Block({
        "class": "ez5-acl-item-block-general",
        text: $$("acl.item.block.general"),
        appearance: "title",
        content: form1
      }), "center");
    }
    if (form2_fields.length) {
      form2 = new Form({
        "class": "ez5-acl-expert-editor-form2",
        data: this.data,
        fields: form2_fields
      }).start();
      lay.append(new Block({
        "class": "ez5-acl-item-block-email",
        text: $$("acl.item.block.email"),
        appearance: "title",
        content: form2
      }), "center");
    }
    if (this.__allow_custom) {
      if (indexOf.call(expert_menu, "right") >= 0) {
        right_block = new Block({
          "class": "ez5-acl-item-block-right",
          text: $$("acl.item.block.right"),
          appearance: "subtitle"
        });
      }
      if (indexOf.call(expert_menu, "tagfilter") >= 0) {
        tagfilter_block = new Block({
          "class": "ez5-tags-table",
          appearance: "subtitle",
          text: $$("acl.item.block.tagfilter")
        });
      }
    }
    update_preset = (function(_this) {
      return function() {
        if (!preset_form) {
          return;
        }
        return preset_form.getFieldsByName("_right_preset")[0].setValue(null);
      };
    })(this);
    update_rightsmanagement = (function(_this) {
      return function() {
        var right_form, tagfilter_field;
        if (!_this.__allow_custom) {
          return;
        }
        if (indexOf.call(expert_menu, "right") >= 0) {
          right_form = _this.aclRightManager.getForm({
            onDataChanged: update_preset
          }).start();
          right_block.setContent(right_form);
        }
        if (indexOf.call(expert_menu, "tagfilter") >= 0) {
          tagfilter_field = _this.tagFilter.getDataFieldProxy({
            onDataChanged: update_preset
          }).start();
          return tagfilter_block.setContent(tagfilter_field);
        }
      };
    })(this);
    update_rightsmanagement();
    if (indexOf.call(expert_menu, "preset") >= 0) {
      preset_form = new Form({
        "class": "ez5-acl-expert-editor-preset-form",
        data: this.data,
        fields: [
          this.presetManager.getField({
            allow_custom: this.__allow_custom,
            onDataChanged: (function(_this) {
              return function() {
                return update_rightsmanagement();
              };
            })(this)
          })
        ]
      }).start();
    }
    if (right_block || tagfilter_block || preset_form) {
      lay.append(new Block({
        "class": "ez5-acl-item-block-rightsmanagement",
        appearance: "title",
        text: $$("acl.item.block.rightsmanagement"),
        content: [preset_form, right_block, tagfilter_block]
      }), "center");
    }
    return lay;
  };

  AclItem.prototype.getSaveData = function() {
    var __who, all_cols, ref, save_data, txt;
    all_cols = this.aclManager.getAllColumns();
    save_data = {};
    if (this.data._id) {
      save_data._id = this.data._id;
    }
    if (this.data.who) {
      save_data.who = (__who = AclWho.newInstance(this.data)).getSaveData();
    } else {
      save_data.who = null;
    }
    if (this.data._right_preset) {
      save_data._right_preset = this.data._right_preset;
    } else {
      if (this.aclRightManager) {
        save_data.rights = this.aclRightManager.getSaveData();
      }
      if (this.tagFilter) {
        save_data.tagfilter = this.tagFilter.getSaveData();
      }
    }
    if (indexOf.call(all_cols, "sticky") >= 0) {
      save_data.sticky = !!this.data.sticky;
    }
    if (indexOf.call(all_cols, "valid_from") >= 0 || indexOf.call(all_cols, "value_to") >= 0) {
      save_data.when = {};
      if (this.data.valid_from) {
        save_data.when.from = this.data.valid_from;
      }
      if (this.data.valid_to) {
        save_data.when.to = this.data.valid_to;
      }
    }
    if (indexOf.call(all_cols, "active") >= 0) {
      save_data.active = !!this.data.active;
    }
    if (indexOf.call(all_cols, "email_notification") >= 0) {
      if (this.data.email_notification) {
        save_data.send_email_notification = {};
        if (!isEmpty(txt = (ref = this.data.email_notification_text) != null ? ref.trim() : void 0)) {
          save_data.send_email_notification.text = txt;
        }
      }
    }
    return save_data;
  };

  AclItem.shareLinkField = function(getShareUrlFunc) {
    var data, goto_link;
    data = {
      __share_url: getShareUrlFunc()
    };
    goto_link = new ButtonHref({
      text: $$("acl.item.share_link_field.goto"),
      href: data.__share_url,
      target: "_blank"
    });
    return {
      form: {
        label: $$("acl.item.share_link_field.label")
      },
      data: data,
      type: Form,
      fields: [
        {
          type: Input,
          "class": "ez5-acl-item-share-link-input",
          textarea: true,
          readonly: true,
          name: "__share_url"
        }, {
          type: Output,
          multiline: true,
          placeholder: $$("acl.item.share_link_field.copy_paste_hint")
        }, {
          type: DataFieldProxy,
          element: goto_link.DOM
        }
      ]
    };
  };

  return AclItem;

})(ListViewEditTreeNode);

SystemAclItem = (function(superClass) {
  extend(SystemAclItem, superClass);

  function SystemAclItem() {
    return SystemAclItem.__super__.constructor.apply(this, arguments);
  }

  return SystemAclItem;

})(AclItem);
// Generated by CoffeeScript 1.10.0
var AclWho,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

AclWho = (function() {
  function AclWho() {
    this.getAutocompletionItem = bind(this.getAutocompletionItem, this);
    this.equals = bind(this.equals, this);
  }

  AclWho.prototype.equals = function(aclWhoComp) {
    assert(aclWhoComp instanceof AclWho, "AclWho.equals", "Unable to compare aclWho", {
      aclWho: this,
      aclWhoComp: aclWhoComp
    });
    return aclWhoComp.getIdentifier() === this.getIdentifier();
  };

  AclWho.prototype.getIdentifier = function() {
    return (this.getType()) + "-" + (this.getWho().id);
  };

  AclWho.prototype.getField = function() {
    return {
      type: Output,
      text: this.getDisplayText()
    };
  };

  AclWho.prototype.getData = function() {
    return this.data;
  };

  AclWho.prototype.getDisplayText = function() {
    return (getObjectClass(this)) + ".getDisplayText misses implementation";
  };

  AclWho.prototype.getDisplayAutocompletion = function() {
    return (getObjectClass(this)) + ".getDisplayAutocompletion misses implementation";
  };

  AclWho.prototype.getAutocompletionItem = function() {
    return new Label({
      icon: this.getIcon(),
      content: this.getDisplayAutocompletion()
    });
  };

  AclWho.prototype.getSearchFilter = function(field_name) {};

  AclWho.newInstance = function(data) {
    var __data, aclWho, ref, ref1, ref2, ref3, ref4, ref5;
    if (data == null) {
      data = {};
    }
    if (data.who) {
      __data = data.who;
    } else {
      __data = data;
    }
    if (__data.group) {
      aclWho = new AclWhoGroup(__data);
    } else if ((ref = (ref1 = __data.user) != null ? ref1.type : void 0) !== "email" && ref !== "collection") {
      aclWho = new AclWhoUser(__data);
    } else if ((ref2 = (ref3 = __data.user) != null ? ref3.type : void 0) === "email") {
      aclWho = new AclWhoEmail(__data);
    } else if ((ref4 = (ref5 = __data.user) != null ? ref5.type : void 0) === "collection") {
      aclWho = new AclWhoCollection(__data);
    } else {
      assert(false, "AclWho.newInstance", "data doesn't contain user, group, collection, nor email in data.who.", {
        data: data
      });
    }
    return aclWho;
  };

  return AclWho;

})();
// Generated by CoffeeScript 1.10.0
var AclWhoUser,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AclWhoUser = (function(superClass) {
  extend(AclWhoUser, superClass);

  function AclWhoUser(data) {
    this.data = data != null ? data : {};
    this.getSaveData = bind(this.getSaveData, this);
    assert(CUI.isPlainObject(this.data), "new AclWhoUser", "data needs to be PlainObject", {
      data: this.data
    });
    if (CUI.isEmptyObject(this.data)) {
      this.data = {
        _basetype: "user",
        user: {}
      };
    }
    this.__user = new User({
      user: this.data
    });
  }

  AclWhoUser.prototype.getType = function() {
    return "user";
  };

  AclWhoUser.prototype.getIcon = function() {
    return "fa-user";
  };

  AclWhoUser.prototype.getFrontendLanguage = function() {
    return this.__user.getFrontendLanguage();
  };

  AclWhoUser.prototype.getDisplayText = function() {
    return this.getGeneratedDisplayName();
  };

  AclWhoUser.prototype.getDisplayAutocompletion = function() {
    return this.__user.getContent();
  };

  AclWhoUser.prototype.getId = function() {
    return this.__user.getId();
  };

  AclWhoUser.prototype.getGeneratedDisplayName = function() {
    return this.__user.getDisplayText();
  };

  AclWhoUser.prototype.getSaveData = function() {
    return {
      _basetype: "user",
      user: {
        _id: this.__user.getId(),
        _generated_displayname: this.getGeneratedDisplayName(),
        frontend_language: this.getFrontendLanguage()
      }
    };
  };

  AclWhoUser.prototype.getSearchFilter = function(field_name) {
    var ref;
    return {
      type: "in",
      fields: [field_name + ".user._id"],
      "in": [(ref = this.__user) != null ? ref.getId() : void 0]
    };
  };

  return AclWhoUser;

})(AclWho);
// Generated by CoffeeScript 1.10.0
var AclWhoGroup,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AclWhoGroup = (function(superClass) {
  extend(AclWhoGroup, superClass);

  function AclWhoGroup(data) {
    this.data = data != null ? data : {};
    assert(CUI.isPlainObject(this.data), "new AclWhoGroup", "data needs to be PlainObject", {
      data: this.data
    });
    if (!this.data.group.displayname) {
      this.group = ez5.groupManager.getGroupById(this.data.group._id);
      if (!this.group) {
        delete this.data.group._id;
      }
    }
    if (!this.group) {
      this.group = Group.newInstance({
        group: this.data
      });
    }
  }

  AclWhoGroup.prototype.getGroup = function() {
    return this.group;
  };

  AclWhoGroup.prototype.getType = function() {
    return "group";
  };

  AclWhoGroup.prototype.getIcon = function() {
    return "fa-users";
  };

  AclWhoGroup.prototype.getDisplayText = function() {
    return this.group.getDisplayText();
  };

  AclWhoGroup.prototype.getDisplayAutocompletion = function() {
    return this.group.getContent();
  };

  AclWhoGroup.prototype.getSaveData = function() {
    if (this.group) {
      return {
        _basetype: "group",
        group: {
          _id: this.group.id
        }
      };
    } else {
      return null;
    }
  };

  AclWhoGroup.prototype.getSearchFilter = function(field_name) {
    if (this.group) {
      return {
        type: "in",
        fields: [field_name + ".group._id"],
        "in": [this.group.id]
      };
    } else {
      return null;
    }
  };

  return AclWhoGroup;

})(AclWho);
// Generated by CoffeeScript 1.10.0
var AclWhoEmail,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AclWhoEmail = (function(superClass) {
  extend(AclWhoEmail, superClass);

  function AclWhoEmail(opts) {
    this.opts = opts != null ? opts : {};
    AclWhoEmail.__super__.constructor.call(this, this.opts);
    this.init();
  }

  AclWhoEmail.prototype.init = function() {
    assert(EmailInput.regexp.exec(this.__user.getLogin()), "new AclWhoEmail", "opts.user.login needs to be a valid email address", {
      opts: this.opts,
      __user: this.__user
    });
    return assert(this.__user.getType() === "email", "new AclWhoEmail", "opts.user.type needs to be \"email\".", {
      opts: this.opts,
      __user: this.__user
    });
  };

  AclWhoEmail.prototype.getType = function() {
    return "email";
  };

  AclWhoEmail.prototype.getIcon = function() {
    return "email";
  };

  AclWhoEmail.prototype.getSaveData = function() {
    var sd;
    sd = AclWhoEmail.__super__.getSaveData.call(this);
    sd.user.login = this.__user.getLogin();
    sd.user.type = this.__user.getType();
    return sd;
  };

  AclWhoEmail.prototype.getGeneratedDisplayName = function() {
    return this.__user.getLogin();
  };

  AclWhoEmail.prototype.getEmail = function() {
    return this.__user.getLogin();
  };

  AclWhoEmail.prototype.showCreateModal = function() {
    var createBtn, dfr, fields, i, lang, lang_opts, len, mod, ref;
    dfr = new CUI.Deferred();
    createBtn = new Button({
      text: $$("acl.who.email.create.button"),
      onClick: (function(_this) {
        return function() {
          dfr.resolve();
          return mod.destroy();
        };
      })(this)
    });
    lang_opts = [];
    ref = ez5.session.getConfigFrontendLanguages();
    for (i = 0, len = ref.length; i < len; i++) {
      lang = ref[i];
      lang_opts.push({
        value: lang,
        text: $$("base.culture." + lang)
      });
    }
    fields = [
      {
        form: {
          label: $$("acl.who.email.create.language")
        },
        type: Select,
        options: lang_opts,
        name: "frontend_language"
      }
    ];
    mod = new Modal({
      cancel: true,
      onCancel: (function(_this) {
        return function() {
          dfr.reject();
        };
      })(this),
      pane: {
        header_left: new Label({
          text: $$("acl.who.email.create.title")
        }),
        content: (function(_this) {
          return function() {
            return new Form({
              data: _this.__user.getData().user,
              undo_support: false,
              fields: fields
            }).start();
          };
        })(this),
        footer_right: createBtn
      }
    }).show();
    return dfr.promise();
  };

  return AclWhoEmail;

})(AclWhoUser);
// Generated by CoffeeScript 1.10.0
var AclWhoCollection,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AclWhoCollection = (function(superClass) {
  extend(AclWhoCollection, superClass);

  function AclWhoCollection() {
    return AclWhoCollection.__super__.constructor.apply(this, arguments);
  }

  AclWhoCollection.prototype.init = function() {
    assert(this.__user.getLogin(), "new AclWhoCollection", "opts.user.login needs to be set.", {
      opts: this.opts,
      __user: this.__user
    });
    return assert(this.__user.getType() === "collection", "new AclWhoCollection", "opts.user.type needs to be \"collection\".", {
      opts: this.opts,
      __user: this.__user
    });
  };

  AclWhoCollection.prototype.getType = function() {
    return "collection";
  };

  AclWhoCollection.prototype.getIcon = function() {
    return "fa-folder-o";
  };

  AclWhoCollection.prototype.getSecret = function() {
    return this.__user.getLogin();
  };

  AclWhoCollection.prototype.getLoginUrl = function() {
    return this.__user.getAuthUrl();
  };

  return AclWhoCollection;

})(AclWhoEmail);
// Generated by CoffeeScript 1.10.0
var AclWhoMatchAny,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AclWhoMatchAny = (function(superClass) {
  extend(AclWhoMatchAny, superClass);

  function AclWhoMatchAny() {}

  AclWhoMatchAny.prototype.getDisplayText = function() {
    return $$("acl.who.any");
  };

  AclWhoMatchAny.prototype.getDisplayAutocompletion = function() {
    return CUI.DOM.htmlToNodes(this.getDisplayText());
  };

  AclWhoMatchAny.prototype.getType = function() {
    return "any";
  };

  AclWhoMatchAny.prototype.getIcon = function() {
    return "fa-asterisk";
  };

  AclWhoMatchAny.prototype.getSaveData = function() {
    return null;
  };

  return AclWhoMatchAny;

})(AclWho);
// Generated by CoffeeScript 1.10.0
var AclWhoManager,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

AclWhoManager = (function(superClass) {
  extend(AclWhoManager, superClass);

  function AclWhoManager() {
    this.getInputSearch = bind(this.getInputSearch, this);
    this.inputEmptied = bind(this.inputEmptied, this);
    this.getEmptyRow = bind(this.getEmptyRow, this);
    return AclWhoManager.__super__.constructor.apply(this, arguments);
  }

  AclWhoManager.prototype.initOpts = function() {
    AclWhoManager.__super__.initOpts.call(this);
    return this.addOpts({
      who_filter: {
        "default": ["group", "user"],
        check: Array
      },
      filter_system_groups: {
        check: Boolean
      },
      filter_groups: {
        check: Array
      },
      filter_groups_bool: {
        mandatory: true,
        "default": "must_not",
        check: ["must", "must_not"]
      },
      allowEmailUser: {
        "default": false,
        check: Boolean
      },
      allowMatchAny: {
        "default": false,
        check: Boolean
      },
      onUpdate: {
        check: Function
      },
      name: {
        check: String
      },
      store_full_data: {
        check: Boolean
      }
    });
  };

  AclWhoManager.prototype.name = function() {
    return this._name;
  };

  AclWhoManager.prototype.copy = function() {
    return new AclWhoManager({
      name: this._name,
      allowEmailUser: this._allowEmailUser,
      allowMatchAny: this._allowMatchAny,
      who_filter: this._who_filter
    });
  };

  AclWhoManager.prototype.getWho = function(data) {
    if (this._allowMatchAny && data[this.name()] === null) {
      return new AclWhoMatchAny();
    } else if (data[this.name()]) {
      return AclWho.newInstance(data[this.name()]);
    } else {
      return void 0;
    }
  };

  AclWhoManager.prototype.getWhoSelector = function(__data) {
    var inputSearch, who;
    this.__data = __data;
    assert(this.name(), "AclWhoManager.getWhoSelector", "opts.name needs to be set");
    assert(CUI.isPlainObject(this.__data), "AclWhoManager.getWhoSelector", "Parameter needs to be PlainObject", {
      data: this.__data
    });
    who = this.getWho(this.__data);
    if (who instanceof AclWhoCollection) {
      return new Label({
        text: who.getDisplayText()
      }).DOM;
    }
    inputSearch = this.getInputSearch((function(_this) {
      return function(aclWho) {
        who = aclWho;
        if (who) {
          if (_this._store_full_data) {
            _this.__data[_this.name()] = who.getData();
          } else {
            _this.__data[_this.name()] = who.getSaveData();
          }
          inputSearch.value(who.getDisplayText());
          inputSearch.selectAll();
          if (who instanceof AclWhoGroup) {
            ez5.groupManager.addGroupToAllGroups(who.getGroup());
          }
        } else {
          _this.__data[_this.name()] = void 0;
        }
        CUI.debug("AclWho.getWhoSelector[input search click callback], new data", _this.__data[_this.name()], who);
        if (typeof _this._onUpdate === "function") {
          _this._onUpdate(_this);
        }
        Events.trigger({
          type: "editor-changed",
          node: inputSearch.element
        });
        return Events.trigger({
          type: "data-changed",
          node: inputSearch.element
        });
      };
    })(this));
    if (who) {
      inputSearch.value(who.getDisplayText());
    }
    return inputSearch.render();
  };

  AclWhoManager.prototype.getEmptyRow = function(click_callback) {
    return new AclWhoEmptyRow({
      manager: this,
      click_callback: click_callback
    });
  };

  AclWhoManager.prototype.inputEmptied = function() {
    this.inputSearch.click_callback();
    return this.inputSearch.triggerFocus();
  };

  AclWhoManager.prototype.getInputSearch = function(click_callback) {
    if (this.autocompletion) {
      this.autocompletion.destroy();
    }
    this.inputSearch = new QueryElementInputSearch({
      button: true,
      manager: this,
      emptyExecute: true,
      placeholder_text: this.getPlaceholderText()
    });
    this.autocompletion = new AutocompletionPopup({
      "class": "acl-who-manager",
      element: this.inputSearch.getElement(),
      onHide: (function(_this) {
        return function() {
          return _this.inputSearch.triggerFocus();
        };
      })(this)
    });
    this.inputSearch.click_callback = click_callback;
    this.autocompletion.addContainer("all");
    return this.inputSearch;
  };

  AclWhoManager.prototype.getPlaceholderText = function() {
    var i, len, ref, str, type;
    str = [];
    ref = ["user", "group"];
    for (i = 0, len = ref.length; i < len; i++) {
      type = ref[i];
      if (indexOf.call(this._who_filter, type) >= 0) {
        str.push($$("acl.who.manager.who_placeholder_" + type));
      }
    }
    if (this._allowEmailUser) {
      str.push($$("acl.who.manager.who_placeholder_email"));
    }
    return str.join("/");
  };

  AclWhoManager.prototype.execute = function() {
    var filter, search;
    filter = this.inputSearch.getSearchFilter();
    search = [
      {
        bool: "must",
        type: "in",
        fields: ["_basetype"],
        "in": this._who_filter
      }, {
        type: "in",
        bool: "must_not",
        fields: ["user.type"],
        "in": ["anonymous"]
      }
    ];
    if (!this._allowEmailUser) {
      search.push({
        type: "in",
        bool: "must_not",
        fields: ["user.type"],
        "in": ["email"]
      });
    }
    if (this._filter_system_groups) {
      search.push({
        bool: "must_not",
        type: "in",
        fields: ["group.type"],
        "in": ["system"]
      });
    }
    if (this._filter_groups) {
      search.push({
        bool: this._filter_groups_bool,
        type: "in",
        fields: ["group.type"],
        "in": this._filter_groups
      });
    }
    if (filter) {
      filter.bool = "must";
      search.push(filter);
    }
    return ez5.api.search({
      json_data: {
        type: "acl",
        search: search,
        limit: 100,
        generate_rights: false,
        highlight: {},
        sort: [
          {
            field: "_basetype",
            order: "ASC"
          }, {
            field: "user.type",
            order: "ASC"
          }, {
            field: "group.displayname",
            order: "ASC"
          }, {
            field: "user._generated_displayname",
            order: "ASC"
          }
        ]
      }
    }).done((function(_this) {
      return function(data) {
        return _this.showSearchResult(data);
      };
    })(this));
  };

  AclWhoManager.prototype.showSearchResult = function(data) {
    var aclWho, btn, c, fn, i, item, len, object, ref, v;
    this.autocompletion.emptyContainer();
    this.autocompletion.show();
    if (!data.objects.length) {
      this.autocompletion.addClass("acl-who-manager-not-found");
      v = this.inputSearch.value();
      c = this.autocompletion.getContainer("all");
      c.append(new EmptyLabel({
        text: $$("acl.who.manager.not_found", {
          search: v
        })
      }).DOM);
      if (this._allowEmailUser && EmailInput.regexp.exec(v) && ez5.session.hasSystemRight("root", "frontend_features[acl_manager][create_email_user]")) {
        btn = new LocaButton({
          loca_key: "acl.who.manager.create_email_user.button",
          loca_key_attrs: {
            search: v
          },
          onClick: (function(_this) {
            return function() {
              var __who;
              _this.autocompletion.hide();
              _this.inputSearch.element[0].blur();
              __who = new AclWhoEmail({
                _basetype: "user",
                user: {
                  login: v.toLocaleLowerCase(),
                  type: "email"
                }
              });
              return __who.showCreateModal().done(function() {
                var base;
                return typeof (base = _this.inputSearch).click_callback === "function" ? base.click_callback(__who) : void 0;
              });
            };
          })(this)
        });
        c.append(btn.DOM);
        CUI.debug("AclWhoManager.showSearchResult: EMAIL!", v);
      }
      this.autocompletion.autoSize();
      return;
    }
    this.autocompletion.removeClass("acl-who-manager-not-found");
    if (this._allowMatchAny) {
      data.objects.splice(0, 0, new AclWhoMatchAny());
    }
    ref = data.objects;
    fn = (function(_this) {
      return function(aclWho) {
        return Events.listen({
          type: "click",
          node: item,
          call: function(ev) {
            var base;
            _this.inputSearch.value(aclWho.getDisplayText());
            _this.autocompletion.hide();
            if (typeof (base = _this.inputSearch).click_callback === "function") {
              base.click_callback(aclWho);
            }
          }
        });
      };
    })(this);
    for (i = 0, len = ref.length; i < len; i++) {
      object = ref[i];
      if (object instanceof AclWhoMatchAny) {
        aclWho = object;
      } else {
        aclWho = AclWho.newInstance(object);
      }
      item = this.autocompletion.appendItem("all", aclWho.getAutocompletionItem());
      fn(aclWho);
    }
    this.autocompletion.autoSize();
    return this;
  };

  return AclWhoManager;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var AclWhoEmptyRow,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AclWhoEmptyRow = (function(superClass) {
  extend(AclWhoEmptyRow, superClass);

  function AclWhoEmptyRow(opts) {
    this.opts = opts != null ? opts : {};
    this.renderContent = bind(this.renderContent, this);
    this.setColspan = bind(this.setColspan, this);
    this.opts.data = {};
    AclWhoEmptyRow.__super__.constructor.call(this, this.opts);
  }

  AclWhoEmptyRow.prototype.setColspan = function(colspan) {
    return this.opts.colspan = colspan;
  };

  AclWhoEmptyRow.prototype.renderContent = function() {
    var div;
    div = $div();
    this.inputSearch = this.opts.manager.getInputSearch(this.opts.click_callback);
    div.append(this.inputSearch.render());
    return div;
  };

  AclWhoEmptyRow.prototype.getSaveData = function() {};

  return AclWhoEmptyRow;

})(ListViewTreeNode);
// Generated by CoffeeScript 1.10.0
var ObjecttypeManager,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

ObjecttypeManager = (function(superClass) {
  extend(ObjecttypeManager, superClass);

  function ObjecttypeManager() {
    this.getAllFields = bind(this.getAllFields, this);
    this.getEASFields = bind(this.getEASFields, this);
    return ObjecttypeManager.__super__.constructor.apply(this, arguments);
  }

  ObjecttypeManager.prototype.readOpts = function() {
    ObjecttypeManager.__super__.readOpts.call(this);
    return this.objecttypes = [];
  };

  ObjecttypeManager.prototype.addObjecttypes = function(filter) {
    var i, len, mask, mask_schema, ref;
    if (filter == null) {
      filter = function() {
        return true;
      };
    }
    ref = ez5.mask.CURRENT.masks;
    for (i = 0, len = ref.length; i < len; i++) {
      mask_schema = ref[i];
      mask = new Mask("CURRENT", null, mask_schema);
      if (filter(mask.table, mask)) {
        this.addMask(mask);
      }
    }
    return this;
  };

  ObjecttypeManager.prototype.getObjecttypes = function() {
    return this.objecttypes;
  };

  ObjecttypeManager.prototype.addMask = function(_mask) {
    var mask, ot;
    assert(_mask instanceof Mask, "ObjecttypeManager.addMask", "Mask must be instance of Mask", {
      mask: mask
    });
    if (_mask.name() === "_all_fields") {
      mask = Mask.getMaskByMaskName("_all_fields", _mask.table.id());
    } else {
      mask = new Mask("CURRENT", _mask.id());
    }
    ot = this.findObjecttypeByName(mask.table.name());
    if (!ot) {
      ot = new Objecttype(mask);
      this.objecttypes.push(ot);
      this.objecttypes.sort(function(a, b) {
        if (a.nameLocalized() > b.nameLocalized()) {
          return 1;
        } else if (a.nameLocalized() < b.nameLocalized()) {
          return -1;
        } else {
          return 0;
        }
      });
    } else {
      ot.addMask(mask);
    }
    return ot;
  };

  ObjecttypeManager.prototype.findObjecttypeByName = function(name) {
    var i, len, ot, ref;
    ref = this.objecttypes;
    for (i = 0, len = ref.length; i < len; i++) {
      ot = ref[i];
      if (ot.name() === name) {
        return ot;
      }
    }
    return null;
  };

  ObjecttypeManager.prototype.findMaskByName = function(name) {
    var i, j, len, len1, m, ot, ref, ref1;
    ref = this.objecttypes;
    for (i = 0, len = ref.length; i < len; i++) {
      ot = ref[i];
      ref1 = ot.masks;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        m = ref1[j];
        if (m.name() === name) {
          return m;
        }
      }
    }
    return null;
  };

  ObjecttypeManager.prototype.initCommonFields = function(mode, dive_nested, filter_callback) {
    var fbn, fieldsByName, fn, i, j, k, len, len1, len2, m, ot, ref, ref1, ref2;
    if (dive_nested == null) {
      dive_nested = true;
    }
    if (filter_callback == null) {
      filter_callback = null;
    }
    ref = this.objecttypes;
    for (i = 0, len = ref.length; i < len; i++) {
      ot = ref[i];
      fieldsByName = {};
      ot.commonFields = [];
      ot.fieldsByLocaName = {};
      ot.commonFieldsMasks = [];
      ref1 = ot.masks;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        m = ref1[j];
        assert(!m.uniqueFields, "ObjecttypeManager.initCommonFields(" + mode + ")", "Cannot init fields more than once on the same mask", {
          manager: this
        });
        m.uniqueFields = [];
        m.invokeOnFields(mode, dive_nested, function(f) {
          var fbn;
          if (filter_callback && !filter_callback(f)) {
            return;
          }
          fbn = fieldsByName[f.fullName()];
          if (!fbn) {
            fbn = {
              masks: [],
              field: f
            };
            fieldsByName[f.fullName()] = fbn;
          }
          return fbn.masks.push(m);
        });
      }
      for (fn in fieldsByName) {
        fbn = fieldsByName[fn];
        ot.fieldsByLocaName[fbn.field.nameLocalized()] = fbn.field;
        fbn.field.__in_masks = fbn.masks;
        if (fbn.masks.length > 1 || ot.masks.length === 1) {
          ref2 = fbn.masks;
          for (k = 0, len2 = ref2.length; k < len2; k++) {
            m = ref2[k];
            if (indexOf.call(ot.commonFieldsMasks, m) < 0) {
              ot.commonFieldsMasks.push(m);
            }
          }
          ot.commonFields.push(fbn.field);
        } else {
          fbn.masks[0].uniqueFields.push(fbn.field);
        }
      }
    }
  };

  ObjecttypeManager.prototype.getCommonFieldsByLocaName = function(filter_callback) {
    var cf, commonFields, field, fn, i, len, ot, ref, ref1;
    if (filter_callback == null) {
      filter_callback = null;
    }
    commonFields = {};
    ref = this.objecttypes;
    for (i = 0, len = ref.length; i < len; i++) {
      ot = ref[i];
      assert(ot.commonFields, "ObjecttypeManager.getCommonFieldsByLocaName", "Common Fields are not initialized, use .initCommonFields before.");
      ref1 = ot.fieldsByLocaName;
      for (fn in ref1) {
        field = ref1[fn];
        if (filter_callback && !filter_callback(ot, field, commonFields[fn])) {
          continue;
        }
        if (!commonFields[fn]) {
          commonFields[fn] = [];
        }
        commonFields[fn].push(field);
      }
    }
    for (fn in commonFields) {
      cf = commonFields[fn];
      if (cf.length === 1) {
        delete commonFields[fn];
      }
    }
    return commonFields;
  };

  ObjecttypeManager.prototype.getCommonFieldsMasks = function() {
    var i, j, len, len1, m, masks, ot, ref, ref1;
    masks = [];
    ref = this.objecttypes;
    for (i = 0, len = ref.length; i < len; i++) {
      ot = ref[i];
      assert(ot.commonFields, "ObjecttypeManager.getCommonMaskNames", "Common Fields are not initialized, use .initCommonFields before.");
      ref1 = ot.commonFieldsMasks;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        m = ref1[j];
        if (indexOf.call(masks, m) < 0) {
          masks.push(m);
        }
      }
    }
    return masks;
  };

  ObjecttypeManager.prototype.addLinkedObjectFields = function(fields) {
    var f, fn, i, len, m, o;
    for (i = 0, len = fields.length; i < len; i++) {
      f = fields[i];
      assert(f instanceof LinkedObject, "ObjecttypeManager.addLinkedObjectFields", "fields need to be instance of LinkedObject", {
        fields: fields
      });
      m = this.findMaskByName(f.linkMask().name());
      if (!m) {
        o = this.addMask(f.linkMask());
      } else {
        o = m.objecttype;
      }
      if (!o._linked_object_fields) {
        o._linked_object_fields = [];
        o._linked_object_fields_by_name = {};
      }
      if (!o._objecttypes) {
        o._objecttypes = {};
      }
      o._objecttypes[f.getMainMask().table.name()] = true;
      fn = f.fullName();
      if (!o._linked_object_fields_by_name[fn]) {
        o._linked_object_fields_by_name[fn] = [];
        o._linked_object_fields.push(fn);
      }
      o._linked_object_fields_by_name[fn].push(f);
    }
    return this;
  };

  ObjecttypeManager.prototype.getEASFields = function(mode, filter) {
    var eas_fields, i, len, o, ref;
    eas_fields = [];
    ref = this.objecttypes;
    for (i = 0, len = ref.length; i < len; i++) {
      o = ref[i];
      if (!filter || filter(o)) {
        o.getEASFields(mode, eas_fields);
      }
    }
    return eas_fields;
  };

  ObjecttypeManager.prototype.getAllFields = function(mode, filter) {
    var fields, i, len, o, ref;
    fields = [];
    ref = this.objecttypes;
    for (i = 0, len = ref.length; i < len; i++) {
      o = ref[i];
      if (!filter || filter(o)) {
        o.getAllFields(mode, fields);
      }
    }
    return fields;
  };

  return ObjecttypeManager;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var Search,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Search = (function(superClass) {
  extend(Search, superClass);

  function Search() {
    return Search.__super__.constructor.apply(this, arguments);
  }

  Search.prototype.initOpts = function() {
    Search.__super__.initOpts.call(this);
    this.addOpts({
      request_format: {
        check: ["short", "standard", "long"]
      },
      onAddToRequest: {
        check: Function
      }
    });
    return this;
  };

  Search.prototype.readOpts = function() {
    var btn_opts;
    Search.__super__.readOpts.call(this);
    this.request_counter = 0;
    btn_opts = this.getSearchButtonOpts();
    if (!btn_opts.onClick) {
      btn_opts.onClick = (function(_this) {
        return function(ev) {
          _this.searchButtonBeforeExecute();
          _this.executeWithLog(null, ev.altKey());
        };
      })(this);
    }
    this.__searchButton = new CUI.defaults["class"].Button(btn_opts);
    this.__executeQueue = [];
    this.searchManagers = [];
    this.__searchBasics = new SearchBasics({
      search: this
    });
    return this.__searchInitialized = new CUI.Deferred();
  };

  Search.prototype.getShareUrl = function() {};

  Search.prototype.searchButtonBeforeExecute = function() {};

  Search.prototype.getRequestFormat = function() {
    return this._request_format;
  };

  Search.prototype.getSearchButtonOpts = function() {
    return {
      "class": "ez-search-main-button ez5-search-button",
      loca_key: "search.button.search",
      group: "search-button",
      icon: "search"
    };
  };

  Search.prototype.emptyRequest = function() {
    var i, len, ref, sm;
    ref = this.searchManagers;
    for (i = 0, len = ref.length; i < len; i++) {
      sm = ref[i];
      sm.emptyRequest();
    }
    return this;
  };

  Search.prototype.getSearchInitializedPromise = function() {
    return this.__searchInitialized.promise();
  };

  Search.prototype.addSearchManager = function(new_search_manager) {
    assert(new_search_manager instanceof SearchManager, "Search.addSearchManager", "search manager needs to be instanceof SearchManager", {
      searchManager: new_search_manager
    });
    assert(idxInArray(new_search_manager, this.searchManagers) < 0);
    new_search_manager.setSearch(this);
    this.searchManagers.push(new_search_manager);
    return new_search_manager;
  };

  Search.prototype.insertAfterSearchManager = function(previous_search_manager, new_search_manager) {
    var index;
    assert(previous_search_manager instanceof SearchManager, "Search.insertAfterSearchManager", "previous_search_manager needs to be instanceof SearchManager", {
      previous_search_manager: previous_search_manager,
      new_search_manager: new_search_manager
    });
    assert(new_search_manager instanceof SearchManager, "Search.insertAfterSearchManager", "new_search_manager needs to be instanceof SearchManager", {
      previous_search_manager: previous_search_manager,
      new_search_manager: new_search_manager
    });
    assert(idxInArray(new_search_manager, this.searchManagers) < 0);
    new_search_manager.setSearch(this);
    index = idxInArray(previous_search_manager, this.searchManagers);
    assert(index >= 0);
    this.searchManagers.splice(index + 1, 0, new_search_manager);
    return new_search_manager;
  };

  Search.prototype.init = function() {
    return this.__initSearchManagers().done((function(_this) {
      return function() {
        _this.__searchInitialized.resolve(_this);
        return _this.__doExecuteNext();
      };
    })(this));
  };

  Search.prototype.__initSearchManagers = function() {
    var funcs, sm;
    funcs = (function() {
      var i, len, ref, results;
      ref = this.searchManagers;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        sm = ref[i];
        results.push((function(_this) {
          return function(sm) {
            return function() {
              if (_this.isDestroyed()) {
                return new CUI.Deferred().reject().promise();
              }
              return sm.init();
            };
          };
        })(this)(sm));
      }
      return results;
    }).call(this);
    if (this.hasSearchBasics()) {
      funcs.splice(0, 0, (function(_this) {
        return function() {
          return _this.__searchBasics.init();
        };
      })(this));
    }
    return CUI.chainedCall.apply(CUI, funcs);
  };

  Search.prototype.refresh = function() {
    this.destroySearchManagers();
    this.enableSearchButton();
    this.request_counter = 0;
    this.__searchInitialized = new CUI.Deferred();
    return this.init();
  };

  Search.prototype.getStoreData = function() {
    var i, len, ref, sd, sm;
    sd = {};
    ref = this.searchManagers;
    for (i = 0, len = ref.length; i < len; i++) {
      sm = ref[i];
      sm.getStoreData(sd);
    }
    return sd;
  };

  Search.prototype.getStoreSearchData = function() {
    var error, ex, sd;
    try {
      sd = {
        version: this.getStoreDataVersion(),
        search: this.getStoreData()
      };
    } catch (error) {
      ex = error;
      if (ex instanceof InvalidSaveDataException) {
        return null;
      }
      throw ex;
    }
    return sd;
  };

  Search.prototype.getStoreDataVersion = function() {
    return {
      schema: ez5.schema.CURRENT.version,
      save_data: Search.storeDataVersion
    };
  };

  Search.prototype.getStoreAsUrlData = function() {
    var error, ex, i, len, ref, sm, url_data;
    url_data = {};
    try {
      ref = this.searchManagers;
      for (i = 0, len = ref.length; i < len; i++) {
        sm = ref[i];
        sm.getStoreAsUrlData(url_data);
      }
    } catch (error) {
      ex = error;
      if (ex instanceof InvalidSaveDataException) {
        return null;
      }
      throw ex;
    }
    return url_data;
  };

  Search.prototype.addToResultDiv = function(request, result_object, div) {
    var _parms, i, len, managers, renderParms, sm;
    renderParms = null;
    managers = [];
    if (!request.exclusive) {
      managers.push.apply(managers, this.searchManagers);
    }
    if (request.searchManagers) {
      managers.push.apply(managers, request.searchManagers);
    }
    for (i = 0, len = managers.length; i < len; i++) {
      sm = managers[i];
      _parms = sm.addToResultDiv(request, result_object, div);
      if (_parms) {
        assert(renderParms === null, "Search.addToResultDiv", "More than one search manager returned render parms.");
        renderParms = _parms;
      }
    }
    return renderParms;
  };

  Search.prototype.destroySearchManagers = function() {
    var i, len, ref, sm;
    ref = this.searchManagers;
    for (i = 0, len = ref.length; i < len; i++) {
      sm = ref[i];
      sm.destroy();
    }
    this.searchManagers = [];
    return this;
  };

  Search.prototype.removeSearchManager = function(sm) {
    sm.unsetSearch();
    removeFromArray(sm, this.searchManagers);
    return this;
  };

  Search.prototype.objecttypesUpdated = function(initiator) {
    var fn, funcs, i, len, ref, ret, sm;
    funcs = [];
    ref = this.searchManagers;
    fn = (function(_this) {
      return function(sm) {
        return funcs.push(function() {
          return sm.objecttypesUpdated();
        });
      };
    })(this);
    for (i = 0, len = ref.length; i < len; i++) {
      sm = ref[i];
      if (sm === initiator) {
        continue;
      }
      fn(sm);
    }
    ret = CUI.chainedCall.apply(CUI, funcs);
    return ret;
  };

  Search.prototype.canCreateSearchObjecttypes = function() {
    return DbInfo.canCreate({
      objecttypes: this.getSearchObjecttypes()
    });
  };

  Search.prototype.getExportObjecttypes = function(req) {
    return CUI.resolvedPromise(this.getSearchObjecttypes());
  };

  Search.prototype.getSearchObjecttypes = function(user_selected, filter_by_pool) {
    var i, j, len, len1, o, ot, ref, ref1, sm;
    if (user_selected == null) {
      user_selected = true;
    }
    if (filter_by_pool == null) {
      filter_by_pool = false;
    }
    ot = [];
    ref = this.searchManagers;
    for (i = 0, len = ref.length; i < len; i++) {
      sm = ref[i];
      ref1 = sm.getObjecttypesForSearch(user_selected);
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        o = ref1[j];
        if (!filter_by_pool || o.poolLink()) {
          assert(o instanceof Objecttype, "Search.getSearchObjecttypes", "Objecttype needs to be instanceof Objecttype", {
            objecttype: o
          });
          ot.push(o);
        }
      }
    }
    return ot;
  };

  Search.prototype.hasEASFields = function() {
    var i, len, ot, ref;
    ref = this.getSearchObjecttypes();
    for (i = 0, len = ref.length; i < len; i++) {
      ot = ref[i];
      if (ot.getEASFields().length > 0) {
        return true;
      }
    }
    return false;
  };

  Search.prototype.hasSearchBasics = function() {
    return true;
  };

  Search.prototype.getSearchBasics = function() {
    if (this.hasSearchBasics()) {
      return this.__searchBasics;
    } else {
      return null;
    }
  };

  Search.prototype.getLinkedObjectFields = function(mode, user_selected) {
    var i, j, len, len1, linked_object_fields, m, mask_names, o, ref, ref1, ref2;
    if (user_selected == null) {
      user_selected = false;
    }
    mask_names = this.getSearchBasics().getMaskNames();
    linked_object_fields = [];
    ref = this.getSearchObjecttypes(user_selected);
    for (i = 0, len = ref.length; i < len; i++) {
      o = ref[i];
      ref1 = o.masks;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        m = ref1[j];
        if (ref2 = m.name(), indexOf.call(mask_names, ref2) < 0) {
          continue;
        }
        m.invokeOnFields(mode, true, function(f) {
          if (f instanceof LinkedObject && f.linkMask()) {
            return linked_object_fields.push(f);
          }
        });
      }
    }
    linked_object_fields.sort(function(a, b) {
      return compareIndex(a.nameLocalized(), b.nameLocalized());
    });
    return linked_object_fields;
  };

  Search.prototype.addToRequest = function(request) {
    var add_and_run, i, j, k, l, len, len1, len2, o, ref, ref1, ref2, ref3, s, sm, v;
    if (!(request != null ? request.exclusive : void 0)) {
      if (!request.hasOwnProperty("objecttypes")) {
        request.objecttypes = (function() {
          var i, len, ref, results;
          ref = this.getSearchObjecttypes();
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            o = ref[i];
            results.push(o.name());
          }
          return results;
        }).call(this);
      }
      ref = {
        offset: 0,
        generate_rights: false
      };
      for (k in ref) {
        v = ref[k];
        if (!request.hasOwnProperty(k)) {
          request[k] = v;
        }
      }
    }
    if (!(!request.objecttypes || request.objecttypes.length >= 0)) {
      return this;
    }
    add_and_run = function(sm) {
      var error, ex;
      try {
        request.__searchManagers.push(sm);
        sm.addToRequest(request);
      } catch (error) {
        ex = error;
        if (ex instanceof UserError) {
          ex.presentError();
        } else {
          throw ex;
        }
      }
    };
    request.__searchManagers = [];
    if (!(request != null ? request.exclusive : void 0)) {
      ref1 = this.searchManagers;
      for (i = 0, len = ref1.length; i < len; i++) {
        sm = ref1[i];
        add_and_run(sm);
      }
    }
    if (request.searchManagers) {
      ref2 = request.searchManagers;
      for (j = 0, len1 = ref2.length; j < len1; j++) {
        sm = ref2[j];
        add_and_run(sm);
      }
    }
    if (request.search) {
      ref3 = request.search;
      for (l = 0, len2 = ref3.length; l < len2; l++) {
        s = ref3[l];
        if (s === false) {
          request.search = false;
          break;
        }
      }
    }
    this.setRequestFormat(request, this._request_format);
    return this;
  };

  Search.prototype.setRequestFormat = function(request, format) {
    if (!format) {
      return this;
    }
    if (!request.format) {
      request.format = format;
      return this;
    }
    if (ResultObject.compareFormats(request.format, format) < 0) {
      request.format = format;
    }
    return this;
  };

  Search.prototype.showResult = function(request, data) {};

  Search.prototype.disableSearchButton = function() {
    var sb;
    sb = this.getSearchButton();
    if (!sb) {
      return;
    }
    if (!this.__sbIcon) {
      this.__sbIcon = sb.getIcon();
      if (this.__sbIcon) {
        sb.setIcon("spinner");
      }
    }
    sb.disable();
    return this;
  };

  Search.prototype.enableSearchButton = function() {
    var sb;
    sb = this.getSearchButton();
    if (!sb) {
      return;
    }
    if (this.__sbIcon) {
      sb.setIcon(this.__sbIcon);
      delete this.__sbIcon;
    }
    sb.enable();
    return this;
  };

  Search.prototype.getDownloadManagerClass = function() {
    return ez5.defaults["class"].DownloadManager;
  };

  Search.prototype.executeAlwaysCallback = function() {
    this.enableSearchButton();
    return this;
  };

  Search.prototype.executeWithLog = function(request, pushState) {
    var error, ex, sd, share_url;
    if (request == null) {
      request = new Request();
    }
    if (pushState == null) {
      pushState = false;
    }
    if (pushState) {
      share_url = this.getShareUrl();
      if (share_url) {
        window.history.pushState({}, null, share_url);
      }
    }
    try {
      sd = this.getStoreData();
    } catch (error) {
      ex = error;
      if (!(ex instanceof InvalidSaveDataException)) {
        throw ex;
      }
    }
    return this.execute(request).done((function(_this) {
      return function(request, data) {
        var ref, ref1;
        if (!(sd != null ? (ref = sd.SearchInput) != null ? (ref1 = ref.query) != null ? ref1.length : void 0 : void 0 : void 0)) {
          return;
        }
        return EventPoller.saveEvent({
          type: "SEARCH",
          info: {
            version: _this.getStoreDataVersion(),
            request: {
              search: sd,
              offset: request.offset,
              limit: request.limit
            },
            response: {
              count: data.count,
              timings: {
                request_time: data.request_time,
                client: data.clientTook
              }
            }
          }
        });
      };
    })(this));
  };

  Search.prototype.execute = function(request) {
    var master_dfr, promise;
    if (request == null) {
      request = new Request();
    }
    assert(request instanceof Request, this.__cls + ".execute", "Request needs to be instance of Request.", {
      request: request
    });
    if (request.exclusive || request.exclusive_show) {
      assert(request.searchManagers, this.__cls + ".execute", "request.exclusive and request.exclusive_show need request.searchManagers to be set", {
        request: request
      });
    }
    master_dfr = new CUI.Deferred();
    master_dfr.always((function(_this) {
      return function() {
        return _this.executeAlwaysCallback();
      };
    })(this));
    if (this.__searchBasics) {
      promise = this.__searchBasics.update();
    } else {
      promise = CUI.resolvedPromise();
    }
    promise.done((function(_this) {
      return function() {
        var chain, i, idx, len, ref, sm;
        if (request.searchManagers) {
          assert($.isArray(request.searchManagers), _this.__cls + ".execute", "request.searchManagers needs to be Array.", {
            request: request
          });
          chain = [];
          ref = request.searchManagers;
          for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
            sm = ref[idx];
            assert(sm instanceof SearchManager, _this.__cls + ".execute", "request.searchManagers[" + idx + "] needs to be instance of SearchManager.", {
              request: request
            });
            if (sm.getSearch() === _this) {
              continue;
            }
            chain.push(function() {
              sm.setSearch(_this);
              return sm.init();
            });
          }
          return CUI.chainedCall.apply(CUI, chain).done(function() {
            return _this.__doExecute(request, master_dfr);
          }).fail(master_dfr.reject);
        } else {
          request.execute = true;
          _this.disableSearchButton();
          return _this.__doExecute(request, master_dfr);
        }
      };
    })(this));
    promise.fail(master_dfr.reject);
    return master_dfr.promise();
  };

  Search.prototype.isInitialized = function() {
    return this.__searchInitialized.state() === "resolved";
  };

  Search.prototype.__doExecute = function(request, master_dfr) {
    this.__executeQueue.push({
      request: request,
      master_dfr: master_dfr
    });
    return this.__doExecuteNext();
  };

  Search.prototype.__doExecuteNext = function() {
    var dfr, empty_response, master_dfr, req_data, request, timer, work;
    if (this.__executeQueue.length === 0) {
      return;
    }
    if (this.__executeLock) {
      return;
    }
    if (!this.isInitialized()) {
      return;
    }
    this.__executeLock = true;
    work = this.__executeQueue.splice(0, 1)[0];
    request = work.request;
    master_dfr = work.master_dfr;
    master_dfr.always((function(_this) {
      return function() {
        return master_dfr.always(function() {
          _this.__executeLock = false;
          return _this.__doExecuteNext();
        });
      };
    })(this));
    request.__searchManagers = null;
    this.addToRequest(request);
    if (typeof this._onAddToRequest === "function") {
      this._onAddToRequest(request);
    }
    dfr = new CUI.Deferred();
    empty_response = (function(_this) {
      return function() {
        var data;
        data = {
          _dummy_data: true,
          objects: [],
          aggregations: [],
          count: 0,
          limit: request.limit,
          offset: request.offset
        };
        _this.lastData = data;
        return dfr.resolve(data);
      };
    })(this);
    if (request.search !== false) {
      request.counter = ++this.request_counter;
      timer = (new Date()).getTime();
      assert(!request.hasOwnProperty("limit") || !isNaN(request.limit), "Search.execute", "request.limit is not a number", {
        request: request
      });
      req_data = request.cleanRequestForSearch();
      this.executeSearch(req_data).fail((function(_this) {
        return function(xhr) {
          var ref;
          if (((ref = xhr.responseJSON) != null ? ref.code : void 0) === "error.api.invalid_value") {
            empty_response();
            return;
          }
          CUI.error("Request #" + request.counter + " failed", xhr);
          return ez5.error_handler(xhr).done(function() {
            _this.lastData = null;
            return dfr.reject(xhr);
          });
        };
      })(this)).done((function(_this) {
        return function(data) {
          data.clientTook = (new Date()).getTime() - timer;
          _this.lastData = data;
          if (request.counter !== _this.request_counter) {
            CUI.info("Request #" + request.counter + ": Ignored response, current request counter is at #" + _this.request_counter + ".");
            return dfr.reject({
              cancelled: true
            });
          } else {
            return dfr.resolve(data);
          }
        };
      })(this));
    } else {
      empty_response();
    }
    dfr.done((function(_this) {
      return function(data) {
        var i, len, promises, ref, ret, sm;
        promises = [];
        ret = _this.showResult(request, data);
        if (isPromise(ret)) {
          promises.push(ret);
        }
        if (request.__searchManagers) {
          ref = request.__searchManagers;
          for (i = 0, len = ref.length; i < len; i++) {
            sm = ref[i];
            if (!request.exclusive_show || indexOf.call(request.searchManagers, sm) >= 0) {
              if (sm.isDestroyed()) {
                CUI.warn("Search: Unable to call destroyed SearchManager's showResult method.", sm);
                continue;
              }
              ret = sm.showResult(request, data);
              if (isPromise(ret)) {
                promises.push(ret);
              }
            }
          }
        }
        master_dfr.always(function() {
          if (!request.searchManagers && _this.__resultContainer) {
            return Events.trigger({
              node: _this.__resultContainer,
              type: "search",
              info: {
                search: _this
              }
            });
          }
        });
        return CUI.when(promises).done(function() {
          return master_dfr.resolve(request, data);
        }).fail(function() {
          return master_dfr.reject();
        });
      };
    })(this));
    return dfr.fail((function(_this) {
      return function(xhr) {
        var i, len, ref, sm;
        if (!xhr.cancelled) {
          ref = request.__searchManagers;
          for (i = 0, len = ref.length; i < len; i++) {
            sm = ref[i];
            sm.failResult(request, xhr);
          }
        }
        return master_dfr.reject(xhr);
      };
    })(this));
  };

  Search.prototype.executeSearch = function(req_data) {
    var dfr;
    dfr = new CUI.Deferred();
    ez5.api.search({
      json_data: req_data,
      error: (function(_this) {
        return function(xhr) {
          return dfr.reject(xhr);
        };
      })(this),
      success: (function(_this) {
        return function(data) {
          return dfr.resolve(data);
        };
      })(this)
    });
    return dfr.promise();
  };

  Search.prototype.getCurrentTools = function() {
    var i, len, ref, sm, sm_tools, tools;
    tools = [];
    ref = this.searchManagers;
    for (i = 0, len = ref.length; i < len; i++) {
      sm = ref[i];
      sm_tools = sm.getCurrentTools();
      if ((sm_tools != null ? sm_tools.length : void 0) > 0) {
        tools.push.apply(tools, sm_tools);
      }
    }
    return tools;
  };

  Search.prototype.getLastData = function() {
    return this.lastData || null;
  };

  Search.prototype.getSearchManagers = function(filter) {
    var i, len, ref, sm, sms;
    if (!filter) {
      return this.searchManagers;
    } else {
      sms = [];
      ref = this.searchManagers;
      for (i = 0, len = ref.length; i < len; i++) {
        sm = ref[i];
        if (filter(sm)) {
          sms.push(sm);
        }
      }
      return sms;
    }
  };

  Search.prototype.destroy = function() {
    var i, len, ref, ref1, sm;
    delete this.data;
    ref = this.searchManagers;
    for (i = 0, len = ref.length; i < len; i++) {
      sm = ref[i];
      sm.destroy();
    }
    this.searchManagers.splice(0);
    if ((ref1 = this.__searchBasics) != null) {
      ref1.destroy();
    }
    this.__searchBasics = null;
    return Search.__super__.destroy.call(this);
  };

  Search.prototype.registerResultContainer = function(__resultContainer) {
    this.__resultContainer = __resultContainer;
    this.__resultContainer.addClass("ez5-search-result-container");
    this.__resultContainer.setAttribute('tabindex', '-1');
    DOM.data(this.__resultContainer[0], "search", this);
    if (this.hasSearchBasics()) {
      this.getSearchBasics().setClassInSearchResultContainer();
    }
    return this;
  };

  Search.prototype.getResultContainer = function() {
    return this.__resultContainer;
  };

  Search.prototype.getSearchButton = function() {
    return this.__searchButton;
  };

  Search.prototype.hasUserInput = function(request) {
    var i, len, ref, sm;
    ref = this.searchManagers;
    for (i = 0, len = ref.length; i < len; i++) {
      sm = ref[i];
      if (sm.hasUserInput(request)) {
        return true;
      }
    }
    return false;
  };

  Search.prototype.getDefaultSort = function() {};

  Search.prototype.getDefaultSortKey = function() {
    return "main.search.sort.relevance";
  };

  Search.prototype.getEmptyResultDiv = function(request) {
    var cls, k, label;
    if (this.request_counter === 0) {
      k = "search.welcome";
    } else if (this.hasUserInput(request)) {
      k = "search.nothing_found";
      cls = "cui-empty-label";
    } else {
      k = "search.nothing_found_with_empty_search";
      cls = "cui-empty-label";
    }
    label = new LocaLabel({
      loca_key: k,
      "class": cls + " search-empty-result",
      centered: true,
      multiline: true
    });
    return label.DOM;
  };

  Search.getPhrase = function(str) {
    var phrase;
    assert(isString(str), "Search.getPhrase", "Parameter must be a String", {
      string: str
    });
    if (str.substring(0, 1) === "\"") {
      str = str.substring(1);
      phrase = true;
    } else {
      phrase = false;
    }
    if (str.substring(str.length - 1) === "\"") {
      str = str.substring(0, str.length - 1);
    }
    return [str.trim(), phrase];
  };

  Search.findByName = function(name) {
    var i, len, rc, ref, s;
    assert(!isEmpty(name), "Search.findByName", "\"name\" must not be empty.", {
      name: name
    });
    ref = $(".ez5-search-result-container");
    for (i = 0, len = ref.length; i < len; i++) {
      rc = ref[i];
      s = DOM.data(rc, "search");
      if (getObjectClass(s) === name) {
        return [s, $(rc)];
      }
    }
    return [null, null];
  };

  Search.storeDataVersion = 1;

  return Search;

})(CUI.Element);

CUI.ready((function(_this) {
  return function() {
    return Events.registerEvent({
      type: "search",
      bubble: true
    });
  };
})(this));
// Generated by CoffeeScript 1.10.0
var SearchManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SearchManager = (function(superClass) {
  extend(SearchManager, superClass);

  function SearchManager() {
    return SearchManager.__super__.constructor.apply(this, arguments);
  }

  SearchManager.prototype.init = function() {};

  SearchManager.prototype.setSearch = function(_search) {
    this._search = _search;
    assert(this._search instanceof Search, this.__cls + ".setSearch: search needs to be instance of Search", {
      search: this._search
    });
    return this;
  };

  SearchManager.prototype.unsetSearch = function() {
    return this._search = null;
  };

  SearchManager.prototype.getSearch = function() {
    return this._search;
  };

  SearchManager.prototype.destroy = function() {
    return SearchManager.__super__.destroy.call(this);
  };

  SearchManager.prototype.emptyRequest = function() {};

  SearchManager.prototype.getObjecttypesForSearch = function(user_selected) {
    if (user_selected == null) {
      user_selected = true;
    }
    return [];
  };

  SearchManager.prototype.addToRequest = function(request) {};

  SearchManager.prototype.showResult = function(request, data) {};

  SearchManager.prototype.failResult = function(xhr) {};

  SearchManager.prototype.hasUserInput = function() {
    return false;
  };

  SearchManager.prototype.addToResultDiv = function(request, result_object, div) {};

  SearchManager.prototype.objecttypesUpdated = function() {};

  SearchManager.prototype.startSearch = function() {};

  SearchManager.prototype.getStoreData = function(data) {};

  SearchManager.prototype.getStoreAsUrlData = function(url_data) {};

  SearchManager.prototype.initFromUrlData = function(url_data) {};

  SearchManager.prototype.getCurrentTools = function() {};

  return SearchManager;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var SearchStats,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SearchStats = (function(superClass) {
  extend(SearchStats, superClass);

  function SearchStats() {
    return SearchStats.__super__.constructor.apply(this, arguments);
  }

  SearchStats.prototype.showResult = function(request, data) {
    var stats;
    stats = this.countData(data);
    console.info("SearchStats.showResult:", data, ez5.format_filesize(JSON.stringify(data).length));
    console.debug("==== ROOT ====");
    return this.printStats(stats.root);
  };

  SearchStats.prototype.printStats = function(stats) {
    var keys, keys_by_size, output_keys;
    output_keys = (function(_this) {
      return function(keys) {
        var i, key, len, output, value;
        output = [];
        for (i = 0, len = keys.length; i < len; i++) {
          key = keys[i];
          value = stats[key];
          output.push(key + ": " + value.count + " (" + ez5.format_filesize(value.bytes) + ")");
        }
        return console.debug(output.join("\n"));
      };
    })(this);
    keys = Object.keys(stats);
    keys.sort();
    keys_by_size = keys.slice(0);
    keys_by_size.sort(function(a, b) {
      return compareIndex(stats[b].bytes, stats[a].bytes);
    });
    console.debug("=== BY KEY ===");
    output_keys(keys);
    console.debug("=== BY SIZE ===");
    return output_keys(keys_by_size);
  };

  SearchStats.prototype.__inc = function(stats, path, data) {
    var path_str;
    path_str = path.join(".");
    if (!stats.hasOwnProperty(path_str)) {
      stats[path_str] = {
        count: 0,
        bytes: 0
      };
    }
    stats[path_str].count += 1;
    return stats[path_str].bytes += JSON.stringify(data).length;
  };

  SearchStats.prototype.countData = function(data, stats, path, level) {
    var count, i, item, len;
    if (stats == null) {
      stats = {
        root: {},
        parts: {}
      };
    }
    if (path == null) {
      path = ["root"];
    }
    if (level == null) {
      level = 0;
    }
    count = (function(_this) {
      return function(_data) {
        var copy_path, cpath, k, v;
        cpath = path.slice(0);
        cpath.shift();
        _this.__inc(stats.root, cpath, _data);
        while (cpath.shift()) {
          _this.__inc(stats.parts, cpath, _data);
        }
        if (CUI.isPlainObject(_data)) {
          for (k in _data) {
            v = _data[k];
            copy_path = path.slice(0);
            if (CUI.isArray(v)) {
              copy_path.push(k + "[]");
            } else {
              copy_path.push(k);
            }
            _this.countData(v, stats, copy_path, level + 1);
          }
        }
      };
    })(this);
    if (CUI.isArray(data)) {
      for (i = 0, len = data.length; i < len; i++) {
        item = data[i];
        count(item);
      }
    } else {
      count(data);
    }
    return stats;
  };

  return SearchStats;

})(SearchManager);
// Generated by CoffeeScript 1.10.0
var SearchFilter,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SearchFilter = (function(superClass) {
  extend(SearchFilter, superClass);

  function SearchFilter() {
    return SearchFilter.__super__.constructor.apply(this, arguments);
  }

  SearchFilter.prototype.initOpts = function() {
    SearchFilter.__super__.initOpts.call(this);
    return this.addOpts({
      request: {
        mandatory: true,
        check: Request
      }
    });
  };

  SearchFilter.prototype.addToRequest = function(request) {
    request.merge(this._request);
    return CUI.debug("adding search filter to request", request, this._request);
  };

  return SearchFilter;

})(SearchManager);
// Generated by CoffeeScript 1.10.0
var SearchBasics,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SearchBasics = (function(superClass) {
  extend(SearchBasics, superClass);

  function SearchBasics() {
    return SearchBasics.__super__.constructor.apply(this, arguments);
  }

  SearchBasics.prototype.initOpts = function() {
    SearchBasics.__super__.initOpts.call(this);
    return this.addOpts({
      search: {
        mandatory: true,
        check: Search
      }
    });
  };

  SearchBasics.prototype.readOpts = function() {
    SearchBasics.__super__.readOpts.call(this);
    return this.__searchBasics = null;
  };

  SearchBasics.prototype.init = function() {
    EventPoller.listen({
      filter: {
        type: ["OBJECT_INDEX", "OBJECT_DELETE"]
      },
      instance: this,
      call: (function(_this) {
        return function() {
          _this.__refresh = true;
          return _this.__refreshTimeout = CUI.setTimeout({
            ms: 5000,
            call: function() {
              return _this.update();
            }
          });
        };
      })(this)
    });
    this.__refresh = true;
    return this.update();
  };

  SearchBasics.prototype.update = function() {
    var dbInfo, dfr, k, ot, ref, ref1, request, unique_id_before, v;
    CUI.clearTimeout(this.__refreshTimeout);
    if (!this.__refresh) {
      if (this.__refresh_promise) {
        return this.__refresh_promise;
      } else {
        return CUI.resolvedPromise();
      }
    }
    this.__refresh = false;
    unique_id_before = (ref = this.__searchBasics) != null ? ref.unique_id : void 0;
    request = {
      type: "object",
      objecttypes: (function() {
        var i, len, ref1, results;
        ref1 = this._search.getSearchObjecttypes(false);
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
          ot = ref1[i];
          results.push(ot.name());
        }
        return results;
      }).call(this),
      search: [],
      limit: 0,
      aggregations: {}
    };
    if (request.objecttypes.length === 0) {
      this.setData({
        aggregations: {
          _basics_asset: {
            terms: [],
            count: 0
          },
          _basics_mask: {
            terms: [],
            count: 0
          },
          _basics_objecttype: {
            terms: [],
            count: 0
          }
        }
      });
      return CUI.resolvedPromise();
    }
    ref1 = {
      _basics_mask: {
        type: "term",
        limit: 100000,
        field: "_mask"
      },
      _basics_objecttype: {
        type: "term",
        limit: 100000,
        field: "_objecttype"
      },
      _basics_asset: {
        type: "asset",
        field: "class_extension",
        limit: 100000
      }
    };
    for (k in ref1) {
      v = ref1[k];
      request.aggregations[k] = v;
    }
    dfr = new CUI.Deferred();
    dfr.always((function(_this) {
      return function() {
        return _this.__refresh_promise = null;
      };
    })(this));
    this.__dbInfo = null;
    dbInfo = new DbInfo();
    dbInfo.load().done((function(_this) {
      return function() {
        return _this.__dbInfo = dbInfo;
      };
    })(this)).always((function(_this) {
      return function() {
        return ez5.api.search({
          data: {
            debug: "SearchBasics.init"
          },
          json_data: request
        }).done(function(data) {
          _this.setData(data);
          if (unique_id_before && unique_id_before !== _this.__searchBasics.unique_id) {
            return _this._search.objecttypesUpdated(_this).done(function() {
              return dfr.resolve(data);
            }).fail(dfr.reject);
          } else {
            return dfr.resolve(data);
          }
        }).fail(dfr.reject);
      };
    })(this));
    return this.__refresh_promise = dfr.promise();
  };

  SearchBasics.prototype.getDbInfo = function() {
    return this.__dbInfo;
  };

  SearchBasics.prototype.destroy = function() {
    Events.ignore({
      instance: this
    });
    this.__searchBasics = null;
    return SearchBasics.__super__.destroy.call(this);
  };

  SearchBasics.prototype.setEASClassOnResultContainer = function() {
    var i, len, mask, mn, ref;
    this.__requireInit();
    this.__has_eas = false;
    ref = this.getMaskNames();
    for (i = 0, len = ref.length; i < len; i++) {
      mn = ref[i];
      mask = ez5.mask.CURRENT._mask_instance_by_name[mn];
      if (mask.hasStandardEASFields()) {
        this.__has_eas = true;
        break;
      }
    }
    this.setClassInSearchResultContainer();
    return this;
  };

  SearchBasics.prototype.setClassInSearchResultContainer = function() {
    var rc;
    rc = this._search.getResultContainer();
    if (!rc || this.__searchBasics === null) {
      return;
    }
    if (this.__has_eas) {
      rc.addClass("ez5-search-has-mask-with-asset-browser");
      rc.removeClass("ez5-search-has-no-mask-with-asset-browser");
    } else {
      rc.addClass("ez5-search-has-no-mask-with-asset-browser");
      rc.removeClass("ez5-search-has-mask-with-asset-browser");
    }
    return this;
  };

  SearchBasics.prototype.setData = function(data) {
    var d, i, info, j, l, len, len1, len2, match, ref, ref1, ref2, sb, t, unique_id;
    sb = {
      objecttypes: [],
      masks: [],
      eas_types: {},
      count: data.count
    };
    d = data.aggregations;
    unique_id = [sb.count];
    ref = d._basics_objecttype.terms;
    for (i = 0, len = ref.length; i < len; i++) {
      t = ref[i];
      sb.objecttypes.push({
        name: t.term,
        count: t.count
      });
      unique_id.push(t.term + t.count);
    }
    ref1 = d._basics_mask.terms;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      t = ref1[j];
      sb.masks.push({
        name: t.term,
        count: t.count
      });
      unique_id.push(t.term + t.count);
    }
    ref2 = d._basics_asset.terms;
    for (l = 0, len2 = ref2.length; l < len2; l++) {
      t = ref2[l];
      match = t.term.match(/^(.*?)\.(.*)$/);
      if (!match) {
        console.warn("Received bad term, class.extension expected. Term:", t);
        continue;
      }
      info = [match[1], match[2]];
      if (!sb.eas_types[info[0]]) {
        sb.eas_types[info[0]] = [];
      }
      sb.eas_types[info[0]].push(info[1]);
    }
    sb.unique_id = unique_id.join(";");
    this.__searchBasics = sb;
    this.setEASClassOnResultContainer();
    return this;
  };

  SearchBasics.prototype.__requireInit = function() {
    return assert(this.__searchBasics, "SearchBasics.__requireInit", "Search Basics not initialized yet.");
  };

  SearchBasics.prototype.getCount = function() {
    this.__requireInit();
    return this.__searchBasics.count;
  };

  SearchBasics.prototype.getMasks = function() {
    this.__requireInit();
    return this.__searchBasics.masks;
  };

  SearchBasics.prototype.getObjecttypes = function() {
    this.__requireInit();
    return this.__searchBasics.objecttypes;
  };

  SearchBasics.prototype.getMaskNames = function() {
    var i, len, m, ref, results;
    ref = this.getMasks();
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      m = ref[i];
      results.push(m.name);
    }
    return results;
  };

  SearchBasics.prototype.getObjecttypeNames = function() {
    var i, len, ot, ref, results;
    ref = this.getObjecttypes();
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      ot = ref[i];
      results.push(ot.name);
    }
    return results;
  };

  SearchBasics.prototype.getEASTypes = function() {
    this.__requireInit();
    return this.__searchBasics.eas_types;
  };

  return SearchBasics;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var FieldPopoverManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

FieldPopoverManager = (function(superClass) {
  extend(FieldPopoverManager, superClass);

  function FieldPopoverManager() {
    return FieldPopoverManager.__super__.constructor.apply(this, arguments);
  }

  FieldPopoverManager.prototype.initOpts = function() {
    FieldPopoverManager.__super__.initOpts.call(this);
    return this.addOpts({
      mode: {
        mandatory: true,
        check: ["sort", "expert"]
      },
      data: {
        mandatory: true,
        check: "PlainObject"
      },
      search: {
        mandatory: true,
        check: Search
      }
    });
  };

  FieldPopoverManager.prototype.setData = function(data) {
    this.data = data;
  };

  FieldPopoverManager.prototype.getObjecttypeNamesWithMasks = function() {
    return this.__ot_names_with_masks;
  };

  FieldPopoverManager.prototype.readOpts = function() {
    FieldPopoverManager.__super__.readOpts.call(this);
    this.mode = this._mode;
    this.setData(this._data);
    return this.init();
  };

  FieldPopoverManager.prototype.init = function() {
    var i, idx, j, len, len1, m, mask_names, ot, ref, ref1, ref2;
    this.otm = new ObjecttypeManager();
    mask_names = this._search.getSearchBasics().getMaskNames();
    this.__ot_names_with_masks = [];
    ref = this._search.getSearchObjecttypes(false);
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      ot = ref[idx];
      ref1 = ot.masks;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        m = ref1[j];
        if (ref2 = m.name(), indexOf.call(mask_names, ref2) >= 0) {
          this.otm.addMask(m);
          pushOntoArray(ot.name(), this.__ot_names_with_masks);
        }
      }
    }
    this.otm.initCommonFields(this.mode, false, function(f) {
      return !(f instanceof MaskSplitter);
    });
    return this;
  };

  FieldPopoverManager.prototype.objecttypeIsUserSelected = function(ot_names) {
    var _ot, i, len, ref, ref1;
    ref = this._search.getSearchObjecttypes(true);
    for (i = 0, len = ref.length; i < len; i++) {
      _ot = ref[i];
      if (ref1 = _ot.name(), indexOf.call(ot_names, ref1) >= 0) {
        return true;
      }
    }
    return false;
  };

  FieldPopoverManager.prototype.getCurrentGroup = function() {
    return assert(false, (getObjectClass(this)) + ".getCurrentGroup needs implementation.");
  };

  FieldPopoverManager.prototype.fieldsUpdated = function() {};

  FieldPopoverManager.prototype.getContent = function() {
    var vl;
    this.__statusLabel = new Label({
      "class": "ez5-field-popover-manager-status",
      text: $$("field.popover.manager.status.empty." + this.mode),
      multiline: true
    });
    this.all_div = $div("field-popover-manager-main");
    Events.listen({
      node: this.all_div,
      type: "search-input-change",
      call: (function(_this) {
        return function(ev) {
          return _this.fieldsUpdated();
        };
      })(this)
    });
    vl = new VerticalLayout({
      "class": "ez5-field-popover-manager-content-layout",
      center: {
        content: this.all_div
      },
      bottom: {
        content: this.__statusLabel
      }
    });
    return vl;
  };

  FieldPopoverManager.prototype.updateForm = function() {
    var _fields, add_field, add_fields, cf, commonFields, dfr, eas_fields, f, fields, fn, group, i, idx, j, k, key_appendix, l, len, len1, len2, len3, len4, len5, lot, mainDiv, mask, mask_names, n, o, opts, ot, ot_name, ot_names, ot_shown, ref, ref1, ref2, ref3, ref4, ref5, sortByField, title_added, txt;
    this.all_div.empty();
    group = this.getCurrentGroup();
    if (this.otm.objecttypes.length === 0 || !group) {
      return CUI.resolvedPromise();
    }
    sortByField = function(a, b) {
      var a_str, b_str;
      if (typeof a.isTopLevelField === "function" ? a.isTopLevelField() : void 0) {
        a_str = "_";
      } else {
        a_str = a.nameLocalized().toLocaleLowerCase();
      }
      if (typeof b.isTopLevelField === "function" ? b.isTopLevelField() : void 0) {
        b_str = "_";
      } else {
        b_str = b.nameLocalized().toLocaleLowerCase();
      }
      return compareIndex(a_str, b_str);
    };
    fields = [];
    add_fields = (function(_this) {
      return function(_fields, ot_name, panel_title) {
        var closed, f, i, len, ref;
        if (_fields.length === 0) {
          return;
        }
        if (fields.length > 0) {
          fields.push(new MaskSplitterPanelEnd());
          closed = false;
        } else {
          closed = true;
        }
        add_field(new MaskSplitterPanelFixed({
          text: panel_title,
          closed: closed
        }), ot_name);
        ref = _fields.sort(sortByField);
        for (i = 0, len = ref.length; i < len; i++) {
          f = ref[i];
          add_field(f, ot_name);
        }
      };
    })(this);
    add_field = (function(_this) {
      return function(f, ot_name) {
        var d;
        assert(f && ot_name, "FieldPopoverManager.updateForm[add_field]", "field, table and ot_name must be set", {
          field: f,
          ot_name: ot_name
        });
        fields.push(f);
        if (f instanceof MaskSplitter) {
          return;
        }
        f._ot_name = ot_name;
        if (!_this.data[ot_name]) {
          _this.data[ot_name] = {};
        }
        d = _this.data[ot_name][f.fullName()];
        if (!d) {
          d = _this.data[ot_name][f.fullName()] = {};
        }
        if (!d.field) {
          d.field = f;
          d._fields = {};
          return d.data = {};
        }
      };
    })(this);
    mask_names = "";
    if (group === "_COMMONS") {
      key_appendix = ".multiple";
    } else {
      key_appendix = "";
    }
    txt = $$("field.popover.manager.status.label." + this.mode + key_appendix, {
      mask_names: mask_names
    });
    this.__statusLabel.setText(txt);
    if (group === "_COMMONS") {
      commonFields = this.otm.getCommonFieldsByLocaName((function(_this) {
        return function(ot, field, commonFields) {
          if (!_this.objecttypeIsUserSelected([ot.name()])) {
            return false;
          }
          if (!field.isExpertCommon(_this.mode)) {
            return false;
          }
          if (field instanceof LinkedObject && (commonFields != null ? commonFields[0] : void 0) instanceof LinkedObject) {
            if (field.linkMask().name() !== commonFields[0].linkMask().name()) {
              return false;
            }
          }
          return true;
        };
      })(this));
      _fields = [];
      for (fn in commonFields) {
        cf = commonFields[fn];
        f = new MultipleFieldsContainer(cf);
        _fields.push(f);
      }
      add_fields(_fields, "_COMMONS", $$("main.search.expert.common_fields"));
      if (this.mode === "expert") {
        _fields = [];
        eas_fields = this.otm.getEASFields("expert", (function(_this) {
          return function(ot) {
            return _this.objecttypeIsUserSelected([ot.name()]);
          };
        })(this));
        if (eas_fields.length) {
          f = new MultipleFieldsContainer(eas_fields);
          f.nameLocalized = function() {
            return $$("field.popover.manager.eas.label");
          };
          _fields.push(f);
        }
        ref = this.link_otm.objecttypes.sort(sortByField);
        for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
          lot = ref[idx];
          ot_names = (function() {
            var results;
            results = [];
            for (ot_name in lot._objecttypes) {
              results.push(ot_name);
            }
            return results;
          })();
          if (!this.objecttypeIsUserSelected(ot_names) || ot_names.length === 1) {
            continue;
          }
          f = new MultipleFieldsContainer();
          f.addLinkedObjecttype(lot);
          _fields.push(f);
        }
        add_fields(_fields, "_COMMONS", $$("main.search.expert.linked_objects"));
      }
    }
    ot_shown = null;
    ref1 = this.otm.objecttypes;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      ot = ref1[j];
      if (ot.name() !== group) {
        continue;
      }
      ot_shown = ot;
      _fields = [];
      ref2 = ot.commonFields.sort(sortByField);
      for (k = 0, len2 = ref2.length; k < len2; k++) {
        f = ref2[k];
        if (!f.isExpertCommonOnly(this.mode)) {
          continue;
        }
        _fields.push(f);
      }
      mask_names = (function() {
        var l, len3, ref3, results;
        ref3 = ot.commonFieldsMasks;
        results = [];
        for (l = 0, len3 = ref3.length; l < len3; l++) {
          mask = ref3[l];
          results.push(mask.nameLocalized());
        }
        return results;
      })();
      add_fields(_fields, ot.name(), mask_names.join(", "));
      ref3 = ot.masks;
      for (l = 0, len3 = ref3.length; l < len3; l++) {
        mask = ref3[l];
        _fields = [];
        ref4 = mask.uniqueFields.sort(sortByField);
        for (n = 0, len4 = ref4.length; n < len4; n++) {
          f = ref4[n];
          if (!f.isExpertCommonOnly(this.mode)) {
            continue;
          }
          _fields.push(f);
        }
        add_fields(_fields, ot.name(), mask.nameLocalized());
      }
    }
    if (ot_shown && this.mode === "expert") {
      eas_fields = ot_shown.getEASFields("expert");
      title_added = null;
      _fields = [];
      if (eas_fields.length) {
        f = new MultipleFieldsContainer(eas_fields);
        f.nameLocalized = function() {
          return $$("field.popover.manager.eas.label");
        };
        _fields.push(f);
      }
      ref5 = this.link_otm.objecttypes;
      for (idx = o = 0, len5 = ref5.length; o < len5; idx = ++o) {
        lot = ref5[idx];
        f = new MultipleFieldsContainer();
        if (!f.addLinkedObjecttype(lot, ot_shown.name())) {
          continue;
        }
        _fields.push(f);
      }
      add_fields(_fields, ot_shown.name(), $$("main.search.expert.linked_objects"));
    }
    if (fields.length > 0) {
      fields.push(new MaskSplitterPanelEnd());
    }
    this.__mainFieldsRenderer = new FieldsRendererTopLevel();
    this.__mainFieldsRenderer.read(fields);
    opts = {
      data: this.data,
      mode: this.mode,
      rowMove: false,
      maximize: false
    };
    if (this.renderForListView) {
      opts.renderForListView = (function(_this) {
        return function(node, field) {
          return _this.renderForListView(node, field);
        };
      })(this);
    }
    switch (this.mode) {
      case "expert":
        opts.cols = ["auto", "auto", "maximize"];
        opts.colClasses = ["ez5-fields-renderer-option", "ez5-fields-renderer-key", "ez5-fields-renderer-value"];
        opts.setOptionsForListView = this.setOptionsForListView;
        break;
      case "sort":
        opts.cols = ["maximize", "auto", "auto", "auto", "auto"];
        opts.colClasses = ["ez5-sort-manager-col-field", "ez5-sort-manager-col-order", "ez5-sort-manager-col-order", "ez5-sort-manager-col-direction", "ez5-sort-manager-col-options"];
        opts.headerFields = this.getHeaderFields();
        opts.no_hierarchy = true;
    }
    opts.maximize = true;
    opts.search = this._search;
    dfr = new CUI.Deferred();
    opts.onFail = (function(_this) {
      return function() {
        return dfr.reject();
      };
    })(this);
    opts.onDone = (function(_this) {
      return function() {
        return dfr.resolve();
      };
    })(this);
    mainDiv = this.__mainFieldsRenderer.render(opts);
    this.all_div.append(mainDiv);
    return dfr.promise();
  };

  FieldPopoverManager.prototype.getFieldsRenderer = function() {
    return this.__mainFieldsRenderer;
  };

  return FieldPopoverManager;

})(CUI.Element);

CUI.ready((function(_this) {
  return function() {
    return Events.registerEvent({
      type: "search-input-change",
      bubble: true
    });
  };
})(this));
// Generated by CoffeeScript 1.10.0
var SortManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SortManager = (function(superClass) {
  extend(SortManager, superClass);

  function SortManager() {
    return SortManager.__super__.constructor.apply(this, arguments);
  }

  SortManager.prototype.readOpts = function() {
    SortManager.__super__.readOpts.call(this);
    this.__popover_rendered = null;
    if (this._pref) {
      this.loadSaveData(ez5.session.getPref(this._pref));
    } else {
      this.setData({});
    }
    this.button = new LocaButton({
      "class": "ez5-main-search-sort-button",
      loca_key: "main.search.sort.button",
      onClick: (function(_this) {
        return function() {
          return _this.openPopover();
        };
      })(this)
    });
    return this;
  };

  SortManager.prototype.initOpts = function() {
    SortManager.__super__.initOpts.call(this);
    this.addOpts({
      pref: {
        check: String
      }
    });
    return this;
  };

  SortManager.prototype.init = function() {
    SortManager.__super__.init.call(this);
    this.fieldPopoverManager = new SortManagerFieldPopoverManager({
      data: this.getData(),
      keys: this.keys,
      sortManager: this
    });
    this.getSearch().getButtonToolbar().append(this.button, "left");
    return this.initPopover().done((function(_this) {
      return function() {
        return _this.setButtonText();
      };
    })(this));
  };

  SortManager.prototype.getData = function() {
    return this.data;
  };

  SortManager.prototype.setData = function(data1) {
    var ref;
    this.data = data1;
    return (ref = this.fieldPopoverManager) != null ? ref.setData(this.data) : void 0;
  };

  SortManager.prototype.closePopover = function() {
    return this.popover.hide();
  };

  SortManager.prototype.openPopover = function() {
    return this.popover.show();
  };

  SortManager.prototype.__getRequest = function() {
    var req;
    req = this.addToRequest(req);
    return {
      fields: req.fields,
      sort: req.sort
    };
  };

  SortManager.prototype.initPopover = function() {
    var dfr;
    this.__popover_rendered = false;
    if (this.popover) {
      this.destroyPopover();
    }
    if (!this.fieldPopoverManager.getCurrentGroup()) {
      this.__popover_rendered = true;
      this.button.disable();
      return CUI.resolvedPromise();
    }
    dfr = new CUI.Deferred();
    dfr.done((function(_this) {
      return function() {
        return _this.__popover_rendered = true;
      };
    })(this));
    this.button.enable();
    this.popover = new Popover({
      element: this.button,
      backdrop: {
        policy: "click"
      },
      "class": "ez5-sort-manager-popover",
      placement: "sw",
      onShow: (function(_this) {
        return function() {
          _this.__current_sort_filter = JSON.stringify(_this.__getRequest());
          _this.__current_data = copyObject(_this.data, true);
          return _this.__dataSaved = false;
        };
      })(this),
      onHide: (function(_this) {
        return function() {
          if (!_this.__dataSaved) {
            _this.setData(_this.__current_data);
            _this.fieldPopoverManager.updateForm().done(function() {
              return _this.updateState();
            });
          }
          _this.setButtonText();
        };
      })(this),
      pane: {
        header_left: (function(_this) {
          return function() {
            return new Label({
              text: $$("main.search.sort.title")
            });
          };
        })(this),
        footer_right: (function(_this) {
          return function() {
            return new Button({
              text: $$("base.apply"),
              onClick: function() {
                return _this.__saveAndHidePopover();
              }
            });
          };
        })(this),
        header_right: (function(_this) {
          return function() {
            return new Label({
              text: _this.fieldPopoverManager.getCurrentGroupLocalized()
            });
          };
        })(this),
        content: (function(_this) {
          return function() {
            var content;
            content = _this.fieldPopoverManager.getContent();
            _this.fieldPopoverManager.updateForm().done(function() {
              _this.updateState();
              return dfr.resolve();
            });
            return content;
          };
        })(this)
      }
    });
    return dfr.promise();
  };

  SortManager.prototype.__saveAndHidePopover = function() {
    this.__dataSaved = true;
    this.popover.hide();
    if (this.__current_sort_filter !== JSON.stringify(this.__getRequest())) {
      CUI.debug("storing sort data:", this.getSaveData());
      ez5.session.savePref(this._pref, this.getSaveData());
      this.getSearch().execute();
    }
    return this;
  };

  SortManager.prototype.loadSaveData = function(sd) {
    var data, fn, ginfo, group, i, info, key, len, ref;
    if (!sd) {
      this.setData({});
      return;
    }
    data = {};
    for (group in sd) {
      ginfo = sd[group];
      data[group] = {};
      for (fn in ginfo) {
        info = ginfo[fn];
        data[group][fn] = {
          _order: info.order,
          _extra: info.extra
        };
        ref = this.keys;
        for (i = 0, len = ref.length; i < len; i++) {
          key = ref[i];
          data[group][fn][key] = key === info.key;
        }
      }
    }
    this.setData(data);
    return data;
  };

  SortManager.prototype.getSaveData = function() {
    var fn, ginfo, group, i, info, key, len, ref, ref1, sd, store;
    sd = {};
    ref = this.data;
    for (group in ref) {
      ginfo = ref[group];
      for (fn in ginfo) {
        info = ginfo[fn];
        store = false;
        ref1 = this.keys;
        for (i = 0, len = ref1.length; i < len; i++) {
          key = ref1[i];
          if (info[key]) {
            store = true;
            break;
          }
        }
        if (store) {
          if (!sd[group]) {
            sd[group] = {};
          }
          sd[group][fn] = {
            key: key,
            order: info._order,
            extra: info._extra
          };
        }
      }
    }
    return sd;
  };

  SortManager.prototype.objecttypesUpdated = function() {
    var ret;
    console.debug("objecttypes updated SortManager...", "search init:", this.getSearch().isInitialized(), "popover:", this.__popover_rendered);
    this.fieldPopoverManager.init();
    ret = this.initPopover();
    ret.done((function(_this) {
      return function() {
        _this.setButtonText();
        return "objecttypes updated SortManager done...";
      };
    })(this));
    return ret;
  };

  SortManager.prototype.destroy = function() {
    this.destroyPopover();
    return SortManager.__super__.destroy.call(this);
  };

  SortManager.prototype.destroyPopover = function() {
    if (this.popover) {
      this.popover.destroy();
      this.popover = null;
    }
    return this;
  };

  SortManager.prototype.setButtonText = function() {
    var active, f, i, key, len, ref, text;
    active = this.getActiveFields();
    text = [];
    ref = this.keys;
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      if (active && (f = active[key])) {
        text.push(f[0].field.nameLocalized());
      }
    }
    if (!text.length) {
      text.push($$(this.getSearch().getDefaultSortKey()));
    }
    return this.button.setText($$("main.search.sort.button|text") + ": " + text.join(", "));
  };

  SortManager.prototype.addToRequest = function(request) {
    var active, add_sort_filter, group, i, idx, key, len, ref, req_fields, sort_filter;
    if (request == null) {
      request = {};
    }
    assert(this.__popover_rendered, "SortManager.addToRequest", "Unable to addToRequest while popover is being initialized.");
    active = this.getActiveFields();
    if (this.getSearch().getSearchObjecttypes().length === 0) {
      return request;
    }
    sort_filter = [];
    req_fields = [];
    request.sort_keys = {};
    add_sort_filter = (function(_this) {
      return function(filter, key) {
        var _name, fn, fn_copy, gf, gm, groupable, has_gf, i, j, k, len, len1, len2, name, names, use_names;
        filter._key = key;
        groupable = filter.field.isSortGroupable();
        if (groupable) {
          request.sort_keys[key] = filter;
        }
        names = filter.field.getSortField(filter, _this.keys);
        if (!CUI.isArray(names)) {
          names = [names];
        }
        use_names = [];
        for (i = 0, len = names.length; i < len; i++) {
          name = names[i];
          if (isEmpty(name)) {
            continue;
          }
          if (CUI.isArray(name)) {
            for (j = 0, len1 = name.length; j < len1; j++) {
              _name = name[j];
              use_names.push(_name);
            }
          } else {
            use_names.push(name);
          }
        }
        if (use_names.length === 0) {
          return;
        }
        has_gf = false;
        for (k = 0, len2 = use_names.length; k < len2; k++) {
          fn = use_names[k];
          if (CUI.isPlainObject(fn)) {
            fn_copy = copyObject(fn);
            delete fn_copy.group_field;
            delete fn_copy.group_mode;
            sort_filter.push(fn_copy);
            gf = fn.group_field;
            gm = fn.group_mode;
          } else {
            sort_filter.push({
              field: fn,
              order: filter._order
            });
            gf = fn;
          }
          if (groupable && gf) {
            has_gf = true;
            req_fields.push({
              key: key,
              field: gf,
              mode: gm
            });
          }
        }
        return assert(!groupable || has_gf, "SortManager.addToRequest", "Group field not found for groupable Field", {
          field: _this,
          filter: use_names
        });
      };
    })(this);
    group = this.fieldPopoverManager.getCurrentGroup();
    ref = this.keys;
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      key = ref[idx];
      if (active[key]) {
        add_sort_filter(active[key][0], key);
      }
    }
    if (sort_filter.length === 0) {
      request.sort = this.getSearch().getDefaultSortFilter();
    } else {
      request.sort = sort_filter;
    }
    if (req_fields.length) {
      request.fields = req_fields;
    }
    return request;
  };

  SortManager.prototype.keys = ["_1", "_2"];

  SortManager.prototype.getActiveFields = function() {
    var active, f, fn, group, i, key, len, ref, ref1;
    group = this.fieldPopoverManager.getCurrentGroup();
    active = {};
    ref = this.data[group];
    for (fn in ref) {
      f = ref[fn];
      ref1 = this.keys;
      for (i = 0, len = ref1.length; i < len; i++) {
        key = ref1[i];
        if (!f[key]) {
          continue;
        }
        if (!active[key]) {
          active[key] = [];
        }
        active[key].push(f);
        if (!active[fn]) {
          active[fn] = {};
        }
        active[fn][key] = f;
      }
    }
    return active;
  };

  SortManager.prototype.updateState = function(field, key) {
    var __key, _f, _fn, _key, active, fn, group, i, j, k, l, len, len1, len2, len3, ref, ref1, ref2, ref3, ref4, sels, vis;
    active = this.getActiveFields();
    group = this.fieldPopoverManager.getCurrentGroup();
    if (field && key) {
      fn = field.fullName();
      ref = this.keys;
      for (i = 0, len = ref.length; i < len; i++) {
        __key = ref[i];
        if (active[__key]) {
          ref1 = active[__key];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            _f = ref1[j];
            if (_f.field.fullName() !== fn) {
              _f._fields[key].setValue(false);
            }
          }
        }
        ref2 = this.keys;
        for (k = 0, len2 = ref2.length; k < len2; k++) {
          _key = ref2[k];
          if (_key === key) {
            continue;
          }
          if (active[fn] && active[fn][_key]) {
            active[fn][_key]._fields[_key].setValue(false);
          }
        }
      }
      active = this.getActiveFields();
    }
    ref3 = this.data[group];
    for (_fn in ref3) {
      _f = ref3[_fn];
      if (!_f._fields) {
        delete this.data[group][_fn];
        continue;
      }
      vis = "hide";
      ref4 = this.keys;
      for (l = 0, len3 = ref4.length; l < len3; l++) {
        _key = ref4[l];
        if (active[_fn]) {
          vis = "show";
        }
      }
      sels = [_f._fields._order, _f._fields._extra];
      if (!sels[0]) {
        continue;
      }
      sels[0][vis]();
      if (sels[1]) {
        sels[1][vis]();
      }
    }
  };

  return SortManager;

})(SearchManager);
// Generated by CoffeeScript 1.10.0
var SortManagerPlain,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SortManagerPlain = (function(superClass) {
  extend(SortManagerPlain, superClass);

  function SortManagerPlain() {
    this.setSearch = bind(this.setSearch, this);
    return SortManagerPlain.__super__.constructor.apply(this, arguments);
  }

  SortManagerPlain.prototype.setSearch = function(_search) {
    this._search = _search;
  };

  SortManagerPlain.prototype.addToRequest = function(request) {
    var sort_filter;
    sort_filter = [];
    sort_filter.push({
      field: "_system_object_id",
      order: "DESC"
    });
    request.sort = sort_filter;
  };

  return SortManagerPlain;

})(SearchManager);
// Generated by CoffeeScript 1.10.0
var SortManagerStandard,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SortManagerStandard = (function(superClass) {
  extend(SortManagerStandard, superClass);

  function SortManagerStandard() {
    this.setSearch = bind(this.setSearch, this);
    return SortManagerStandard.__super__.constructor.apply(this, arguments);
  }

  SortManagerStandard.prototype.setSearch = function(_search) {
    this._search = _search;
  };

  SortManagerStandard.prototype.addToRequest = function(request) {
    var sort_filter;
    sort_filter = [];
    sort_filter.push({
      field: "_standard.1.text",
      order: "ASC"
    });
    request.sort = sort_filter;
  };

  return SortManagerStandard;

})(SearchManager);
// Generated by CoffeeScript 1.10.0
var SortManagerFieldPopoverManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

SortManagerFieldPopoverManager = (function(superClass) {
  extend(SortManagerFieldPopoverManager, superClass);

  function SortManagerFieldPopoverManager() {
    return SortManagerFieldPopoverManager.__super__.constructor.apply(this, arguments);
  }

  SortManagerFieldPopoverManager.prototype.initOpts = function() {
    SortManagerFieldPopoverManager.__super__.initOpts.call(this);
    return this.addOpts({
      keys: {
        check: Array
      },
      sortManager: {
        check: SortManager
      }
    });
  };

  SortManagerFieldPopoverManager.prototype.readOpts = function() {
    var ref;
    this.opts.mode = "sort";
    this.opts.search = (ref = this.opts.sortManager) != null ? ref.getSearch() : void 0;
    SortManagerFieldPopoverManager.__super__.readOpts.call(this);
    this.keys = this._keys;
    return this.data = this._data;
  };

  SortManagerFieldPopoverManager.prototype.getHeaderFields = function() {
    var header, i, k, len, ref;
    header = [];
    ref = ["field", "order_1", "order_2", "direction", "extra"];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      header.push({
        th_label: "sort.manager.field.popover.manager.header." + k
      });
    }
    return header;
  };

  SortManagerFieldPopoverManager.prototype.getCurrentGroup = function() {
    var i, len, ot, ot_names, ref, ref1;
    ot_names = [];
    ref = this._search.getSearchObjecttypes();
    for (i = 0, len = ref.length; i < len; i++) {
      ot = ref[i];
      if (ref1 = ot.name(), indexOf.call(this.getObjecttypeNamesWithMasks(), ref1) >= 0) {
        ot_names.push(ot.name());
      }
    }
    if (ot_names.length === 0) {
      return null;
    } else if (ot_names.length === 1) {
      return ot_names[0];
    } else {
      return "_COMMONS";
    }
  };

  SortManagerFieldPopoverManager.prototype.getCurrentGroupLocalized = function() {
    var group;
    group = this.getCurrentGroup();
    switch (group) {
      case "_COMMONS":
        return $$("sort.manager.field.popover.manager.title.common");
      case null:
        return "";
      default:
        return ez5.schema.CURRENT._objecttype_by_name[group]._name_localized;
    }
  };

  SortManagerFieldPopoverManager.prototype.renderForListView = function(node, field) {
    var data, extraOpts, fn, i, key, len, opts, ref, sel, sel2;
    data = node.opts.data[field._ot_name][field.fullName()];
    opts = [
      {
        text: $$("sort.manager.field.popover.manager.option.asc"),
        value: "ASC"
      }, {
        text: $$("sort.manager.field.popover.manager.option.desc"),
        value: "DESC"
      }
    ];
    sel = new Select({
      options: opts,
      undo_support: false,
      mark_changed: false,
      name: "_order",
      data: data
    });
    sel.start();
    data._fields._order = sel;
    extraOpts = field.sortExtraOpts(data);
    if (extraOpts) {
      sel2 = new Select({
        undo_support: false,
        mark_changed: false,
        options: extraOpts,
        name: "_extra",
        hidden: true,
        data: data
      }).start();
    }
    data._fields._extra = sel2;
    ref = this.keys;
    fn = (function(_this) {
      return function(key) {
        var cb;
        cb = new Checkbox({
          undo_support: false,
          mark_changed: false,
          name: key,
          onDataChanged: function() {
            return _this._sortManager.updateState(field, key);
          },
          data: data
        }).start();
        node.addColumn(new ListViewColumn({
          element: cb.DOM
        }));
        return data._fields[key] = cb;
      };
    })(this);
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      fn(key);
    }
    node.addColumn(new ListViewColumn({
      element: sel.DOM
    }));
    if (sel2) {
      node.addColumn(new ListViewColumn({
        element: sel2.DOM
      }));
    } else {
      node.addColumn(new ListViewColumnEmpty());
    }
    return new Label({
      text: field.nameLocalized()
    });
  };

  return SortManagerFieldPopoverManager;

})(FieldPopoverManager);
// Generated by CoffeeScript 1.10.0
var SearchHierarchyManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SearchHierarchyManager = (function(superClass) {
  extend(SearchHierarchyManager, superClass);

  function SearchHierarchyManager() {
    return SearchHierarchyManager.__super__.constructor.apply(this, arguments);
  }

  SearchHierarchyManager.prototype.initOpts = function() {
    SearchHierarchyManager.__super__.initOpts.call(this);
    return this.addOpts({
      container: {
        mandatory: true,
        check: function(v) {
          return isElement(v);
        }
      },
      searchInput: {
        check: SearchInput
      }
    });
  };

  SearchHierarchyManager.prototype.readOpts = function() {
    SearchHierarchyManager.__super__.readOpts.call(this);
    this.__layout = new PaneToolbar({
      "class": "ez5-search-hierarchy-manager",
      left: {}
    });
    return this.filter = [];
  };

  SearchHierarchyManager.prototype.emptyRequest = function() {
    SearchHierarchyManager.__super__.emptyRequest.call(this);
    this.filter = [];
    return this;
  };

  SearchHierarchyManager.prototype.addFilter = function(result_object) {
    assert(result_object instanceof ResultObject, "SearchHierarchyManager.addFilter", "Parameter needs to be instanceof ResultObject.", {
      parm: result_object
    });
    this.filter.push({
      result_object: result_object
    });
    return this;
  };

  SearchHierarchyManager.prototype.addToResultDiv = function(request, result_object, div) {
    var browser, hierarchy_open_button;
    if (request._ignore_hierarchy) {
      return;
    }
    if (result_object.hasChildren()) {
      div.addClass("ez5-has-hierarchy-open-button");
      hierarchy_open_button = new LocaButton({
        "class": "ez5-button-hierarchy-open",
        loca_key: "search.hierarchy.manager.button.dive",
        size: "normal",
        icon: "right",
        onClick: (function(_this) {
          return function(ev) {
            _this.filter.push({
              result_object: result_object,
              offset: request.offset || 0,
              query: _this._searchInput.storeQuery()
            });
            return _this.getSearch().execute();
          };
        })(this)
      }).DOM;
      if (div.attr("render-type") === "text") {
        if (CUI.__ng__) {
          div.append(hierarchy_open_button);
        } else {
          div.prepend(hierarchy_open_button);
        }
      } else {
        if (CUI.__ng__) {
          browser = div.querySelector('.ez5-browser');
          if (browser) {
            browser.appendChild(hierarchy_open_button);
          } else {
            div.append(hierarchy_open_button);
          }
        } else {
          div.append(hierarchy_open_button);
        }
      }
    } else {

    }
  };

  SearchHierarchyManager.prototype.setPath = function(result_object) {
    var i, idx, len, p, ref;
    assert(result_object != null ? result_object.data : void 0, "SearchHierarchyManager.setPath", "needs result_object with data to work", {
      result_object: result_object
    });
    this.filter = [];
    if (result_object.data._path) {
      ref = result_object.data._path.slice(0, result_object.data._path.length - 1);
      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
        p = ref[idx];
        p._path = result_object.data._path.slice(0, +idx + 1 || 9e9);
        this.filter.push({
          result_object: (new ResultObject()).setData(p)
        });
      }
    }
    return this;
  };

  SearchHierarchyManager.prototype.isActive = function() {
    return this.filter.length > 0;
  };

  SearchHierarchyManager.prototype.addToRequest = function(request) {
    var filter, i, len, ot, ot_name, ots, ref;
    if (request._ignore_hierarchy) {
      return;
    }
    ots = [];
    ref = this.getSearch().getSearchObjecttypes();
    for (i = 0, len = ref.length; i < len; i++) {
      ot = ref[i];
      if (!ot.isHierarchy()) {
        continue;
      }
      ots.push(ot);
    }
    if (ots.length === 0) {
      delete request.hierarchy_filter_value;
    }
    if (this.filter.length > 0) {
      filter = this.filter[this.filter.length - 1];
    } else {
      filter = null;
    }
    if (filter) {
      request.hierarchy_filter_value = filter.result_object.id();
      ot_name = filter.result_object.objecttype();
    } else {
      request.hierarchy_filter_value = null;
    }
    if (filter) {
      request.search.push({
        type: "in",
        bool: "must",
        fields: [ot_name + "._id_parent"],
        "in": [request.hierarchy_filter_value]
      });
    } else {
      SearchHierarchyManager.addTopLevelFilter(this.getSearch(), request);
    }
    return this;
  };

  SearchHierarchyManager.addTopLevelFilter = function(search, request) {
    var filter_top, i, j, len, len1, ot, ref, ref1, sm;
    if (search.hasUserInput(request) || request.for_export) {
      return this;
    }
    filter_top = true;
    ref = search.getSearchManagers();
    for (i = 0, len = ref.length; i < len; i++) {
      sm = ref[i];
      if (!sm.filterTopLevel) {
        continue;
      }
      if (sm.filterTopLevel(request) !== true) {
        filter_top = false;
        break;
      }
    }
    if (!filter_top) {
      return this;
    }
    ref1 = search.getSearchObjecttypes(true);
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      ot = ref1[j];
      if (!ot.isHierarchy()) {
        continue;
      }
      if (!request.search) {
        request.search = [];
      }
      request.search.push({
        type: "in",
        bool: "must",
        fields: [ot.name() + "._id_parent"],
        "in": [null]
      });
    }
    return this;
  };

  SearchHierarchyManager.prototype.showResult = function(request, data) {
    var btn, div, i, len, path_separator_icon, ref, ro, updateViewportLayout;
    updateViewportLayout = (function(_this) {
      return function() {
        return Events.trigger({
          node: _this._container,
          type: "content-resize"
        });
      };
    })(this);
    if (!request.hierarchy_filter_value) {
      this.__layout.DOM.detach();
      updateViewportLayout();
      return;
    }
    this.__layout.empty("left");
    this.__layout.empty("center");
    this.__layout.empty("right");
    this.__layout.DOM.appendTo(this._container);
    if (this.filter.length === 0) {
      this.__layout.append(new LocaLabel({
        loca_key: "base.top_hierarchy_level"
      }), "center");
    } else {
      btn = new LocaButton({
        loca_key: "search.hierarchy.manager.button.back",
        icon: "left",
        onClick: (function(_this) {
          return function(ev) {
            var filter, offset;
            filter = _this.filter.pop();
            if (filter.query) {
              _this._searchInput.restoreQuery(filter.query);
            }
            offset = filter.offset || 0;
            return _this.getSearch().execute(new Request({
              offset: offset
            })).done(function() {
              var rc, result_object_div;
              rc = _this.getSearch().getResultContainer();
              result_object_div = rc.find("[global-object-id=\"" + (filter.result_object.getGlobalObjectId()) + "\"]");
              result_object_div.scrollIntoView();
              DOM.data(rc.find("[result-dynamic-loading]")[0], "loader").markLoadMe();
            });
          };
        })(this)
      });
      this.__layout.append(btn.DOM, "left");
      ro = this.filter[this.filter.length - 1].result_object;
      div = $div("ez5-search-hierarchy-manager-path");
      ref = ro.getPathData();
      for (i = 0, len = ref.length; i < len; i++) {
        data = ref[i];
        div.append(ro.renderCard2(false, false, false, data));
        path_separator_icon = new Icon({
          icon: ez5.icon_map.result_object_path_separator,
          "class": "ez5-path-separator"
        });
        div.append(path_separator_icon.DOM);
      }
      this.__layout.append(div, "center");
    }
    updateViewportLayout();
    return this;
  };

  return SearchHierarchyManager;

})(SearchManager);
// Generated by CoffeeScript 1.10.0
var SearchInput, SearchInputException,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SearchInput = (function(superClass) {
  extend(SearchInput, superClass);

  function SearchInput() {
    return SearchInput.__super__.constructor.apply(this, arguments);
  }

  SearchInput.prototype.initOpts = function() {
    SearchInput.__super__.initOpts.call(this);
    return this.addOpts({
      expert: {
        check: Search
      },
      search: {
        check: Search
      },
      searchTypeSelector: {
        check: SearchTypeSelector
      },
      init_from_data: {
        check: "PlainObject"
      },
      background_help_loca_key: {
        mandatory: true,
        "default": "search.input.background.help",
        check: String
      },
      linked_objecttypes: {
        check: "Array"
      },
      scope: {
        check: "Array"
      },
      min_length: {
        check: function(v) {
          return v >= 1;
        }
      }
    });
  };

  SearchInput.prototype.readOpts = function() {
    var i, inst, len, q, ref;
    SearchInput.__super__.readOpts.call(this);
    this.__add_init = [];
    this.query = [];
    this.__buttons = [];
    this.__inputLayout = new Toolbar({
      "class": "ez5-search-input",
      left: {
        "class": "ez5-search-input-left"
      },
      center: {
        "class": "ez5-search-input-query"
      },
      right: {
        "class": "ez5-search-input-right"
      }
    });
    if (this._expert) {
      this.__expertBtn = new LocaButton({
        loca_key: "search.input.button.expert",
        "class": "ez5-expert-search-button",
        appearance: CUI.__ng__ ? "normal" : "flat",
        onClick: (function(_this) {
          return function(ev) {
            return _this.__expertOpts.openPopover();
          };
        })(this)
      });
      this.__inputLayout.append(this.__expertBtn, "right", false);
    }
    if (this._init_from_data) {
      ref = this._init_from_data.query;
      for (i = 0, len = ref.length; i < len; i++) {
        q = ref[i];
        inst = window[q["class"]].newFromData(q.data);
        this.query.push(inst);
      }
    }
    return this;
  };

  SearchInput.prototype.replaceSearchInput = function(queryElement) {
    assert(!queryElement || queryElement instanceof QueryElement, "SearchInput.replaceSearchInput", "Parameter needs to be instance of QueryElement.", {
      parm: queryElement
    });
    this.empty();
    this.addPlaceholder();
    if (queryElement) {
      this.add(queryElement);
      this.addPlaceholder();
    }
    return this;
  };

  SearchInput.prototype.init = function() {
    var i, len, qi, ref;
    SearchInput.__super__.init.call(this);
    this.__container = this.__inputLayout.center();
    this.empty();
    ref = this.__add_init;
    for (i = 0, len = ref.length; i < len; i++) {
      qi = ref[i];
      this.add(qi);
    }
    if (this._searchTypeSelector) {
      this.__inputLayout.replace(this._searchTypeSelector.getButton(), "left", false);
    }
    this.__fixedSearch = new CollectionFixedSearchInsertToday({
      getSearchObjecttypes: (function(_this) {
        return function() {
          return _this.getSearch().getSearchObjecttypes(false);
        };
      })(this),
      onEvent: (function(_this) {
        return function(ev_types) {
          var j, len1, q, ref1, results;
          if (ev_types.OBJECT_INSERT) {
            _this.replaceSearchInput(_this.__fixedSearch.getQueryElement());
          }
          if (ev_types.OBJECT_INDEX) {
            ref1 = _this.query;
            results = [];
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              q = ref1[j];
              if (q instanceof QueryElementCollection && q.getCollection() === _this.__fixedSearch) {
                q.render();
                _this.getSearch().emptyCollection().execute();
                break;
              } else {
                results.push(void 0);
              }
            }
            return results;
          }
        };
      })(this)
    });
    if (this._expert) {
      this.__expertOpts = new SearchExpertOptions({
        search: this._expert,
        searchInput: this,
        button: this.__expertBtn
      });
    }
    Events.listen({
      node: this.__inputLayout,
      type: "click",
      call: (function(_this) {
        return function(ev) {
          ev.stopPropagation();
          return _this.focusQueryContainer();
        };
      })(this)
    });
    this.registerEvents();
    this.__add_init = [];
    return this;
  };

  SearchInput.prototype.__triggerContentResize = function() {
    if (!this.__container) {
      return;
    }
    return Events.trigger({
      node: this.__container,
      type: "content-resize"
    });
  };

  SearchInput.prototype.getPlaceholder = function() {
    return new QueryElementInput({
      search: this._expert || this._search,
      linked_objecttypes: this._linked_objecttypes,
      scope: this._scope,
      min_length: this._min_length
    });
  };

  SearchInput.prototype.addPlaceholder = function() {
    var qi;
    assert(this._expert || this._search, "SearchInput.addPlaceholder", "opts.expert or opts.search needs to be set", {
      opts: this.opts
    });
    qi = this.getPlaceholder();
    if (!this.__container) {
      this.__add_init.push(qi);
      return null;
    } else {
      return this.add(qi);
    }
  };

  SearchInput.prototype.objecttypesUpdated = function() {
    var i, len, q, ref, ref1;
    if ((ref = this.__expertOpts) != null) {
      ref.objecttypesUpdated();
    }
    this.updateBackgroundHelp();
    ref1 = this.query;
    for (i = 0, len = ref1.length; i < len; i++) {
      q = ref1[i];
      q.objecttypesUpdated();
    }
    return this;
  };

  SearchInput.prototype.getQuery = function() {
    return this.query;
  };

  SearchInput.prototype.getAsString = function() {
    var i, len, parts, q, ref, str;
    parts = [];
    ref = this.query;
    for (i = 0, len = ref.length; i < len; i++) {
      q = ref[i];
      str = q.getAsString();
      if (str) {
        parts.push(str);
      }
    }
    return parts.join(" ");
  };

  SearchInput.prototype.getInputLayout = function() {
    return this.__inputLayout;
  };

  SearchInput.prototype.updateBackgroundHelp = function() {
    var count;
    if (!this.__backgroundHelp) {
      return;
    }
    if (this._searchTypeSelector) {
      count = this._searchTypeSelector.getLastCount();
    } else {
      count = this.getSearch().getSearchBasics().getCount();
    }
    return this.__backgroundHelp.setText($$(this._background_help_loca_key, {
      count: ez5.format_number(count)
    }));
  };

  SearchInput.prototype.empty = function() {
    this.query = [];
    this.__container.empty();
    if (!isEmpty(ez5.loca.get_key("search.input.background.help"))) {
      this.__backgroundHelp = new Label({
        "class": "ez5-search-input-background-help",
        text: ""
      });
      this.__container.append(this.__backgroundHelp.DOM);
      this.updateBackgroundHelp();
    } else {
      this.__backgroundHelp = null;
    }
    return this;
  };

  SearchInput.prototype.emptyRequest = function() {
    return this.empty();
  };

  SearchInput.prototype.storeQuery = function() {
    var i, len, q, query;
    query = this.query.slice();
    for (i = 0, len = query.length; i < len; i++) {
      q = query[i];
      q.getElement().detach();
    }
    this.empty();
    this.addPlaceholder();
    return query;
  };

  SearchInput.prototype.restoreFromStored = function(searchInput) {
    var i, len, q, query, squery;
    squery = searchInput.getQuery();
    query = [];
    for (i = 0, len = squery.length; i < len; i++) {
      q = squery[i];
      query.push(this.getPlaceholder());
      query.push(q);
    }
    query.push(this.getPlaceholder());
    this.restoreQuery(query);
    return CUI.resolvedPromise();
  };

  SearchInput.inpMap = {
    QueryElementToken: "token",
    QueryElementFulltext: "fulltext",
    QueryElementSystemObjectId: "sid"
  };

  SearchInput.prototype.initFromUrlData = function(url_data) {
    var _inp, cls, data, i, inp, k, key, len, q, query, ref, ref1, si, v, value;
    if (url_data.input) {
      si = new SearchInput({
        init_from_data: JSON.parse(url_data.input[0])
      });
      return this.restoreFromStored(si);
    } else {
      query = [];
      this.empty();
      this.addPlaceholder();
      if (url_data.inp) {
        ref = url_data.inp;
        for (i = 0, len = ref.length; i < len; i++) {
          _inp = ref[i];
          if (isEmpty(_inp.trim())) {
            continue;
          }
          inp = _inp.split(":");
          q = null;
          if (inp.length === 1) {
            value = QueryElementBracket.getConstructorValueFromUrlValue(_inp);
            q = new QueryElementBracket({
              char: value
            });
          } else {
            key = inp.splice(0, 1)[0];
            ref1 = SearchInput.inpMap;
            for (k in ref1) {
              v = ref1[k];
              if (v !== key) {
                continue;
              }
              cls = window[k];
              data = cls.getConstructorValueFromUrlValue(inp.join(":"));
              q = new cls(data);
              break;
            }
            if (!q && inp.length === 1) {
              data = QueryElementLinkedObjecttype.getConstructorValueFromUrlValue(_inp);
              q = new QueryElementLinkedObjecttype(data);
            }
          }
          if (!q) {
            continue;
          }
          query.push(this.getPlaceholder());
          query.push(q);
        }
      }
      query.push(this.getPlaceholder());
      return this.restoreQuery(query);
    }
  };

  SearchInput.prototype.getStoreAsUrlData = function(url_data) {
    var cls_map, count, i, idx, inp, len, q, ref, sd;
    inp = [];
    count = 0;
    ref = this.query;
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      q = ref[idx];
      if (q instanceof QueryElementInput) {
        continue;
      }
      sd = q.getStoreDataForUrlValue();
      count += 1;
      if (isEmpty(sd)) {
        continue;
      }
      assert(isString(sd), "SearchInput.getStoreAsUrlData", "QueryElement needs to return String to store for url", {
        data: sd,
        queryElement: q
      });
      cls_map = SearchInput.inpMap[getObjectClass(q)];
      if (cls_map) {
        inp.push(cls_map + ":" + sd);
      } else if (q instanceof QueryElementBracket) {
        inp.push(sd);
      } else if (q instanceof QueryElementLinkedObjecttype) {
        inp.push(sd);
      } else {
        console.info("Unable to serialize " + (getObjectClass(q)) + ", falling back to JSON.");
        break;
      }
    }
    if (inp.length === count) {
      url_data.inp = inp;
    } else {
      sd = this.getStoreData().SearchInput;
      if (sd.query.length > 0) {
        url_data.input = JSON.stringify(sd);
      }
    }
    return url_data;
  };

  SearchInput.prototype.restoreQuery = function(query) {
    var i, len, q;
    this.empty();
    for (i = 0, len = query.length; i < len; i++) {
      q = query[i];
      this.add(q);
    }
    return this;
  };

  SearchInput.prototype.registerEvents = function() {
    Events.listen({
      node: this.__container,
      type: "keydown",
      call: (function(_this) {
        return function(ev) {
          if (ev.keyCode() === 37) {
            ev.stopPropagation();
            ev.preventDefault();
            _this.moveLeft();
          }
          if (ev.keyCode() === 39) {
            ev.stopPropagation();
            ev.preventDefault();
            _this.moveRight();
          }
        };
      })(this)
    });
    return Events.listen({
      node: this.__container,
      type: "keyup",
      call: (function(_this) {
        return function(ev) {
          var $target, _idx, i, idx, len, qe, ref, ref1;
          if ((ref = ev.keyCode()) === 46 || ref === 8) {
            $target = $(ev.getTarget());
            ref1 = _this.query;
            for (idx = i = 0, len = ref1.length; i < len; idx = ++i) {
              qe = ref1[idx];
              if (!CUI.DOM.closest($target, qe.element)) {
                continue;
              }
              if (qe instanceof QueryElementInput) {
                _idx = idx;
              } else {
                _idx = _this.removeQueryElement(qe);
              }
              if (_idx > 0) {
                _this.triggerFocusOnIdx(_idx - 1);
              }
              break;
            }
          }
        };
      })(this)
    });
  };

  SearchInput.prototype.focusQueryContainer = function() {
    if (this.query.length) {
      return this.query[this.query.length - 1].triggerFocus();
    }
  };

  SearchInput.prototype.triggerFocusOnIdx = function(idx) {
    return this.query[idx].triggerFocus();
  };

  SearchInput.prototype.prepareSearch = function() {
    var i, len, q, ref;
    ref = this.query;
    for (i = 0, len = ref.length; i < len; i++) {
      q = ref[i];
      if (q instanceof QueryElementInput) {
        q.addInput();
      }
    }
  };

  SearchInput.prototype.removeQueryElementLeft = function() {
    var _idx, i, idx, len, qe, ref, results;
    ref = this.query;
    results = [];
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      qe = ref[idx];
      if (idx === 0) {
        continue;
      }
      if (!qe.hasFocus()) {
        continue;
      }
      if (qe instanceof QueryElementInput) {
        _idx = this.removeQueryElement(this.query[idx - 1]);
        if (_idx > 0) {
          this.triggerFocusOnIdx(_idx - 1);
        }
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  SearchInput.prototype.removeQueryElement = function(queryElement) {
    var destroy, idx;
    idx = idxInArray(queryElement, this.query);
    if (idx === -1) {
      return idx;
    }
    destroy = (function(_this) {
      return function(qe) {
        qe.destroy();
        if (qe._rendered_element) {
          return CUI.DOM.remove(qe._rendered_element);
        }
      };
    })(this);
    destroy(queryElement);
    destroy(this.query[idx + 1]);
    this.__triggerContentResize();
    this.query.splice(idx, 2);
    this.updateSearchButtonState();
    return idx;
  };

  SearchInput.prototype.addAfterIdx = function(queryElement, after_idx) {
    this.query.splice(after_idx + 1, 0, queryElement);
    queryElement.setSearchInput(this);
    queryElement._rendered_element = queryElement.render();
    if (queryElement._rendered_element) {
      if (after_idx === -1) {
        this.__container.append(queryElement._rendered_element);
      } else {
        this.query[after_idx]._rendered_element.after(queryElement._rendered_element);
      }
    }
    queryElement.triggerFocus();
    this.__triggerContentResize();
    this.updateSearchButtonState();
    return after_idx + 1;
  };

  SearchInput.prototype.updateSearchButtonState = function() {
    var error, ex, is_empty, set_class;
    is_empty = null;
    set_class = (function(_this) {
      return function() {
        if (is_empty) {
          return _this.getInputLayout().addClass("ez5-search-input-is-empty");
        } else {
          return _this.getInputLayout().removeClass("ez5-search-input-is-empty");
        }
      };
    })(this);
    if (!this.__container || !this.getSearch()) {
      is_empty = true;
      set_class();
      return;
    }
    try {
      is_empty = this.getSearchFilter().length === 0;
      this.getSearch().getSearchButton().enable();
    } catch (error) {
      ex = error;
      if (ex instanceof UserError) {
        is_empty = false;
        console.warn("SearchInput.parseInput:", ex.getError());
        this.getSearch().getSearchButton().disable();
      } else {
        throw ex;
      }
    }
    set_class();
  };

  SearchInput.prototype.add = function(queryElement, afterQueryElement) {
    var after_idx, i, idx, len, q, ref;
    if (!this.__container) {
      assert(!afterQueryElement, "SearchInput.add", "2. parameter only supported with container.");
      this.__add_init.push(queryElement);
      return null;
    }
    after_idx = this.query.length - 1;
    ref = this.query;
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      q = ref[idx];
      if (afterQueryElement) {
        if (afterQueryElement === q) {
          after_idx = idx;
          break;
        } else {
          continue;
        }
      }
      if (q.hasFocus()) {
        after_idx = idx;
        break;
      }
    }
    return this.addAfterIdx(queryElement, after_idx);
  };

  SearchInput.prototype.moveLeft = function() {
    var i, idx, len, q, ref;
    ref = this.query;
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      q = ref[idx];
      if (idx > 0 && q.hasFocus()) {
        this.query[idx - 1].triggerFocus();
        break;
      }
    }
    return this;
  };

  SearchInput.prototype.moveRight = function() {
    var i, idx, len, q, ref;
    ref = this.query;
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      q = ref[idx];
      if (idx < this.query.length - 1 && q.hasFocus()) {
        this.query[idx + 1].triggerFocus();
        break;
      }
    }
    return this;
  };

  SearchInput.prototype.isEmpty = function() {
    var error, ex;
    try {
      return this.getSearchFilter().length === 0;
    } catch (error) {
      ex = error;
      if (ex instanceof UserError) {
        return true;
      }
      throw ex;
    }
  };

  SearchInput.prototype.getSearchFilter = function() {
    var filter, search;
    filter = SearchInput.parseInput(this.query);
    if (filter.search.length === 0) {
      search = [];
    } else {
      search = [filter];
    }
    return search;
  };

  SearchInput.prototype.getStoreData = function(sd) {
    var i, len, q, qsd, ref;
    if (sd == null) {
      sd = {};
    }
    SearchInput.__super__.getStoreData.call(this, sd);
    sd.SearchInput = {
      query: []
    };
    ref = this.query;
    for (i = 0, len = ref.length; i < len; i++) {
      q = ref[i];
      qsd = q.getStoreData();
      if (isNull(qsd)) {
        continue;
      }
      sd.SearchInput.query.push({
        "class": getObjectClass(q),
        data: qsd
      });
    }
    return sd;
  };

  SearchInput.prototype.ignoreSearchManager = function(searchManager) {
    var i, ign, j, len, len1, q, ref, ref1;
    ref = this.query;
    for (i = 0, len = ref.length; i < len; i++) {
      q = ref[i];
      ref1 = q.ignoreSearchManagers();
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        ign = ref1[j];
        if (searchManager instanceof ign) {
          return true;
        }
      }
    }
    return false;
  };

  SearchInput.prototype.addToRequest = function(request) {
    var i, len, q, ref, sf;
    ref = this.query;
    for (i = 0, len = ref.length; i < len; i++) {
      q = ref[i];
      if (q instanceof QueryElementInput) {
        q.setEmpty();
      }
    }
    sf = this.getSearchFilter();
    if (!request.search) {
      request.search = [];
    }
    request.search.push.apply(request.search, sf);
    return this;
  };

  SearchInput.prototype.blurOtherQueryElements = function(queryElementExclude) {
    var i, len, q, ref, results;
    ref = this.query;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      q = ref[i];
      if (q !== queryElementExclude) {
        results.push(q.blur());
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  SearchInput.prototype.destroy = function() {
    var i, len, q, ref, ref1;
    this.__container = null;
    if ((ref = this.__fixedSearch) != null) {
      ref.destroy();
    }
    if (this.query) {
      ref1 = this.query;
      for (i = 0, len = ref1.length; i < len; i++) {
        q = ref1[i];
        q.destroy();
      }
    }
    return SearchInput.__super__.destroy.call(this);
  };

  SearchInput.parseInput = function(query, testmode) {
    var get_bool, get_item_print, idx, parse, top_level_filter;
    if (testmode == null) {
      testmode = false;
    }
    idx = -1;
    top_level_filter = {
      type: "complex",
      __filter: "SearchInput",
      search: []
    };
    get_bool = function(_bind) {
      switch (_bind) {
        case "OR":
          return "should";
        case "AND":
          return "must";
        default:
          return void 0;
      }
    };
    get_item_print = function(item) {
      if (item === "(" || item === ")") {
        return item;
      }
      return $$("query.element.bracket." + item.toLowerCase());
    };
    parse = function(filter, depth, _not) {
      var _f, add_to_filter, bind, bracket, finish_up, item, item_print, set_must;
      if (depth == null) {
        depth = 0;
      }
      if (_not == null) {
        _not = null;
      }
      bind = null;
      set_must = function() {
        var i, len, ref, s;
        ref = filter.search;
        for (i = 0, len = ref.length; i < len; i++) {
          s = ref[i];
          if (s.bool == null) {
            s.bool = "must";
          }
        }
      };
      add_to_filter = function(map) {
        var base, ref;
        if (!map.bool) {
          map.bool = get_bool(bind);
        }
        filter.search.push(map);
        if (((ref = map.bool) === "should" || ref === "must") && filter.search.length >= 2) {
          if ((base = filter.search[filter.search.length - 2]).bool == null) {
            base.bool = map.bool;
          }
        }
        bind = null;
        return map;
      };
      finish_up = (function(_this) {
        return function() {
          if (bind) {
            throw new SearchInputException({
              label: "search.input.error.not_allowed",
              label_attrs: {
                item: get_item_print(bind)
              }
            });
          }
          if (_not) {
            throw new SearchInputException({
              label: "search.input.error.not_allowed",
              label_attrs: {
                item: get_item_print("not")
              }
            });
          }
          return set_must();
        };
      })(this);
      while (true) {
        idx = idx + 1;
        if (idx === query.length) {
          if (depth > 0) {
            if (_not) {
              throw new SearchInputException({
                label: "search.input.error.not_allowed",
                label_attrs: {
                  item: get_item_print("not")
                }
              });
            } else {
              throw new SearchInputException({
                label: "search.input.error.missing_parentheses"
              });
            }
          }
          finish_up();
          return;
        }
        item = query[idx];
        if (item instanceof QueryElementInput && item.isEmpty()) {
          continue;
        }
        if (isString(item) && item.trim().length === 0) {
          continue;
        }
        if (item instanceof QueryElementBracket) {
          item = item.getChar();
          bracket = true;
        } else {
          if (testmode && (item === "(" || item === ")" || item === "AND" || item === "OR" || item === "NOT")) {
            bracket = true;
          } else {
            bracket = false;
          }
        }
        if (bracket) {
          item_print = get_item_print(item);
        } else {
          item_print = null;
        }
        if (testmode) {
          console.debug("parse[" + depth + "] #" + idx + ":", item, "bind: ", bind, "not:", _not, "item_print:", item_print);
        }
        if (bracket) {
          switch (item) {
            case "(":
              _f = add_to_filter({
                type: "complex",
                search: []
              });
              parse(_f, depth + 1);
              if (_not) {
                _not = null;
                finish_up();
                return;
              }
              break;
            case ")":
              if (depth === 0) {
                throw new SearchInputException({
                  label: "search.input.error.not_found",
                  label_attrs: {
                    item: "("
                  }
                });
              }
              if (filter.search.length === 0) {
                throw new SearchInputException({
                  label: "search.input.error.nothing_in_parentheses"
                });
              }
              finish_up();
              return;
            case "AND":
            case "OR":
              if (filter.search.length === 0 || bind || _not) {
                throw new SearchInputException({
                  label: "search.input.error.not_allowed",
                  label_attrs: {
                    item: item_print
                  }
                });
              }
              bind = item;
              break;
            case "NOT":
              if (_not) {
                throw new SearchInputException({
                  label: "search.input.error.not_allowed",
                  label_attrs: {
                    item: item_print
                  }
                });
              }
              _f = {
                __filter: "NOT",
                bool: "must_not",
                type: "complex",
                search: []
              };
              if (bind === "OR") {
                add_to_filter({
                  type: "complex",
                  search: [_f]
                });
              } else {
                add_to_filter(_f);
              }
              parse(_f, depth + 1, true);
          }
        } else {
          if (isString(item)) {
            add_to_filter({
              item: item
            });
          } else {
            _f = item.getSearchFilter();
            if (_f === false) {
              return false;
            }
            if (_f) {
              add_to_filter(_f);
            }
          }
          if (_not) {
            _not = null;
            finish_up();
            return;
          }
        }
      }
    };
    parse(top_level_filter);
    return top_level_filter;
  };

  SearchInput.testParseInput = function() {
    var error, ex, i, len, ref, str;
    ref = ["A ( B AND C ) NOT D", "A ( B AND C ) OR NOT D1", "A ( B AND C ) NOT ( E OR D )", "A ( B AND C ) OR NOT ( E D AND U )", "A ( B AND C ) NOT AND D", "A ( B AND C ) NOT NOT D", " ", "A0 OR B1", "A0 OR OR B1", "A0 ( ) B1", "A0 ( B8 AND ) B1", "A1 B1 AND C1 OR C2 AND C3", "A ( B AND C OR ( D AND E ) ) D", "NOT A"];
    for (i = 0, len = ref.length; i < len; i++) {
      str = ref[i];
      try {
        console.info("====", str, "====");
        console.debug("OK:", this.parseInput(str.split(/\s+/), true));
      } catch (error) {
        ex = error;
        if (ex instanceof UserError) {
          console.error(ex.getError());
        } else {
          throw ex;
        }
      }
    }
  };

  return SearchInput;

})(SearchManager);

SearchInputException = (function(superClass) {
  extend(SearchInputException, superClass);

  function SearchInputException() {
    return SearchInputException.__super__.constructor.apply(this, arguments);
  }

  return SearchInputException;

})(UserError);
// Generated by CoffeeScript 1.10.0
var SearchExpertOptions,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SearchExpertOptions = (function(superClass) {
  extend(SearchExpertOptions, superClass);

  function SearchExpertOptions() {
    this.setOptionsForListView = bind(this.setOptionsForListView, this);
    return SearchExpertOptions.__super__.constructor.apply(this, arguments);
  }

  SearchExpertOptions.prototype.initOpts = function() {
    SearchExpertOptions.__super__.initOpts.call(this);
    return this.addOpts({
      button: {
        mandatory: true,
        check: Button
      },
      searchInput: {
        mandatory: true,
        check: SearchInput
      }
    });
  };

  SearchExpertOptions.prototype.readOpts = function() {
    this.opts.mode = "expert";
    this.opts.data = {};
    SearchExpertOptions.__super__.readOpts.call(this);
    this.expertOptionsButton = this._button;
    this.objecttype_select_data = {
      ot_name: null
    };
    return this;
  };

  SearchExpertOptions.prototype.hasSearchFilterExpert = function() {
    return this.__searchFilterExpert(true, false);
  };

  SearchExpertOptions.prototype.getSearchFilterExpert = function() {
    return this.__searchFilterExpert(true, true);
  };

  SearchExpertOptions.prototype.addSearchFilterExpert = function() {
    return this.__searchFilterExpert(false, false);
  };

  SearchExpertOptions.prototype.__searchFilterExpert = function(dry_run, get_filters) {
    var _d, _f, data, filters, fn, has_filters, info, k, ot_name, qf, ref, ref1, set_data, v;
    has_filters = false;
    if (get_filters) {
      filters = [];
    }
    set_data = [];
    ref = this.data;
    for (ot_name in ref) {
      _d = ref[ot_name];
      for (fn in _d) {
        data = _d[fn];
        _f = data.field.getSearchFilter(data.data);
        if (!_f) {
          continue;
        }
        set_data.push(data);
        has_filters = true;
        if (!get_filters && dry_run) {
          return true;
        }
        info = {
          field: data.field,
          data: {}
        };
        ref1 = data.data;
        for (k in ref1) {
          v = ref1[k];
          if (k.endsWith(":field")) {
            continue;
          }
          info.data[k] = copyObject(v, true);
        }
        qf = new QueryElementField(info);
        if (get_filters) {
          filters.push(qf.getSearchFilter());
        }
        if (!dry_run) {
          this._searchInput.add(qf);
          this._searchInput.addPlaceholder();
        }
      }
    }
    if (get_filters) {
      return filters;
    } else if (!dry_run) {
      return set_data;
    } else {
      return has_filters;
    }
  };

  SearchExpertOptions.prototype.openPopover = function() {
    if (!this.popover) {
      this.doneButton = new LocaButton({
        loca_key: "search.expert.options.button.apply",
        onClick: (function(_this) {
          return function(ev) {
            if (ev.hasModifierKey()) {
              CUI.debug("SearchExpertOptions -----------------");
              CUI.debug(_this.getFieldsRenderer().dump());
              CUI.debug("Search Filters:", _this.getSearchFilterExpert());
              CUI.debug(" -----------------");
              return;
            }
            return _this.closePopover();
          };
        })(this)
      });
      this.popover = new Popover({
        "class": "ez5-search-expert-options-popover",
        element: this.expertOptionsButton,
        cancel: true,
        backdrop: {
          policy: "click"
        },
        fill_screen_button: true,
        fill_screen_button_tooltip: {
          text: $$("base.fill_screen.tooltip")
        },
        cancel_action: "hide",
        placement: "s",
        placements: ["s"],
        pane: {
          "class": "ez5-search-expert-options",
          header_left: [
            new Label({
              text: $$("main.search.expert.title")
            }), this.getObjecttypeSelect()
          ],
          content: (function(_this) {
            return function() {
              var content;
              content = _this.getContent();
              _this.updateForm().done(function() {
                return _this.fieldsUpdated();
              });
              return content;
            };
          })(this),
          footer_left: (function(_this) {
            return function() {
              return {
                loca_key: "search.expert.options.help.button",
                onClick: function() {
                  return CUI.alert({
                    "class": 'ez5-search-expert-hotkeys',
                    title: $$("search.expert.options.help.title"),
                    text: $$("search.expert.options.help.text"),
                    markdown: true,
                    markdown_opts: {
                      sanitize: false
                    }
                  });
                }
              };
            };
          })(this),
          footer_right: (function(_this) {
            return function() {
              return _this.doneButton;
            };
          })(this)
        }
      });
    }
    return this.popover.show();
  };

  SearchExpertOptions.prototype.popoverTitle = function() {
    return this.title();
  };

  SearchExpertOptions.prototype.init = function() {
    SearchExpertOptions.__super__.init.call(this);
    this.link_otm = new ObjecttypeManager();
    this.link_otm.addLinkedObjectFields(this._search.getLinkedObjectFields(this.mode));
    return this;
  };

  SearchExpertOptions.prototype.getObjecttypeSelect = function() {
    var disabled, found, i, j, l, len, len1, len2, opt, ot, ot_count, ot_count_enabled, ot_names, ot_opts, ref, sb;
    ot_count = this._search.getSearchObjecttypes(false).length;
    ot_count_enabled = 0;
    if (!ot_count) {
      return;
    }
    sb = this._search.getSearchBasics();
    ot_opts = [];
    ot_opts.push({
      text: $$("main.search.expert.common"),
      disabled: !sb || sb.getObjecttypes().length <= 1,
      value: "_COMMONS"
    });
    ref = this.otm.objecttypes;
    for (i = 0, len = ref.length; i < len; i++) {
      ot = ref[i];
      disabled = !this.objecttypeIsUserSelected([ot.name()]);
      if (!disabled) {
        ot_count_enabled = ot_count_enabled + 1;
      }
      ot_opts.push({
        value: ot.name(),
        disabled: disabled,
        text: ot.nameLocalized()
      });
    }
    ot_opts.sort(function(a, b) {
      if (a.value === "_COMMONS") {
        return -1;
      }
      if (b.value === "_COMMONS") {
        return -1;
      }
      return compareIndex(a.text.toLocaleUpperCase(), b.text.toLocaleUpperCase());
    });
    if (ot_count_enabled <= 1) {
      ot_opts[0].disabled = true;
    }
    if (this.objecttype_select_data.ot_name) {
      found = false;
      for (j = 0, len1 = ot_opts.length; j < len1; j++) {
        opt = ot_opts[j];
        if (opt.value === this.objecttype_select_data.ot_name && !opt.disabled) {
          found = true;
          break;
        }
      }
      if (!found) {
        this.objecttype_select_data.ot_name = null;
      }
    }
    if (!this.objecttype_select_data.ot_name) {
      for (l = 0, len2 = ot_opts.length; l < len2; l++) {
        opt = ot_opts[l];
        if (!opt.disabled) {
          this.objecttype_select_data.ot_name = opt.value;
          break;
        }
      }
    }
    if (!this.objecttype_select_button) {
      ot_names = (function() {
        var len3, m, ref1, results;
        ref1 = this._search.getSearchObjecttypes(true);
        results = [];
        for (m = 0, len3 = ref1.length; m < len3; m++) {
          ot = ref1[m];
          results.push(ot.name());
        }
        return results;
      }).call(this);
      if (ot_names.length === 0) {
        this.objecttype_select_data.ot_name = null;
      } else if (ot_names.length === 1) {
        this.objecttype_select_data.ot_name = ot_names[0];
      } else if (this.objecttype_select_data.ot_name && $.inArray(this.objecttype_select_data.ot_name, ot_names) === -1) {
        this.objecttype_select_data.ot_name = "_COMMONS";
      }
    }
    if (ot_count === 1) {
      return;
    }
    return new Select({
      mark_changed: false,
      name: "ot_name",
      tooltip: {
        text: $$("search.export.options.select.tooltip")
      },
      options: ot_opts,
      onDataChanged: (function(_this) {
        return function(data, field) {
          _this.updateForm();
          return _this.popover.autoSize();
        };
      })(this),
      data: this.objecttype_select_data
    }).start();
  };

  SearchExpertOptions.prototype.getCurrentGroup = function() {
    return this.objecttype_select_data.ot_name;
  };

  SearchExpertOptions.prototype.closePopover = function() {
    var data, field_data, i, k, len, ref, set_data, v;
    set_data = this.addSearchFilterExpert();
    this.popover.hide();
    if (set_data.length > 0) {
      for (i = 0, len = set_data.length; i < len; i++) {
        data = set_data[i];
        field_data = null;
        ref = data.data;
        for (k in ref) {
          v = ref[k];
          if (k.endsWith(":field")) {
            field_data = v;
            continue;
          }
          delete data.data[k];
        }
        assert(field_data, "SearchExpertOptions.closePopover", "field_data not found", {
          data: data
        });
        field_data.listViewColumn.updateSearch();
      }
    }
    return this;
  };

  SearchExpertOptions.prototype.fieldsUpdated = function() {
    if (!this.hasSearchFilterExpert()) {
      return this.doneButton.disable();
    } else {
      return this.doneButton.enable();
    }
  };

  SearchExpertOptions.prototype.setOptionsForListView = function(opts) {
    opts.data = opts.data[opts.field._ot_name][opts.field.fullName()].data;
    return opts.top_level_data = opts.data;
  };

  SearchExpertOptions.prototype.objecttypesUpdated = function() {
    this.init();
    return this.popoverDestroy();
  };

  SearchExpertOptions.prototype.popoverDestroy = function() {
    var ref;
    if ((ref = this.popover) != null) {
      ref.destroy();
    }
    return this.popover = null;
  };

  SearchExpertOptions.prototype.destroy = function() {
    SearchExpertOptions.__super__.destroy.call(this);
    this.popoverDestroy();
  };

  return SearchExpertOptions;

})(FieldPopoverManager);
// Generated by CoffeeScript 1.10.0
var QueryElement,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

QueryElement = (function(superClass) {
  extend(QueryElement, superClass);

  function QueryElement() {
    return QueryElement.__super__.constructor.apply(this, arguments);
  }

  QueryElement.prototype.initOpts = function() {
    QueryElement.__super__.initOpts.call(this);
    return this.addOpts({
      element: {
        check: function(v) {
          return isElement(v);
        }
      }
    });
  };

  QueryElement.prototype.readOpts = function() {
    QueryElement.__super__.readOpts.call(this);
    if (this._element) {
      return this.setElement(this._element);
    }
  };

  QueryElement.prototype.setElement = function(element) {
    var func, i, k, len, ref, results;
    this.element = element;
    this.element.attr("tabindex", "0");
    ref = ["focus", "blur", "click", "input", "paste", "keyup", "keydown", "mousedown", "mouseup"];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      func = this[k];
      if (!CUI.isFunction(func)) {
        continue;
      }
      results.push((function(_this) {
        return function(func) {
          return Events.listen({
            type: k,
            node: _this.element,
            call: function(ev, info) {
              return func.call(_this, ev, info);
            }
          });
        };
      })(this)(func));
    }
    return results;
  };

  QueryElement.prototype.render = function() {
    return this.element;
  };

  QueryElement.prototype.getElement = function() {
    return this.element;
  };

  QueryElement.prototype.getAsString = function() {
    return null;
  };

  QueryElement.prototype.setSearchInput = function(searchInput) {
    assert(searchInput instanceof SearchInput, (getObjectClass(this)) + ".setSearchInput", "search needs to be instance of SearchInput", {
      searchInput: searchInput
    });
    return this._searchInput = searchInput;
  };

  QueryElement.prototype.getSearchInput = function() {
    return this._searchInput;
  };

  QueryElement.prototype.getCursor = function() {
    if (this.element[0].selectionStart === this.element[0].selectionEnd) {
      return this.element[0].selectionStart;
    } else {
      return null;
    }
  };

  QueryElement.prototype.objecttypesUpdated = function() {};

  QueryElement.prototype.triggerFocus = function() {
    return this.element.focus();
  };

  QueryElement.prototype.triggerBlur = function() {
    return this.element.blur();
  };

  QueryElement.prototype.focus = function(ev) {
    var ref;
    this.element.addClass("focus");
    if ((ref = this.getSearchInput()) != null) {
      ref.getInputLayout().addClass("ez5-search-input-has-focus");
    }
    this.updateSearchInput();
    return this;
  };

  QueryElement.prototype.blur = function(ev) {
    var ref;
    this.element.removeClass("focus");
    if ((ref = this.getSearchInput()) != null) {
      ref.getInputLayout().removeClass("ez5-search-input-has-focus");
    }
    this.updateSearchInput();
    return this;
  };

  QueryElement.prototype.updateSearchInput = function() {
    var ref;
    return (ref = this.getSearchInput()) != null ? ref.updateSearchButtonState() : void 0;
  };

  QueryElement.prototype.hasFocus = function(ev) {
    return this.element.hasClass("focus");
  };

  QueryElement.prototype.getSearchTerm = function() {
    return "";
  };

  QueryElement.prototype.ignoreSearchManagers = function() {
    return [];
  };

  QueryElement.prototype.removeFromQueryManager = function() {
    return this.getSearchInput().removeQueryElement(this);
  };

  QueryElement.prototype.destroy = function() {
    return this.element.remove();
  };

  QueryElement.prototype.getStoreData = function() {};

  QueryElement.prototype.getStoreDataForUrlValue = function() {};

  QueryElement.newFromData = function(data) {
    return new this(data);
  };

  return QueryElement;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var QueryElementSpan,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

QueryElementSpan = (function(superClass) {
  extend(QueryElementSpan, superClass);

  function QueryElementSpan() {
    return QueryElementSpan.__super__.constructor.apply(this, arguments);
  }

  QueryElementSpan.prototype.readOpts = function() {
    QueryElementSpan.__super__.readOpts.call(this);
    this.__badgeLayout = new HorizontalLayout({
      "class": "query-element-span " + this.getClass(),
      maximize: false,
      right: {},
      left: {}
    });
    this.__badgeLayout.append(this.getRemoveButton(), "right", false);
    return this.setElement(this.__badgeLayout.DOM);
  };

  QueryElementSpan.prototype.getClass = function() {
    return "";
  };

  QueryElementSpan.prototype.getRemoveButton = function() {
    var x_btn;
    return x_btn = new LocaButton({
      icon: "remove",
      loca_key: "query.element.remove",
      appearance: "flat",
      tabindex: false,
      size: "mini",
      onClick: (function(_this) {
        return function() {
          return _this.removeFromQueryManager();
        };
      })(this)
    });
  };

  QueryElementSpan.prototype.popoverContent = function() {
    return $pre().html(toHtml(dump(this.getSearchFilter())));
  };

  QueryElementSpan.prototype.render = function() {
    return this.renderBadge(this.getBadge());
  };

  QueryElementSpan.prototype.getSearchFilter = function() {
    return getObjectClass(this) + ".getSearchFilter needs to be overwritten";
  };

  QueryElementSpan.prototype.renderBadge = function(__badge) {
    this.__badge = __badge;
    if (isPromise(this.__badge)) {
      this.__badge.done((function(_this) {
        return function(_badge) {
          return _this.renderBadge(_badge);
        };
      })(this));
    } else {
      if (!isEmpty(this.__badge.name) || this.__badge.icon) {
        this.__badgeLayout.replace(new Label({
          "class": "query-element-span-type-label",
          icon: this.__badge.icon,
          text: this.__badge.name
        }), "left");
      } else {
        this.__badgeLayout.empty("left");
      }
      this.__badgeLayout.replace(new Label({
        "class": "query-element-span-text-label",
        text: this.__badge.value
      }), "center");
    }
    return this.element;
  };

  QueryElementSpan.prototype.click = function(ev) {
    this.triggerFocus();
    if (ez5.session.isDebug()) {
      if (ev.hasModifierKey()) {
        console.debug(this);
      } else {
        this.openPopover();
      }
    }
    return ev.stopPropagation();
  };

  QueryElementSpan.prototype.openPopover = function() {
    this.popover = new Popover({
      element: this.element,
      pane: {
        header_center: getObjectClass(this),
        content: (function(_this) {
          return function() {
            var vl;
            return vl = new VerticalList({
              content: [
                new Label({
                  text: _this.__badge.name
                }), new Label({
                  text: _this.__badge.value
                }), _this.popoverContent()
              ]
            });
          };
        })(this)
      }
    });
    return this.popover.show();
  };

  QueryElementSpan.prototype.closePopover = function() {
    if (this.popover) {
      this.popover.destroy();
      return this.popover = null;
    }
  };

  QueryElementSpan.prototype.destroy = function() {
    this.closePopover();
    return QueryElementSpan.__super__.destroy.call(this);
  };

  return QueryElementSpan;

})(QueryElement);
// Generated by CoffeeScript 1.10.0
var AutocompleteToken,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AutocompleteToken = (function(superClass) {
  extend(AutocompleteToken, superClass);

  function AutocompleteToken() {
    this.__appendToContainer = bind(this.__appendToContainer, this);
    return AutocompleteToken.__super__.constructor.apply(this, arguments);
  }

  AutocompleteToken.prototype.initOpts = function() {
    AutocompleteToken.__super__.initOpts.call(this);
    return this.addOpts({
      autocompletion_popup: {
        mandatory: true,
        check: AutocompletionPopup
      },
      min_length: {
        "default": 1,
        check: function(v) {
          return v >= 1;
        }
      },
      fulltext: {
        check: {
          click: {
            mandatory: true,
            check: Function
          }
        }
      },
      token: {
        check: {
          click: {
            mandatory: true,
            check: Function
          }
        }
      },
      tokens: {
        check: {
          click: {
            mandatory: true,
            check: Function
          },
          get_suggest_html: {
            check: Function
          }
        }
      },
      fields: {
        check: {
          names: {
            mandatory: true,
            check: function(v) {
              return $.isArray(v) && v.length > 0;
            }
          },
          click: {
            mandatory: true,
            check: Function
          }
        }
      },
      linked_objects: {
        check: {
          objecttypes: {
            mandatory: true,
            check: function(v) {
              return $.isArray(v) && v.length >= 0;
            }
          },
          click: {
            mandatory: true,
            check: Function
          }
        }
      },
      objecttypes: {
        mandatory: true,
        check: function(v) {
          return $.isFunction(v) || ($.isArray(v) && v.length > 0);
        }
      }
    });
  };

  AutocompleteToken.prototype.readOpts = function() {
    AutocompleteToken.__super__.readOpts.call(this);
    this.__popup = this._autocompletion_popup;
    if (this._token) {
      this.__popup.addContainer("token");
    }
    if (this._fulltext) {
      this.__popup.addContainer("fulltext");
    }
    if (this._fields) {
      this.__popup.addContainer("fields");
    }
    if (this._tokens) {
      this.__popup.addContainer("tokens");
    }
    if (this._linked_objects) {
      this.__popup.addContainer("linked_objects");
    }
    this.__popup.addContainer("status");
    this.request_counter = 0;
    return this.__autocompleteCall = (function(_this) {
      return function() {
        return _this.__autocomplete();
      };
    })(this);
  };

  AutocompleteToken.prototype.__emptyContainer = function(cn) {
    if (CUI.__ng__) {
      return this.__popup.getPopupContent().empty();
    } else {
      return this.__popup.emptyContainer(cn);
    }
  };

  AutocompleteToken.prototype.__appendToContainer = function(container_name, div, group, func) {
    var _cn, container, item, item_icon, item_key, item_value;
    if (CUI.__ng__) {
      item = CUI.DOM.element("DIV", {
        "class": "autocomplete-item",
        tabindex: "0"
      });
      item_icon = CUI.DOM.element("DIV", {
        "class": "autocomplete-item-icon"
      });
      item_icon.appendChild(new Icon({
        icon: $$("autocomplete.token.categories.icon." + container_name)
      }).DOM);
      item_value = CUI.DOM.element("DIV", {
        "class": "autocomplete-item-value"
      });
      if (div.DOM) {
        item_value.appendChild(div.DOM);
      } else {
        item_value.appendChild(div);
      }
      item_key = CUI.DOM.element("DIV", {
        "class": "autocomplete-item-key"
      });
      item_key.textContent = group;
      item.appendChild(item_icon);
      item.appendChild(item_value);
      item.appendChild(item_key);
      this.__popup.getPopupContent().append(item);
    } else {
      if (!group) {
        _cn = container_name;
      } else {
        _cn = container_name + "-" + group;
        container = this.__popup.getContainer(_cn);
        if (!container) {
          container = this.__popup.createContainer(_cn);
          this.__popup.getContainer(container_name).append(container);
          container.append(new Label({
            text: group
          }));
        }
      }
      item = this.__popup.appendItem(_cn, div);
    }
    Events.listen({
      type: "click",
      node: item,
      call: (function(_this) {
        return function(ev) {
          ev.stopPropagation();
          func();
        };
      })(this)
    });
    return item;
  };

  AutocompleteToken.prototype.autocomplete = function(val) {
    this.__val = val;
    return CUI.scheduleCallback({
      ms: 200,
      call: this.__autocompleteCall
    });
  };

  AutocompleteToken.prototype.__setStatus = function(key, attrs) {
    var lbl;
    if (!key) {
      return this.__popup.getContainer("status").empty();
    } else {
      lbl = new LocaLabel({
        loca_key: "autocomplete.token." + key,
        loca_key_attrs: attrs,
        "class": 'ez5-autocomplete-token-empty-label'
      });
      return this.__popup.getContainer("status").replace(lbl);
    }
  };

  AutocompleteToken.prototype.__autocomplete = function() {
    var i, k, len, lot, objecttypes, ot, rc, ref, status, suggest_request, v;
    rc = ++this.request_counter;
    this.abort();
    if (isTrue(ez5.session.getClientDefault("suggest_disable"))) {
      status = "suggest_disabled";
    } else if (!this._linked_objects && !this._tokens) {
      status = "suggest_disabled";
    } else if (this.__val.length < this._min_length) {
      status = "suggest_min_length";
    } else {
      status = null;
    }
    if (status) {
      this.__processSuggest(this.__val, {
        suggestions: {
          tokens: [],
          fields: [],
          linked_objects: []
        }
      });
      this.__setStatus(status, {
        min_length: this._min_length
      });
      this.__popup.show();
      return CUI.resolvedPromise();
    }
    if (CUI.isFunction(this._objecttypes)) {
      objecttypes = this._objecttypes();
    } else {
      objecttypes = this._objecttypes;
    }
    suggest_request = {
      objecttypes: (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = objecttypes.length; i < len; i++) {
          ot = objecttypes[i];
          results.push(ot.name());
        }
        return results;
      })(),
      query: this.__val
    };
    if (this._tokens) {
      suggest_request.tokens = true;
    } else {
      suggest_request.tokens = false;
    }
    this.__setStatus("loading");
    this.__popup.show();
    this.__popup.autoSize();
    if (this._linked_objects) {
      suggest_request.linked_objecttypes = (function() {
        var i, len, ref, results;
        ref = this._linked_objects.objecttypes;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          lot = ref[i];
          results.push(lot.name());
        }
        return results;
      }).call(this);
    }
    if (this._fields) {
      suggest_request.fields = this._fields.names;
    }
    ref = ["languages"];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      if ($.isFunction(this.opts[k])) {
        v = this.opts[k]();
      } else {
        v = this.opts[k];
      }
      if (!isEmpty(v)) {
        suggest_request[k] = v;
      }
    }
    return this.current_search_request = ez5.api.suggest({
      type: "GET",
      data: {
        BODY: JSON.stringify(suggest_request),
        cache_seconds: 60 * 5
      }
    }).done((function(_this) {
      return function(data) {
        if (rc !== _this.request_counter) {
          assert(false, "discard unaborted autocomplete request " + _this.request_counter);
          return;
        }
        return _this.__processSuggest(_this.__val, data);
      };
    })(this)).fail((function(_this) {
      return function(xhr) {
        if (xhr.statusText === "abort") {
          return;
        }
        _this.__emptyContainer();
        return _this.__popup.hide();
      };
    })(this));
  };

  AutocompleteToken.prototype.__processSuggest = function(val, data) {
    var div, fn, fn1, fn2, i, idx, j, l, len, len1, len2, linked_object, ref, ref1, ref2, result_object, suggest, suggestions;
    suggestions = 0;
    this.__emptyContainer("fulltext");
    this.__emptyContainer("token");
    this.__emptyContainer("tokens");
    this.__emptyContainer("linked_objects");
    this.__emptyContainer("fields");
    if (this._token) {
      div = new Label({
        "class": "ez5-autocomplete-token-token",
        text: val
      });
      this.__appendToContainer("token", div, $$("autocomplete.categories.token"), (function(_this) {
        return function(ev) {
          return _this._token.click(val);
        };
      })(this));
    }
    if (this._fulltext) {
      div = new Label({
        "class": "ez5-autocomplete-token-fulltext",
        text: val
      });
      this.__appendToContainer("fulltext", div, $$("autocomplete.categories.fulltext"), (function(_this) {
        return function(ev) {
          return _this._fulltext.click(val);
        };
      })(this));
    }
    ref = data.suggestions.tokens;
    fn = (function(_this) {
      return function(suggest) {
        var base, sugg_html;
        if (!(sugg_html = typeof (base = _this._tokens).get_suggest_html === "function" ? base.get_suggest_html(suggest) : void 0)) {
          sugg_html = suggest.suggest;
        }
        div = $div().append(CUI.DOM.htmlToNodes(sugg_html));
        return _this.__appendToContainer("tokens", div, $$("autocomplete.categories.tokens"), function(ev) {
          return _this._tokens.click(suggest);
        });
      };
    })(this);
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      suggest = ref[idx];
      suggestions++;
      fn(suggest);
    }
    ref1 = data.suggestions.fields;
    fn1 = (function(_this) {
      return function(suggest) {
        div = $div().append(CUI.DOM.htmlToNodes('"' + suggest.suggest + '"'));
        return _this.__appendToContainer("fields", div, $$("autocomplete.categories.fields"), function(ev) {
          return _this._fields.click(suggest);
        });
      };
    })(this);
    for (idx = j = 0, len1 = ref1.length; j < len1; idx = ++j) {
      suggest = ref1[idx];
      suggestions++;
      fn1(suggest);
    }
    ref2 = data.suggestions.linked_objects;
    fn2 = (function(_this) {
      return function(result_object) {
        var card;
        card = result_object.renderCard2(null, false, true);
        card.prop("title", result_object.mask.name());
        return _this.__appendToContainer("linked_objects", card, result_object.mask.table.nameLocalized(), function() {
          return _this._linked_objects.click(result_object);
        });
      };
    })(this);
    for (idx = l = 0, len2 = ref2.length; l < len2; idx = ++l) {
      linked_object = ref2[idx];
      suggestions++;
      result_object = (new ResultObject()).setData(linked_object);
      fn2(result_object);
    }
    if (suggestions > 0) {
      this.__setStatus();
    } else {
      this.__setStatus("no_suggestions_found");
    }
    return this.__popup.autoSize();
  };

  AutocompleteToken.prototype.abort = function() {
    if (this.current_search_request) {
      this.current_search_request.abort();
      this.current_search_request = null;
    }
    CUI.scheduleCallbackCancel({
      call: this.__autocompleteCall
    });
    return this;
  };

  AutocompleteToken.prototype.destroy = function() {
    return this.abort();
  };

  AutocompleteToken.prototype.hide = function() {
    this.abort();
    return this.__popup.hide();
  };

  return AutocompleteToken;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var QueryElementField,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

QueryElementField = (function(superClass) {
  extend(QueryElementField, superClass);

  function QueryElementField() {
    return QueryElementField.__super__.constructor.apply(this, arguments);
  }

  QueryElementField.prototype.initOpts = function() {
    QueryElementField.__super__.initOpts.call(this);
    return this.addOpts({
      data: {
        mandatory: true,
        check: "PlainObject"
      },
      field: {
        mandatory: true,
        check: function(v) {
          return v instanceof Field || v instanceof MultipleFieldsContainer;
        }
      }
    });
  };

  QueryElementField.prototype.readOpts = function() {
    QueryElementField.__super__.readOpts.call(this);
    this.info = {
      data: this._data,
      field: this._field
    };
    return this;
  };

  QueryElementField.prototype.getSearchFilter = function() {
    return this.info.field.getSearchFilterWithNested(this.info.data);
  };

  QueryElementField.prototype.getBadge = function() {
    return this.info.field.getQueryFieldBadge(this.info.data);
  };

  QueryElementField.prototype.getStoreData = function() {
    var _v, i, k, len, ref, sd, v;
    sd = {
      field: this.info.field.getSignature(),
      _ot_name: this.info.field._ot_name,
      data: {}
    };
    ref = this.info.data;
    for (k in ref) {
      v = ref[k];
      if (k === "_undo" || k.startsWith("__")) {
        continue;
      }
      if (isBoolean(v) || isString(v) || isNumber(v)) {
        sd.data[k] = v;
      } else if ($.isPlainObject(v)) {
        sd.data[k] = this.__getCleanData(v);
      } else if (v === null) {
        sd.data[k] = null;
      } else if ($.isArray(v)) {
        sd.data[k] = [];
        for (i = 0, len = v.length; i < len; i++) {
          _v = v[i];
          sd.data[k].push(this.__getCleanData(_v));
        }
      } else if (v instanceof CUI.Element) {

      } else {
        assert(false, "QueryElementField.getStoreData", "Unable to serialize value from object.", {
          data: this.info.data,
          value: v
        });
      }
    }
    return sd;
  };

  QueryElementField.prototype.__getCleanData = function(data, level) {
    var _data, i, idx, item, k, len, v;
    if (level == null) {
      level = 0;
    }
    if (level === 0) {
      _data = copyObject(data, true);
    } else {
      _data = data;
    }
    for (k in _data) {
      v = _data[k];
      if (v instanceof CUI.Element || k.startsWith("_undo") || k.startsWith("__") || k.endsWith(":field")) {
        delete _data[k];
        continue;
      }
      if (CUI.isPlainObject(v)) {
        _data[k] = this.__getCleanData(v, level + 1);
        continue;
      }
      if (CUI.isArray(v)) {
        for (idx = i = 0, len = v.length; i < len; idx = ++i) {
          item = v[idx];
          if (CUI.isPlainObject(item)) {
            _data[k][idx] = this.__getCleanData(item, level + 1);
          }
        }
        continue;
      }
    }
    return _data;
  };

  QueryElementField.newFromData = function(data) {
    var info, inst;
    inst = window[data.field["class"]].fromSignature(data.field);
    if (!(inst instanceof window[data.field["class"]])) {
      console.warn("QueryElementField.newFromData: Field could not be instantiated from data.", {
        data: data
      });
      throw "QueryElementField.newFromData: Field could not be instantiated from data.";
    }
    info = {
      field: inst,
      data: data.data
    };
    inst._ot_name = data._ot_name;
    return new QueryElementField(info);
  };

  return QueryElementField;

})(QueryElementSpan);
// Generated by CoffeeScript 1.10.0
var QueryElementLinkedObjecttype,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

QueryElementLinkedObjecttype = (function(superClass) {
  extend(QueryElementLinkedObjecttype, superClass);

  function QueryElementLinkedObjecttype() {
    return QueryElementLinkedObjecttype.__super__.constructor.apply(this, arguments);
  }

  QueryElementLinkedObjecttype.prototype.getStoreDataForUrlValue = function() {
    var mask_name;
    mask_name = this.info.field.getSignature().mask.name;
    return encodeURIComponent(mask_name) + ":" + encodeURIComponent(this.info.data[this.info.field.name()][0]);
  };

  QueryElementLinkedObjecttype.getConstructorValueFromUrlValue = function(value) {
    var data, data_value, info, lot, mask_name;
    mask_name = value.split(":")[0];
    data_value = parseInt(value.split(":")[1]);
    lot = LinkedObjecttype.fromSignature({
      "class": "LinkedObjecttype",
      mask: {
        name: mask_name
      }
    });
    data = {};
    data[lot.name()] = [data_value];
    return info = {
      field: lot,
      data: data
    };
  };

  return QueryElementLinkedObjecttype;

})(QueryElementField);
// Generated by CoffeeScript 1.10.0
var QueryElementToken,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

QueryElementToken = (function(superClass) {
  extend(QueryElementToken, superClass);

  function QueryElementToken() {
    return QueryElementToken.__super__.constructor.apply(this, arguments);
  }

  QueryElementToken.prototype.getMode = function() {
    return "token";
  };

  QueryElementToken.prototype.initOpts = function() {
    QueryElementToken.__super__.initOpts.call(this);
    return this.addOpts({
      string: {
        check: String
      },
      phrase: {
        check: Boolean
      },
      fields: {
        check: Array
      }
    });
  };

  QueryElementToken.prototype.readOpts = function() {
    QueryElementToken.__super__.readOpts.call(this);
    return this.info = {
      string: this._string,
      phrase: this._phrase
    };
  };

  QueryElementToken.prototype.getBadge = function() {
    var v;
    if (this.info.phrase) {
      v = "\"" + this.info.string + "\"";
    } else {
      v = this.info.string;
    }
    return {
      name: ez5.loca.str_default("query.element." + this.mode + ".name", ""),
      value: v
    };
  };

  QueryElementToken.prototype.getClass = function() {
    return "query-element-token";
  };

  QueryElementToken.prototype.getSearchFilter = function() {
    var filter;
    return filter = {
      type: "match",
      mode: this.getMode(),
      string: this.info.string,
      phrase: this.info.phrase,
      fields: this._fields
    };
  };

  QueryElementToken.prototype.getStoreData = function() {
    return this.info;
  };

  QueryElementToken.prototype.getAsString = function() {
    return this.info.string;
  };

  QueryElementToken.prototype.getStoreDataForUrlValue = function() {
    return this.info.string;
  };

  QueryElementToken.getConstructorValueFromUrlValue = function(value) {
    return {
      string: value
    };
  };

  return QueryElementToken;

})(QueryElementSpan);
// Generated by CoffeeScript 1.10.0
var QueryElementFulltext,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

QueryElementFulltext = (function(superClass) {
  extend(QueryElementFulltext, superClass);

  function QueryElementFulltext() {
    return QueryElementFulltext.__super__.constructor.apply(this, arguments);
  }

  QueryElementFulltext.prototype.readOpts = function() {
    var ref;
    QueryElementFulltext.__super__.readOpts.call(this);
    ref = Search.getPhrase(this.info.string), this.info.string = ref[0], this.info.phrase = ref[1];
    if (!this.info.phrase) {
      this.__wildcard = this.info.string.match(/[\*]/);
    }
  };

  QueryElementFulltext.prototype.getClass = function() {
    if (this.__wildcard) {
      return "query-element-fulltext query-element-fulltext-wildcard";
    } else {
      return "query-element-fulltext";
    }
  };

  QueryElementFulltext.prototype.getMode = function() {
    if (this.__wildcard) {
      return "wildcard";
    } else {
      return "fulltext";
    }
  };

  return QueryElementFulltext;

})(QueryElementToken);
// Generated by CoffeeScript 1.10.0
var QueryElementBracket,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

QueryElementBracket = (function(superClass) {
  extend(QueryElementBracket, superClass);

  function QueryElementBracket() {
    return QueryElementBracket.__super__.constructor.apply(this, arguments);
  }

  QueryElementBracket.prototype.initOpts = function() {
    QueryElementBracket.__super__.initOpts.call(this);
    return this.addOpts({
      char: {
        mandatory: true,
        check: String
      }
    });
  };

  QueryElementBracket.prototype.readOpts = function() {
    QueryElementBracket.__super__.readOpts.call(this);
    return this.char = this._char;
  };

  QueryElementBracket.prototype.getClass = function() {
    return "query-element-bracket";
  };

  QueryElementBracket.prototype.getStoreData = function() {
    return this.getChar();
  };

  QueryElementBracket.prototype.getAsString = function() {
    return this.getChar();
  };

  QueryElementBracket.prototype.getBadge = function() {
    var c, value;
    c = this.getChar();
    switch (c) {
      case "OR":
      case "NOT":
      case "AND":
        value = $$("query.element.bracket." + c.toLowerCase());
        break;
      default:
        value = c;
    }
    return {
      value: value
    };
  };

  QueryElementBracket.prototype.getChar = function() {
    return this.char;
  };

  QueryElementBracket.prototype.getStoreDataForUrlValue = function() {
    return this.char.toLowerCase();
  };

  QueryElementBracket.getConstructorValueFromUrlValue = function(value) {
    return value.toUpperCase();
  };

  QueryElementBracket.newFromData = function(data) {
    return new this({
      char: data
    });
  };

  return QueryElementBracket;

})(QueryElementSpan);
// Generated by CoffeeScript 1.10.0
var QueryElementInput,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

QueryElementInput = (function(superClass) {
  extend(QueryElementInput, superClass);

  function QueryElementInput() {
    return QueryElementInput.__super__.constructor.apply(this, arguments);
  }

  QueryElementInput.prototype.initOpts = function() {
    QueryElementInput.__super__.initOpts.call(this);
    return this.addOpts({
      search: {
        mandatory: true,
        check: Search
      },
      linked_objecttypes: {
        check: "Array"
      },
      scope: {
        check: "Array"
      },
      min_length: {
        check: function(v) {
          return v >= 1;
        }
      }
    });
  };

  QueryElementInput.prototype.readOpts = function() {
    var config;
    QueryElementInput.__super__.readOpts.call(this);
    this.setElement($span("ez5-query-element-input", {
      contenteditable: "true"
    }));
    this.autocomplete = new AutocompletionPopup({
      element: this.element,
      "class": "autocompletion-query-element-input"
    });
    this.request_counter = 0;
    config = ez5.session.getBaseConfig().system["search.suggest.autocompletion"];
    CUI.mergeMap(config, {
      autocomplete: "one",
      scope: "linked_objecttypes+tokens"
    });
    this.__scope = config.scope.split("+");
    switch (config.autocomplete) {
      case "one":
        this.__min_length = 1;
        break;
      case "two":
        this.__min_length = 2;
        break;
      case "three":
        this.__min_length = 3;
        break;
      default:
        this.__min_length = 1;
        this.__scope = [];
    }
    if (this._min_length) {
      this.__min_length = this._min_length;
    }
    if (this._scope) {
      this.__scope = this._scope;
    }
    if (indexOf.call(this.__scope, 'fulltext') < 0 && indexOf.call(this.__scope, 'token') < 0) {
      return this.__scope.splice(0, 0, 'fulltext');
    }
  };

  QueryElementInput.prototype.render = function() {
    this.autocomplete.hide();
    return QueryElementInput.__super__.render.call(this);
  };

  QueryElementInput.prototype.objecttypesUpdated = function() {
    return this.init();
  };

  QueryElementInput.prototype.getSearchFilter = function() {
    var filter, i, len, search, token, tokens;
    tokens = this.addInput(true);
    if (!tokens) {
      return void 0;
    }
    search = [];
    for (i = 0, len = tokens.length; i < len; i++) {
      token = tokens[i];
      search.push(token.getSearchFilter());
    }
    filter = [
      {
        type: 'complex',
        bool: 'must',
        search: search
      }
    ];
    return filter;
  };

  QueryElementInput.prototype.addInput = function(return_tokens) {
    var tokens, val;
    if (return_tokens == null) {
      return_tokens = false;
    }
    val = this.element.textContent.trim();
    if (val.length === 0) {
      return;
    }
    switch (this.__scope[0]) {
      case 'fulltext':
        tokens = this.addFulltext(val, return_tokens);
        break;
      case 'token':
        tokens = this.addToken(val, return_tokens);
        break;
      default:
        return;
    }
    return tokens;
  };

  QueryElementInput.prototype.addToken = function(val, return_tokens) {
    if (return_tokens == null) {
      return_tokens = false;
    }
    return this.__addInput(val, QueryElementToken, return_tokens);
  };

  QueryElementInput.prototype.addFulltext = function(val, return_tokens) {
    if (return_tokens == null) {
      return_tokens = false;
    }
    return this.__addInput(val, QueryElementFulltext, return_tokens);
  };

  QueryElementInput.prototype.__addInput = function(val, typeCls, return_tokens) {
    var _val, at_qe, fields, i, j, len, len1, part, phrase, ref, ref1, token, tokens;
    ref = Search.getPhrase(val), _val = ref[0], phrase = ref[1];
    if (_val.length === 0) {
      return;
    }
    if (_val === '#') {
      return;
    }
    fields = void 0;
    tokens = [];
    if (phrase) {
      tokens.push(new typeCls({
        string: val,
        fields: fields
      }));
    } else {
      if (val.startsWith('#')) {
        tokens.push(new QueryElementSystemObjectId({
          system_object_id: val.substr(1)
        }));
      } else {
        ref1 = _val.split(/\s+/);
        for (i = 0, len = ref1.length; i < len; i++) {
          part = ref1[i];
          tokens.push(new typeCls({
            string: part,
            fields: fields
          }));
        }
      }
    }
    if (return_tokens) {
      return tokens;
    }
    at_qe = this;
    for (j = 0, len1 = tokens.length; j < len1; j++) {
      token = tokens[j];
      at_qe = this.addElement(token, at_qe);
    }
    return token;
  };

  QueryElementInput.prototype.init = function() {
    var all_ot_search, fn, i, j, k, len, len1, len2, link_otm, linked_object, linked_objects, linked_objecttypes, lot, opts, ot_search, ref, ref1, ref2, schema, table, tn;
    this.init_done = true;
    this.current_search_request = null;
    linked_objecttypes = [];
    ot_search = this._search.getSearchObjecttypes(true);
    if (!this._linked_objecttypes) {
      all_ot_search = this._search.getSearchObjecttypes(false);
      link_otm = new ObjecttypeManager();
      link_otm.addLinkedObjectFields(this._search.getLinkedObjectFields("expert", true));
      ref = link_otm.objecttypes;
      for (i = 0, len = ref.length; i < len; i++) {
        lot = ref[i];
        ref1 = lot._linked_object_fields_by_name;
        for (fn in ref1) {
          linked_objects = ref1[fn];
          for (j = 0, len1 = linked_objects.length; j < len1; j++) {
            linked_object = linked_objects[j];
            table = linked_object.linkMask().table;
            tn = table.name();
            if (idxInArray(tn, all_ot_search, function(ot) {
              return ot.name() === tn;
            }) > -1) {
              continue;
            }
            if (idxInArray(tn, linked_objecttypes, function(ot) {
              return ot.name() === tn;
            }) > -1) {
              continue;
            }
            linked_objecttypes.push(new Objecttype(table));
          }
        }
      }
    } else {
      ref2 = this._linked_objecttypes;
      for (k = 0, len2 = ref2.length; k < len2; k++) {
        lot = ref2[k];
        schema = ez5.schema.CURRENT._table_by_name[lot];
        assert(schema, "QueryElementInput", "Linked Objecttype not found:" + lot, {
          linked_objecttypes: this._linked_objecttypes
        });
        linked_objecttypes.push(new Objecttype(schema));
      }
    }
    opts = {
      autocompletion_popup: this.autocomplete,
      min_length: this.__min_length,
      objecttypes: function() {
        return ot_search;
      }
    };
    if (indexOf.call(this.__scope, "fulltext") >= 0) {
      opts.fulltext = {
        click: (function(_this) {
          return function(val) {
            return _this.addFulltext(val);
          };
        })(this)
      };
    }
    if (indexOf.call(this.__scope, "token") >= 0) {
      opts.token = {
        click: (function(_this) {
          return function(val) {
            return _this.addToken(val);
          };
        })(this)
      };
    }
    if (indexOf.call(this.__scope, "tokens") >= 0) {
      opts.tokens = {
        click: (function(_this) {
          return function(suggest) {
            var l, len3, ref3, results, token;
            if (suggest.phrase) {
              return _this.addElement(new QueryElementToken({
                string: suggest.tokens.join(" "),
                phrase: true
              }));
            } else {
              ref3 = suggest.tokens;
              results = [];
              for (l = 0, len3 = ref3.length; l < len3; l++) {
                token = ref3[l];
                results.push(_this.addElement(new QueryElementToken({
                  string: token
                })));
              }
              return results;
            }
          };
        })(this)
      };
    }
    if (indexOf.call(this.__scope, "linked_objecttypes") >= 0) {
      opts.linked_objects = {
        objecttypes: linked_objecttypes,
        click: (function(_this) {
          return function(result_object) {
            var data, f;
            f = new LinkedObjecttype({
              objecttype: new Objecttype(result_object.getMask())
            });
            data = {};
            data[f.name()] = [result_object.id()];
            return _this.addElement(new QueryElementLinkedObjecttype({
              field: f,
              data: data
            }));
          };
        })(this)
      };
    }
    return this.autocomplete_token = new AutocompleteToken(opts);
  };

  QueryElementInput.prototype.isEmpty = function() {
    return this.element.textContent.trim().length === 0;
  };

  QueryElementInput.prototype.focus = function(ev) {
    QueryElementInput.__super__.focus.call(this, ev);
    if (!this.isEmpty()) {
      this.autocomplete.show();
    }
    return this;
  };

  QueryElementInput.prototype.triggerFocus = function() {
    var range, sel;
    this.element.focus();
    range = document.createRange();
    range.selectNodeContents(this.element);
    range.collapse(false);
    sel = window.getSelection();
    sel.removeAllRanges();
    try {
      sel.addRange(range);
    } catch (undefined) {}
    return this;
  };

  QueryElementInput.prototype.click = function(ev) {
    return ev.stopPropagation();
  };

  QueryElementInput.prototype.blur = function(ev) {
    QueryElementInput.__super__.blur.call(this, ev);
    CUI.setTimeout((function(_this) {
      return function() {
        if (!_this.autocomplete.getActiveItem()) {
          return _this.autocomplete.hide();
        }
      };
    })(this));
  };

  QueryElementInput.prototype.keydown = function(ev) {
    var ref;
    this.autocomplete.keydown(ev);
    if (ev.isPropagationStopped()) {
      return;
    }
    this.val_on_keydown = this.element.textContent;
    if (((ref = ev.keyCode()) === 37 || ref === 39) && this.val_on_keydown.length > 0) {
      ev.stopPropagation();
    }
    if (ev.keyCode() === 13) {
      ev.preventDefault();
    }
    if (ev.keyCode() === 32) {
      if (this.element.textContent.length === 0 || this.element.textContent.charAt(this.element.textContent.length - 1).trim() === "") {
        ev.preventDefault();
      }
    }
  };

  QueryElementInput.prototype.paste = function(ev) {
    var collect_text, txt;
    txt = [];
    collect_text = (function(_this) {
      return function(parent_el) {
        var i, len, node, ref, results;
        ref = parent_el.childNodes;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          node = ref[i];
          switch (node.nodeType) {
            case 3:
              if (node.textContent.trim().length > 0) {
                results.push(txt.push(node.textContent));
              } else {
                results.push(void 0);
              }
              break;
            case 1:
              results.push(collect_text(node));
              break;
            default:
              results.push(void 0);
          }
        }
        return results;
      };
    })(this);
    CUI.setTimeout({
      call: (function(_this) {
        return function() {
          var ref;
          collect_text(_this.element);
          _this.element.textContent = txt.join(" ").replace(/\r/g, "").replace(/\n/g, " ").trim();
          console.debug("txt:", txt, _this.element.textContent);
          return (ref = _this.autocomplete_token) != null ? ref.autocomplete(_this.element.textContent) : void 0;
        };
      })(this)
    });
    return console.debug("paste recevied", ev, this.element, txt);
  };

  QueryElementInput.prototype.keyup = function(ev) {
    var finish, ref, ref1, ref2, val;
    this.autocomplete.keyup(ev);
    if (ev.isPropagationStopped()) {
      return;
    }
    finish = (function(_this) {
      return function() {
        _this.updateSearchInput();
      };
    })(this);
    val = this.element.textContent;
    if (val === "(") {
      this.addElement(new QueryElementBracket({
        char: "("
      }));
      return finish();
    }
    if (val === ")") {
      this.addElement(new QueryElementBracket({
        char: ")"
      }));
      return finish();
    }
    if (val === ",") {
      this.addElement(new QueryElementBracket({
        char: "OR"
      }));
      return finish();
    }
    if (val === "+") {
      this.addElement(new QueryElementBracket({
        char: "AND"
      }));
      return finish();
    }
    if (val === "-") {
      this.addElement(new QueryElementBracket({
        char: "NOT"
      }));
      return finish();
    }
    if (ev.keyCode() === 8) {
      ev.stopPropagation();
      ev.preventDefault();
      if (this.val_on_keydown.length === 0) {
        this.getSearchInput().removeQueryElementLeft();
        return finish();
      }
    }
    if ((ref = ev.keyCode()) === 46 || ref === 8) {
      ev.stopPropagation();
    }
    if (ev.keyCode() === 27) {
      if (val.length > 0) {
        this.setEmpty();
      } else {
        this.element.blur();
      }
      return finish();
    }
    if (val.length > 0 && !val.startsWith('#')) {
      if (ev.keyCode() === 13) {
        if (this.addInput()) {
          this._search.getSearchButton().onClickAction(ev);
          return finish();
        } else {
          return;
        }
      } else if (this.val_on_keydown !== val) {
        if (!this.init_done) {
          this.init();
        }
        if ((ref1 = this.autocomplete_token) != null) {
          ref1.autocomplete(val);
        }
        return finish();
      }
    } else {
      if ((ref2 = this.autocomplete_token) != null) {
        ref2.hide();
      }
      if (ev.keyCode() === 13) {
        this._search.getSearchButton().onClickAction(ev);
      }
      return finish();
    }
  };

  QueryElementInput.prototype.addElement = function(queryElement, atQueryElement) {
    var idx, placeholder, ref, si;
    if (atQueryElement == null) {
      atQueryElement = this;
    }
    si = this.getSearchInput();
    atQueryElement.setEmpty();
    idx = si.add(queryElement, atQueryElement);
    this.autocomplete.emptyContainer();
    if ((ref = this.autocomplete_token) != null) {
      ref.hide();
    }
    placeholder = si.getPlaceholder();
    si.addAfterIdx(placeholder, idx);
    return placeholder;
  };

  QueryElementInput.prototype.prepareSearch = function() {
    return this.addInput();
  };

  QueryElementInput.prototype.setEmpty = function() {
    return this.element.textContent = "";
  };

  QueryElementInput.prototype.openPopover = function() {
    QueryElementInput.__super__.openPopover.call(this);
    if (!this.isEmpty()) {
      return this.autocomplete.show();
    }
  };

  QueryElementInput.prototype.closePopover = function() {
    var ref;
    QueryElementInput.__super__.closePopover.call(this);
    return (ref = this.autocomplete_token) != null ? ref.hide() : void 0;
  };

  QueryElementInput.prototype.destroy = function() {
    var ref;
    if ((ref = this.autocomplete_token) != null) {
      ref.destroy();
    }
    this.autocomplete.destroy();
    return QueryElementInput.__super__.destroy.call(this);
  };

  return QueryElementInput;

})(QueryElement);
// Generated by CoffeeScript 1.10.0
var QueryElementSystemObjectId,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

QueryElementSystemObjectId = (function(superClass) {
  extend(QueryElementSystemObjectId, superClass);

  function QueryElementSystemObjectId() {
    return QueryElementSystemObjectId.__super__.constructor.apply(this, arguments);
  }

  QueryElementSystemObjectId.prototype.initOpts = function() {
    QueryElementSystemObjectId.__super__.initOpts.call(this);
    return this.addOpts({
      system_object_id: {
        check: String
      }
    });
  };

  QueryElementSystemObjectId.prototype.getBadge = function() {
    return {
      name: '#',
      value: this._system_object_id
    };
  };

  QueryElementSystemObjectId.prototype.getClass = function() {
    return "query-element-system-object-id";
  };

  QueryElementSystemObjectId.prototype.getSearchFilter = function() {
    var filter;
    return filter = {
      type: 'in',
      "in": [getInt(this._system_object_id) || -1],
      fields: ['_system_object_id']
    };
  };

  QueryElementSystemObjectId.prototype.getStoreData = function() {
    return this._system_object_id;
  };

  QueryElementSystemObjectId.prototype.getAsString = function() {
    return this._system_object_id;
  };

  QueryElementSystemObjectId.prototype.ignoreSearchManagers = function() {
    return [SearchTypeSelector];
  };

  QueryElementSystemObjectId.prototype.getStoreDataForUrlValue = function() {
    return this._system_object_id;
  };

  QueryElementSystemObjectId.getConstructorValueFromUrlValue = function(value) {
    return {
      system_object_id: value
    };
  };

  return QueryElementSystemObjectId;

})(QueryElementSpan);
// Generated by CoffeeScript 1.10.0
var QueryElementInputSearch,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

QueryElementInputSearch = (function(superClass) {
  extend(QueryElementInputSearch, superClass);

  function QueryElementInputSearch() {
    this.executeSearch = bind(this.executeSearch, this);
    this.blur = bind(this.blur, this);
    this.click = bind(this.click, this);
    this.mouseup = bind(this.mouseup, this);
    this.selectAll = bind(this.selectAll, this);
    this.focus = bind(this.focus, this);
    return QueryElementInputSearch.__super__.constructor.apply(this, arguments);
  }

  QueryElementInputSearch.prototype.readOpts = function() {
    QueryElementInputSearch.__super__.readOpts.call(this);
    this.setElement($element("input", "ez5-query-element-input-search-input", {
      type: "text",
      spellcheck: "false",
      placeholder: this._placeholder_text
    }));
    return this.last_searched_val = null;
  };

  QueryElementInputSearch.prototype.initOpts = function() {
    QueryElementInputSearch.__super__.initOpts.call(this);
    return this.addOpts({
      manager: {
        mandatory: true
      },
      onReset: {
        check: Function
      },
      onInputEmptied: {
        check: Function
      },
      button: {
        check: Boolean
      },
      emptyExecute: {
        check: Boolean
      },
      blockedExecute: {
        check: Boolean
      },
      placeholder_text: {
        check: String
      }
    });
  };

  QueryElementInputSearch.prototype.__getFunc = function(_func) {
    var func, nfunc;
    nfunc = "QueryElementInputSearch.__getFunc";
    func = this._manager[_func];
    switch (_func) {
      case "autocompletion":
        assert(func instanceof AutocompletionPopup, nfunc, "autocompletion needs to be instance of AutocompletionPopup but is " + func + ".", {
          opts: this.opts
        });
        break;
      case "execute":
        assert($.isFunction(func), nfunc, "execute needs to be Function.", {
          opts: this.opts
        });
        break;
      case "inputEmptied":
        assert($.isFunction(func) || !func, "inputEmptied needs to be Function or unset.", {
          opts: this.opts
        });
    }
    return func;
  };

  QueryElementInputSearch.prototype.render = function() {
    var btn;
    if (!this._button) {
      return QueryElementInputSearch.__super__.render.call(this);
    }
    btn = new LocaButton({
      "class": "ez5-query-element-input-search-button",
      appearance: CUI.__ng__ ? "normal" : "flat",
      loca_key: "query.element.input.search.button.open_search",
      icon: "fa-angle-down",
      onClick: (function(_this) {
        return function() {
          if (_this.__getFunc("autocompletion").isShown()) {
            _this.__getFunc("autocompletion").hide();
          } else {
            _this.executeSearch();
          }
        };
      })(this)
    });
    return new HorizontalLayout({
      maximize: false,
      "class": "ez5-query-element-input-search",
      right: {
        content: btn
      },
      center: {
        content: QueryElementInputSearch.__super__.render.call(this)
      }
    }).DOM;
  };

  QueryElementInputSearch.prototype.getSearchFilter = function() {
    var filter, val;
    val = this.value();
    if (!val.length) {
      return;
    }
    return filter = {
      type: "match",
      phrase: val.substring(0, 1) === "\"",
      string: val
    };
  };

  QueryElementInputSearch.prototype.triggerFocus = function() {
    this.__ignoreShowOnNextFocus = true;
    return QueryElementInputSearch.__super__.triggerFocus.call(this);
  };

  QueryElementInputSearch.prototype.focus = function(ev) {
    QueryElementInputSearch.__super__.focus.call(this, ev);
    if (this.blockInput) {
      if (this._blockedExecute && !this.__ignoreShowOnNextFocus) {
        this.executeSearch();
      }
      CUI.setTimeout((function(_this) {
        return function() {
          return _this.selectAll();
        };
      })(this), 0);
      this.__ignoreShowOnNextFocus = false;
      return;
    }
    if (this.__ignoreShowOnNextFocus) {
      this.__ignoreShowOnNextFocus = false;
      return;
    }
    if (this._emptyExecute) {
      return this.executeSearch();
    }
    if (!this.value().length) {
      return;
    }
    return this.__getFunc("autocompletion").show();
  };

  QueryElementInputSearch.prototype.selectAll = function() {
    return this.element[0].setSelectionRange(0, this.element.val().length);
  };

  QueryElementInputSearch.prototype.mouseup = function(ev) {
    if (this.blockInput) {
      this.selectAll();
      if (this._blockedExecute) {
        this.executeSearch();
      }
      return ev.preventDefault();
    }
  };

  QueryElementInputSearch.prototype.click = function(ev) {
    ev.stopPropagation();
  };

  QueryElementInputSearch.prototype.blur = function(ev) {
    var base;
    QueryElementInputSearch.__super__.blur.call(this, ev);
    return typeof (base = this.opts).onBlur === "function" ? base.onBlur(ev) : void 0;
  };

  QueryElementInputSearch.prototype.emptyInput = function(executeSearch) {
    var ref;
    if (executeSearch == null) {
      executeSearch = this._emptyExecute;
    }
    this.value("");
    if ((ref = this.__getFunc("inputEmptied")) != null) {
      ref.call(this._manager);
    }
    if (typeof this._onInputEmptied === "function") {
      this._onInputEmptied(this);
    }
    if (executeSearch) {
      return this.executeSearch();
    }
  };

  QueryElementInputSearch.prototype.keydown = function(ev) {
    var ref;
    this.__getFunc("autocompletion").keydown(ev);
    if (ev.isPropagationStopped()) {
      return;
    }
    if (this.blockInput) {
      if ((ref = ev.keyCode()) === 8 || ref === 46) {
        this.emptyInput();
      } else {
        this.selectAll();
      }
      ev.stopImmediatePropagation();
      ev.preventDefault();
    }
    return this;
  };

  QueryElementInputSearch.prototype.keyup = function(ev) {
    var ref, ref1, val;
    this.__getFunc("autocompletion").keyup(ev);
    if (ev.isPropagationStopped()) {
      return;
    }
    ev.stopPropagation();
    val = this.element.val();
    if ((ref = ev.keyCode()) === 27) {
      if (this.__getFunc("autocompletion").isShown()) {
        this.__getFunc("autocompletion").hide();
      } else if (this.blockInput) {
        this.element.blur();
        return;
      } else if (this.value().length > 0) {
        this.emptyInput();
      } else {
        this.value(this.__initValue);
        if (typeof this._onReset === "function") {
          this._onReset(ev);
        }
        this.selectAll();
      }
      ev.preventDefault();
    } else if (this.blockInput) {
      return;
    } else if (!val.length && !this._emptyExecute && ((ref1 = !ev.keyCode()) === 40)) {
      this.__getFunc("autocompletion").hide();
    } else if (!this._emptyExecute && val.length === 0) {
      this.__getFunc("autocompletion").hide();
    } else {
      CUI.scheduleCallback({
        ms: 200,
        call: this.executeSearch
      });
    }
    return this;
  };

  QueryElementInputSearch.prototype.executeSearch = function() {
    var val;
    val = this.value();
    if (this.last_searched_val !== val || !this.__getFunc("autocompletion").isShown()) {
      this.last_searched_val = val;
      this.__getFunc("execute").call(this._manager);
    }
  };

  QueryElementInputSearch.prototype.value = function(val) {
    if (isUndef(val)) {
      return this.element.val();
    }
    if (isUndef(this.__initValue)) {
      this.__initValue = val;
    }
    this.element.val(val);
    if (!isEmpty(val)) {
      this.blockInput = true;
    } else {
      this.blockInput = false;
    }
    return val;
  };

  QueryElementInputSearch.prototype.isBlocked = function() {
    return !!this.blockInput;
  };

  return QueryElementInputSearch;

})(QueryElement);
// Generated by CoffeeScript 1.10.0
var SearchToken,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SearchToken = (function(superClass) {
  extend(SearchToken, superClass);

  function SearchToken() {
    this.keyup = bind(this.keyup, this);
    this.keydown = bind(this.keydown, this);
    return SearchToken.__super__.constructor.apply(this, arguments);
  }

  SearchToken.prototype.initOpts = function() {
    SearchToken.__super__.initOpts.call(this);
    return this.addOpts({
      column: {
        mandatory: true,
        check: Field
      },
      data: {
        mandatory: true,
        check: "PlainObject"
      },
      fields: {
        check: "Array"
      }
    });
  };

  SearchToken.prototype.readOpts = function() {
    var el_opts, f, field_names, i, len, objecttypes, ref;
    SearchToken.__super__.readOpts.call(this);
    el_opts = this._column.getElementOpts("expert");
    el_opts.onDataChanged = (function(_this) {
      return function(ev) {
        return Events.trigger({
          node: _this.__input,
          type: "search-input-change"
        });
      };
    })(this);
    el_opts.data = this._data;
    el_opts.incNumbers = false;
    this.__input = DataField["new"](el_opts).start();
    this.setElement(this.__input.getElement());
    this.setModeInData("fulltext");
    this.setTypeInData("fulltext");
    this.autocomplete = new AutocompletionPopup({
      element: this.getElement()
    });
    this.__tokenizer = this._column.getTokenizer();
    if (this._fields) {
      objecttypes = (function() {
        var i, len, ref, results;
        ref = this._fields;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          f = ref[i];
          results.push(new Objecttype(f.getMainMask()));
        }
        return results;
      }).call(this);
      field_names = [];
      ref = this._fields;
      for (i = 0, len = ref.length; i < len; i++) {
        f = ref[i];
        field_names.push.apply(field_names, f.getFieldNamesForSuggest());
      }
      field_names = arrayUnique(field_names);
    } else {
      objecttypes = [new Objecttype(this._column.getMainMask())];
      field_names = this._column.getFieldNamesForSuggest();
    }
    return this.autocomplete_token = new AutocompleteToken({
      autocompletion_popup: this.autocomplete,
      objecttypes: objecttypes,
      fulltext: {
        click: (function(_this) {
          return function(val) {
            if (val.match(/[\?\*]/)) {
              _this.setModeInData("wildcard");
            } else {
              _this.setModeInData("fulltext");
            }
            _this.setTypeInData("fulltext");
            return _this.autocomplete.hide();
          };
        })(this)
      },
      tokens: {
        click: (function(_this) {
          return function(suggest) {
            return _this.applySuggest(suggest, "token");
          };
        })(this),
        get_suggest_html: (function(_this) {
          return function(suggest) {
            return _this.getApplySuggest(suggest).suggest_html;
          };
        })(this)
      },
      fields: {
        names: field_names,
        click: (function(_this) {
          return function(suggest) {
            return _this.applySuggest(suggest, "field");
          };
        })(this)
      }
    });
  };

  SearchToken.prototype.keydown = function(ev) {
    return this.autocomplete.keydown(ev);
  };

  SearchToken.prototype.keyup = function(ev) {
    var c, ref, token, val;
    this.autocomplete.keyup(ev);
    if (ev.isPropagationStopped()) {
      return;
    }
    ev.stopPropagation();
    val = this.element.val();
    c = this.getCursor();
    if (c !== null) {
      token = this.getCurrentToken();
    }
    if (c === null || !token.token.length || ((ref = ev.keyCode()) === 27)) {
      this.autocomplete_token.hide();
    } else if (token.token !== this.last_token) {
      this.autocomplete_token.autocomplete(token.token);
    }
    if (token) {
      this.last_token = token.token;
    }
  };

  SearchToken.prototype.getCurrentToken = function() {
    var c, i, len, ref, token, val;
    val = this.element.val();
    c = this.getCursor();
    if (!this.__tokenizer) {
      return {
        start: 0,
        end: val.length - 1,
        token: val
      };
    }
    ref = this.__tokenizer.getTokens(val);
    for (i = 0, len = ref.length; i < len; i++) {
      token = ref[i];
      if (token.start <= c && c <= token.end) {
        return token;
      }
    }
    return {
      token: ""
    };
  };

  SearchToken.prototype.getApplySuggest = function(suggest) {
    var mode, token, token_in, type, val;
    val = this.element.val();
    token = this.getCurrentToken();
    if (suggest.tokens) {
      token_in = suggest.tokens.join(" ");
      if (suggest.phrase) {
        token_in = "\"" + token_in + "\"";
      }
      mode = "token";
      type = "token";
    } else {
      token_in = "\"" + suggest.field + "\"";
      mode = "fulltext";
      type = "field";
    }
    return {
      token: token,
      token_in: token_in,
      input_val: val,
      mode: mode,
      type: type,
      val: val.substr(0, token.start) + token_in + val.substr(token.end + 1),
      suggest_html: toHtml(val.substr(0, token.start)) + suggest.suggest + toHtml(val.substr(token.end + 1))
    };
  };

  SearchToken.prototype.applySuggest = function(suggest, type) {
    var arr, c;
    if (!suggest) {
      return;
    }
    arr = this.getApplySuggest(suggest);
    this.element.val(arr.val);
    this.__input.storeValue(arr.val);
    this.setModeInData(arr.mode);
    this.setTypeInData(arr.type);
    c = arr.token.start + arr.token_in.length + 1;
    this.element[0].setSelectionRange(c, c);
    this.autocomplete_token.hide();
    Events.trigger({
      node: this.__input,
      type: "search-input-change"
    });
    return this;
  };

  SearchToken.prototype.setModeInData = function(mode) {
    return this._data[this._column.name() + ":mode"] = mode;
  };

  SearchToken.prototype.setTypeInData = function(mode) {
    return this._data[this._column.name() + ":type"] = mode;
  };

  SearchToken.prototype.getInput = function() {
    return this.__input;
  };

  return SearchToken;

})(QueryElement);
// Generated by CoffeeScript 1.10.0
var Collection,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Collection = (function(superClass) {
  extend(Collection, superClass);

  function Collection() {
    return Collection.__super__.constructor.apply(this, arguments);
  }

  Collection.prototype.initOpts = function() {
    Collection.__super__.initOpts.call(this);
    return this.addOpts({
      collection: {
        check: "PlainObject"
      }
    });
  };

  Collection.prototype.readOpts = function() {
    Collection.__super__.readOpts.call(this);
    this.setData(this._collection);
    assert(CUI.isArray(this.data._objects) || isNull(this.data._objects), "new " + (getObjectClass(this)), "data._objects needs to be null or an Array", {
      data: this.data
    });
    return this.eventDiv = $div();
  };

  Collection.prototype.on = function(opts) {
    if (opts == null) {
      opts = {};
    }
    assert(CUI.isPlainObject(opts), "Collection.on", "opts needs to be plain object.", {
      opts: opts
    });
    opts.node = this.eventDiv;
    return Events.listen(opts);
  };

  Collection.prototype.off = function(opts) {
    if (opts == null) {
      opts = {};
    }
    assert(CUI.isPlainObject(opts), "Collection.off", "opts needs to be plain object.", {
      opts: opts
    });
    return Events.ignore(opts, this.eventDiv, true);
  };

  Collection.prototype.triggerEvent = function(type, info) {
    var ret;
    if (info == null) {
      info = {};
    }
    info.collection = this;
    info.type = type;
    ret = Events.trigger({
      type: type,
      node: this.eventDiv,
      info: info
    });
    assert(isPromise(ret) || isUndef(ret), "Collection.triggerEvent", "Event " + type + " must return Promise or undefined.", {
      "return": ret
    });
    if (!ret) {
      return CUI.resolvedPromise();
    } else {
      return ret;
    }
  };

  Collection.prototype.setData = function(data) {
    this.data = data != null ? data : {
      collection: {}
    };
    if (isUndef(this.data._objects)) {
      this.data._objects = [];
    }
    return this;
  };

  Collection.prototype.addedToListView = function(DOMNodes) {
    Collection.__super__.addedToListView.call(this, DOMNodes);
    CUI.DOM.setAttribute(DOMNodes[0], "tabindex", "0");
    CUI.DOM.setAttribute(DOMNodes[0], "tabindex-prevent-default", true);
    Events.listen({
      node: DOMNodes[0],
      type: "toolbox",
      call: (function(_this) {
        return function(ev, info) {
          if (!_this.isSelected()) {
            DOMNodes[0].focus();
          }
          return _this.prepareCurrentTools().done(function() {
            return info.tools.push.apply(info.tools, _this.getCurrentTools());
          });
        };
      })(this)
    });
    return this;
  };

  Collection.prototype.prepareCurrentTools = function() {
    return CUI.resolvedPromise();
  };

  Collection.prototype.select = function(ev) {
    var ref;
    if (ev instanceof CUI.MouseEvent) {
      if ((ref = CUI.DOM.find(":focus")[0]) != null) {
        ref.blur();
      }
    }
    return Collection.__super__.select.call(this, ev);
  };

  Collection.prototype.getData = function() {
    return this.data;
  };

  Collection.prototype.canHaveChildren = function() {
    return this.data.collection.children_allowed;
  };

  Collection.prototype.isCreateChildAllowed = function() {
    return false;
  };

  Collection.prototype.isDeletable = function() {
    return false;
  };

  Collection.prototype.canUnlink = function() {
    return true;
  };

  Collection.prototype.selectWhenCollectionIsSelected = function() {
    return false;
  };

  Collection.prototype.isSearchable = function() {
    return false;
  };

  Collection.prototype.enableShare = function() {
    return false;
  };

  Collection.prototype.enableSettings = function() {
    return false;
  };

  Collection.prototype.bigIcon = function() {
    return this.icon();
  };

  Collection.prototype.icon = function() {
    return "file";
  };

  Collection.prototype.getOwner = function() {
    if (this.data._owner) {
      return User.newInstance({
        user: this.data._owner
      });
    } else {
      return null;
    }
  };

  Collection.prototype.getCurrentTools = function() {
    var i, len, plugin, ref, tools;
    tools = [];
    ref = Collection.__plugins;
    for (i = 0, len = ref.length; i < len; i++) {
      plugin = ref[i];
      tools.push.apply(tools, plugin.getCurrentTools(this));
    }
    return tools;
  };

  Collection.__plugins = [];

  Collection.registerPlugin = function(plugin) {
    assert(plugin instanceof CollectionPlugin, 'Collection.registerPlugin', 'Plugin needs to be instance of CollectionPlugin.');
    return this.__plugins.push(plugin);
  };

  Collection.prototype.getToolGroup = function() {
    return this.getToolNamePrefix();
  };

  Collection.prototype.getToolNamePrefix = function() {
    return "collection";
  };

  Collection.prototype.getButtonbar = function() {
    return Toolbox.getFlyoutButtonbar(this.getCurrentTools());
  };

  Collection.prototype.getButtons = function() {
    return Toolbox.getFlyoutButtons(this.getCurrentTools());
  };

  Collection.prototype.getObjects = function() {
    return assert(false, (getObjectClass(this)) + ".getObjects needs implementation");
  };

  Collection.prototype.getCount = function() {
    return assert(false, (getObjectClass(this)) + ".getCount needs implementation");
  };

  Collection.prototype.getDescription = function() {};

  Collection.prototype.getInfo = function() {
    var description, lbl, user;
    description = this.getDescription();
    if (isEmpty(description)) {
      lbl = new EmptyLabel({
        "class": "ez5-collection-description ez5-collection-no-description",
        text: $$("collection.no_description")
      });
    } else {
      lbl = new MultilineLabel({
        "class": "ez5-collection-description",
        text: description
      });
    }
    user = this.getOwner();
    if (!user || user.getId() === ez5.session.getUser().getId()) {
      if (CUI.__ng__ && isEmpty(description)) {
        return null;
      }
      return lbl;
    }
    return [
      lbl, new LocaLabel({
        "class": "ez5-collection-shared-by",
        loca_key: "collection.shared_by_user",
        loca_key_attrs: {
          user: user.getDisplayText()
        }
      })
    ];
  };

  Collection.prototype.renderContent = function() {
    this.contentLabel = new Label({
      icon: true,
      multiline: true,
      content: ""
    });
    Events.listen({
      type: "click",
      node: this.contentLabel,
      call: (function(_this) {
        return function(ev) {
          if (ev.shiftKey()) {
            ev.stopPropagation();
            return CUI.debug(dump(_this.data));
          }
        };
      })(this)
    });
    this.counterLabel = new Label({
      "class": "collection-counter"
    });
    this.__counterColumn = new ListViewColumn({
      "class": "collection-counter-td",
      onSetElement: (function(_this) {
        return function() {
          return _this.updateContent();
        };
      })(this)
    });
    this.updateDisplay();
    this.addColumn(this.__counterColumn);
    return this.contentLabel.DOM;
  };

  Collection.prototype.getContent = function() {
    return [this.counterLabel];
  };

  Collection.prototype.updateContent = function() {
    var el, i, item, len, ref;
    el = this.__counterColumn.getElement();
    ref = this.getContent();
    for (i = 0, len = ref.length; i < len; i++) {
      item = ref[i];
      if (item.DOM) {
        el.append(item.DOM);
      } else {
        el.append(item);
      }
    }
    return this;
  };

  Collection.prototype.updateDisplay = function(layout) {
    if (layout == null) {
      layout = false;
    }
    this.updateCounter();
    if (this.contentLabel) {
      this.contentLabel.setContent(CUI.DOM.htmlToNodes(this.renderNameAsHtml()));
      this.contentLabel.setIcon(this.icon());
    }
    if (layout && !CUI.__ng__) {
      Events.trigger({
        type: "content-resize",
        node: this.contentLabel
      });
    }
    return this;
  };

  Collection.prototype.updateCounter = function() {
    return CUI.decide(this.getCount()).done((function(_this) {
      return function(__currentCount) {
        _this.__currentCount = __currentCount;
        if (!_this.counterLabel || _this.counterLabel.isDestroyed()) {
          return;
        }
        _this.counterLabel.setText(ez5.format_number(_this.__currentCount));
        if (!CUI.__ng__) {
          return Events.trigger({
            type: "content-resize",
            node: _this.counterLabel
          });
        }
      };
    })(this));
  };

  Collection.prototype.removeFromDOM = function(remove_self) {
    if (remove_self == null) {
      remove_self = true;
    }
    Collection.__super__.removeFromDOM.call(this, remove_self);
    this.counterLabel = null;
    return this;
  };

  Collection.prototype.renderNameAsText = function() {
    return assert(false, "Collection.renderNameAsText", "Method needs to be overwritten in " + (getObjectClass(this)));
  };

  Collection.prototype.renderNameAsHtml = function() {
    return toHtml(this.renderNameAsText());
  };

  Collection.prototype.getBadge = function() {
    return {
      icon: this.getBadgeIcon(),
      name: $$("collection.badge.name"),
      value: this.renderNameAsText()
    };
  };

  Collection.prototype.getBadgeIcon = function() {
    return null;
  };

  Collection.prototype.checkObjects = function(collection_objects) {
    var co, i, idx, len;
    assert($.isArray(collection_objects), "Collection.insertObjects", "Needs to be an Array", {
      collection_objects: collection_objects
    });
    for (idx = i = 0, len = collection_objects.length; i < len; idx = ++i) {
      co = collection_objects[idx];
      assert(co instanceof CollectionObject, "Collection.insertObjects", "Object[" + idx + "] not an instance of CollectionObject but " + (getObjectClass(co)) + ".", {
        collection_objects: collection_objects
      });
    }
  };

  Collection.prototype.insertObjects = function() {
    return assert(false, (getObjectClass(this)) + ".insertObjects needs implementation");
  };

  Collection.prototype.removeObjects = function() {
    return assert(false, (getObjectClass(this)) + ".removeObjects needs implementation");
  };

  Collection.prototype.getSearchFilter = function() {
    return assert(false, "Collection.renderNameAsText", "Method needs to be overwritten in " + (getObjectClass(this)));
  };

  Collection.prototype.isSelectable = function() {
    return false;
  };

  Collection.prototype.selectOnLoad = function() {
    return this.select();
  };

  Collection.prototype.getHashId = function() {};

  Collection.prototype.reset = function() {};

  Collection.prototype.matchesLocator = function(locator) {
    return this.getHashId() === locator;
  };

  Collection.prototype.addToRequest = function(request) {};

  Collection.prototype.executeSearch = null;

  Collection.prototype.getStoreData = function() {
    throw new InvalidSaveDataException();
  };

  return Collection;

})(ListViewTreeNode);

CUI.ready((function(_this) {
  return function() {
    Events.registerEvent({
      type: "insert",
      bubble: false
    });
    Events.registerEvent({
      type: "remove",
      bubble: false
    });
    Events.registerEvent({
      type: "select",
      bubble: false
    });
    return Events.registerEvent({
      type: "update",
      bubble: false
    });
  };
})(this));
// Generated by CoffeeScript 1.10.0
var CollectionPlugin,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CollectionPlugin = (function(superClass) {
  extend(CollectionPlugin, superClass);

  function CollectionPlugin() {
    return CollectionPlugin.__super__.constructor.apply(this, arguments);
  }

  CollectionPlugin.prototype.getCurrentTools = function(collection) {
    return [];
  };

  return CollectionPlugin;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var CollectionSearchNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CollectionSearchNode = (function(superClass) {
  extend(CollectionSearchNode, superClass);

  function CollectionSearchNode() {
    return CollectionSearchNode.__super__.constructor.apply(this, arguments);
  }

  CollectionSearchNode.prototype.initOpts = function() {
    CollectionSearchNode.__super__.initOpts.call(this);
    return this.addOpts({
      manager: {
        check: CollectionManager
      },
      search: {
        check: Search
      }
    });
  };

  CollectionSearchNode.prototype.readOpts = function() {
    if (this.opts.manager) {
      this.setManager(this.opts.manager);
    }
    CollectionSearchNode.__super__.readOpts.call(this);
    if (this._search) {
      this.setSearch(this._search);
    }
  };

  CollectionSearchNode.prototype.getCount = function() {
    var dfr, search;
    dfr = new CUI.Deferred();
    search = this.getSearch();
    search.getSearchInitializedPromise().done((function(_this) {
      return function() {
        var c;
        c = search.getSearchTypeSelector().getLastCount();
        return dfr.resolve(c);
      };
    })(this)).fail((function(_this) {
      return function() {
        return dfr.resolve("Err");
      };
    })(this));
    return dfr.promise();
  };

  CollectionSearchNode.prototype.setManager = function(manager) {
    this.manager = manager;
    assert(this.manager instanceof CollectionManager, (getObjectClass(this)) + ".setManager", "manager needs to be instance of CollectionManager", {
      manager: this.manager,
      opts: this.opts
    });
    return this;
  };

  CollectionSearchNode.prototype.getManager = function() {
    return this.manager;
  };

  CollectionSearchNode.prototype.getHashId = function() {
    return "search";
  };

  CollectionSearchNode.prototype.icon = function() {
    return "search";
  };

  CollectionSearchNode.prototype.renderNameAsText = function() {
    return $$("collection.search.node.name");
  };

  CollectionSearchNode.prototype.select = function(ev) {
    var key, ref, sel_node, select;
    if (!this.isSelectable()) {
      return CUI.rejectedPromise();
    }
    select = (function(_this) {
      return function(ev) {
        return CollectionSearchNode.__super__.select.call(_this, ev).done(function() {
          if (_this.loadInSearchOnSelect()) {
            _this.showInSearch();
          }
        });
      };
    })(this);
    if (!((ref = this._manager) != null ? ref.isProModeActive() : void 0)) {
      if (this.getSelectedNodeKey() === "selectedNode") {
        key = "selectedNodeSearch";
      } else {
        key = "selectedNode";
      }
      sel_node = this.getSelectedNode(key);
      if (sel_node) {
        return sel_node.deselect().done((function(_this) {
          return function() {
            return select(ev);
          };
        })(this)).fail((function(_this) {
          return function() {
            return CUI.rejectedPromise();
          };
        })(this));
      } else {
        return select(ev);
      }
    } else {
      return select(ev);
    }
  };

  CollectionSearchNode.prototype.deselect = function(ev, new_node) {
    var ref;
    if (ev && !((ref = this._manager) != null ? ref.allowsDeselect() : void 0)) {
      return CUI.rejectedPromise();
    }
    return CollectionSearchNode.__super__.deselect.call(this, ev, new_node);
  };

  CollectionSearchNode.prototype.getSelectedNodeKey = function() {
    if (this.isShowingInSearch()) {
      return "selectedNodeSearch";
    } else {
      return "selectedNode";
    }
  };

  CollectionSearchNode.prototype.isShowingInSearch = function() {
    return true;
  };

  CollectionSearchNode.prototype.loadInSearchOnSelect = function() {
    return false;
  };

  CollectionSearchNode.prototype.showInSearch = function(search) {
    if (search == null) {
      search = this.getSearch();
    }
    if (this._manager && !this.loadInSearchOnSelect()) {
      this._manager.getSearchCollection().select();
    }
    return search.showInSearch(this.getQueryElement());
  };

  CollectionSearchNode.prototype.unshowInSearch = function(search) {
    if (search == null) {
      search = this.getSearch();
    }
    return search.showInSearch();
  };

  CollectionSearchNode.prototype.getQueryElement = function() {
    return new QueryElementCollection({
      collection: this
    });
  };

  CollectionSearchNode.prototype.isSelectable = function() {
    return true;
  };

  CollectionSearchNode.prototype.isSearchable = function() {
    var ref, ref1;
    return !!((ref = this.getSearch()) != null ? ref.getSearchInput() : void 0) && ((ref1 = this.getManager()) != null ? ref1.getSearchCollection() : void 0);
  };

  CollectionSearchNode.prototype.setSearch = function(__search) {
    this.__search = __search;
  };

  CollectionSearchNode.prototype.getSearch = function() {
    var ref;
    return this.__search || ((ref = this.getManager()) != null ? ref.getSearch() : void 0);
  };

  CollectionSearchNode.prototype.ignoreSearchManagers = function() {
    return [SearchTypeSelector];
  };

  CollectionSearchNode.prototype.showInSearchWithChildren = function() {
    return ez5.api.search({
      json_data: {
        limit: 10000,
        type: "collection",
        search: [
          {
            type: "in",
            fields: ["_path.collection._id"],
            "in": [this.data.collection._id]
          }
        ]
      }
    }).done(function(data) {
      return CUI.debug("system show in search", data);
    });
  };

  return CollectionSearchNode;

})(Collection);
// Generated by CoffeeScript 1.10.0
var CollectionSearchMainNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CollectionSearchMainNode = (function(superClass) {
  extend(CollectionSearchMainNode, superClass);

  function CollectionSearchMainNode() {
    return CollectionSearchMainNode.__super__.constructor.apply(this, arguments);
  }

  CollectionSearchMainNode.prototype.loadInSearchOnSelect = function() {
    return true;
  };

  CollectionSearchMainNode.prototype.selectOnLoad = function() {
    return CollectionSearchMainNode.__super__.selectOnLoad.call(this).done((function(_this) {
      return function() {
        if (!_this.getSearch().getLastData()) {
          return _this.getSearch().executeOnLoad();
        }
      };
    })(this));
  };

  CollectionSearchMainNode.prototype.select = function(ev) {
    var sel_node;
    sel_node = this.getSelectedNode();
    if (sel_node != null ? sel_node.isShowingInSearch() : void 0) {
      sel_node.unshowInSearch();
    }
    return CollectionSearchMainNode.__super__.select.call(this, ev);
  };

  CollectionSearchMainNode.prototype.showInSearch = function() {
    if (this._manager && !this.loadInSearchOnSelect()) {
      return this._manager.getSearchCollection().select({
        type: "show-in-search"
      });
    }
  };

  CollectionSearchMainNode.prototype.unshowInSearch = function() {};

  return CollectionSearchMainNode;

})(CollectionSearchNode);
// Generated by CoffeeScript 1.10.0
var CollectionObject;

CollectionObject = (function() {
  function CollectionObject(object) {
    assert($.isPlainObject(object), "new CollectionObject", "object needs to be PlainObject", {
      object: object
    });
    this.setObject(object);
  }

  CollectionObject.prototype.equals = function(co) {
    assert(co instanceof CollectionObject, "CollectionObject.equals", "Object needs to be of type Collection but is \"" + (getObjectClass(co)) + "\"", {
      collection_object: co
    });
    return this.getGlobalObjectId() === co.getGlobalObjectId();
  };

  CollectionObject.prototype.toString = function() {
    return "{" + (this.getGlobalObjectId()) + "}";
  };

  CollectionObject.prototype.setObject = function(__object) {
    var ref;
    this.__object = __object;
    assert(isString((ref = this.__object) != null ? ref._global_object_id : void 0) || this.__object._mapped_metadata_created, "CollectionObject.setObject", "object._global_object_id needs to be String or object._mapped_metadata_created needs to be set.", {
      object: this.__object
    });
    return this;
  };

  CollectionObject.prototype.getObject = function() {
    return this.__object;
  };

  CollectionObject.prototype.getObjecttype = function() {
    return this.__object._objecttype;
  };

  CollectionObject.prototype.isMappedMetadataCreated = function() {
    return this.__object._mapped_metadata_created;
  };

  CollectionObject.prototype.getGlobalObjectId = function(assertIfEmpty) {
    if (assertIfEmpty == null) {
      assertIfEmpty = false;
    }
    if (assertIfEmpty) {
      assert(this.__object._global_object_id, "CollectionObject.getGlobalObjectId", "object._global_object_id not set.", {
        object: this.__object
      });
    }
    return this.__object._global_object_id;
  };

  CollectionObject.prototype.getSelector = function() {
    var gid;
    gid = this.getGlobalObjectId();
    if (!gid) {
      gid = "no-id-set";
    }
    return "[global-object-id=\"" + gid + "\"]";
  };

  CollectionObject.prototype.getStorable = function() {
    return {
      _global_object_id: this.getGlobalObjectId(true)
    };
  };

  CollectionObject.prototype.getSearchFilter = function() {
    return {
      type: "in",
      fields: ["_global_object_id"],
      "in": [this.getGlobalObjectId(true)]
    };
  };

  CollectionObject.reloadObjects = function(collection_objects) {
    var co, co_by_gid, gids, i, len, req_data;
    if (collection_objects.length === 0) {
      return;
    }
    co_by_gid = {};
    for (i = 0, len = collection_objects.length; i < len; i++) {
      co = collection_objects[i];
      co_by_gid[co.getGlobalObjectId(true)] = co;
    }
    gids = Object.keys(co_by_gid);
    req_data = {
      search: [
        {
          type: "in",
          fields: ["_global_object_id"],
          "in": gids
        }
      ],
      format: "standard",
      offset: 0,
      limit: gids.length
    };
    return ez5.api.search({
      json_data: req_data
    }).done(function(data) {
      var j, len1, obj, ref;
      ref = data.objects;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        obj = ref[j];
        co_by_gid[obj._global_object_id].setObject(obj);
      }
    });
  };

  return CollectionObject;

})();
// Generated by CoffeeScript 1.10.0
var CollectionWithDetail,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

CollectionWithDetail = (function(superClass) {
  extend(CollectionWithDetail, superClass);

  function CollectionWithDetail() {
    return CollectionWithDetail.__super__.constructor.apply(this, arguments);
  }

  CollectionWithDetail.prototype.readOpts = function() {
    CollectionWithDetail.__super__.readOpts.call(this);
    return this.searchCollection = null;
  };

  CollectionWithDetail.prototype.unregisterEvents = function() {
    this.off({
      type: ["insert", "remove"]
    });
    if (this.__pollListener) {
      Events.ignore(this.__pollListener);
    }
    this.__pollListener = null;
    return this;
  };

  CollectionWithDetail.prototype.registerEvents = function() {
    var wait_block, wait_info;
    wait_info = [];
    wait_block = null;
    this.on({
      type: ["insert", "remove"],
      call: (function(_this) {
        return function(ev, info) {
          var co;
          if (ev.getType() === 'insert') {
            wait_info.push({
              info: info,
              event: ev,
              gids: (function() {
                var i, len, ref, results;
                ref = info.collection_objects;
                results = [];
                for (i = 0, len = ref.length; i < len; i++) {
                  co = ref[i];
                  results.push(co.getGlobalObjectId());
                }
                return results;
              })()
            });
            if (!wait_block) {
              wait_block = new CUI.WaitBlock({
                element: _this.searchCollection.getResultContainer()
              });
              wait_block.show();
            }
          } else {
            _this.updateAfterInsertOrRemoveEvent(ev, info);
          }
        };
      })(this)
    });
    this.__pollListener = EventPoller.listen({
      filter: (function(_this) {
        return function(event) {
          var found, i, j, len, len1, r_info, ref, remove_wait_info, w_info;
          if (event.type !== 'OBJECT_INDEX' || !event.global_object_id) {
            return false;
          }
          found = false;
          remove_wait_info = [];
          for (i = 0, len = wait_info.length; i < len; i++) {
            w_info = wait_info[i];
            if (ref = event.global_object_id, indexOf.call(w_info.gids, ref) >= 0) {
              removeFromArray(event.global_object_id, w_info.gids);
              if (w_info.gids.length === 0) {
                remove_wait_info.push(w_info);
              }
              event.__info = w_info;
              found = true;
            }
          }
          for (j = 0, len1 = remove_wait_info.length; j < len1; j++) {
            r_info = remove_wait_info[j];
            removeFromArray(r_info, wait_info);
          }
          return found;
        };
      })(this),
      instance: this,
      call: (function(_this) {
        return function(events) {
          var event;
          console.debug("wait infos left:", wait_info.length);
          if (wait_info.length > 0) {
            return;
          }
          wait_block.destroy();
          wait_block = null;
          event = events[events.length - 1];
          _this.updateAfterInsertOrRemoveEvent(event.__info.event, event.__info.info);
        };
      })(this)
    });
    return this;
  };

  CollectionWithDetail.prototype.setManager = function(manager) {
    CollectionWithDetail.__super__.setManager.call(this, manager);
    this.detailDiv = this.manager.getCollectionDetailDiv();
    return assert(this.detailDiv, "new " + (getObjectClass(this)), "Manager returned empty collection detail div", {
      opts: this.opts
    });
  };

  CollectionWithDetail.prototype.isShowingInSearch = function() {
    return false;
  };

  CollectionWithDetail.prototype.updateAfterInsertOrRemoveEvent = function(ev, info) {
    var lastData, offset;
    if (!this.searchCollection) {
      return;
    }
    if ((ev != null ? ev.getType() : void 0) === "insert") {
      if (isNull(info.before_idx)) {
        offset = this.getCount() - 1;
      } else {
        offset = info.before_idx;
      }
    } else {
      lastData = this.searchCollection.getLastData();
      if (!lastData) {
        offset = 0;
      } else {
        offset = lastData.offset;
        if (this.getCount() <= offset) {
          offset = Math.max(0, Math.floor((this.getCount() - 1) / lastData.limit) * lastData.limit);
        }
      }
    }
    return this.searchCollection.execute(new Request({
      update: true,
      offset: offset,
      scroll_into_view_offset: offset
    }));
  };

  CollectionWithDetail.prototype.showFullscreen = function() {
    return new DetailFullscreen({
      collection: this,
      offset: 0
    });
  };

  CollectionWithDetail.prototype.getDownloadManagerClass = function() {
    var ref;
    return ((ref = this.getManager()) != null ? ref.getDownloadManagerClass() : void 0) || ez5.defaults["class"].DownloadManager;
  };

  CollectionWithDetail.prototype.getCurrentTools = function() {
    var count, tools;
    tools = CollectionWithDetail.__super__.getCurrentTools.call(this);
    count = this.getCount();
    if (count === 0) {
      return tools;
    }
    if (this.isDownloadable() && ez5.session.hasSystemRight("root", "frontend_features[download]")) {
      tools.push(new ToolboxTool({
        group: this.getToolGroup(),
        name: this.getToolNamePrefix() + ".download",
        sort: "D:1",
        loca_key: "tool." + this.getToolNamePrefix() + ".download",
        loca_key_attrs: {
          count: count
        },
        disabled: count === 0,
        favorite: true,
        run: (function(_this) {
          return function() {
            var cls;
            cls = _this.getDownloadManagerClass();
            return new cls({
              collection: _this
            }).startExport();
          };
        })(this)
      }));
    }
    if (count > 0) {
      if (this.isExportable() && ez5.session.hasSystemRight("root", "frontend_features[export]")) {
        tools.push(new ToolboxTool({
          group: this.getToolGroup(),
          name: this.getToolNamePrefix() + ".export",
          sort: "D:2",
          disabled: count === 0,
          run: (function(_this) {
            return function() {
              return new ExportManager({
                search: new SearchCollectionHeadless({
                  collection: _this
                })
              }).prepareExport();
            };
          })(this)
        }));
      }
      if (this.isPrintable() && ez5.session.hasSystemRight("root", "frontend_features[print]")) {
        tools.push(new ToolboxTool({
          group: this.getToolGroup(),
          name: this.getToolNamePrefix() + ".print",
          sort: "D:3",
          disabled: count === 0,
          run: (function(_this) {
            return function(ev) {
              return new PrintManager({
                search: new SearchCollectionHeadless({
                  collection: _this
                })
              }).print(ev);
            };
          })(this)
        }));
      }
      if (this.isSearchable()) {
        tools.push(new ToolboxTool({
          group: this.getToolGroup(),
          sort: "A:4",
          name: this.getToolNamePrefix() + ".search",
          run: (function(_this) {
            return function() {
              return _this.copy().showInSearch();
            };
          })(this)
        }));
      }
      if (this.isFullscreenable()) {
        tools.push(new ToolboxTool({
          group: this.getToolGroup(),
          name: this.getToolNamePrefix() + ".show.fullscreen",
          sort: "B:3",
          run: (function(_this) {
            return function() {
              return _this.showFullscreen();
            };
          })(this)
        }));
      }
    }
    return tools;
  };

  CollectionWithDetail.prototype.addedToListView = function(DOMNodes) {
    CollectionWithDetail.__super__.addedToListView.call(this, DOMNodes);
    this.makeDroppable(DOMNodes[0]);
    return this;
  };

  CollectionWithDetail.prototype.makeDroppable = function(el) {
    new Droppable({
      element: el,
      dropHelper: true,
      accept: (function(_this) {
        return function(ev, info) {
          return _this.acceptDrop(ev, info);
        };
      })(this),
      drop: (function(_this) {
        return function(ev, info) {
          return _this.takeDrop(ev, info);
        };
      })(this)
    });
    this.initDropzone(el);
    return this;
  };

  CollectionWithDetail.prototype.makeDetailDroppable = function(el) {
    if (!this.canAppend()) {
      return this;
    }
    new Droppable({
      element: el,
      selector: ".result-dynamic",
      targetHelper: true,
      dropHelper: true,
      accept: function(ev, info) {
        if (!info.globalDrag.objects) {
          return false;
        }
      },
      drop: (function(_this) {
        return function(ev, info) {
          var before_idx;
          if (!info.dropTargetPos) {
            before_idx = null;
          } else {
            before_idx = parseInt(CUI.DOM.getAttribute(info.dropTarget, "offset"));
            if (!(before_idx >= 0)) {
              return false;
            }
            if (info.dropTargetPos === "after") {
              before_idx++;
            }
            if (before_idx === _this.getCount()) {
              before_idx = null;
            }
          }
          CUI.debug("drop", info, before_idx);
          return _this.insertObjects(info.globalDrag.objects, before_idx);
        };
      })(this)
    });
    this.initDropzone(el);
    return this;
  };

  CollectionWithDetail.prototype.initDropzone = function(el) {};

  CollectionWithDetail.prototype.acceptDrop = function(ev, info) {
    if (!info.globalDrag.objects) {
      return false;
    } else if (this.canAppend()) {
      return true;
    } else {
      return false;
    }
  };

  CollectionWithDetail.prototype.takeDrop = function(ev, info) {
    if (info.globalDrag.objects) {
      CUI.debug("insertObjects", info.globalDrag.objects, this.searchCollection);
      return this.insertObjects(info.globalDrag.objects);
    }
  };

  CollectionWithDetail.prototype.insertInProgress = function() {
    return false;
  };

  CollectionWithDetail.prototype.insertObjects = function() {
    return assert(false, getObjectClass(this) + ".insertObjects", "Needs implementation.");
  };

  CollectionWithDetail.prototype.select = function(ev) {
    return CollectionWithDetail.__super__.select.call(this, ev).done((function(_this) {
      return function() {
        return _this.prepareCurrentTools().done(function() {
          return _this.showDetail();
        });
      };
    })(this));
  };

  CollectionWithDetail.prototype.deselect = function(ev) {
    return CollectionWithDetail.__super__.deselect.call(this, ev).done((function(_this) {
      return function() {
        var ref;
        _this.unregisterEvents();
        if ((ref = _this.searchCollection) != null) {
          ref.destroy();
        }
        _this.searchCollection = null;
        _this.manager.resetCollectionDetailDiv();
        return Droppable.destroy(_this.detailDiv);
      };
    })(this));
  };

  CollectionWithDetail.prototype.canAppend = function() {
    return false;
  };

  CollectionWithDetail.prototype.showDetail = function() {
    var cls;
    this.detailDiv.empty();
    cls = this.manager.getSearchCollectionClass();
    this.searchCollection = new cls({
      container: this.detailDiv,
      collection: this
    });
    return this.searchCollection.init().done((function(_this) {
      return function() {
        if (!_this.searchCollection) {
          return;
        }
        _this.makeDetailDroppable(_this.searchCollection.getResultContainer());
        return _this.registerEvents();
      };
    })(this));
  };

  CollectionWithDetail.prototype.isFullscreenable = function() {
    return true;
  };

  CollectionWithDetail.prototype.isDownloadable = function() {
    return true;
  };

  CollectionWithDetail.prototype.isExportable = function() {
    return true;
  };

  CollectionWithDetail.prototype.isPrintable = function() {
    return true;
  };

  CollectionWithDetail.prototype.destroy = function() {
    this.unregisterEvents();
    return CollectionWithDetail.__super__.destroy.call(this);
  };

  return CollectionWithDetail;

})(CollectionSearchNode);
// Generated by CoffeeScript 1.10.0
var CollectionStorable,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

CollectionStorable = (function(superClass) {
  extend(CollectionStorable, superClass);

  function CollectionStorable(opts1) {
    this.opts = opts1 != null ? opts1 : {};
    this.WEGmoveNodeBefore = bind(this.WEGmoveNodeBefore, this);
    this.equals = bind(this.equals, this);
    CollectionStorable.__super__.constructor.call(this, this.opts);
    this.__loadedFromDb = false;
  }

  CollectionStorable.prototype.equals = function(collection) {
    if (this.data.collection._id && (collection != null ? collection.data.collection._id : void 0)) {
      return this.data.collection._id === collection.data.collection._id;
    } else {
      return false;
    }
  };

  CollectionStorable.prototype.setData = function(data1) {
    this.data = data1;
    CollectionStorable.__super__.setData.call(this, this.data);
    if (!this.data._generated_rights) {
      this.data._generated_rights = {};
    }
    if (!this.data.collection.webfrontend_props) {
      this.data.collection.webfrontend_props = {};
    }
    if (this.data.collection._id) {
      this.hashId = this.data.collection._id + "";
    }
    return this;
  };

  CollectionStorable.prototype.getData = function() {
    return this.data;
  };

  CollectionStorable.prototype.getHashId = function() {
    return this.hashId;
  };

  CollectionStorable.prototype.getChildren = function() {
    var cm, dfr, search;
    cm = this.getManager();
    search = cm.getCollectionSearchFilter();
    search.push({
      type: "in",
      "in": [this.getId()],
      fields: ["collection._id_parent"]
    });
    dfr = new CUI.Deferred();
    ez5.api.search({
      data: {
        debug: "CollectionManager"
      },
      json_data: {
        type: "collection",
        limit: 100000,
        search: search,
        sort: cm.getCollectionSortFilter()
      }
    }).done(function(data) {
      var col, cols, i, len, ref;
      cols = [];
      ref = data.objects;
      for (i = 0, len = ref.length; i < len; i++) {
        col = ref[i];
        cols.push(cm.getCollectionWorkfolderClass().newInstance({
          collection: col,
          manager: cm
        }));
      }
      CUI.debug("got some collections", data, cols);
      return dfr.resolve(cols);
    }).fail(dfr.reject);
    return dfr.promise();
  };

  CollectionStorable.prototype.hasChildren = function() {
    return !!this.data._has_children;
  };

  CollectionStorable.prototype.getCount = function() {
    return this.data._count;
  };

  CollectionStorable.prototype.getSaveData = function(data) {
    var mask, ot_name, pool_id, ref, ref1, ref2, ref3, ref4, ref5, save_data, sd;
    if (data == null) {
      data = this.data;
    }
    save_data = {
      collection: {
        _id: data.collection._id,
        _id_parent: data.collection._id_parent,
        _version: data.collection._version,
        children_allowed: data.collection.children_allowed,
        objects_allowed: data.collection.objects_allowed,
        displayname: copyObject(data.collection.displayname, true),
        description: copyObject(data.collection.description, true),
        type: data.collection.type,
        webfrontend_props: copyObject(data.collection.webfrontend_props, true)
      }
    };
    delete ((ref = save_data.collection.displayname) != null ? ref._undo : void 0);
    if (this.aclManager && data === this.data) {
      save_data._acl = this.aclManager.getSaveData();
    }
    if ((ref1 = data._generated_rights) != null ? ref1.bag_acl : void 0) {
      save_data._private_acl = data._private_acl;
    }
    if (this.editor_data && data === this.data) {
      ot_name = (ref2 = ez5.schema.CURRENT._table_by_id[this.editor_data.choice_table_id]) != null ? ref2.name : void 0;
      if (this.editor_data._create_objects) {
        mask = Mask.getMaskByMaskName(this.editor_data.mask_name);
        pool_id = ((ref3 = this.editor_data._pool) != null ? ref3.pool._id : void 0) || null;
        if ((mask != null ? mask.table.poolLink() : void 0) && !pool_id) {
          throw new InvalidSaveDataException();
        }
        sd = {
          objecttype: ot_name || null,
          mask_id: (mask != null ? mask.id() : void 0) || null,
          pool_id: pool_id,
          eas_field: ((ref4 = this.editor_data.bulk_field) != null ? ref4.fullNameForCollectionSave() : void 0) || null,
          mapping: this.editor_data.mapping || null
        };
        if (((ref5 = this.editor_data._tags) != null ? ref5.length : void 0) > 0) {
          sd.tags = this.editor_data._tags;
        } else {
          sd.tags = null;
        }
      } else {
        sd = {
          objecttype: null,
          mask_id: null,
          pool_id: null,
          eas_field: null,
          tags: null
        };
      }
      save_data.collection.create_object = sd;
    }
    return save_data;
  };

  CollectionStorable.prototype.getDescription = function() {
    return ez5.loca.getBestFrontendValue(this.data.collection.description);
  };

  CollectionStorable.prototype.getCounterItems = function() {
    return [];
  };

  CollectionStorable.prototype.getContent = function() {
    var content, i, item, ref;
    content = CollectionStorable.__super__.getContent.call(this);
    ref = this.getCounterItems();
    for (i = ref.length - 1; i >= 0; i += -1) {
      item = ref[i];
      content.splice(0, 0, item);
    }
    return content;
  };

  CollectionStorable.prototype.__showWaitModal = function(status) {
    var attrs, i, info, k, len, ref;
    attrs = {};
    info = this.__fileUpload.getInfo();
    ref = ["count", "done", "total", "loaded", "percent"];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      if (k === "total" || k === "loaded") {
        attrs[k] = ez5.format_filesize(info[k]);
      } else if (k === "done") {
        attrs[k] = info[k] + 1;
      } else {
        attrs[k] = info[k];
      }
    }
    attrs.collection = this.renderNameAsText();
    return this.__upload_editor.showWaitModal(status, attrs, this.__upload_abort_btn);
  };

  CollectionStorable.prototype.__doUpload = function() {
    if (!this.__upload_editor) {
      this.__upload_editor = new EditorHeadlessNew({
        collection: this
      });
      this.__initFromDb = this.loadFromDb();
      this.__upload_abort_btn = new LocaButton({
        loca_key: "collection.storable.abort_upload",
        onClick: (function(_this) {
          return function() {
            return _this.__fileUpload.clear();
          };
        })(this)
      });
    }
    return this.__showWaitModal("uploading");
  };

  CollectionStorable.prototype.__clearUpload = function() {
    if (!this.__upload_editor) {
      return;
    }
    this.__upload_editor.destroy();
    this.__fileUpload.clear();
    return delete this.__upload_editor;
  };

  CollectionStorable.prototype.__saveUpload = function() {
    var master_dfr;
    master_dfr = new CUI.Deferred();
    master_dfr.always((function(_this) {
      return function() {
        return _this.__clearUpload();
      };
    })(this));
    this.__upload_abort_btn.disable();
    this.__showWaitModal('storing');
    this.__initFromDb.done((function(_this) {
      return function() {
        var bulk_field, co, dfr, dupDialog, file, fn, i, len, mask_name, new_objects_count, promises, ref;
        co = _this.data._create_object_compiled;
        mask_name = ez5.mask.CURRENT._mask_by_id[co.mask_id].name;
        _this.__upload_editor.editor_data.mask_name = mask_name;
        _this.__upload_editor.setTableByName(co.objecttype);
        _this.__upload_editor.setPoolFromPoolId(co.pool_id);
        _this.__upload_editor.setTags(co.tags);
        _this.__upload_editor.setMapping(co.mapping);
        bulk_field = _this.__upload_editor.setEASFieldByCollectionStoreName(co.eas_field);
        if (!bulk_field) {
          CUI.problem({
            text: $$('collection.storable.upload_error_eas_field_not_found')
          });
          master_dfr.reject();
          return;
        }
        promises = [];
        dupDialog = new DuplicatesDialog();
        new_objects_count = 0;
        ref = _this.__fileUpload.getFiles();
        fn = function(dfr, file) {
          return dupDialog.addFile(file).done(function() {
            file._value = {
              _id: file.getData()[0]._id,
              original_filename: file.getName()
            };
            new_objects_count = new_objects_count + 1;
            return _this.__upload_editor.addFileToEditor(file).done(dfr.resolve).fail(dfr.reject);
          }).fail(dfr.resolve);
        };
        for (i = 0, len = ref.length; i < len; i++) {
          file = ref[i];
          dfr = new CUI.Deferred();
          promises.push(dfr);
          fn(dfr, file);
        }
        return CUI.when(promises).done(function() {
          if (new_objects_count === 0) {
            master_dfr.resolve();
            return;
          }
          return _this.__upload_editor.save().done(function() {
            var cos, j, len1, ref1, ro;
            cos = [];
            ref1 = _this.__upload_editor.object_list.getObjects();
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              ro = ref1[j];
              cos.push(ro.getCollectionObject());
            }
            _this.data._count += cos.length;
            _this.triggerEvent("insert", {
              collection_objects: cos
            }).done(function() {
              _this.makeDroppable(_this.getDOMNodes()[0]);
              return _this.updateDisplay(true);
            });
            return master_dfr.resolve();
          }).fail(master_dfr.reject);
        }).fail(master_dfr.reject);
      };
    })(this)).fail(master_dfr.reject);
    return master_dfr.promise();
  };

  CollectionStorable.prototype.initDropzone = function(el) {
    var editor, ref;
    if (this.canUpload()) {
      if (!this.__fileUpload) {
        editor = null;
        this.__fileUpload = new FileUpload({
          url: ez5.eas.getUploadUrl(),
          onBatchDone: (function(_this) {
            return function() {
              if (!_this.__upload_editor) {
                return;
              }
              return _this.__saveUpload();
            };
          })(this),
          onProgress: (function(_this) {
            return function() {
              return _this.__doUpload();
            };
          })(this),
          onFail: (function(_this) {
            return function(file) {
              if (file.getStatus() !== "ABORT") {
                EAS.presentUploadError(file);
              }
              return _this.__clearUpload();
            };
          })(this)
        });
      }
      return this.__fileUpload.initDropZone({
        dropZone: el
      });
    } else {
      return (ref = this.__fileUpload) != null ? ref.resetDropZones() : void 0;
    }
  };

  CollectionStorable.prototype.canUpload = function() {
    var ref;
    if ((ref = this.data._create_object_compiled) != null ? ref.eas_field : void 0) {
      return true;
    } else {
      return false;
    }
  };

  CollectionStorable.prototype.editPromptText = function() {
    return $$("collection.storable.name_prompt_text");
  };

  CollectionStorable.prototype.edit = function() {
    var dfr;
    dfr = new CUI.Deferred();
    this.loadFromDb().done((function(_this) {
      return function() {
        var _lang, current_name, i, lang, len, ref;
        lang = ez5.loca.getPreferredDatabaseLanguage();
        if (!_this.data.collection.displayname) {
          _this.data.collection.displayname = {};
          ref = ez5.loca.getDatabaseLanguages();
          for (i = 0, len = ref.length; i < len; i++) {
            _lang = ref[i];
            _this.data.collection.displayname[_lang] = "";
          }
        }
        current_name = _this.data.collection.displayname[lang];
        return CUI.prompt({
          text: _this.editPromptText(),
          "default": current_name,
          button_text_ok: $$("collection.storable.button_prompt_ok"),
          onChoice: function(ev, choice, dialog, btn) {
            var new_name;
            if (choice.choice !== "ok") {
              return;
            }
            new_name = dialog.getValue().trim();
            if (current_name !== new_name) {
              _this.data.collection.displayname[lang] = new_name;
              btn.startSpinner();
              return _this.save(ev).always(function() {
                return btn.stopSpinner();
              });
            }
          }
        }).done(function(new_name) {
          return dfr.resolve(_this);
        }).fail(function() {
          if (!_this.getId()) {
            return _this.remove().always(dfr.reject);
          } else {
            return dfr.reject();
          }
        });
      };
    })(this));
    return dfr.promise();
  };

  CollectionStorable.prototype.save = function(ev, save_data) {
    var api, dfr;
    if (save_data == null) {
      save_data = this.getSaveData();
    }
    if (this.getId()) {
      api = "/collection/" + (this.getId());
      save_data.collection._version++;
    } else {
      api = "/collection";
      save_data.collection._version = 1;
    }
    if (ev != null ? ev.hasModifierKey() : void 0) {
      CUI.debug(getObjectClass(this), dump(save_data));
      dfr = new CUI.Deferred();
      dfr.reject();
      return dfr.promise();
    }
    return ez5.server({
      api: api,
      type: this.getId() ? "POST" : "PUT",
      json_data: save_data
    }).done((function(_this) {
      return function(data) {
        _this.__loadedFromDb = true;
        _this.setData(data);
        if (_this.isAddedToListView()) {
          _this.makeDroppable(_this.getDOMNodes()[0]);
          if (_this.searchCollection) {
            _this.makeDetailDroppable(_this.searchCollection.getResultContainer());
          }
          _this.updateDisplay(true);
        }
        return _this.triggerEvent("update");
      };
    })(this));
  };

  CollectionStorable.prototype.isRenamable = function() {
    return this.isWritable();
  };

  CollectionStorable.prototype.prepareCurrentTools = function() {
    if (!this.getId()) {
      return CUI.resolvedPromise();
    }
    return this.loadFromDb();
  };

  CollectionStorable.prototype.getCurrentTools = function() {
    var tools;
    tools = CollectionStorable.__super__.getCurrentTools.call(this);
    if (this.isRenamable()) {
      tools.push(new ToolboxTool({
        group: "collection",
        name: "collection.rename",
        sort: "H:3",
        run: (function(_this) {
          return function() {
            return _this.edit();
          };
        })(this)
      }));
    }
    if (this.isCreateChildAllowed()) {
      tools.push(new ToolboxTool({
        group: "collection",
        name: "collection.new_child",
        sort: "H:1",
        run: (function(_this) {
          return function() {
            var mng;
            mng = _this.getManager();
            return mng.newCollection(mng.getCollectionWorkfolderClass(), _this);
          };
        })(this)
      }));
    }
    if (this.enableShare()) {
      tools.push(new ToolboxTool({
        group: "collection",
        name: "collection.share",
        sort: "F:2",
        favorite: true,
        run: (function(_this) {
          return function() {
            return _this.popoverEditorShare();
          };
        })(this)
      }));
    }
    if (this.enableSettings()) {
      tools.push(new ToolboxTool({
        group: "collection",
        name: "collection.settings",
        sort: "H:2",
        favorite: true,
        run: (function(_this) {
          return function() {
            return _this.popoverEditorSettings();
          };
        })(this)
      }));
    }
    if (this.isDeletable()) {
      tools.push(new ToolboxTool({
        group: "collection",
        name: "collection.delete",
        sort: "H:4",
        run: (function(_this) {
          return function() {
            return _this["delete"]();
          };
        })(this)
      }));
    }
    return tools;
  };

  CollectionStorable.prototype.addedToListView = function(DOMNodes) {
    CollectionStorable.__super__.addedToListView.call(this, DOMNodes);
    this.makeDraggable(DOMNodes[0]);
    return this;
  };

  CollectionStorable.prototype.makeDraggable = function(el) {
    new Draggable({
      element: el,
      create: (function(_this) {
        return function() {
          return {
            collectionStorable: _this
          };
        };
      })(this),
      axis: "y"
    });
  };

  CollectionStorable.prototype.acceptDrop = function(ev, info) {
    var col;
    col = info.globalDrag.collectionStorable;
    if (!col) {
      return CollectionStorable.__super__.acceptDrop.call(this, ev, info);
    }
    if (indexOf.call(this.getPath(true), col) >= 0) {
      return false;
    }
    if (this === col.getFather()) {
      return false;
    }
    if (this.canHaveChildren()) {
      return true;
    } else {
      return false;
    }
  };

  CollectionStorable.prototype.takeDrop = function(ev, info) {
    var col;
    col = info.globalDrag.collectionStorable;
    if (!col) {
      return CollectionStorable.__super__.takeDrop.call(this, ev, info);
    }
    return col.loadFromDb().done((function(_this) {
      return function() {
        var sd;
        CUI.debug("col", col.getId(), "new father", _this.getId());
        sd = col.getSaveData();
        sd.collection._id_parent = _this.getId();
        return col.save(ev, sd).done(function() {
          Collection.prototype.remove.call(col, false, false);
          return _this.addChild(col);
        });
      };
    })(this));
  };

  CollectionStorable.prototype.deselect = function(ev) {
    return CollectionStorable.__super__.deselect.call(this, ev).done((function(_this) {
      return function() {
        var ref;
        _this.__clearUpload();
        return (ref = _this.__fileUpload) != null ? ref.destroy() : void 0;
      };
    })(this));
  };

  CollectionStorable.prototype.WEGallowRowMove = function(target_node, new_father, after) {
    if (new_father instanceof CollectionSystemUser) {
      return true;
    } else if (new_father instanceof CollectionSystem) {
      return false;
    } else if (new_father instanceof CollectionWorkfolder) {
      return true;
    } else {
      return false;
    }
  };

  CollectionStorable.prototype.WEGmoveNodeBefore = function(to_node, new_father, after) {
    var ref, save_data;
    save_data = this.getSaveData();
    save_data.collection._id_parent = (ref = new_father.data) != null ? ref.collection._id : void 0;
    return this.save(null, save_data).done((function(_this) {
      return function(data) {
        return CUI.debug("collection saved", data);
      };
    })(this));
  };

  CollectionStorable.prototype.getId = function() {
    return this.data.collection._id;
  };

  CollectionStorable.prototype.getVersion = function() {
    return this.data.collection._version;
  };

  CollectionStorable.prototype.getUUID = function() {
    return this.data.collection.uuid;
  };

  CollectionStorable.prototype.matchesLocator = function(locator) {
    return CollectionStorable.__super__.matchesLocator.call(this, locator) || this.getUUID() === locator;
  };

  CollectionStorable.prototype["delete"] = function() {
    var dfr;
    dfr = new CUI.Deferred();
    CUI.confirm({
      text: $$("collection.storable.delete.confirm_text"),
      button_text_ok: $$("collection.storable.delete.confirm_button")
    }).fail(dfr.reject).done((function(_this) {
      return function() {
        if (_this.getId()) {
          return ez5.api.collection({
            api: "/" + _this.getId(),
            type: "DELETE"
          }).done(function() {
            return _this.remove().done(dfr.resolve).fail(dfr.reject);
          }).fail(dfr.reject);
        } else {
          return _this.remove().done(dfr.resolve).fail(dfr.reject);
        }
      };
    })(this));
    return dfr.promise();
  };

  CollectionStorable.prototype.renderNameAsHtml = function() {
    var name;
    name = ez5.loca.getBestFrontendValue(this.data.collection.displayname, true);
    if (isEmpty(name)) {
      name = $$("collection.storable.placeholder");
    }
    return name;
  };

  CollectionStorable.prototype.renderNameAsText = function() {
    return ez5.loca.getBestFrontendValue(this.data.collection.displayname);
  };

  CollectionStorable.prototype.refresh = function() {
    this.__loadedFromDb = false;
    return this.loadFromDb().done((function(_this) {
      return function() {
        return _this.updateDisplay();
      };
    })(this));
  };

  CollectionStorable.prototype.copy = function() {
    var col;
    col = CollectionStorable.__super__.copy.call(this);
    col.setData(this.getData());
    col.__loadedFromDb = this.__loadedFromDb;
    return col;
  };

  CollectionStorable.prototype.loadFromDb = function() {
    if (this.__loadedFromDb || !this.getId()) {
      return CUI.resolvedPromise(this.data);
    }
    return ez5.api.collection({
      api: "/" + this.getId()
    }).done((function(_this) {
      return function(data) {
        _this.__loadedFromDb = true;
        return _this.setData(data);
      };
    })(this));
  };

  CollectionStorable.prototype.createObjectsTab = function() {
    var dfr;
    dfr = new CUI.Deferred();
    this.loadFromDb().done((function(_this) {
      return function() {
        var co, data_hotfolder_urls, fields, general_form, hotfolder_url, i, idx, lay, len, modal, new_editor, ref, ref1, ref2, set_create_objects_tab_state, set_fields;
        co = _this.data.collection.create_object;
        if (co.objecttype) {
          _this.editor_data = {
            choice_table_id: ((ref = ez5.schema.CURRENT._table_by_name[co.objecttype]) != null ? ref.table_id : void 0) || null,
            mask_name: ((ref1 = ez5.mask.CURRENT._mask_by_id[co.mask_id]) != null ? ref1.name : void 0) || null,
            bulk_field: null,
            mapping: co.mapping,
            _create_objects: true,
            _tags: co.tags || []
          };
        } else {
          _this.editor_data = {
            _create_objects: false,
            bulk_field: null
          };
        }
        new_editor = new EditorHeadlessNew({
          data: _this.editor_data
        });
        new_editor.setPoolFromPoolId(co.pool_id);
        if (co.objecttype) {
          new_editor.setTableByName(co.objecttype);
          new_editor.setEASFieldByCollectionStoreName(co.eas_field);
        }
        modal = null;
        lay = new VerticalLayout({
          maximize: false,
          top: {},
          center: {}
        });
        fields = [
          {
            type: Checkbox,
            form: {
              label: $$("collection.form.create_objects")
            },
            name: "_create_objects"
          }
        ];
        if (!_this.data._hotfolder_upload_urls) {
          _this.data._hotfolder_upload_urls = [];
        }
        data_hotfolder_urls = {};
        ref2 = _this.data._hotfolder_upload_urls;
        for (idx = i = 0, len = ref2.length; i < len; idx = ++i) {
          hotfolder_url = ref2[idx];
          data_hotfolder_urls["url_" + idx] = hotfolder_url.url;
          fields.push({
            type: Input,
            form: {
              label: $$("server.base.hotfolder.urls.type." + hotfolder_url.type)
            },
            readonly: true,
            data: data_hotfolder_urls,
            name: "url_" + idx
          });
        }
        if (fields.length === 1) {
          fields.push({
            type: Output,
            placeholder: $$("collection.form.hotfolder_urls.missing_hint")
          });
          set_fields = function(on_off) {};
        } else {
          set_fields = function(on_off) {
            var field, j, len1, ref3, results;
            ref3 = general_form.getFields();
            results = [];
            for (idx = j = 0, len1 = ref3.length; j < len1; idx = ++j) {
              field = ref3[idx];
              if (idx === 0) {
                continue;
              }
              if (on_off) {
                results.push(field.enable());
              } else {
                results.push(field.disable());
              }
            }
            return results;
          };
        }
        general_form = new Form({
          data: _this.editor_data,
          fields: fields
        }).start();
        lay.replace(general_form, "top");
        set_create_objects_tab_state = function() {
          if (_this.editor_data._create_objects) {
            if (CUI.__ng__) {
              lay.center().removeClass("cui-disabled");
            } else {
              lay.center().removeClass("disabled");
            }
            return set_fields(true);
          } else {
            if (CUI.__ng__) {
              lay.center().addClass("cui-disabled");
            } else {
              lay.center().addClass("disabled");
            }
            return set_fields(false);
          }
        };
        set_create_objects_tab_state();
        Events.listen({
          type: "data-changed",
          node: lay,
          call: function() {
            return set_create_objects_tab_state();
          }
        });
        new_editor.setModalFormContainer(lay.center());
        return new_editor.initDbInfo(false).done(function(opts) {
          if (opts.length === 0) {
            return dfr.resolve();
          } else {
            return new_editor.updateModalForm().done(function() {
              return dfr.resolve(lay);
            }).fail(dfr.reject);
          }
        }).fail(dfr.reject);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  CollectionStorable.prototype.getShareUrl = function(who) {
    var loc, url;
    loc = document.location;
    if (who instanceof AclWhoCollection) {
      url = loc.origin + ("/collection/" + (this.getUUID()) + "?") + who.getLoginUrl();
    } else {
      url = loc.origin + ("/collection/" + (this.getUUID()));
    }
    if (window.easydb_server_url) {
      if (url.match(/\?/)) {
        url = url + "&server=" + window.easydb_server_url;
      } else {
        url = url + "?server=" + window.easydb_server_url;
      }
    }
    return url;
  };

  CollectionStorable.prototype.isCreateChildAllowed = function() {
    var ref;
    if (!this.getManager().newCollection) {
      return false;
    } else if (((ref = this.data._generated_rights) != null ? ref.bag_create : void 0) && this.data.collection.children_allowed) {
      return true;
    } else {
      return false;
    }
  };

  CollectionStorable.prototype.isWritable = function() {
    if (!this.getId() || this.data._generated_rights.bag_write) {
      return true;
    } else {
      return false;
    }
  };

  CollectionStorable.prototype.isDeletable = function() {
    if (!this.getId() || this.data._generated_rights.bag_delete) {
      return true;
    } else {
      return false;
    }
  };

  CollectionStorable.prototype.canUnlink = function() {
    if (!this.getId() || this.data._generated_rights.unlink) {
      return true;
    } else {
      return false;
    }
  };

  CollectionStorable.prototype.enableShare = function() {
    if (!this.getId() || this.data._generated_rights.bag_acl) {
      if (ez5.session.hasSystemRight("root", "frontend_features[collection][sharing]")) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  };

  CollectionStorable.prototype.enableSettings = function() {
    if (this.isWritable()) {
      return true;
    } else {
      return false;
    }
  };

  CollectionStorable.prototype.popoverEditorSettings = function() {
    return this.popoverEditorShare("general");
  };

  CollectionStorable.prototype.getGeneralFormFields = function(data) {
    return [
      {
        type: MultiInput,
        data: data.collection,
        form: {
          label: $$("collection.form.displayname")
        },
        name: "displayname",
        control: ez5.loca.getLanguageControlAdmin()
      }, {
        type: MultiInput,
        data: data.collection,
        form: {
          label: $$("collection.form.description")
        },
        textarea: true,
        name: "description",
        control: ez5.loca.getLanguageControlAdmin()
      }
    ];
  };

  CollectionStorable.prototype.popoverEditorShare = function(start_tab) {
    var current_data, i, k, keys, len, modal, modal_fail, rollback_data, saveButton, tagForm, wb;
    if (start_tab == null) {
      start_tab = "share";
    }
    saveButton = new Button({
      text: $$("base.save"),
      disabled: true,
      onClick: (function(_this) {
        return function(ev) {
          return _this.save(ev).done(function() {
            return modal.destroy();
          });
        };
      })(this)
    });
    modal_fail = (function(_this) {
      return function() {
        wb.destroy();
        return modal.destroy();
      };
    })(this);
    keys = ["_acl", "collection"];
    current_data = {};
    for (i = 0, len = keys.length; i < len; i++) {
      k = keys[i];
      current_data[k] = copyObject(this.data[k], true);
    }
    rollback_data = (function(_this) {
      return function() {
        var j, len1;
        for (j = 0, len1 = keys.length; j < len1; j++) {
          k = keys[j];
          _this.data[k] = current_data[k];
        }
      };
    })(this);
    modal = new Modal({
      "class": "ez5-collection-storable-acl",
      cancel: true,
      fill_space: "auto",
      onHide: (function(_this) {
        return function() {
          _this.aclManager = null;
          return _this.editor_data = null;
        };
      })(this),
      onCancel: function() {
        if (saveButton.isDisabled()) {
          return modal.destroy();
        } else {
          return CUI.confirm({
            text: $$("collection.storable.confirm_cancel")
          }).done(rollback_data);
        }
      },
      pane: {
        header_left: new Label({
          text: $$("collection.form.title|text", {
            name: this.renderNameAsText()
          }),
          icon: $$("collection.form.title|icon")
        }),
        footer_right: saveButton
      }
    }).show();
    wb = new WaitBlock({
      element: modal.getPane().center()
    });
    wb.show();
    tagForm = new TagForm({
      context: this
    });
    CUI.when(tagForm.load(), this.loadFromDb()).fail(function() {
      return modal_fail();
    }).done((function(_this) {
      return function() {
        var check_btn_state, fields, general_form, owner_displayname, saveDataJson;
        if (modal.isDestroyed()) {
          return;
        }
        saveDataJson = null;
        check_btn_state = function() {
          var e, error, sd;
          try {
            sd = _this.getSaveData();
            if (JSON.stringify(sd) !== saveDataJson) {
              saveButton.enable();
            } else {
              saveButton.disable();
            }
          } catch (error) {
            e = error;
            saveButton.disable();
            if (!(e instanceof InvalidSaveDataException)) {
              throw e;
            }
          }
        };
        if (_this.data._owner) {
          if (_this.data._owner.user) {
            owner_displayname = _this.data._owner.user._generated_displayname;
          }
          if (_this.data._owner.group) {
            owner_displayname = _this.data._owner.group._generated_displayname;
          }
        }
        fields = [
          {
            form: {
              label: $$("collection.form.owner")
            },
            type: Output,
            text: owner_displayname,
            placeholder: $$("collection.storable.form.general.no_owner")
          }
        ];
        fields.push.apply(fields, _this.getGeneralFormFields(_this.data));
        fields.push(function() {
          var field;
          field = AclItem.shareLinkField(function() {
            return _this.getShareUrl();
          });
          field.form.label = $$("collection.form.direct_url");
          return field;
        });
        general_form = new Form({
          data: _this.data,
          onDataChanged: function() {
            return check_btn_state();
          },
          fields: fields
        }).start();
        _this.aclManager = new AclManager({
          data: _this.data._acl,
          context: _this,
          allowCollectionUser: true,
          allowEmailUser: true,
          filter_system_groups: !ez5.session.hasSystemRight("root", "frontend_features[collection][sharing_include_system_groups]"),
          footer_right: function() {
            return new Checkbox({
              data: _this.data,
              name: "_private_acl",
              onDataChanged: function() {
                return check_btn_state();
              },
              text: $$("collection.storable.private_acl")
            }).start();
          },
          tagForm: tagForm,
          preset: true,
          email_notification: true,
          onUpdate: function() {
            check_btn_state();
          },
          share_link: true,
          expert_menu: ["active", "who", "right", "preset", "valid_from", "valid_to", "sticky", "share_link", "email_notification", "email_language", "email_notification_text"]
        });
        return _this.createObjectsTab().fail(function() {
          return modal_fail();
        }).done(function(create_objects_tab) {
          var tabs;
          if (modal.isDestroyed()) {
            return;
          }
          saveDataJson = JSON.stringify(_this.getSaveData());
          tabs = [];
          if (_this.enableShare()) {
            tabs.push({
              name: "share",
              text: $$("collection.storable.tab.share"),
              content: _this.aclManager.getTree()
            });
          }
          tabs.push({
            name: "general",
            text: $$("collection.storable.tab.general"),
            content: general_form
          });
          if (create_objects_tab) {
            tabs.push({
              name: "create_objects",
              text: $$("collection.storable.tab.create_objects"),
              content: create_objects_tab
            });
            Events.listen({
              type: ["data-changed", "pool-field-changed"],
              node: create_objects_tab,
              call: function() {
                return check_btn_state();
              }
            });
          }
          wb.destroy();
          return modal.replace(new Tabs({
            "class": "ez5-collection-storable-tabs",
            tabs: tabs
          }).activate(start_tab));
        });
      };
    })(this));
    return this;
  };

  CollectionStorable.prototype.canAppend = function() {
    var ref;
    if (!this.getId() || ((ref = this.data._generated_rights) != null ? ref.link : void 0)) {
      return true;
    } else {
      return false;
    }
  };

  CollectionStorable.prototype.getSearchFilter = function() {
    if (!this.getId()) {
      return false;
    }
    return {
      bool: "must",
      type: "in",
      fields: ["_collections._id"],
      "in": [this.getId()]
    };
  };

  CollectionStorable.prototype.insertInProgress = function() {
    return this.__insert_in_progress;
  };

  CollectionStorable.prototype.insertObjects = function(collection_objects, before_idx) {
    var co, dfr, promise;
    if (before_idx == null) {
      before_idx = null;
    }
    this.__insert_in_progress = true;
    dfr = new CUI.Deferred();
    dfr.always((function(_this) {
      return function() {
        return _this.__insert_in_progress = false;
      };
    })(this));
    this.checkObjects(collection_objects);
    if (before_idx !== null) {
      promise = ez5.server({
        type: "POST",
        api: "/collection/splice/" + (this.getId()),
        json_data: {
          index: before_idx,
          count: 0,
          objects: (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = collection_objects.length; i < len; i++) {
              co = collection_objects[i];
              results.push(co.getStorable());
            }
            return results;
          })()
        }
      });
    } else {
      promise = ez5.server({
        type: "POST",
        api: "/collection/push/" + (this.getId()),
        json_data: {
          objects: (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = collection_objects.length; i < len; i++) {
              co = collection_objects[i];
              results.push(co.getStorable());
            }
            return results;
          })()
        }
      });
    }
    promise.done((function(_this) {
      return function(res) {
        _this.data._count = res.count;
        return _this.triggerEvent("insert", {
          collection_objects: collection_objects,
          before_idx: before_idx
        }).done(function() {
          _this.updateDisplay(true);
          return dfr.resolve(_this);
        }).fail(dfr.reject);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  CollectionStorable.prototype.removeObjects = function(collection_objects) {
    var co, dfr, promise;
    dfr = new CUI.Deferred();
    this.checkObjects(collection_objects);
    promise = ez5.server({
      type: "POST",
      api: "/collection/remove/" + (this.getId()),
      json_data: (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = collection_objects.length; i < len; i++) {
          co = collection_objects[i];
          results.push(co.getStorable());
        }
        return results;
      })()
    });
    promise.done((function(_this) {
      return function(res) {
        _this.data._count = res.count;
        return _this.triggerEvent("remove", {
          collection_objects: collection_objects
        }).done(function() {
          _this.updateDisplay(true);
          return dfr.resolve();
        }).fail(dfr.reject);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  CollectionStorable.prototype.addToRequest = function(request) {
    if (!request.search) {
      request.search = [];
    }
    return request.search.push({
      bool: "must",
      type: "in",
      fields: ["_collections._id"],
      "in": [this.getId()]
    });
  };

  CollectionStorable.prototype.executeSearch = function(req_data) {
    var opts;
    if (req_data == null) {
      req_data = {};
    }
    opts = {
      api: "/objects/" + (this.getId())
    };
    if (req_data) {
      opts.data = {
        limit: req_data.limit || 0,
        offset: req_data.offset || 0
      };
    }
    return ez5.api.collection(opts);
  };

  return CollectionStorable;

})(CollectionWithDetail);
// Generated by CoffeeScript 1.10.0
var CollectionStoredSearch,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CollectionStoredSearch = (function(superClass) {
  extend(CollectionStoredSearch, superClass);

  function CollectionStoredSearch() {
    return CollectionStoredSearch.__super__.constructor.apply(this, arguments);
  }

  CollectionStoredSearch.prototype.icon = function() {
    return "save";
  };

  CollectionStoredSearch.prototype.setData = function(data) {
    var e, err, error, k, props, ref, sm, v;
    this.data = data;
    CollectionStoredSearch.__super__.setData.call(this, this.data);
    this.data.collection.children_allowed = false;
    this.data.collection.type = "search";
    this.data.collection.objects_allowed = false;
    props = this.data.collection.webfrontend_props;
    if (!props.search) {
      props.search = {
        search: {},
        version: {}
      };
    }
    this.__search_props = props.search;
    this.__searchManagers = [];
    ref = this.__search_props.search;
    for (k in ref) {
      v = ref[k];
      if (!CUI.isFunction(window[k])) {
        continue;
      }
      try {
        sm = new window[k]({
          init_from_data: v
        });
        sm.setSearch(this.getSearch());
        this.__searchManagers.push(sm);
      } catch (error) {
        e = error;
        err = true;
      }
    }
    if (err) {
      CUI.problem({
        text: $$("collection.stored.search.error.loading", {
          name: this.renderNameAsText()
        }),
        markdown: true
      });
    }
    return this;
  };

  CollectionStoredSearch.prototype.destroy = function() {
    var i, len, ref, sm;
    ref = this.__searchManagers;
    for (i = 0, len = ref.length; i < len; i++) {
      sm = ref[i];
      sm.destroy();
    }
    this.__searchManagers = null;
    return CollectionStoredSearch.__super__.destroy.call(this);
  };

  CollectionStoredSearch.prototype.updateCounter = function() {
    return this.counterLabel.setContent();
  };

  CollectionStoredSearch.prototype.ignoreSearchManagers = function() {
    return [];
  };

  CollectionStoredSearch.prototype.makeDraggable = function(el) {};

  CollectionStoredSearch.prototype.getBadge = function() {
    return {
      icon: this.getBadgeIcon(),
      name: $$("collection.stored.search.badge.name"),
      value: this.renderNameAsText()
    };
  };

  CollectionStoredSearch.prototype.isShowingInSearch = function() {
    if (this.manager.hasSearchCollection()) {
      return true;
    } else {
      return false;
    }
  };

  CollectionStoredSearch.prototype.select = function(ev) {
    if (this.isShowingInSearch()) {
      return CollectionSearchNode.prototype.select.call(this, ev);
    } else {
      return CollectionStoredSearch.__super__.select.call(this, ev);
    }
  };

  CollectionStoredSearch.prototype.deselect = function(ev) {
    if (this.isShowingInSearch()) {
      return CollectionSearchNode.prototype.deselect.call(this, ev);
    } else {
      return CollectionStoredSearch.__super__.deselect.call(this, ev);
    }
  };

  CollectionStoredSearch.prototype.unshowInSearch = function() {
    return CollectionSearchNode.prototype.unshowInSearch.call(this);
  };

  CollectionStoredSearch.prototype.loadInSearchOnSelect = function() {
    return true;
  };

  CollectionStoredSearch.prototype.showInSearch = function(search) {
    var i, len, promises, ref, s, sm;
    if (search) {
      s = search;
    } else {
      s = this.getSearch();
    }
    promises = [];
    ref = this.__searchManagers;
    for (i = 0, len = ref.length; i < len; i++) {
      sm = ref[i];
      if (sm instanceof SearchTypeSelector) {
        if (s.getSearchTypeSelector()) {
          promises.push(s.getSearchTypeSelector().restoreFromStored(sm));
          continue;
        }
      }
      if (sm instanceof SearchInput) {
        promises.push(s.getSearchInput().restoreFromStored(sm));
        continue;
      }
      CUI.warn("CollectionStoredSearch.showInSearch: Skipping unknown saved search manager:", sm);
    }
    return CUI.when(promises).done((function(_this) {
      return function() {
        return s.execute();
      };
    })(this));
  };

  CollectionStoredSearch.prototype.createObjectsTab = function() {
    return CUI.resolvedPromise(null);
  };

  CollectionStoredSearch.prototype.addToRequest = function(request) {
    if (!request.search) {
      request.search = [];
    }
    request.search.push(this.getSearchFilter());
    CUI.debug("CollectionStoredSearch.addToRequest", request);
    return request;
  };

  CollectionStoredSearch.prototype.executeSearch = null;

  CollectionStoredSearch.prototype.editPromptText = function() {
    return $$("collection.stored.search.name_prompt_text");
  };

  CollectionStoredSearch.prototype.getSearchFilter = function() {
    var i, len, ref, req, search, sm;
    req = new Request();
    ref = this.__searchManagers;
    for (i = 0, len = ref.length; i < len; i++) {
      sm = ref[i];
      sm.addToRequest(req);
    }
    search = req.search;
    if (!search.length) {
      return false;
    }
    return {
      bool: "must",
      type: "complex",
      search: search
    };
  };

  return CollectionStoredSearch;

})(CollectionStorable);
// Generated by CoffeeScript 1.10.0
var CollectionFixedSearch,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CollectionFixedSearch = (function(superClass) {
  extend(CollectionFixedSearch, superClass);

  function CollectionFixedSearch() {
    return CollectionFixedSearch.__super__.constructor.apply(this, arguments);
  }

  CollectionFixedSearch.prototype.initOpts = function() {
    CollectionFixedSearch.__super__.initOpts.call(this);
    return this.addOpts({
      hashId: {
        check: String
      },
      getSearchObjecttypes: {
        mandatory: true,
        check: Function
      }
    });
  };

  CollectionFixedSearch.prototype.getFilter = function() {
    return this.opts.filter;
  };

  CollectionFixedSearch.prototype.edit = false;

  CollectionFixedSearch.prototype.canUnlink = function() {
    return false;
  };

  CollectionFixedSearch.prototype.getObjecttypeNames = function() {
    var i, len, ot, ref, results;
    ref = this._getSearchObjecttypes();
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      ot = ref[i];
      results.push(ot.name());
    }
    return results;
  };

  CollectionFixedSearch.prototype.getCount = function() {
    var dfr, filter;
    dfr = new CUI.Deferred();
    if (this.getObjecttypeNames().length === 0) {
      return dfr.resolve(0).promise();
    }
    filter = this.getSearchFilter();
    ez5.api.search({
      data: {
        debug: "CollectionFixedSearch"
      },
      json_data: {
        format: "short",
        limit: 0,
        generate_rights: false,
        search: [filter]
      }
    }).done((function(_this) {
      return function(data) {
        var c;
        c = _this.getCountFromData(data, filter);
        return dfr.resolve(c);
      };
    })(this)).fail(function(xhr) {
      return dfr.resolve("Err");
    });
    return dfr.promise();
  };

  CollectionFixedSearch.prototype.getCountFromData = function(data, filter) {
    return data.count;
  };

  CollectionFixedSearch.prototype.renderNameAsText = function() {
    return $$("collection.fixed_search." + this.getHashId());
  };

  CollectionFixedSearch.prototype.getDescription = function() {
    return $$("collection.fixed_search." + this.getHashId() + ".description");
  };

  CollectionFixedSearch.prototype.getHashId = function() {
    return this._hashId;
  };

  CollectionFixedSearch.prototype.getSearchFilter = function() {
    var filter;
    filter = {
      type: "complex",
      search: [this.getFilter()]
    };
    filter.search.push({
      type: "in",
      fields: ["_objecttype"],
      "in": this.getObjecttypeNames()
    });
    return filter;
  };

  CollectionFixedSearch.prototype.addToRequest = function(request) {
    if (!request.search) {
      request.search = [];
    }
    request.search.push(this.getSearchFilter());
    return request;
  };

  CollectionFixedSearch.prototype.loadInSearchOnSelect = function() {
    return true;
  };

  CollectionFixedSearch.prototype.isMovable = function() {
    return false;
  };

  return CollectionFixedSearch;

})(CollectionSearchNode);
// Generated by CoffeeScript 1.10.0
var CollectionFixedSearchAnyToday,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

CollectionFixedSearchAnyToday = (function(superClass) {
  extend(CollectionFixedSearchAnyToday, superClass);

  function CollectionFixedSearchAnyToday() {
    return CollectionFixedSearchAnyToday.__super__.constructor.apply(this, arguments);
  }

  CollectionFixedSearchAnyToday.prototype.initOpts = function() {
    CollectionFixedSearchAnyToday.__super__.initOpts.call(this);
    return this.addOpts({
      onEvent: {
        check: Function
      }
    });
  };

  CollectionFixedSearchAnyToday.prototype.readOpts = function() {
    var call_update_counter, eventTypes, update_counter;
    CollectionFixedSearchAnyToday.__super__.readOpts.call(this);
    this.__unindexed = [];
    call_update_counter = (function(_this) {
      return function() {
        return _this.updateCounter();
      };
    })(this);
    update_counter = false;
    eventTypes = {};
    return Events.listen({
      type: "event-poller",
      instance: this,
      call: (function(_this) {
        return function(_event, info) {
          var ev, ref, ref1, ref2, secs;
          ev = info.event;
          if ((ref = ev != null ? ev.type : void 0) === "OBJECT_INDEX" || ref === "OBJECT_INSERT" || ref === "OBJECT_UPDATE") {
            if (ev.schema !== "USER" || (ref1 = ev.objecttype, indexOf.call(_this.getObjecttypeNames(), ref1) < 0)) {
              return;
            }
            if (info.user && info.user._id !== ez5.session.getUser().getId()) {
              return;
            }
            eventTypes[ev.type] = true;
            switch (ev.type) {
              case "OBJECT_INSERT":
                _this.__unindexed.push({
                  operation: "INSERT",
                  global_object_id: ev.global_object_id
                });
                break;
              case "OBJECT_UPDATE":
                _this.__unindexed.push({
                  operation: "UPDATE",
                  global_object_id: ev.global_object_id
                });
                break;
              case "OBJECT_INDEX":
                removeFromArray(ev.global_object_id, _this.__unindexed, function(map, gid) {
                  return map.global_object_id === gid;
                });
            }
            update_counter = true;
          }
          if (info.batch_done) {
            if (update_counter) {
              secs = parseInt(ez5.session.getClientDefault("collection_refresh_rate_seconds") || 30);
              if (secs > 0) {
                CUI.scheduleCallback({
                  ms: secs * 1000,
                  call: call_update_counter
                });
              } else {
                call_update_counter();
              }
              if ((ref2 = _this._onEvent) != null) {
                ref2.call(_this, eventTypes);
              }
            }
            update_counter = false;
            return eventTypes = {};
          }
        };
      })(this)
    });
  };

  CollectionFixedSearchAnyToday.prototype.getHashId = function() {
    return "any_today";
  };

  CollectionFixedSearchAnyToday.prototype.getBadge = function() {
    return {
      icon: this.getBadgeIcon(),
      name: $$("collection.fixed.search.badge.name"),
      value: this.renderNameAsText()
    };
  };

  CollectionFixedSearchAnyToday.prototype.getUnindexed = function() {
    return this.__unindexed;
  };

  CollectionFixedSearchAnyToday.prototype.getBadgeIcon = function() {
    if (this.getUnindexed().length) {
      return "spinner";
    } else {
      return null;
    }
  };

  CollectionFixedSearchAnyToday.prototype.getCountFromData = function(data, filter) {
    if (filter.search[0].search[1]) {
      return data.count + filter.search[0].search[1]["in"].length;
    } else {
      return data.count;
    }
  };

  CollectionFixedSearchAnyToday.prototype.getFilter = function(operation) {
    var cc, gids, i, len, map, ref, search, today;
    if (operation == null) {
      operation = void 0;
    }
    cc = new ChangelogColumnForCollection();
    today = (new Date()).toISOString().substr(0, 10);
    search = [
      cc.getSearchFilter({
        who: ez5.session.getUser().getData(),
        from: today,
        to: today,
        operation: operation
      })
    ];
    gids = [];
    ref = this.getUnindexed();
    for (i = 0, len = ref.length; i < len; i++) {
      map = ref[i];
      if (idxInArray(map.global_object_id, gids) === -1) {
        if (!operation || operation === map.operation) {
          gids.push(map.global_object_id);
        }
      }
    }
    if (gids.length) {
      search.push({
        bool: "must_not",
        type: "in",
        fields: ["_global_object_id"],
        "in": gids
      });
    }
    return {
      type: "complex",
      search: search
    };
  };

  CollectionFixedSearchAnyToday.prototype.destroy = function() {
    Events.ignore({
      instance: this
    });
    return CollectionFixedSearchAnyToday.__super__.destroy.call(this);
  };

  return CollectionFixedSearchAnyToday;

})(CollectionFixedSearch);
// Generated by CoffeeScript 1.10.0
var CollectionFixedSearchUpdateToday,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CollectionFixedSearchUpdateToday = (function(superClass) {
  extend(CollectionFixedSearchUpdateToday, superClass);

  function CollectionFixedSearchUpdateToday() {
    return CollectionFixedSearchUpdateToday.__super__.constructor.apply(this, arguments);
  }

  CollectionFixedSearchUpdateToday.prototype.getHashId = function() {
    return "update_today";
  };

  CollectionFixedSearchUpdateToday.prototype.getFilter = function() {
    return CollectionFixedSearchUpdateToday.__super__.getFilter.call(this, "UPDATE");
  };

  return CollectionFixedSearchUpdateToday;

})(CollectionFixedSearchAnyToday);
// Generated by CoffeeScript 1.10.0
var CollectionFixedSearchInsertToday,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CollectionFixedSearchInsertToday = (function(superClass) {
  extend(CollectionFixedSearchInsertToday, superClass);

  function CollectionFixedSearchInsertToday() {
    return CollectionFixedSearchInsertToday.__super__.constructor.apply(this, arguments);
  }

  CollectionFixedSearchInsertToday.prototype.getHashId = function() {
    return "insert_today";
  };

  CollectionFixedSearchInsertToday.prototype.getFilter = function() {
    return CollectionFixedSearchInsertToday.__super__.getFilter.call(this, "INSERT");
  };

  return CollectionFixedSearchInsertToday;

})(CollectionFixedSearchAnyToday);
// Generated by CoffeeScript 1.10.0
var CollectionWorkfolder,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CollectionWorkfolder = (function(superClass) {
  extend(CollectionWorkfolder, superClass);

  function CollectionWorkfolder() {
    return CollectionWorkfolder.__super__.constructor.apply(this, arguments);
  }

  CollectionWorkfolder.prototype.icon = function() {
    var folder, ref;
    if (((ref = this.data._acl) != null ? ref.length : void 0) || this.data._has_acl) {
      folder = "folder_shared";
    } else {
      folder = "folder";
    }
    if (this.canUpload()) {
      folder = folder + "_upload";
    }
    return folder;
  };

  CollectionWorkfolder.prototype.getCounterItems = function() {
    var btn, items;
    items = CollectionWorkfolder.__super__.getCounterItems.call(this);
    if (this.data.collection.type === "presentation") {
      btn = new LocaButton({
        size: "mini",
        loca_key: "collection.workfolder.button.start_presentation",
        appearance: "flat",
        icon: "play",
        onClick: (function(_this) {
          return function() {
            return new Presentation({
              collection: _this
            }).play();
          };
        })(this)
      });
      items.push(btn);
    }
    return items;
  };

  CollectionWorkfolder.prototype.placeholder = function() {
    return "collection.workfolder.new";
  };

  CollectionWorkfolder.prototype.setData = function(data) {
    this.data = data;
    CollectionWorkfolder.__super__.setData.call(this, this.data);
    this.data.collection.children_allowed = true;
    if (!this.data.collection.type) {
      this.data.collection.type = "workfolder";
    }
    return this.data.collection.objects_allowed = true;
  };

  CollectionWorkfolder.prototype.getCurrentTools = function() {
    var tools;
    tools = CollectionWorkfolder.__super__.getCurrentTools.call(this);
    if (this.isPresentable() && ez5.session.hasSystemRight("root", "frontend_features[collection_presentation]")) {
      tools.push(new ToolboxTool({
        group: "collection",
        name: "collection.presentation",
        sort: "G:1",
        run: (function(_this) {
          return function() {
            return new Presentation({
              collection: _this
            }).showEditor();
          };
        })(this)
      }));
    }
    return tools;
  };

  CollectionWorkfolder.prototype.isPresentable = function() {
    return true;
  };

  CollectionWorkfolder.prototype.removeObjects = function(collection_objects) {
    var dfr;
    dfr = new CUI.Deferred();
    (new Presentation({
      collection: this
    })).checkRemoveObjects(collection_objects).done((function(_this) {
      return function() {
        return CollectionWorkfolder.__super__.removeObjects.call(_this, collection_objects).done(dfr.resolve).fail(dfr.reject);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  CollectionWorkfolder.newInstance = function(opts) {
    if (opts.collection.collection.is_system_collection) {
      if (opts.collection.collection._id_parent) {
        return new CollectionSystemUser(opts);
      } else {
        return new CollectionSystemRoot(opts);
      }
    } else {
      return new this(opts);
    }
  };

  return CollectionWorkfolder;

})(CollectionStorable);
// Generated by CoffeeScript 1.10.0
var CollectionSystem,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CollectionSystem = (function(superClass) {
  extend(CollectionSystem, superClass);

  function CollectionSystem() {
    return CollectionSystem.__super__.constructor.apply(this, arguments);
  }

  CollectionSystem.prototype.icon = function() {
    return "fa-hdd-o";
  };

  CollectionSystem.prototype.getCount = function() {
    return "";
  };

  CollectionSystem.prototype.canAppend = function() {
    return false;
  };

  CollectionSystem.prototype.isPresentable = function() {
    return false;
  };

  CollectionSystem.prototype.isSelectable = function() {
    return false;
  };

  CollectionSystem.prototype.isRenamable = function() {
    return false;
  };

  CollectionSystem.prototype.isDownloadable = function() {
    return false;
  };

  CollectionSystem.prototype.isExportable = function() {
    return false;
  };

  CollectionSystem.prototype.isSearchable = function() {
    return false;
  };

  CollectionSystem.prototype.getEmptyLabelLocaKey = function() {
    return toDash(getObjectClass(this)).replace(/-/g, '.') + ".empty_label";
  };

  CollectionSystem.prototype.getGeneralFormFields = function(data) {
    return [
      {
        type: MultiOutput,
        data: data.collection,
        form: {
          label: $$("collection.form.displayname")
        },
        name: "displayname",
        control: ez5.loca.getLanguageControlAdmin()
      }, {
        type: MultiOutput,
        data: data.collection,
        form: {
          label: $$("collection.form.description")
        },
        name: "description",
        control: ez5.loca.getLanguageControlAdmin()
      }
    ];
  };

  CollectionSystem.prototype.getCounterItems = function() {
    return [
      new LocaButton({
        appearance: "flat",
        loca_key: "collection.system.settings",
        appearance: "flat",
        onClick: (function(_this) {
          return function() {
            return _this.popoverEditorSettings();
          };
        })(this)
      })
    ];
  };

  CollectionSystem.prototype.showDetail = function() {
    var pane;
    pane = this._manager.resetCollectionDetailDiv(this);
    pane.append(this.getButtonbar(), "footer_right");
    return CUI.resolvedPromise();
  };

  CollectionSystem.prototype.setDisplayname = function(key) {
    return this.data.collection.displayname = ez5.loca.get_complete_key(key);
  };

  CollectionSystem.prototype.getSaveData = function() {
    var sd;
    sd = CollectionSystem.__super__.getSaveData.call(this);
    delete sd.collection.displayname;
    delete sd.collection.description;
    delete sd.collection.children_allowed;
    delete sd.collection.objects_allowed;
    delete sd.collection.type;
    delete sd.collection._id_parent;
    return sd;
  };

  CollectionSystem.prototype.isDeletable = function() {
    return false;
  };

  CollectionSystem.prototype.makeDraggable = function(el) {};

  return CollectionSystem;

})(CollectionWorkfolder);
// Generated by CoffeeScript 1.10.0
var CollectionSystemUser,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CollectionSystemUser = (function(superClass) {
  extend(CollectionSystemUser, superClass);

  function CollectionSystemUser() {
    return CollectionSystemUser.__super__.constructor.apply(this, arguments);
  }

  CollectionSystemUser.prototype.icon = function() {
    return "fa-user";
  };

  CollectionSystemUser.prototype.enableShare = function() {
    return false;
  };

  CollectionSystemUser.prototype.isSelectable = function() {
    return false;
  };

  CollectionSystemUser.prototype.renderNameAsHtml = function() {
    return toHtml(this.renderNameAsText());
  };

  CollectionSystemUser.prototype.renderNameAsText = function() {
    var cm, ref, ref1;
    if (((ref = this.data._owner) != null ? (ref1 = ref.user) != null ? ref1._id : void 0 : void 0) === ez5.session.getUser().getId()) {
      cm = this.getManager();
      return $$(cm.getDisplayNameKeyForOwnCollections());
    } else {
      return CollectionSystemUser.__super__.renderNameAsText.call(this);
    }
  };

  CollectionSystemUser.prototype.isLeaf = function() {
    return false;
  };

  CollectionSystemUser.prototype.getSearchFilter = function() {
    var i, ids, len, node, ref;
    ids = [];
    ref = this.find();
    for (i = 0, len = ref.length; i < len; i++) {
      node = ref[i];
      if (node.data.collection._id) {
        ids.push(node.data.collection._id);
      }
    }
    if (!ids.length) {
      return false;
    }
    return {
      bool: "must",
      type: "in",
      fields: ["_collections"],
      "in": ids
    };
  };

  return CollectionSystemUser;

})(CollectionSystem);
// Generated by CoffeeScript 1.10.0
var CollectionSystemRoot,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CollectionSystemRoot = (function(superClass) {
  extend(CollectionSystemRoot, superClass);

  function CollectionSystemRoot() {
    return CollectionSystemRoot.__super__.constructor.apply(this, arguments);
  }

  CollectionSystemRoot.prototype.canHaveChildren = function() {
    return false;
  };

  CollectionSystemRoot.prototype.isCreateChildAllowed = function() {
    return false;
  };

  CollectionSystemRoot.prototype.getChildren = null;

  CollectionSystemRoot.prototype.isSelectable = function() {
    return false;
  };

  return CollectionSystemRoot;

})(CollectionSystem);
// Generated by CoffeeScript 1.10.0
var CollectionStructure,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CollectionStructure = (function(superClass) {
  extend(CollectionStructure, superClass);

  function CollectionStructure() {
    return CollectionStructure.__super__.constructor.apply(this, arguments);
  }

  CollectionStructure.prototype.initOpts = function() {
    CollectionStructure.__super__.initOpts.call(this);
    return this.addOpts({
      icon: {
        "default": "fa-cloud",
        mandatory: true,
        check: function(v) {
          return isString(v) || v instanceof Icon;
        }
      },
      displayname: {
        "default": "Structure",
        check: String
      }
    });
  };

  CollectionStructure.prototype.readOpts = function() {
    CollectionStructure.__super__.readOpts.call(this);
    this.__icon = this._icon;
    this.__displayname = this._displayname;
    return this;
  };

  CollectionStructure.prototype.icon = function() {
    return this.__icon;
  };

  CollectionStructure.prototype.updateCounter = function() {};

  CollectionStructure.prototype.isMovable = function() {
    return false;
  };

  CollectionStructure.prototype.isSelectable = function() {
    return false;
  };

  CollectionStructure.prototype.renderNameAsText = function() {
    return this.__displayname;
  };

  return CollectionStructure;

})(Collection);
// Generated by CoffeeScript 1.10.0
var QueryElementCollection,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

QueryElementCollection = (function(superClass) {
  extend(QueryElementCollection, superClass);

  function QueryElementCollection() {
    return QueryElementCollection.__super__.constructor.apply(this, arguments);
  }

  QueryElementCollection.prototype.initOpts = function() {
    QueryElementCollection.__super__.initOpts.call(this);
    return this.addOpts({
      collection: {
        mandatory: true,
        check: Collection
      }
    });
  };

  QueryElementCollection.prototype.readOpts = function() {
    QueryElementCollection.__super__.readOpts.call(this);
    return this.collection = this._collection;
  };

  QueryElementCollection.prototype.getBadge = function() {
    return this.collection.getBadge();
  };

  QueryElementCollection.prototype.getSearchFilter = function() {
    return this.collection.getSearchFilter();
  };

  QueryElementCollection.prototype.ignoreSearchManagers = function() {
    return this.collection.ignoreSearchManagers();
  };

  QueryElementCollection.prototype.getCollection = function() {
    return this.collection;
  };

  QueryElementCollection.prototype.getStoreData = function() {
    return this.collection.getStoreData();
  };

  return QueryElementCollection;

})(QueryElementSpan);
// Generated by CoffeeScript 1.10.0
var CollectionSelection,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

CollectionSelection = (function(superClass) {
  extend(CollectionSelection, superClass);

  function CollectionSelection(opts1) {
    this.opts = opts1 != null ? opts1 : {};
    CollectionSelection.__super__.constructor.call(this, this.opts);
    this.setSingleMode(false);
    this.on({
      type: ["remove", "insert", "select"],
      call: (function(_this) {
        return function(ev, info) {
          var base, co, div, func, i, len, ref;
          if (!_this.selectableContainer) {
            return;
          }
          if (ev.getType() === "remove") {
            func = "remove";
          } else {
            func = "add";
          }
          if (!info.collection_objects) {
            info.collection_objects = _this.getObjects();
          }
          if (!info.skip_update) {
            if (typeof (base = _this.__select_opts).onUpdate === "function") {
              base.onUpdate(_this);
            }
          }
          ref = info.collection_objects;
          for (i = 0, len = ref.length; i < len; i++) {
            co = ref[i];
            div = _this.selectableContainer.find(co.getSelector());
            div[func + "Class"]("cui-selected");
          }
          if (!info.skip_update && ev.getType() !== "select") {
            _this.loadSidebar();
          }
        };
      })(this)
    });
  }

  CollectionSelection.prototype.initOpts = function() {
    CollectionSelection.__super__.initOpts.call(this);
    return this.addOpts({
      parent_collection: {
        check: CollectionWithDetail
      },
      sidebar: {
        check: Sidebar
      },
      isObjectInsertable: {
        check: Function
      },
      check_generated_rights: {
        mandatory: true,
        "default": true,
        check: Boolean
      }
    });
  };

  CollectionSelection.prototype.readOpts = function() {
    CollectionSelection.__super__.readOpts.call(this);
    return this.setCheckGeneratedRights(this._check_generated_rights);
  };

  CollectionSelection.prototype.copy = function() {
    var cs;
    cs = new window[this.getElementClass()](this.opts);
    cs.setSingleMode(this.isSingleMode());
    cs.insertObjects(this.getObjects());
    return cs;
  };

  CollectionSelection.prototype.setCheckGeneratedRights = function(on_off) {
    return this.__check_generated_rights = on_off;
  };

  CollectionSelection.prototype.getCheckGeneratedRights = function() {
    return this.__check_generated_rights;
  };

  CollectionSelection.prototype.destroy = function() {
    this.unsetSelectableContainer();
    this.off();
    return CollectionSelection.__super__.destroy.call(this);
  };

  CollectionSelection.prototype.getDescription = function() {
    return $$("collection.selection.description");
  };

  CollectionSelection.prototype.setData = function(data1) {
    this.data = data1;
    CollectionSelection.__super__.setData.call(this, this.data);
    this.data.collection.objects_allowed = true;
    return this;
  };

  CollectionSelection.prototype.showFullscreen = function() {
    var count;
    count = this.getCount();
    if (count === 0) {
      return;
    }
    if (count === 1) {
      return new DetailFullscreen({
        search: this.getSearch(),
        offset: this.getOffsetInSearch(),
        global_object_id: this.getObjects()[0].getGlobalObjectId()
      });
    } else {
      return CollectionSelection.__super__.showFullscreen.call(this);
    }
  };

  CollectionSelection.prototype.hasSidebar = function() {
    return !!this._sidebar;
  };

  CollectionSelection.prototype.loadInSidebar = function(opts) {
    if (opts == null) {
      opts = {};
    }
    opts.search = this.getSearch();
    this._sidebar.showSidebar();
    this._sidebar.loadDetail(opts);
    return this;
  };

  CollectionSelection.prototype.getCurrentTools = function() {
    var add_to_col_tools, bulk_tools, can_delete, check_copy, co, copy_tool, copy_tools, count, dbInfo, domEl, element, fn, gen_rights, i, idx, len, list, load_editor, load_in_sidebar, obj, objecttype, ot, ots, ref, ref1, ref2, ref3, ref4, ref5, ref6, tools, write_tool;
    tools = CollectionSelection.__super__.getCurrentTools.call(this);
    count = this.getCount();
    if (count === 0) {
      return tools;
    }
    obj = this.getObjects()[0];
    if (count === 1 && this.selectableContainer) {
      element = CUI.DOM.matchSelector(this.selectableContainer, obj.getSelector())[0];
      if (element) {
        tools.push(new ToolboxTool({
          group: this.getToolGroup(),
          name: this.getToolNamePrefix() + ".show.popover",
          sort: "B:1",
          run: (function(_this) {
            return function() {
              return ResultObject.showCollectionObjectInPopover({
                collectionObject: obj,
                element: element
              });
            };
          })(this)
        }));
      }
    }
    if (count <= 1 && this._sidebar) {
      tools.push(new ToolboxTool({
        group: this.getToolGroup(),
        disabled: count === 0,
        favorite: true,
        name: "object.show.sidebar",
        sort: "B:2",
        loca_key: "tool.object.show.sidebar",
        run: (function(_this) {
          return function() {
            return _this.loadInSidebar({
              global_object_id: obj.getGlobalObjectId()
            });
          };
        })(this)
      }));
    }
    if ((ref = this._parent_collection) != null ? ref.canUnlink() : void 0) {
      tools.push(new ToolboxTool({
        disabled: count === 0,
        group: this.getToolGroup(),
        name: this.getToolNamePrefix() + ".remove-from-collection",
        sort: "C:2",
        loca_key_attrs: {
          count: count
        },
        run: (function(_this) {
          return function() {
            var objects;
            objects = _this.getObjects().slice(0);
            _this.removeObjects();
            return _this._parent_collection.removeObjects(objects);
          };
        })(this)
      }));
    }
    if ((ref1 = this.getManager()) != null ? ref1.getAddToCollectionMenuItems : void 0) {
      add_to_col_tools = this.getManager().getAddToCollectionMenuItems({
        collection: this
      });
      if (add_to_col_tools.length > 0) {
        tools.push(new ToolboxTool({
          group: this.getToolGroup(),
          disabled: count === 0,
          name: this.getToolNamePrefix() + ".add_to_collection",
          sort: "C:1",
          tools: add_to_col_tools
        }));
      }
    }
    if (!this.getCheckGeneratedRights()) {
      return tools;
    }
    if (count === 1) {
      gen_rights = obj.getObject()._generated_rights || {};
      load_in_sidebar = (function(_this) {
        return function(copy) {
          if (copy == null) {
            copy = false;
          }
          _this._sidebar.showSidebar();
          return _this._sidebar.loadEditor({
            global_object_id: obj.getGlobalObjectId(),
            copy: copy
          });
        };
      })(this);
      load_editor = (function(_this) {
        return function(copy, popover_element) {
          var editor, func;
          if (copy == null) {
            copy = false;
          }
          if (popover_element) {
            func = EditorPopover;
          } else {
            func = EditorModalSingle;
          }
          editor = new func({
            global_object_id: obj.getGlobalObjectId(),
            mode: copy ? "copy" : "single",
            popover_element: popover_element,
            onCancel: function() {
              return editor.destroy();
            },
            onSave: function() {
              return editor.destroy();
            },
            onDelete: function() {
              return editor.destroy();
            }
          });
          return editor.open();
        };
      })(this);
      if (this.selectableContainer) {
        domEl = CUI.DOM.matchSelector(this.selectableContainer, obj.getSelector())[0];
      }
      if (gen_rights.write) {
        write_tool = new ToolboxTool({
          group: this.getToolGroup(),
          favorite: true,
          name: "object.edit",
          sort: "E:1",
          loca_key: "tool.object.single-edit",
          tools: [
            this._sidebar ? new ToolboxTool({
              group: "object",
              name: "object.edit.sidebar",
              run: (function(_this) {
                return function() {
                  return load_in_sidebar();
                };
              })(this)
            }) : domEl ? new ToolboxTool({
              group: "object",
              name: "object.edit.popover",
              run: (function(_this) {
                return function() {
                  return load_editor(false, domEl);
                };
              })(this)
            }) : void 0, new ToolboxTool({
              group: "object",
              name: "object.edit.fullscreen",
              run: (function(_this) {
                return function() {
                  return load_editor();
                };
              })(this)
            })
          ]
        });
        tools.push(write_tool);
      }
      dbInfo = (ref2 = this.getSearch()) != null ? (ref3 = ref2.getSearchBasics()) != null ? ref3.getDbInfo() : void 0 : void 0;
      if (!dbInfo || dbInfo.getAvailableObjecttypes().length > 0) {
        copy_tools = [];
        if (this._sidebar) {
          copy_tools.push(new ToolboxTool({
            group: "object",
            name: "object.copy.sidebar",
            run: (function(_this) {
              return function() {
                return load_in_sidebar(true);
              };
            })(this)
          }));
        } else if (domEl) {
          copy_tools.push(new ToolboxTool({
            group: "object",
            name: "object.copy.popover",
            run: (function(_this) {
              return function() {
                return load_editor(true, domEl);
              };
            })(this)
          }));
        }
        copy_tools.push(new ToolboxTool({
          name: "object.copy.fullscreen",
          run: (function(_this) {
            return function() {
              return load_editor(true);
            };
          })(this)
        }));
        copy_tool = new ToolboxTool({
          group: "object",
          disabled: true,
          sort: "E:2",
          name: "object.copy",
          tools: copy_tools
        });
        tools.push(copy_tool);
        check_copy = (function(_this) {
          return function() {
            var ot_schema;
            ot_schema = ez5.schema.CURRENT._objecttype_by_name[obj.getObjecttype()];
            return DbInfo.canCreate({
              objecttypes: [new Objecttype(ot_schema)]
            }).done(function(data) {
              return copy_tool.setDisabled(false);
            });
          };
        })(this);
        if (!obj.getObjecttype()) {
          CollectionObject.reloadObjects([obj]).done((function(_this) {
            return function() {
              return check_copy();
            };
          })(this));
        } else {
          check_copy();
        }
      }
    }
    ots = {};
    can_delete = true;
    ref4 = this.getObjects();
    for (idx = i = 0, len = ref4.length; i < len; idx = ++i) {
      co = ref4[idx];
      ot = co.getObjecttype();
      if (!((ref5 = co.getObject()._generated_rights) != null ? ref5["delete"] : void 0)) {
        can_delete = false;
      }
      if (!((ref6 = co.getObject()._generated_rights) != null ? ref6.write : void 0)) {
        continue;
      }
      if (!ots[ot]) {
        ots[ot] = [];
      }
      ots[ot].push(co);
    }
    if (count > 1 && ez5.session.hasSystemRight("root", "frontend_features[editor_bulk]")) {
      bulk_tools = [];
      fn = (function(_this) {
        return function(objecttype, list) {
          var _ot_schema;
          _ot_schema = ez5.schema.CURRENT._objecttype_by_name[objecttype];
          return bulk_tools.push(new ToolboxTool({
            group: _this.getToolGroup(),
            name: "selection.bulk-edit",
            loca_key: "tool.selection.bulk-edit.objecttype",
            loca_key_attrs: {
              count: list.length,
              objecttype: _ot_schema._name_localized
            },
            run: function() {
              var editor, j, len1, ol, ref7;
              ol = new ObjectList();
              editor = new EditorModalBulk({
                object_list: ol,
                mode: "bulk",
                table_id: _ot_schema.table_id,
                onCancel: function() {
                  return editor.destroy();
                },
                onSave: function() {
                  return editor.destroy();
                },
                onDelete: function() {
                  return editor.destroy();
                }
              });
              editor.addNewTemplateObject();
              ref7 = ots[objecttype];
              for (j = 0, len1 = ref7.length; j < len1; j++) {
                co = ref7[j];
                editor.addNewResultObject(co.getObject());
              }
              return editor.open();
            }
          }));
        };
      })(this);
      for (objecttype in ots) {
        list = ots[objecttype];
        if (list.length <= 1) {
          continue;
        }
        fn(objecttype, list);
      }
      if (bulk_tools.length > 0) {
        tools.push(new ToolboxTool({
          group: this.getToolGroup(),
          favorite: true,
          name: "selection.bulk-edit",
          sort: "E:1",
          loca_key: "tool.selection.bulk-edit",
          tools: bulk_tools
        }));
      }
    }
    if (can_delete) {
      tools.push(new ToolboxTool({
        group: this.getToolGroup(),
        disabled: count === 0,
        name: this.getToolNamePrefix() + ".delete_objects_from_server",
        sort: "E:3",
        loca_key_attrs: {
          count: count
        },
        run: (function(_this) {
          return function(ev) {
            return _this.deleteObjectsFromServer(ev);
          };
        })(this)
      }));
    }
    return tools;
  };

  CollectionSelection.prototype.getToolNamePrefix = function() {
    if (this.getCount() === 1) {
      return "object";
    } else {
      return "collection.selection";
    }
  };

  CollectionSelection.prototype.getSelectableContainer = function() {
    assert(this.selectableContainer, "CollectionSelection.getSelectableContainer", "no container set");
    return this.selectableContainer;
  };

  CollectionSelection.prototype.isSearchable = function() {
    return CollectionSelection.__super__.isSearchable.call(this) && this.getCount() > 1;
  };

  CollectionSelection.prototype.getSearchFilter = function() {
    var co;
    if (this.getCount() === 0) {
      return {
        bool: "must",
        type: "in",
        fields: ["_global_object_id"],
        "in": [null]
      };
    } else {
      return {
        bool: "must",
        type: "in",
        fields: ["_global_object_id"],
        "in": (function() {
          var i, len, ref, results;
          ref = this.data._objects;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            co = ref[i];
            results.push(co.getGlobalObjectId());
          }
          return results;
        }).call(this)
      };
    }
  };

  CollectionSelection.prototype.loadSidebar = function() {
    var co;
    if (!this._sidebar) {
      return;
    }
    co = this.getLatestObject();
    if (!co) {

    } else if (this._sidebar.getLoadedGlobalObjectId() !== co.getGlobalObjectId()) {
      return this._sidebar.loadCollectionObject({
        global_object_id: co.getGlobalObjectId(),
        search: this.getSearch(),
        offset: co.getObject().__offset
      });
    }
  };

  CollectionSelection.prototype.getOffsetInSearch = function() {
    var offset, ref;
    offset = ((ref = this.getLatestObject()) != null ? ref.getObject().__offset : void 0) || 0;
    return offset;
  };

  CollectionSelection.prototype.getLatestObject = function() {
    return this.data._objects[this.data._objects.length - 1];
  };

  CollectionSelection.prototype.selectObject = function(obj, append_mode, skip_update) {
    var co, dfr, is_selected, remove_obj;
    if (append_mode == null) {
      append_mode = false;
    }
    if (skip_update == null) {
      skip_update = false;
    }
    if (this.__select_opts.isSelectable && !this.__select_opts.isSelectable(obj)) {
      return CUI.rejectedPromise();
    }
    if (!obj) {
      return CUI.rejectedPromise();
    }
    co = new CollectionObject(obj);
    is_selected = this.objectIdx(co) > -1;
    if (!append_mode || !is_selected) {
      if (is_selected && !append_mode) {
        if (this._sidebar) {
          this._sidebar.showSidebar();
          if (this._sidebar.getLoadedGlobalObjectId() !== co.getGlobalObjectId()) {
            this._sidebar.loadCollectionObject({
              global_object_id: co.getGlobalObjectId(),
              offset: co.getObject().__offset
            });
          }
        }
        if (this.__select_opts.deselect && this.__select_opts.select_with_modifier === false) {
          return this.removeObjects([co]);
        } else {
          return CUI.resolvedPromise();
        }
      }
      dfr = new CUI.Deferred();
      if (append_mode) {
        remove_obj = [];
      } else {
        remove_obj = void 0;
      }
      this.removeObjects(remove_obj, {
        skip_update: true
      }).done((function(_this) {
        return function() {
          var div;
          div = _this.selectableContainer.find(co.getSelector());
          div.addClass("cui-selected");
          return _this.insertObjects([co], null, {
            skip_update: skip_update
          }).done(function() {
            return dfr.resolve();
          }).fail(function() {
            div.removeClass("cui-selected");
            return dfr.reject();
          });
        };
      })(this)).fail(dfr.reject);
      return dfr.promise();
    }
    if (is_selected && this.__select_opts.deselect) {
      return this.removeObjects([co]);
    }
    return CUI.resolvedPromise();
  };

  CollectionSelection.prototype.unsetSelectableContainer = function() {
    if (this.selectableContainer) {
      this.selectableContainer.removeClass("ez5-collection-selection-selectable-container");
      Lasso.destroy(this.selectableContainer[0]);
      Draggable.destroy(this.selectableContainer[0]);
      delete this.selectableContainer;
    }
    if (this.__select_opts) {
      Events.ignore({
        instance: this.__select_opts
      });
      return delete this.__select_opts;
    }
  };

  CollectionSelection.prototype.setSelectableContainer = function(_opts) {
    var new_object_gids, removed_objects, sel;
    if (_opts == null) {
      _opts = {};
    }
    this.unsetSelectableContainer();
    this.__select_opts = CUI.Element.readOpts(_opts, "CollectionSelection.setSelectableContainer", CollectionSelection.selectableOptsCheck(true));
    this.selectableContainer = this.__select_opts.container;
    sel = this.__select_opts.object_selector;
    new_object_gids = [];
    Events.listen({
      type: "event-poller",
      instance: this.__select_opts,
      call: (function(_this) {
        return function(ev, info) {
          var co, i, len, ref, ref1, ref2, ref3, ref4, ref5, ref6, type, update_cos;
          if (info.batch_done) {
            update_cos = [];
            ref = _this.getObjects();
            for (i = 0, len = ref.length; i < len; i++) {
              co = ref[i];
              if (ref1 = co.getGlobalObjectId(), indexOf.call(new_object_gids, ref1) >= 0) {
                update_cos.push(co);
              }
            }
            if (update_cos.length === 0) {
              return;
            }
            CollectionObject.reloadObjects(update_cos);
            return;
          }
          if (((ref2 = info.event) != null ? ref2.schema : void 0) === "BASE") {
            return;
          }
          if ((ref3 = (type = (ref4 = info.event) != null ? ref4.type : void 0)) === "OBJECT_INDEX") {
            new_object_gids.push(info.event.global_object_id);
          }
          if ((ref5 = (type = (ref6 = info.event) != null ? ref6.type : void 0)) === "OBJECT_DELETE") {
            return _this.removeObjects([
              new CollectionObject({
                _global_object_id: info.event.global_object_id
              })
            ], {
              skip_update: true
            });
          }
        };
      })(this)
    });
    if (this.__select_opts.draggable) {
      new Draggable({
        element: this.selectableContainer,
        selector: sel,
        helper: (function(_this) {
          return function(info) {
            var collection_object, data, is_selected, loca_key;
            data = DOM.data(info.$source, "object");
            collection_object = new CollectionObject(data);
            is_selected = _this.objectIdx(collection_object) > -1;
            if (is_selected) {
              info.objects = _this.getObjectsSorted();
            } else {
              info.objects = [collection_object];
            }
            if (info.objects.length === 1) {
              loca_key = "collection.selection.draggable.helper.one";
            } else {
              loca_key = "collection.selection.draggable.helper";
            }
            return new LocaLabel({
              "class": "ez5-drag-objects-helper",
              loca_key: loca_key,
              loca_key_attrs: {
                count: info.objects.length
              }
            }).DOM;
          };
        })(this),
        create: (function(_this) {
          return function(ev) {};
        })(this),
        create: (function(_this) {
          return function(ev, opts, target) {
            if (!DOM.data(target, "object")) {
              return false;
            }
            return _this.__select_opts.onDraggableCreate(ev);
          };
        })(this)
      });
    }
    if (this.__select_opts.lasso) {
      removed_objects = null;
      new Lasso({
        element: this.selectableContainer,
        filter: sel,
        lasso_filter: CUI.__ng__ ? ".ez5-lassoable" : void 0,
        create: (function(_this) {
          return function(ev) {
            if (!(ev.hasModifierKey() || $(ev.getTarget()).closest(sel).length === 0)) {
              return false;
            }
          };
        })(this),
        dragstart: (function(_this) {
          return function(ev) {
            console.error("drag start.....", ev);
            if (!ev.hasModifierKey() && !ev.cui_layer_closed) {
              removed_objects = _this.getObjects().slice(0);
              _this.removeObjects(null, {
                skip_update: true
              });
            } else {
              removed_objects = null;
            }
            return true;
          };
        })(this),
        dragstop: (function(_this) {
          return function(ev) {
            if (removed_objects) {
              return _this.insertObjects(removed_objects, null, {
                skip_update: true
              });
            }
          };
        })(this),
        selected: (function(_this) {
          return function(ev, info) {
            var co, dfr, el, i, insert_cos, len, ref, remove_cos;
            insert_cos = [];
            remove_cos = [];
            ref = info.elements;
            for (i = 0, len = ref.length; i < len; i++) {
              el = ref[i];
              co = new CollectionObject(DOM.data(el, "object"));
              if (el.hasClass("cui-selected")) {
                insert_cos.push(co);
              } else {
                remove_cos.push(co);
              }
            }
            dfr = new CUI.Deferred();
            _this.removeObjects(remove_cos, {
              skip_update: insert_cos.length > 0
            }).done(function() {
              return _this.insertObjects(insert_cos).done(dfr.resolve).fail(dfr.reject);
            }).fail(dfr.reject);
            return dfr.promise();
          };
        })(this)
      });
    }
    if (this.__select_opts.select) {
      this.selectableContainer.addClass("ez5-collection-selection-selectable-container");
      Events.listen({
        node: this.selectableContainer,
        type: ["mousedown"],
        call: (function(_this) {
          return function(ev, info) {
            if (!ev.cui_layer_closed) {
              return;
            }
            Events.listen({
              node: document.documentElement,
              type: ["click"],
              capture: true,
              only_once: true,
              call: function(ev) {
                if (CUI.DOM.closest(ev.getTarget(), _this.selectableContainer)) {
                  ev.stopPropagation();
                }
              }
            });
          };
        })(this)
      });
      Events.listen({
        node: this.selectableContainer,
        type: ["dblclick", "click"],
        instance: this.__select_opts,
        call: (function(_this) {
          return function(ev, info) {
            var domEl, obj;
            ev.stopPropagation();
            domEl = CUI.DOM.closest(ev.getTarget(), _this.__select_opts.object_selector);
            if (!domEl) {
              if (!ev.hasModifierKey() && _this.__select_opts.deselect) {
                _this.removeObjects();
              }
            } else {
              obj = DOM.data(domEl, "object");
              if (_this._sidebar) {
                if (ev.getType() === "dblclick") {
                  _this._sidebar.showSidebar();
                }
                _this._sidebar.allow_unload().done(function() {
                  return _this.selectObject(obj, ev.hasModifierKey());
                });
              } else {
                _this.selectObject(obj, ev.hasModifierKey());
              }
            }
          };
        })(this)
      });
    }
    if (this.__select_opts.toolbox) {
      Events.listen({
        node: this.selectableContainer,
        type: "toolbox",
        instance: this.__select_opts,
        call: (function(_this) {
          return function(ev, info) {
            var colObj, domEl, is_selected, obj, promise;
            info.tools.splice(0);
            domEl = CUI.DOM.closest(ev.getTarget(), _this.__select_opts.object_selector);
            if (!domEl) {
              return;
            }
            if (CUI.__ng__) {
              if (!(CUI.DOM.closest(ev.getTarget(), ".ez5-lassoable") || CUI.DOM.closest(ev.getTarget(), ".cui-selected"))) {
                return;
              }
            }
            obj = DOM.data(domEl, "object");
            colObj = new CollectionObject(obj);
            is_selected = _this.objectIdx(colObj) > -1;
            if (!is_selected) {
              promise = _this.selectObject(obj, ev.hasModifierKey(), true);
            } else {
              promise = CUI.resolvedPromise();
            }
            promise.done(function() {
              return info.tools.push.apply(info.tools, _this.getCurrentTools());
            });
            ev.stopPropagation();
            return promise;
          };
        })(this)
      });
    }
    return this;
  };

  CollectionSelection.prototype.renderNameAsText = function() {
    return $$("collection.search.current_selection");
  };

  CollectionSelection.prototype.icon = function() {
    return "fa-crosshairs";
  };

  CollectionSelection.prototype.getHashId = function() {
    return "sel";
  };

  CollectionSelection.prototype.isMovable = function() {
    return false;
  };

  CollectionSelection.prototype.canAppend = function() {
    return true;
  };

  CollectionSelection.prototype.getCount = function() {
    return this.data._objects.length;
  };

  CollectionSelection.prototype.getObjects = function() {
    return this.data._objects;
  };

  CollectionSelection.prototype.getObjectsSorted = function() {
    var sorted;
    sorted = this.data._objects.slice(0);
    sorted.sort(function(a, b) {
      return compareIndex(a.getObject().__offset, b.getObject().__offset);
    });
    return sorted;
  };

  CollectionSelection.prototype.isSingleMode = function() {
    return this.single;
  };

  CollectionSelection.prototype.setSingleMode = function(single) {
    this.single = single;
    assert(isBoolean(this.single), "CollectionSelection.setSingleMode", "parameter needs to be Boolean", {
      single: this.single
    });
  };

  CollectionSelection.prototype.deleteObjectsFromServer = function(ev) {
    var dfr, req, search;
    search = new SearchCollectionHeadless({
      collection: this
    });
    req = new Request();
    req.aggregations = {
      _mask: {
        type: "term",
        limit: 100000,
        field: "_mask"
      }
    };
    req.format = "short";
    req.limit = 1000000;
    req.generate_rights = true;
    dfr = new CUI.Deferred();
    dfr.done((function(_this) {
      return function() {
        return _this.removeObjects();
      };
    })(this));
    search.execute(req).done(function(req, data) {
      var allow_empty, ask, editor, i, j, len, len1, obj, ol, ref, ref1, term;
      CUI.debug("search", req, search, data);
      ask = false;
      allow_empty = true;
      ref = data.aggregations._mask.terms;
      for (i = 0, len = ref.length; i < len; i++) {
        term = ref[i];
        switch (ez5.mask.CURRENT._mask_instance_by_name[term.term].requireComment()) {
          case "never":
            break;
          case "default-enabled":
          case "default-disabled":
            ask = true;
            break;
          case "always":
            ask = true;
            allow_empty = false;
        }
      }
      CUI.debug("ask:", ask, "allow_empty:", allow_empty);
      ol = new ObjectList();
      ref1 = data.objects;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        obj = ref1[j];
        if (obj._generated_rights["delete"]) {
          ol.push(new ResultObject().setData(obj));
        }
      }
      if (ol.getCount() === 0) {
        return CUI.problem({
          text: $$("collection.selection.no_right_to_delete_objects")
        }).done(dfr.reject);
      } else {
        editor = new EditorHeadlessDelete({
          object_list: ol,
          require_comment: true
        });
        return editor.deleteObjects(ask, allow_empty).done(function() {
          return dfr.resolve(this);
        }).fail(function() {
          return dfr.reject();
        });
      }
    });
    return dfr.promise();
  };

  CollectionSelection.prototype.insertObjects = function(__collection_objects, before_idx, event_info) {
    var before_obj, co, collection_objects, dfr, i, len, promise;
    if (before_idx == null) {
      before_idx = null;
    }
    if (event_info == null) {
      event_info = {};
    }
    this.checkObjects(__collection_objects);
    if (__collection_objects === this.data._objects) {
      __collection_objects = collection_objects.slice(0);
    }
    if (this._isObjectInsertable) {
      collection_objects = [];
      for (i = 0, len = __collection_objects.length; i < len; i++) {
        co = __collection_objects[i];
        if (this._isObjectInsertable(co)) {
          collection_objects.push(co);
        }
      }
    } else {
      collection_objects = __collection_objects;
    }
    if (collection_objects.length === 0) {
      if (__collection_objects.length === 0) {
        return CUI.resolvedPromise(this);
      } else {
        return new CUI.Deferred().reject();
      }
    }
    before_obj = null;
    if (this.isSingleMode()) {
      assert(collection_objects.length === 1, "Collection.insertObjects", "In single mode, only one object can be inserted into Collection", {
        collection_objects: collection_objects,
        before_idx: before_idx
      });
      assert(before_idx === null, "Collection.insertObjects", "In single mode, before_idx is not supported.", {
        collection_objects: collection_objects,
        before_idx: before_idx
      });
      promise = this.removeObjects();
    } else {
      if (before_idx !== null) {
        before_obj = this.getObjects()[before_idx];
        assert(before_obj, "Collection.insertObjects", "Collection object after index " + before_idx + " not found.", {
          collection_objects: collection_objects,
          before_idx: before_idx
        });
        CUI.debug("BEFORE IDX", before_idx, before_obj, collection_objects);
      }
      promise = this.removeObjects(collection_objects);
    }
    dfr = new CUI.Deferred();
    promise.done((function(_this) {
      return function() {
        var finish_insert, gids, gids_map, j, len1, obj;
        gids_map = {};
        gids = [];
        finish_insert = function() {
          var __before_idx, args;
          if (before_obj === null) {
            _this.data._objects.push.apply(_this.data._objects, collection_objects);
          } else {
            __before_idx = _this.objectIdx(before_obj);
            args = collection_objects.slice(0);
            args.splice(0, 0, 0);
            args.splice(0, 0, __before_idx);
            _this.data._objects.splice.apply(_this.data._objects, args);
          }
          event_info.collection_objects = collection_objects;
          event_info.before_idx = __before_idx;
          return promise = _this.triggerEvent("insert", event_info).done(function() {
            _this.updateDisplay();
            return dfr.resolve(_this);
          });
        };
        if (!_this.getCheckGeneratedRights()) {
          return finish_insert();
        } else {
          for (j = 0, len1 = collection_objects.length; j < len1; j++) {
            co = collection_objects[j];
            obj = co.getObject();
            if (!obj._global_object_id) {
              continue;
            }
            if (!obj._generated_rights) {
              gids.push(obj._global_object_id);
              gids_map[obj._global_object_id] = obj;
            }
          }
          if (gids.length === 0) {
            return finish_insert();
          } else {
            return DbInfo.loadGeneratedRights({
              global_object_ids: gids
            }).done(function(generated_rights) {
              var gid, k, len2;
              for (k = 0, len2 = gids.length; k < len2; k++) {
                gid = gids[k];
                gids_map[gid]._generated_rights = generated_rights[gid];
              }
              return finish_insert();
            }).fail(dfr.reject);
          }
        }
      };
    })(this));
    return dfr.promise();
  };

  CollectionSelection.prototype.removeObjects = function(collection_objects, event_info) {
    var co, cos, i, idx, len, promise;
    if (collection_objects == null) {
      collection_objects = this.data._objects;
    }
    if (event_info == null) {
      event_info = {};
    }
    if (collection_objects.length === 0) {
      return CUI.resolvedPromise(this);
    }
    if (collection_objects === this.data._objects) {
      collection_objects = collection_objects.slice(0);
    }
    cos = [];
    for (i = 0, len = collection_objects.length; i < len; i++) {
      co = collection_objects[i];
      idx = this.objectIdx(co);
      if (idx === -1) {
        continue;
      }
      this.data._objects.splice(idx, 1);
      cos.push(co);
    }
    if (cos.length) {
      event_info.collection_objects = cos;
      promise = this.triggerEvent("remove", event_info);
    } else {
      promise = CUI.resolvedPromise(this);
    }
    return promise.done((function(_this) {
      return function() {
        return _this.updateDisplay();
      };
    })(this));
  };

  CollectionSelection.prototype.objectIdx = function(collection_object) {
    var i, idx, len, obj, ref;
    assert(collection_object instanceof CollectionObject, "Collection.objectIdx", "collection_object needs to an instance of CollectionObject", {
      collection_object: collection_object
    });
    ref = this.getObjects();
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      obj = ref[idx];
      if (obj != null ? obj.equals(collection_object) : void 0) {
        return idx;
      }
    }
    return -1;
  };

  CollectionSelection.prototype.addToRequest = function(request) {
    var co, gids;
    if (!request.search) {
      request.search = [];
    }
    gids = (function() {
      var i, len, ref, results;
      ref = this.getObjects();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        co = ref[i];
        results.push(co.getGlobalObjectId());
      }
      return results;
    }).call(this);
    if (gids.length === 0) {
      return gids = ["-1"];
    } else {
      return request.search.push({
        type: "in",
        fields: ["_global_object_id"],
        "in": gids
      });
    }
  };

  CollectionSelection.prototype.executeSearch = function(req_data) {
    var co, data, dfr, i, obj, objs, offset, ref, ref1;
    assert(!req_data.aggregations, (getObjectClass(this)) + ".executeSearch", "request.aggregations not supported.", {
      request: req_data
    });
    assert(!req_data.format || req_data.format === "standard", (getObjectClass(this)) + ".executeSearch", "request.format not supported.", {
      request: req_data
    });
    dfr = new CUI.Deferred();
    objs = this.getObjects();
    data = {
      limit: req_data.limit,
      count: objs.length,
      objects: [],
      offset: req_data.offset
    };
    for (offset = i = ref = req_data.offset, ref1 = req_data.offset + req_data.limit; ref <= ref1 ? i < ref1 : i > ref1; offset = ref <= ref1 ? ++i : --i) {
      if (!(co = objs[offset])) {
        break;
      }
      obj = {
        _global_object_id: co.getGlobalObjectId()
      };
      data.objects.push(obj);
    }
    dfr.resolve(data);
    return dfr.promise();
  };

  CollectionSelection.selectableOptsCheck = function(for_collection_selection) {
    var check;
    if (for_collection_selection == null) {
      for_collection_selection = false;
    }
    check = {
      onUpdate: {
        check: Function
      },
      onDraggableCreate: {
        check: Function,
        mandatory: true,
        "default": (function(_this) {
          return function(ev) {
            return !ev.hasModifierKey();
          };
        })(this)
      },
      draggable: {
        "default": true,
        check: Boolean
      },
      lasso: {
        "default": true,
        check: Boolean
      },
      toolbox: {
        "default": true,
        mandatory: true,
        check: Boolean
      },
      select: {
        "default": true,
        check: Boolean
      },
      select_with_modifier: {
        "default": true,
        check: Boolean
      },
      deselect: {
        "default": true,
        check: Boolean
      },
      fullscreen: {
        "default": true,
        check: Boolean
      },
      isSelectable: {
        check: Function
      }
    };
    if (for_collection_selection) {
      check.container = {
        check: function(v) {
          return isElement(v);
        }
      };
      check.object_selector = {
        mandatory: true,
        check: String
      };
    } else {
      check.collection = {
        mandatory: true,
        check: Collection
      };
    }
    return check;
  };

  return CollectionSelection;

})(CollectionWithDetail);
// Generated by CoffeeScript 1.10.0
var CollectionMemory,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CollectionMemory = (function(superClass) {
  extend(CollectionMemory, superClass);

  function CollectionMemory() {
    return CollectionMemory.__super__.constructor.apply(this, arguments);
  }

  CollectionMemory.prototype.updateDisplay = function() {};

  CollectionMemory.prototype.getBadgeText = function() {
    var c, dfr, obj;
    dfr = new CUI.Deferred();
    c = this.getCount();
    if (c === 0) {
      dfr.resolve("");
    } else {
      obj = this.getObjects()[0].getObject();
      ResultObject.loadFromData(obj, "standard", false, true).done(function(ro) {
        if (c === 1) {
          return dfr.resolve(ro.renderText());
        } else {
          return dfr.resolve(c + " " + ro.objecttypeLocalized());
        }
      }).fail((function(_this) {
        return function(userError) {
          return dfr.resolve('#' + obj._global_object_id.split('@')[0]);
        };
      })(this));
    }
    return dfr.promise();
  };

  CollectionMemory.prototype.initOpts = function() {
    CollectionMemory.__super__.initOpts.call(this);
    return this.addOpts({
      hasEASFields: {
        check: Boolean,
        mandatory: true,
        "default": true
      }
    });
  };

  CollectionMemory.prototype.hasEASFields = function() {
    return this._hasEASFields;
  };

  CollectionMemory.prototype.isDownloadable = function() {
    return this.hasEASFields();
  };

  CollectionMemory.prototype.isFullscreenable = function() {
    return this.hasEASFields();
  };

  return CollectionMemory;

})(CollectionSelection);
// Generated by CoffeeScript 1.10.0
var CollectionTemporary,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CollectionTemporary = (function(superClass) {
  extend(CollectionTemporary, superClass);

  function CollectionTemporary() {
    return CollectionTemporary.__super__.constructor.apply(this, arguments);
  }

  CollectionTemporary.prototype.initOpts = function() {
    CollectionTemporary.__super__.initOpts.call(this);
    return this.mergeOpt("check_generated_rights", {
      "default": false
    });
  };

  return CollectionTemporary;

})(CollectionMemory);
// Generated by CoffeeScript 1.10.0
var Field,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Field = (function(superClass) {
  extend(Field, superClass);

  function Field(mask1, FieldSchema) {
    var ref;
    this.mask = mask1;
    this.FieldSchema = FieldSchema;
    assert(getObjectClass(this) !== "Field", "Field.constructor", "Field cannot be instantiated directly. You need to use a derived class to instantiate.", {
      mask: this.mask,
      FieldSchema: this.FieldSchema
    });
    assert(this.mask instanceof Mask, "new " + (getObjectClass(this)), "mask must be instance of Mask", {
      mask: this.mask,
      FieldSchema: this.FieldSchema
    });
    this.version = this.mask.version;
    this.table = this.mask.table;
    this.__cls = "ez5-" + toDash(getObjectClass(this));
    if (this.FieldSchema && ((ref = this.FieldSchema.kind) !== "splitter")) {
      this.ColumnSchema = this.table.schema._column_by_id[this.FieldSchema.column_id];
      assert(this.ColumnSchema, "new " + (getObjectClass(this)), "Column schema not found", {
        mask: this.mask,
        field_schema: this.FieldSchema
      });
      this.__dbg_full_name = this.fullName();
    }
  }

  Field.prototype.init = function() {};

  Field.prototype.depth = function() {
    return this.mask.depth;
  };

  Field.prototype.name = function() {
    if (!this.ColumnSchema) {
      throw (getObjectClass(this)) + ".name(): no ColumnSchema set.";
    }
    return this.ColumnSchema.name;
  };

  Field.prototype.getReplacementRecord = function(data, key_prepend, use_array, record) {
    var _data, add_data, k, key, v;
    if (key_prepend == null) {
      key_prepend = "";
    }
    if (use_array == null) {
      use_array = false;
    }
    _data = this.getDataForReplacementRecord(data);
    if (isEmpty(_data)) {
      return;
    }
    key = key_prepend + this.name();
    add_data = (function(_this) {
      return function(_key, _value) {
        if (isEmpty(_value)) {
          return;
        }
        if (use_array) {
          if (!record[_key]) {
            record[_key] = [];
          }
          assert(CUI.isArray(record[_key]), "Field.getReplacementRecord", "Record is no Array", {
            key: key_prepend,
            data: data,
            field: _this
          });
          return record[_key].push(_value + "");
        } else {
          return record[_key] = _value + "";
        }
      };
    })(this);
    if (CUI.isPlainObject(_data)) {
      for (k in _data) {
        v = _data[k];
        if (k === "_undo") {
          continue;
        }
        add_data(key + "." + k, v);
      }
    } else {
      add_data(key, _data);
    }
    return record;
  };

  Field.prototype.getDataForReplacementRecord = function(data) {
    return data[this.name()];
  };

  Field.prototype.getFatherField = function() {
    if (this.mask.nestedTableField) {
      return this.mask.nestedTableField;
    } else {
      return null;
    }
  };

  Field.prototype.getFieldPath = function(path) {
    var ff;
    if (path == null) {
      path = [];
    }
    ff = this.getFatherField();
    if (ff) {
      ff.getFieldPath(path);
    }
    path.splice(0, 0, this);
    return path;
  };

  Field.prototype.insideNested = function() {
    if (!this.mask.nestedTableField) {
      return false;
    } else if (this === this.mask.nestedTableField) {
      return false;
    } else {
      return true;
    }
  };

  Field.prototype.getMainMask = function() {
    if (this.mask.nestedTableField) {
      return this.mask.nestedTableField.mainMask;
    } else {
      return this.mask;
    }
  };

  Field.prototype.getMask = function() {
    return this.mask;
  };

  Field.prototype.hasOption = function(data, option) {
    if (isNull(this.getOption(data, option))) {
      return false;
    } else {
      return true;
    }
  };

  Field.prototype.getOptions = function(data) {
    return data != null ? data[(this.name()) + ":options"] : void 0;
  };

  Field.prototype.getOption = function(data, option) {
    var ref;
    return data != null ? (ref = data[(this.name()) + ":options"]) != null ? ref[option] : void 0 : void 0;
  };

  Field.prototype.setOption = function(data, option, value) {
    if (!data[(this.name()) + ":options"]) {
      data[(this.name()) + ":options"] = {};
    }
    return data[(this.name()) + ":options"][option] = value;
  };

  Field.prototype.renderStandard = function(standard, data) {};

  Field.prototype.getQueryFieldBadge = function(data) {
    var cls;
    cls = getObjectClass(this);
    return {
      name: cls + ".getQueryFieldBadge",
      value: "unimplemented"
    };
  };

  Field.prototype.initForListView = function(listViewEditorTreeNode) {};

  Field.prototype.renderForListView = function(listViewEditorTreeNode) {
    var fc, opts;
    opts = listViewEditorTreeNode.opts;
    if (opts.renderForListView) {
      return opts.renderForListView(listViewEditorTreeNode, this);
    }
    fc = new FieldListViewColumnVertical(opts);
    listViewEditorTreeNode.addColumn(fc);
    return this.getLabel(opts.mode);
  };

  Field.prototype.checkValue = function(data, top_level_data, opts) {
    return true;
  };

  Field.prototype.isRequired = function(data, top_level_data, opts) {
    if (this.ColumnSchema && (this.ColumnSchema.not_null || this.ColumnSchema.length_min > 0 || this.ColumnSchema.check === "not_empty")) {
      if (this.ColumnSchema.check === "not_empty" && top_level_data && opts && !this.isVisible(opts.render_mode, {
        top_level_data: top_level_data
      }) && !this.isVisible(opts.render_mode_header, {
        top_level_data: top_level_data
      })) {
        return false;
      } else {
        return true;
      }
    } else {
      return false;
    }
  };

  Field.prototype.getClass = function() {
    return this.__cls;
  };

  Field.prototype.getElementClass = function() {
    return this.__cls;
  };

  Field.prototype.getLabel = function(mode) {
    var hint_key, info, info_lbl, required_cls, user_hint;
    required_cls = "";
    info_lbl = void 0;
    if ((mode === "detail" || mode === "detail-head" || mode === "text" || mode === "expert") || !this.FieldSchema || this.isReadOnly()) {

    } else {
      if (this.FieldSchema) {
        hint_key = this.FieldSchema._user_hint_loca_key();
        if (ez5.loca.has_user_key_localized("CURRENT", hint_key)) {
          user_hint = ez5.loca.get_user_key_localized("CURRENT", hint_key);
        }
      }
      if (user_hint) {
        info = [user_hint];
      } else {
        info = this.getCheckInfo(mode);
        assert(CUI.isArray(info), "Field.getLabel[getCheckInfo]", "Info needs to be Array.", {
          field: this.field,
          info: info
        });
      }
      if (this.isRequired()) {
        required_cls = "ez5-field-label--required";
      }
      if (info.length > 0) {
        info_lbl = new Button({
          "class": "ez5-field-label-info",
          icon: "info_circle",
          appearance: "flat",
          onClick: (function(_this) {
            return function() {
              var pop;
              pop = new ez5.HintPopover({
                element: info_lbl,
                content: new Label({
                  text: info.join("\n").trim(),
                  multiline: true
                })
              });
              return pop.show();
            };
          })(this)
        });
      }
    }
    return [
      new Label({
        "class": "ez5-field-label " + required_cls,
        text: this.nameLocalized(),
        multiline: true
      }), info_lbl
    ];
  };

  Field.prototype.needsDirectRender = function() {
    return this.isRequired();
  };

  Field.prototype.getTokenizer = function() {};

  Field.prototype.getDataForFieldData = function(data, top_level_data) {
    if (this.isTopLevelField()) {
      return top_level_data;
    } else {
      return data;
    }
  };

  Field.prototype.setFieldData = function(listViewColumn, element) {
    var data, field_data, map, ref, ref1, top_level_data;
    if (!CUI.isFunction((ref = listViewColumn.getRow()) != null ? ref.getData : void 0)) {
      CUI.error("Field.setFieldData: Row not found.", listViewColumn, listViewColumn.getRow(), (ref1 = listViewColumn.getRow()) != null ? ref1.getData : void 0, element);
    }
    data = listViewColumn.getRow().getData();
    top_level_data = listViewColumn.getRow().getTopLevelData();
    field_data = this.getDataForFieldData(data, top_level_data);
    map = field_data[this.name() + ":field"];
    if (!map) {
      map = field_data[this.name() + ":field"] = {};
    }
    map.element = element;
    map.listViewColumn = listViewColumn;
    map.field = this;
    return this;
  };

  Field.prototype.initSavedData = function(data, top_level_data) {
    var key;
    if (!data._saved) {
      data._saved = {};
    }
    key = this.name();
    if (!data._saved.hasOwnProperty(key)) {
      data._saved[key] = this.getDataAsString(data, top_level_data);
    }
    return data._saved[key];
  };

  Field.prototype.getCheckInfo = function(mode) {
    var cs, lower, lower_openess, lower_openness, upper, upper_openness, warn;
    warn = [];
    cs = this.ColumnSchema || {};
    switch (cs.check) {
      case "regexp":
        warn.push($$("field.warn.regexp", {
          regexp: cs.check_regexp
        }));
        break;
      case "range":
        if (cs.hasOwnProperty("check_range_lower")) {
          lower = cs.check_range_lower;
          lower_openess = $$("field.warn.range.openness.inclusive");
        } else if (cs.hasOwnProperty("check_range_lower_open")) {
          lower = cs.check_range_lower_open;
          lower_openness = $$("field.warn.range.openness.exclusive");
        } else {
          lower = $$("field.warn.range.empty");
          lower_openness = "";
        }
        if (cs.hasOwnProperty("check_range_upper")) {
          upper = cs.check_range_upper;
          upper_openness = $$("field.warn.range.openness.inclusive");
        } else if (cs.hasOwnProperty("check_range_upper_open")) {
          upper = cs.check_range_upper_open;
          upper_openness = $$("field.warn.range.openness.exclusive");
        } else {
          upper = $$("field.warn.range.empty");
          upper_openness = "";
        }
        warn.push($$("field.warn.range", {
          lower: lower,
          lower_openness: lower_openness,
          upper: upper,
          upper_openness: upper_openness
        }));
        break;
      case "email":
        warn.push($$("field.warn.email"));
    }
    if (cs.length_min > 1) {
      warn.push($$("field.warn.length_min", {
        min: cs.length_min + ""
      }));
    }
    if (cs.length_max > 0) {
      warn.push($$("field.warn.length_max", {
        max: cs.length_max + ""
      }));
    }
    return warn;
  };

  Field.prototype.hasBulkCheckbox = function(opts) {
    return true;
  };

  Field.prototype.addAfterRender = function(tn) {
    var cb, data, el, lbl, opts, ref, ref1;
    opts = tn.opts;
    data = opts.data;
    switch (opts.mode) {
      case "editor-bulk":
      case "editor-header-bulk":
        if (tn.getPath().length > 1) {
          tn.prependColumn(new ListViewColumnEmpty());
          return this;
        }
        if (!this.hasOption(data, "bulk")) {
          this.setOption(data, "bulk", false);
        }
        cb = new Checkbox({
          name: "bulk",
          disabled: !this.hasBulkCheckbox(opts),
          undo_and_changed_support: false,
          onDataChanged: (function(_this) {
            return function(data, field) {
              var element, field_data, ref, ref1;
              if (data.bulk) {
                tn.bulkEnabled(true);
              } else {
                tn.bulkEnabled(false);
              }
              field_data = _this.getDataForFieldData(opts.data, opts.top_level_data);
              element = (ref = field_data[_this.name() + ":field"]) != null ? (ref1 = ref.listViewColumn) != null ? typeof ref1.getInputElement === "function" ? ref1.getInputElement() : void 0 : void 0 : void 0;
              return Events.trigger({
                type: "editor-changed",
                node: element || cb
              });
            };
          })(this),
          data: data[(this.name()) + ":options"]
        }).start();
        el = tn.getColumns()[0].getOpt('element');
        if (el) {
          lbl = (ref = DOM.data((ref1 = DOM.matchSelector(el, '.ez5-field-label')) != null ? ref1[0] : void 0, 'element')) != null ? ref.DOM : void 0;
          cb.registerLabel(lbl);
        }
        tn.prependColumn(new ListViewColumn({
          element: cb.DOM
        }));
        if (!this.getOption(data, "bulk")) {
          tn.addClass("bulk-disabled");
        }
        break;
      case "expert":
        if (tn instanceof ListViewFieldsRendererDataNode) {
          tn.prependColumn(new ListViewColumnEmpty());
          return this;
        }
        el = this.getSearchUnsetElement(data, tn);
        if (el) {
          tn.prependColumn(new ListViewColumn({
            element: el
          }));
        } else {
          tn.prependColumn(new ListViewColumnEmpty());
        }
    }
    return this;
  };

  Field.prototype.getBulkOptionsForm = function(options, data, key) {
    var f_options, form, j, len, min_checked, opt, options_data;
    if (key == null) {
      key = null;
    }
    if (!(options != null ? options.length : void 0)) {
      return;
    }
    assert($.isPlainObject(data), (getObjectClass(this)) + ".getBulkOptionsForm", "data needs to be a PlainObject but is " + (getObjectClass(data)), {
      options: options,
      data: data,
      key: key
    });
    assert(!data._mask, (getObjectClass(this)) + ".getBulkOptionsForm", "data cannot be top-level-data for bulk options", {
      options: options,
      data: data,
      key: key
    });
    if (!data[(this.name()) + ":options"]) {
      data[(this.name()) + ":options"] = {};
    }
    if (key) {
      options_data = data[(this.name()) + ":options"];
      if (!options_data[key]) {
        options_data[key] = options[0];
      }
    } else {
      key = (this.name()) + ":options";
      options_data = data;
    }
    f_options = [];
    for (j = 0, len = options.length; j < len; j++) {
      opt = options[j];
      if (CUI.isPlainObject(opt)) {
        f_options.push(opt);
      } else {
        f_options.push({
          text: $$("main.editor.option." + opt, {
            fieldname: this.nameLocalized()
          }),
          value: opt
        });
      }
    }
    if (options.min_checked !== void 0) {
      min_checked = options.min_checked;
    } else {
      min_checked = 1;
    }
    form = new Options({
      data: options_data,
      undo_support: false,
      mark_changed: false,
      radio: true,
      horizontal: false,
      min_checked: min_checked,
      name: key,
      onDataChanged: (function(_this) {
        return function(data) {
          return Events.trigger({
            type: "editor-changed",
            node: form
          });
        };
      })(this),
      options: f_options
    });
    return form.start().DOM;
  };

  Field.prototype.getBulkSaveData = function(data, save_data, opts, key) {
    var bulk_key;
    if (opts.bulk && this.hasOption(data, "bulk")) {
      if (!data[(this.name()) + ":options"][key]) {
        throw new InvalidSaveDataException();
      }
      bulk_key = (this.name()) + ":group_mode";
      save_data[bulk_key] = data[(this.name()) + ":options"][key].substr("bulk_".length);
      return bulk_key;
    }
  };

  Field.prototype.hasUserData = function(data) {
    return !isEmpty(data[this.name()]);
  };

  Field.prototype.getDataAsString = function() {
    return console.error((getObjectClass(this)) + ".getDataAsString method not implemented.");
  };

  Field.prototype.renderSearchInput = function(data) {
    return $textEmpty((getObjectClass(this)) + ".renderSearchInput unimplemented");
  };

  Field.prototype.renderEditorInput = function(data, top_level_data, opts) {
    return $textEmpty((getObjectClass(this)) + ".renderEditorInput unimplemented");
  };

  Field.prototype.renderDetailOutput = function(data, top_level_data) {
    return $textEmpty((getObjectClass(this)) + ".renderDetailOutput unimplemented");
  };

  Field.prototype.getSortField = function(filter, keys) {
    return assert(false, (getObjectClass(this)) + ".getSortField unimplemented");
  };

  Field.prototype.getSaveData = function(data, save_data, opts) {};

  Field.prototype.path = function() {
    if (this.mask.nestedTableField) {
      return this.mask.nestedTableField.fullName();
    } else {
      return this.mask.table.name();
    }
  };

  Field.prototype.fullName = function() {
    return this.path() + "." + this.name();
  };

  Field.prototype.getFieldNamesForSuggest = function() {
    return [this.fullName()];
  };

  Field.prototype.getCSVDestinationFields = function(csvImporter) {
    return [];
  };

  Field.prototype.getCSVRecordKeyPath = function() {
    var path;
    if (this.mask.nestedTableField) {
      path = this.mask.nestedTableField.getCSVRecordKeyPath() + ".";
    } else if (this.isTopLevelField()) {
      path = "";
    } else {
      path = this.mask.table.name() + ".";
    }
    return path + this.name();
  };

  Field.prototype.getCSVName = function() {
    var path;
    if (this.mask.nestedTableField) {
      path = this.mask.nestedTableField.getCSVName() + ".";
    } else {
      path = "";
    }
    return path + this.name();
  };

  Field.prototype.getCSVLabel = function() {
    return this.getCSVName();
  };

  Field.prototype.needsRowMove = function(mode) {
    return false;
  };

  Field.prototype.nameLocalized = function() {
    if (!this.ColumnSchema) {
      throw (getObjectClass(this)) + ".nameLocalized(): no ColumnSchema set";
    }
    return this.ColumnSchema._name_localized;
  };

  Field.prototype.fullNameLocalized = function(include_top_level_mask, use_table_name, return_path, mask) {
    var path;
    if (include_top_level_mask == null) {
      include_top_level_mask = false;
    }
    if (use_table_name == null) {
      use_table_name = false;
    }
    if (return_path == null) {
      return_path = false;
    }
    if (mask == null) {
      mask = this.mask;
    }
    if (this.insideNested()) {
      path = mask.nestedTableField.fullNameLocalized(include_top_level_mask, use_table_name, true);
      path.push(this.nameLocalized());
    } else if (include_top_level_mask) {
      if (use_table_name) {
        path = [mask.table.nameLocalized(), this.nameLocalized()];
      } else {
        path = [mask.nameLocalized(), this.nameLocalized()];
      }
    } else {
      path = [this.nameLocalized()];
    }
    if (return_path) {
      return path;
    } else {
      return path.join(" / ");
    }
  };

  Field.prototype.getOutputStandard = function() {
    var ref;
    if (((ref = this.FieldSchema) != null ? ref.output.standard.order : void 0) > 0) {
      return this.FieldSchema.output.standard;
    } else {
      return null;
    }
  };

  Field.prototype.getOutputStandardEAS = function() {
    var ref;
    if (((ref = this.FieldSchema) != null ? ref.output.standard_eas.order : void 0) > 0) {
      return this.FieldSchema.output.standard_eas;
    } else {
      return null;
    }
  };

  Field.prototype.supportsFacet = function() {
    return false;
  };

  Field.prototype.getFacet = function() {};

  Field.prototype.isVisibleToSaveData = function(mode, header_mode, opts) {
    opts.skip_columnfilter = true;
    return this.isVisible(mode, opts) || this.isVisible(header_mode, opts);
  };

  Field.prototype.isVisible = function(mode, opts) {
    var acl_item, cf, cfs, check, j, l, len, len1, match, ref, ref1, ref2, ref3, ref4, row_matches, tags, top_level_data;
    assert(mode === "editor-header" || mode === "editor-header-bulk" || mode === "editor-header-template" || mode === "editor-bulk" || mode === "editor-template" || mode === "editor" || mode === "csv-import" || mode === "expert" || mode === "index" || mode === "detail" || mode === "detail-header" || mode === "sort" || mode === "facet" || mode === "text" || mode === "table" || mode === "text-inline" || mode === "fulltext" || mode === "standard", "Field.isVisible", "mode " + mode + " unknown", {
      mode: mode
    });
    assert(this.FieldSchema, (getObjectClass(this)) + ".isVisible", "Unkown FieldSchema for mode " + mode + ".");
    if ((opts != null ? opts.top_level_data : void 0) && !opts.skip_columnfilter && this.ColumnSchema && !this.getMainMask().isAllFieldsMask()) {
      top_level_data = opts.top_level_data;
      cfs = ez5.objecttypeRights.getColumnFilters(top_level_data._objecttype);
      if (cfs.length > 0) {
        if (ez5.schema.CURRENT._objecttype_by_name[top_level_data._objecttype].has_tags) {
          tags = top_level_data._tags || [];
          if (tags.length === 0 && top_level_data._template) {
            tags = top_level_data._template._tags || [];
          }
        } else {
          tags = null;
        }
        row_matches = true;
        for (j = 0, len = cfs.length; j < len; j++) {
          cf = cfs[j];
          if (ref = this.ColumnSchema.column_id, indexOf.call(cf.columns, ref) < 0) {
            continue;
          }
          row_matches = false;
          if (((ref1 = cf.acl) != null ? ref1.length : void 0) > 0) {
            match = false;
            ref2 = cf.acl;
            for (l = 0, len1 = ref2.length; l < len1; l++) {
              acl_item = ref2[l];
              if (acl_item.who._basetype === 'user' && acl_item.who.user._id === ez5.session.user.getId()) {
                match = true;
                break;
              }
              if (acl_item.who._basetype === 'group' && (ref3 = acl_item.who.group._id, indexOf.call(ez5.session.getGroupIds(), ref3) >= 0)) {
                match = true;
                break;
              }
            }
          } else {
            match = true;
          }
          if (match && tags) {
            check = TagFilter.matchesTags(cf.tagfilter, tags);
            if (!check) {
              match = false;
            }
          }
          if (match) {
            row_matches = true;
            break;
          }
        }
        if (row_matches === false) {
          return false;
        }
      }
    }
    if (mode === "index") {
      if (this.FieldSchema.search.facet || this.FieldSchema.search.fulltext || this.FieldSchema.search.expert) {
        return true;
      }
      return false;
    }
    if (mode.startsWith("editor")) {
      if (this.FieldSchema.edit.mode !== "off" && ((ref4 = this.FieldSchema.custom_settings) != null ? ref4.editor_frontend_mode : void 0) !== "hide") {
        return true;
      } else {
        return false;
      }
    }
    switch (mode) {
      case "csv-import":
        return this.FieldSchema.edit.mode === "edit";
      case "detail":
      case "detail-no-eas":
      case "detail-header":
        return this.FieldSchema.output.detail;
      case "standard":
        if (this.FieldSchema.output.standard_eas) {
          return this.FieldSchema.output.standard_eas.order > 0;
        }
        return this.FieldSchema.output.standard.order > 0;
      case "facet":
        return this.FieldSchema.search.facet;
      case "expert":
        if (!this.FieldSchema.search.hasOwnProperty("expert")) {
          return true;
        } else {
          return this.FieldSchema.search.expert;
        }
        break;
      case "fulltext":
        return this.FieldSchema.search.fulltext;
      case "text":
        return this.FieldSchema.output.text;
      case "table":
        return this.FieldSchema.output.table;
      case "sort":
        return (this.FieldSchema.edit.mode !== "off" || this.FieldSchema.output.detail) && (this.FieldSchema.search.expert || this.FieldSchema.search.fulltext);
      default:
        return assert(false, "Field.isVisible", "Unkown mode " + mode);
    }
  };

  Field.prototype.isSourceForMapping = function(required_type) {
    return true;
  };

  Field.prototype.isReadOnly = function(data, top_level_data, opts) {
    var ref, ref1, ref2, ref3;
    if (opts == null) {
      opts = {};
    }
    if (((ref = this.FieldSchema) != null ? ref.edit.mode : void 0) === "show" || ((ref1 = this.FieldSchema) != null ? (ref2 = ref1.custom_settings) != null ? ref2.editor_frontend_mode : void 0 : void 0) === "readonly") {
      return true;
    }
    if (((ref3 = this.mask.nestedTableField) != null ? ref3.FieldSchema.edit.append_only : void 0) && !(data != null ? data._new : void 0)) {
      return true;
    }
    return false;
  };

  Field.prototype.isVisibleSort = function() {
    return false;
  };

  Field.prototype.id = function() {
    var ref;
    return (ref = this.ColumnSchema) != null ? ref.column_id : void 0;
  };

  Field.prototype.identifier = function() {
    return this.fullName();
  };

  Field.prototype.getSearchUnsetElement = function(data, listViewRow) {
    var field, set_disabled;
    assert(!data.data, "Field.getSearchUnsetElement", "data needs to be set correctly", {
      data: data
    });
    assert(listViewRow instanceof ListViewFieldsRendererNode, "Field.getSearchUnsetElement", "listViewRow needs to be instance of listViewFieldsRendererNode", {
      listViewRow: listViewRow
    });
    field = new Checkbox({
      name: (this.name()) + ":unset",
      data: data,
      undo_support: false,
      check_changed: false,
      mark_changed: false,
      icon_active: "fa-ban",
      icon_inactive: "fa-ban",
      tooltip: {
        text: $$("main.search.expert.unset_tooltip")
      },
      onDataChanged: (function(_this) {
        return function() {
          set_disabled();
          return Events.trigger({
            type: "search-input-change",
            node: field
          });
        };
      })(this)
    }).start();
    listViewRow.setSearchUnsetCheckbox(field);
    set_disabled = function() {
      if (data[field.getName()]) {
        return listViewRow.addClass("ez5-field-inactive");
      } else {
        return listViewRow.removeClass("ez5-field-inactive");
      }
    };
    set_disabled();
    return field.DOM;
  };

  Field.prototype.getSearchFilter = function(data, key) {
    if (key == null) {
      key = this.name();
    }
    return this.getUnsetSearchFilter(data, key);
  };

  Field.prototype.getSortFunction = function() {};

  Field.prototype.getSearchFilterWithNested = function(data, key) {
    var i, j, path, ref, sf;
    sf = this.getSearchFilter(data, key);
    if (!sf) {
      return;
    }
    path = this.getFieldPath();
    if (path.length === 1) {
      return sf;
    }
    for (i = j = 1, ref = path.length; 1 <= ref ? j < ref : j > ref; i = 1 <= ref ? ++j : --j) {
      if (!path[i].isNestedIndex()) {
        continue;
      }
      sf = {
        type: "nested",
        path: path[i].fullName(),
        search: [sf]
      };
    }
    return sf;
  };

  Field.prototype.getSearchField = function() {
    return console.error((getObjectClass(this)) + ".getSearchField method not implemented.");
  };

  Field.prototype.getUnsetSearchFilter = function(data, key) {
    var field, filter, fn, j, len;
    if (key == null) {
      key = this.name();
    }
    if (data[key + ":unset"]) {
      field = this.getSearchField();
      if (CUI.isArray(field) && field.length > 0) {
        filter = {
          type: "complex",
          search: []
        };
        for (j = 0, len = field.length; j < len; j++) {
          fn = field[j];
          filter.search.push({
            type: "in",
            fields: [fn],
            "in": [null]
          });
        }
      } else {
        filter = {
          type: "in",
          fields: [field],
          "in": [null]
        };
      }
      filter._unnest = true;
      filter._unset_filter = true;
    }
    return filter;
  };

  Field.prototype.isEmpty = function(data, top_level_data, opts) {
    return true;
  };

  Field.prototype.getExportOptions = function(fields) {
    if (fields == null) {
      fields = [];
    }
    return fields;
  };

  Field.prototype.isExpertCommon = function(mode) {
    return false;
  };

  Field.prototype.isExpertCommonOnly = function(mode) {
    return true;
  };

  Field.prototype.sortExtraOpts = function() {};

  Field.prototype.isSortUnique = function() {
    return false;
  };

  Field.prototype.formatSortGroupable = function(item, filter, idx) {
    return item;
  };

  Field.prototype.isSortGroupable = function() {
    return false;
  };

  Field.prototype.allowAppendMultipleRows = function() {
    return false;
  };

  Field.prototype.getAppendMultipleRowsButtons = function() {
    return [];
  };

  Field.prototype.getXMLFormWrapperFields = function() {
    return [];
  };

  Field.prototype.getXMLFormWrapperType = function() {
    return "text";
  };

  Field.prototype.isTopLevelField = function() {
    return false;
  };

  Field.prototype.getStoreDataForUrlValue = function(data) {};

  Field.prototype.getSignature = function() {
    var sig;
    sig = {
      "class": getObjectClass(this),
      mask: {
        name: this.getMainMask().name()
      },
      field: {
        name: this.fullName()
      }
    };
    return sig;
  };

  Field.fromSignature = function(signature) {
    var found, mask, mask_schema;
    assert(window[signature["class"]] === this, "Field.newFromSignature", "Function mismatch", {
      signature: signature
    });
    mask_schema = ez5.mask.CURRENT._mask_by_name[signature.mask.name];
    mask = new Mask("CURRENT", null, mask_schema);
    found = null;
    mask.invokeOnFields("all", true, (function(_this) {
      return function(f) {
        if (!(f instanceof Field) || found) {
          return;
        }
        if (f.fullName() === signature.field.name) {
          found = f;
        }
      };
    })(this));
    return found;
  };

  Field.focusFirstTextField = function(node) {
    var el, j, k, l, len, len1, order, ref, ref1, sel;
    assert(node instanceof HTMLElement, "FieldsRenderer.focusFirstField", "node needs to be instance of HTMLElement", {
      node: node
    });
    ref = [1, 2, 3, null];
    for (j = 0, len = ref.length; j < len; j++) {
      order = ref[j];
      ref1 = ["input", "textarea"];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        k = ref1[l];
        if (order !== null) {
          sel = (".ez5-standard-order[standard-order=\"" + order + "\"] ") + k;
        } else {
          sel = k;
        }
        el = DOM.findElement(node, sel);
        if (el) {
          el.focus();
          return el;
        }
      }
    }
    return null;
  };

  Field.focusNextField = function(node) {
    var el;
    assert(node instanceof HTMLElement, "FieldsRenderer.focusNextField", "node needs to be instance of HTMLElement", {
      node: node
    });
    el = DOM.findNextVisibleElement(node, "[tabindex]");
    if (el) {
      el.focus();
      return el;
    }
    return null;
  };

  return Field;

})(CUI.Dummy);

CUI.ready(function() {
  return Events.registerEvent({
    type: ["field-get-check-info", "field-check-field", "field-is-required"]
  });
});
// Generated by CoffeeScript 1.10.0
var CheckDataProblem,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CheckDataProblem = (function(superClass) {
  extend(CheckDataProblem, superClass);

  function CheckDataProblem() {
    return CheckDataProblem.__super__.constructor.apply(this, arguments);
  }

  CheckDataProblem.prototype.initOpts = function() {
    CheckDataProblem.__super__.initOpts.call(this);
    return this.addOpts({
      field: {
        mandatory: true,
        check: Field
      },
      field_data: {
        mandatory: true,
        check: 'PlainObject'
      }
    });
  };

  return CheckDataProblem;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var DataColumn,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DataColumn = (function(superClass) {
  extend(DataColumn, superClass);

  function DataColumn() {
    return DataColumn.__super__.constructor.apply(this, arguments);
  }

  DataColumn.prototype.isEmpty = function(data, top_level_data) {
    return isEmpty(data[this.name()]);
  };

  DataColumn.prototype.renderData = function(data) {
    return [data[this.name()], data[(this.name()) + ":highlight"]];
  };

  DataColumn.prototype.isVisible = function(mode, opts) {
    var visible;
    visible = DataColumn.__super__.isVisible.call(this, mode, opts);
    if (!visible) {
      return false;
    }
    switch (mode) {
      case "detail-header":
      case "editor-header":
      case "editor-header-template":
      case "editor-header-bulk":
        return false;
      default:
        return true;
    }
  };

  DataColumn.prototype.renderStandard = function(standard, data) {
    var highlight, os, ref, value;
    os = this.getOutputStandard();
    if (!os) {
      return;
    }
    ref = this.renderData(data), value = ref[0], highlight = ref[1];
    standard.push({
      field: this,
      highlight: highlight,
      value: value,
      render_info: os
    });
    return this;
  };

  DataColumn.prototype.getCSVDestinationFields = function() {
    var field;
    field = {
      format: "string",
      field: this
    };
    return [field];
  };

  DataColumn.prototype.getDataAsString = function(data) {
    if (isEmpty(data[this.name()])) {
      return null;
    } else {
      return JSON.stringify(data[this.name()]);
    }
  };

  DataColumn.prototype.checkValue = function(data, top_level_data, opts) {
    var ref, v;
    v = data[this.name()];
    if (isEmpty(v)) {
      v = (ref = data._template) != null ? ref[this.name()] : void 0;
    }
    return this.checkBareValue(v, data, top_level_data, opts);
  };

  DataColumn.prototype.checkBareValue = function(v, data, top_level_data, opts) {
    var cs, re;
    if (isEmpty(v) || isString(v) && v.trim() === "") {
      if (this.isRequired(data, top_level_data, opts)) {
        return false;
      } else {
        return true;
      }
    }
    cs = this.ColumnSchema || {};
    if (cs.check === "not_empty") {
      if (v === false) {
        return false;
      }
      if ((v + "").trim().length === 0) {
        return false;
      }
    }
    if (cs.length_min > 0) {
      if (v.length < cs.length_min) {
        return false;
      }
    }
    if (cs.length_max > 0) {
      if (v.length > cs.length_max) {
        return false;
      }
    }
    switch (cs.check) {
      case "regexp":
        re = new RegExp(cs.check_regexp, cs.check_regexp_flags);
        if (re.exec(v)) {
          return true;
        } else {
          return false;
        }
        break;
      case "range":
        if (cs.hasOwnProperty("check_range_lower")) {
          if (v < cs.check_range_lower) {
            return false;
          }
        } else if (cs.hasOwnProperty("check_range_lower_open")) {
          if (v <= cs.check_range_lower_open) {
            return false;
          }
        }
        if (cs.hasOwnProperty("check_range_upper")) {
          if (v > cs.check_range_upper) {
            return false;
          }
        } else if (cs.hasOwnProperty("check_range_upper_open")) {
          if (v >= cs.check_range_upper_open) {
            return false;
          }
        }
        return true;
      case "email":
        return true;
    }
    return true;
  };

  DataColumn.prototype.getElementOpts = function(mode) {
    var opts;
    opts = {
      name: this.name()
    };
    if (this.ColumnSchema.check === "email") {
      opts.type = EmailInput;
      opts.placeholder = $$('data.column.email_input.placeholder');
      opts.invalidHint = {
        text: $$('data.column.email_input.invalid_hint')
      };
    } else {
      opts.type = Input;
    }
    return opts;
  };

  DataColumn.prototype.getSearchFilterTokenized = function(val) {
    var f, filter, i, len, t, tokens;
    tokens = (this.getTokenizer()).tokenize(val);
    if (tokens.length === 0) {
      return;
    }
    if (tokens.length > 1) {
      filter = {
        type: "complex",
        search: []
      };
      for (i = 0, len = tokens.length; i < len; i++) {
        t = tokens[i];
        f = t.getFilter(this);
        if (!f) {
          continue;
        }
        f.bool = "should";
        filter.search.push(f);
      }
      if (filter.length === 0) {

      } else {
        return filter;
      }
    } else {
      return tokens[0].getFilter(this);
    }
  };

  DataColumn.prototype.getSortFunction = function() {
    return (function(_this) {
      return function(a, b) {
        return compareIndex(a[_this.name()], b[_this.name()]);
      };
    })(this);
  };

  DataColumn.prototype.getSearchField = function() {
    return this.fullName();
  };

  DataColumn.prototype.getSortField = function() {
    return this.fullName();
  };

  return DataColumn;

})(Field);
// Generated by CoffeeScript 1.10.0
var AclField,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AclField = (function(superClass) {
  extend(AclField, superClass);

  function AclField(mask, FieldSchema) {
    this.mask = mask;
    this.FieldSchema = FieldSchema;
    AclField.__super__.constructor.call(this, this.mask, this.FieldSchema);
  }

  AclField.prototype.name = function() {
    return "_acl";
  };

  AclField.prototype.getDataForFieldData = function(data, top_level_data) {
    return top_level_data;
  };

  AclField.prototype.nameLocalized = function() {
    return $$("acl.field.name");
  };

  AclField.prototype.isSourceForMapping = function(required_type) {
    return false;
  };

  AclField.prototype.isExpertCommon = function(mode) {
    return true;
  };

  AclField.prototype.isExpertCommonOnly = function(mode) {
    return false;
  };

  AclField.prototype.isEmpty = function(data, top_level_data, opts) {
    var ref;
    if (((ref = top_level_data[this.name()]) != null ? ref.length : void 0) > 0) {
      return false;
    } else {
      return true;
    }
  };

  AclField.prototype.isVisible = function(mode, opts) {
    if (mode === "editor-header" || mode === "editor-header-template" || mode === "editor-header-bulk") {
      if (this.mask.schema.system_fields.acl.edit.mode === "off") {
        return false;
      } else {
        return true;
      }
    } else if (mode === "detail-header" && this.mask.schema.system_fields.acl.output.mode !== "off") {
      return true;
    } else {
      return false;
    }
  };

  AclField.prototype.isReadOnly = function(data, top_level_data, opts) {
    var ref;
    if (this.mask.schema.system_fields.acl.edit.mode === "show") {
      return true;
    } else if (!((ref = top_level_data._generated_rights) != null ? ref.acl : void 0)) {
      return true;
    } else {
      return false;
    }
  };

  AclField.prototype.renderEditorInput = function(data, top_level_data, opts) {
    var bulk, df, div, empty_loca_key, expert_menu, footer_right, o, options, ref, ref1, sticky;
    if (!top_level_data[this.name()]) {
      top_level_data[this.name()] = [];
    }
    bulk = (ref = opts.mode) === "editor-bulk" || ref === "editor-header-bulk";
    sticky = this.mask.isHierarchy();
    expert_menu = ["preset", "right"];
    if (sticky) {
      expert_menu.push("sticky");
    }
    if (this.mask.isHierarchy()) {
      footer_right = new Checkbox({
        data: top_level_data,
        name: "_private_acl",
        text: $$("acl.field.private_acl")
      }).start();
    }
    this.aclManager = new AclManager({
      data: top_level_data[this.name()],
      preset: true,
      sticky: sticky,
      context: this,
      onUpdate: (function(_this) {
        return function() {
          var acl_data, e, error;
          try {
            acl_data = _this.aclManager.getSaveData();
            top_level_data[_this.name()] = acl_data;
          } catch (error) {
            e = error;
            if (e instanceof InvalidSaveDataException) {

            } else {
              throw e;
            }
          }
        };
      })(this),
      expert_menu: expert_menu,
      footer_right: footer_right
    });
    if (((ref1 = opts.editor) != null ? ref1.editor_data.mode : void 0) === "new" && top_level_data._template) {
      empty_loca_key = "acl.field.set_by_template";
    }
    opts = this.aclManager.getField({
      empty_loca_key: empty_loca_key
    });
    df = DataField["new"](opts).start();
    Events.listen({
      type: "data-changed",
      node: df,
      call: function(ev, info) {
        return Events.trigger({
          type: "editor-changed",
          node: df
        });
      }
    });
    if (!bulk) {
      return df.DOM;
    }
    div = $div("ez5-acl-field-group-mode");
    div.append(df.DOM);
    options = (function() {
      var i, len, ref2, results;
      ref2 = ["add", "replace", "remove_all"];
      results = [];
      for (i = 0, len = ref2.length; i < len; i++) {
        o = ref2[i];
        results.push("bulk_acl_" + o);
      }
      return results;
    })();
    div.append(this.getBulkOptionsForm(options, data, "mode"));
    return div;
  };

  AclField.prototype.getDataAsString = function(data, top_level_data) {
    var str;
    str = JSON.stringify({
      _acl: top_level_data._acl,
      _private_acl: top_level_data._private_acl
    });
    return str;
  };

  AclField.prototype.getSaveData = function(data, save_data, opts) {
    var acl, i, item, len, ref;
    if (data == null) {
      data = null;
    }
    if (opts == null) {
      opts = {};
    }
    if (opts.demo_data) {
      save_data._top_level._acl = [];
      return;
    }
    acl = data._top_level[this.name()] || [];
    if (acl.length === 0 && data._top_level._template) {
      acl = data._top_level._template[this.name()] || [];
    }
    if (opts.copy) {
      save_data._top_level._acl = [];
      ref = copyObject(acl, true);
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        delete item._id;
        delete item.date_created;
        save_data._top_level._acl.push(item);
      }
    } else {
      save_data._top_level._acl = acl;
    }
    if (this.mask.isHierarchy()) {
      save_data._top_level._private_acl = !!data._top_level._private_acl;
    }
    return this.getBulkSaveData(data, save_data._top_level, opts, "mode");
  };

  AclField.prototype.checkValue = function(data, top_level_data, opts) {
    var ref;
    if (this.getOption(data, "bulk")) {
      if (this.getOption(data, "mode") !== "bulk_acl_remove_all") {
        if (!((ref = top_level_data[this.name()]) != null ? ref.length : void 0)) {
          return false;
        }
      }
    }
    return AclField.__super__.checkValue.call(this, data, top_level_data, opts);
  };

  AclField.prototype.renderDetailOutput = function(data, top_level_data, opts) {
    var count, ref;
    count = (ref = top_level_data[this.name()]) != null ? ref.length : void 0;
    if (count > 0) {
      return new Label({
        text: $$("acl.field.display.rights", {
          count: count
        })
      });
    } else {
      return new EmptyLabel({
        text: $$("acl.field.display.empty-rights")
      });
    }
  };

  AclField.prototype.isTopLevelField = function() {
    return true;
  };

  AclField.prototype.fullName = function() {
    return this.name();
  };

  return AclField;

})(Field);
// Generated by CoffeeScript 1.10.0
var BooleanColumn,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

BooleanColumn = (function(superClass) {
  extend(BooleanColumn, superClass);

  function BooleanColumn() {
    return BooleanColumn.__super__.constructor.apply(this, arguments);
  }

  BooleanColumn.prototype.getSearchFilter = function(data, key) {
    var filter, value;
    if (key == null) {
      key = this.name();
    }
    filter = BooleanColumn.__super__.getSearchFilter.call(this, data, key);
    if (filter) {
      return filter;
    }
    value = data[key];
    if (isEmpty(value)) {
      return;
    }
    if (value === "false") {
      filter = {
        type: "in",
        fields: [this.getSearchField()],
        "in": [false]
      };
    } else {
      filter = {
        type: "in",
        fields: [this.getSearchField()],
        "in": [true]
      };
    }
    return filter;
  };

  BooleanColumn.prototype.getCSVDestinationFields = function(csvImporter) {
    var opts;
    opts = {
      csvImporter: csvImporter,
      field: this
    };
    return [new BooleanColumnCSVImporterDestinationField(opts)];
  };

  BooleanColumn.prototype.getQueryFieldBadge = function(data) {
    var key;
    if (data[this.name()] === "true") {
      key = "boolean.column.search.true";
    } else {
      key = "boolean.column.search.false";
    }
    return {
      name: this.nameLocalized(),
      value: $$(key),
      popoverContent: dump(this.getSearchFilter(data))
    };
  };

  BooleanColumn.prototype.renderSearchInput = function(data) {
    var select;
    return select = new Select({
      name: this.name(),
      data: data,
      onDataChanged: (function(_this) {
        return function() {
          return Events.trigger({
            node: select,
            type: "search-input-change"
          });
        };
      })(this),
      options: [
        {
          text: "",
          value: null
        }, {
          text: $$("boolean.column.search.true"),
          value: "true"
        }, {
          text: $$("boolean.column.search.false"),
          value: "false"
        }
      ]
    }).start().DOM;
  };

  BooleanColumn.prototype.getSaveData = function(data, save_data, opts) {
    var ref;
    if (data[this.name()] || ((ref = data._template) != null ? ref[this.name()] : void 0) || opts.demo_data) {
      return save_data[this.name()] = true;
    } else {
      return save_data[this.name()] = false;
    }
  };

  BooleanColumn.prototype.hasUserData = function(data) {
    if (data._is_auto) {
      return false;
    } else {
      return true;
    }
  };

  BooleanColumn.prototype.isRequired = function() {
    return false;
  };

  BooleanColumn.prototype.checkValue = function(data, top_level_data, opts) {
    return true;
  };

  BooleanColumn.prototype.renderEditorInput = function(data) {
    var cb;
    if (isUndef(data[this.name()])) {
      data[this.name()] = false;
    }
    return cb = new Checkbox({
      name: this.name(),
      data: data,
      onDataChanged: (function(_this) {
        return function() {
          return Events.trigger({
            type: "editor-changed",
            node: cb
          });
        };
      })(this)
    }).start().DOM;
  };

  BooleanColumn.prototype.renderDetailOutput = function(data) {
    var key;
    if (data[this.name()]) {
      key = "boolean.column.detail.true";
    } else {
      key = "boolean.column.detail.false";
    }
    return new Label({
      text: $$(key)
    }).DOM;
  };

  BooleanColumn.prototype.isExpertCommon = function(mode) {
    return true;
  };

  return BooleanColumn;

})(DataColumn);
// Generated by CoffeeScript 1.10.0
var ChangelogColumn, ChangelogColumnForCollection, ChangelogColumnSearchComment,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ChangelogColumn = (function(superClass) {
  extend(ChangelogColumn, superClass);

  function ChangelogColumn() {
    return ChangelogColumn.__super__.constructor.apply(this, arguments);
  }

  ChangelogColumn.prototype.isVisible = function(mode, opts) {
    switch (mode) {
      case "expert":
        if (ez5.session.hasSystemRight("root", "frontend_features[changelog]")) {
          return true;
        } else {
          return false;
        }
        break;
      case "sort":
        return true;
      default:
        return false;
    }
  };

  ChangelogColumn.prototype.name = function() {
    return "_changelog";
  };

  ChangelogColumn.prototype.isSourceForMapping = function(required_type) {
    if (required_type["export"]) {
      return true;
    } else {
      return false;
    }
  };

  ChangelogColumn.prototype.getReplacementRecord = function() {};

  ChangelogColumn.prototype.nameLocalized = function() {
    return $$("changelog.column.name");
  };

  ChangelogColumn.prototype.isExpertCommon = function() {
    return true;
  };

  ChangelogColumn.prototype.getQueryFieldBadge = function(data) {
    return {
      name: this.nameLocalized(),
      value: this.getSearchInfo(data).join("; ")
    };
  };

  ChangelogColumn.prototype.sortExtraOpts = function(data) {
    return [
      {
        text: $$("changelog.column.created"),
        value: "created"
      }, {
        text: $$("changelog.column.updated"),
        value: "updated"
      }
    ];
  };

  ChangelogColumn.prototype.isSortUnique = function() {
    return true;
  };

  ChangelogColumn.prototype.isSortGroupable = function() {
    return true;
  };

  ChangelogColumn.prototype.getSortField = function(filter, keys) {
    var field_name, fields;
    if (filter._extra === "created") {
      field_name = "_changelog.date_created";
    } else {
      field_name = "_changelog.date_last_updated";
    }
    fields = [
      {
        field: field_name,
        order: filter._order,
        group_field: field_name
      }
    ];
    if ((filter._key === "_1" && idxInArray(keys, "_2") === -1) || (filter._key === "_2")) {
      fields.push({
        field: "_system_object_id",
        order: filter._order
      });
      return fields;
    } else {
      return fields[0];
    }
  };

  ChangelogColumn.prototype.formatSortGroupable = function(v) {
    return ez5.format_date(v);
  };

  ChangelogColumn.prototype.getSearchInfo = function(data) {
    var info;
    info = [];
    if (!this.getSearchFilter(data)) {
      return info;
    }
    if (data.who) {
      info.push(AclWho.newInstance(data.who).getDisplayText());
    }
    if (data.operation) {
      info.push($$("changelog.column.popover.form.operation." + data.operation.toLowerCase()));
    }
    if (data.from) {
      info.push($$("changelog.column.popover.from"));
    }
    if (data.to) {
      info.push($$("changelog.column.popover.to"));
    }
    if (!isEmpty(data.comment)) {
      info.push($$("changelog.column.popover.comment"));
    }
    if (info.length === 0) {
      return;
    }
    return info;
  };

  ChangelogColumn.prototype.getSearchFilter = function(data, key, for_collection) {
    var filter, from, i, len, op_date_field, op_date_fields, op_user_fields, phrase, ref, search, str, sub_search, to, user_id;
    if (key == null) {
      key = this.name();
    }
    if (for_collection == null) {
      for_collection = false;
    }
    if (!(data.who || data.from || data.to || !isEmpty(data.comment))) {
      return;
    }
    search = [];
    if (data.who) {
      user_id = AclWho.newInstance(data.who).getId();
    } else {
      user_id = null;
    }
    if (!isEmpty(data.from)) {
      from = data.from;
    } else {
      from = void 0;
    }
    if (!isEmpty(data.to)) {
      to = data.to;
    } else {
      to = void 0;
    }
    if ((from || to) && user_id) {
      search.push({
        type: "changelog_range",
        user: user_id,
        operation: data.operation,
        from: from,
        to: to
      });
    } else {
      switch (data.operation) {
        case "UPDATE":
          op_user_fields = ["_changelog.user_last_updated"];
          op_date_fields = ["_changelog.date_last_updated"];
          break;
        case "INSERT":
          op_user_fields = ["_changelog.user_created"];
          op_date_fields = ["_changelog.date_created"];
          break;
        default:
          op_user_fields = ["_changelog.user_last_updated", "_changelog.user_created"];
          op_date_fields = ["_changelog.date_last_updated", "_changelog.date_created"];
      }
      if (user_id) {
        search.push({
          type: "in",
          fields: op_user_fields,
          "in": [user_id]
        });
      }
      if (from || to) {
        sub_search = [];
        search.push({
          type: "complex",
          search: sub_search
        });
        for (i = 0, len = op_date_fields.length; i < len; i++) {
          op_date_field = op_date_fields[i];
          sub_search.push({
            type: "range",
            bool: "should",
            field: op_date_field,
            from: from,
            to: to
          });
        }
      }
    }
    if (!isEmpty(data.comment)) {
      ref = Search.getPhrase(data.comment), str = ref[0], phrase = ref[1];
      search.push({
        type: "match",
        field: "_changelog.comment",
        string: str,
        phrase: phrase
      });
    }
    filter = {
      type: "complex",
      bool: "must",
      search: search
    };
    if (for_collection) {
      return filter;
    } else {
      return {
        type: "complex",
        search: [
          {
            type: "in",
            bool: "must",
            fields: ["_objecttype"],
            "in": [this.path()]
          }, filter
        ]
      };
    }
  };

  ChangelogColumn.prototype.getSaveData = function() {};

  ChangelogColumn.prototype.renderSearchInput = function(data) {
    var inp;
    inp = new FormPopover({
      data: data,
      undo_and_changed_support: false,
      button: {
        loca_key: "changelog.column.search.button"
      },
      trigger_data_changed_while_open: true,
      popover: {
        onHide: (function(_this) {
          return function() {
            return Events.trigger({
              node: inp,
              type: "search-input-change"
            });
          };
        })(this)
      },
      fields: (function(_this) {
        return function() {
          return _this.getPopoverFields(data);
        };
      })(this),
      renderDisplayContent: (function(_this) {
        return function() {
          return ez5.renderFormPopoverInfo(_this.getSearchInfo(data));
        };
      })(this)
    });
    inp.start();
    return inp;
  };

  ChangelogColumn.prototype.getPopoverFields = function(data) {
    var changelogSearchColumn, searchComment, whoField;
    whoField = (new AclWhoManager({
      who_filter: ["user"],
      name: "who"
    })).getWhoSelector(data);
    changelogSearchColumn = new ChangelogColumnSearchComment(this.mask, this.FieldSchema);
    searchComment = new SearchToken({
      column: changelogSearchColumn,
      data: data
    }).getInput();
    return [
      {
        type: DataFieldProxy,
        form: {
          label: $$("changelog.column.popover.form.who")
        },
        undo_and_changed_support: false,
        element: whoField
      }, {
        form: {
          label: $$("changelog.column.popover.form.operation")
        },
        type: Select,
        undo_and_changed_support: false,
        name: "operation",
        options: [
          {
            text: $$("changelog.column.popover.form.operation.any"),
            value: null
          }, {
            text: $$("changelog.column.popover.form.operation.insert"),
            value: "INSERT"
          }, {
            text: $$("changelog.column.popover.form.operation.update"),
            value: "UPDATE"
          }
        ]
      }, {
        type: DateTime,
        undo_and_changed_support: false,
        form: {
          label: $$("changelog.column.popover.form.from")
        },
        name: "from"
      }, {
        type: DateTime,
        undo_and_changed_support: false,
        form: {
          label: $$("changelog.column.popover.form.to")
        },
        name: "to"
      }, {
        type: DataFieldProxy,
        form: {
          label: $$("changelog.column.popover.form.comment")
        },
        undo_and_changed_support: false,
        name: "comment",
        element: searchComment
      }
    ];
  };

  ChangelogColumn.prototype.getSearchUnsetElement = function(data, listViewColumn) {};

  ChangelogColumn.prototype.isTopLevelField = function() {
    return true;
  };

  ChangelogColumn.prototype.fullName = function() {
    return this.name();
  };

  return ChangelogColumn;

})(Field);

ChangelogColumnForCollection = (function(superClass) {
  extend(ChangelogColumnForCollection, superClass);

  function ChangelogColumnForCollection(opts1) {
    this.opts = opts1 != null ? opts1 : {};
  }

  ChangelogColumnForCollection.prototype.getSearchFilter = function(data) {
    return ChangelogColumnForCollection.__super__.getSearchFilter.call(this, data, this.name(), true);
  };

  return ChangelogColumnForCollection;

})(ChangelogColumn);

ChangelogColumnSearchComment = (function(superClass) {
  extend(ChangelogColumnSearchComment, superClass);

  function ChangelogColumnSearchComment() {
    this.getElementOpts = bind(this.getElementOpts, this);
    return ChangelogColumnSearchComment.__super__.constructor.apply(this, arguments);
  }

  ChangelogColumnSearchComment.prototype.fullName = function() {
    return "_changelog.comment";
  };

  ChangelogColumnSearchComment.prototype.name = function() {
    return "comment";
  };

  ChangelogColumnSearchComment.prototype.getElementOpts = function() {
    return {
      type: Input,
      name: "comment"
    };
  };

  return ChangelogColumnSearchComment;

})(ChangelogColumn);
// Generated by CoffeeScript 1.10.0
var CollectionsField,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CollectionsField = (function(superClass) {
  extend(CollectionsField, superClass);

  function CollectionsField() {
    return CollectionsField.__super__.constructor.apply(this, arguments);
  }

  CollectionsField.prototype.isVisible = function(mode, opts) {
    var ref, ref1;
    if (mode === "detail-header" && ((ref = this.mask.schema.system_fields.collections) != null ? ref.output.mode : void 0) !== "off") {
      return true;
    } else if (mode === "editor-header" && ((ref1 = this.mask.schema.system_fields.collections) != null ? ref1.edit.mode : void 0) !== "off") {
      return true;
    } else {
      return false;
    }
  };

  CollectionsField.prototype.getReplacementRecord = function() {};

  CollectionsField.prototype.getDataForFieldData = function(data, top_level_data) {
    return top_level_data;
  };

  CollectionsField.prototype.isEmpty = function(data, top_level_data) {
    var ref;
    if (((ref = top_level_data._collections) != null ? ref.length : void 0) > 0) {
      return false;
    } else {
      return true;
    }
  };

  CollectionsField.prototype.nameLocalized = function() {
    return $$("collections_field.label");
  };

  CollectionsField.prototype.fillReplacementRecord = function() {};

  CollectionsField.prototype.getDataAsString = function() {
    return true;
  };

  CollectionsField.prototype.name = function() {
    return "_collections";
  };

  CollectionsField.prototype.isTopLevelField = function() {
    return true;
  };

  CollectionsField.prototype.fullName = function() {
    return this.name();
  };

  CollectionsField.prototype.getOutputStandard = function() {};

  CollectionsField.prototype.renderEditorInput = function(data, top_level_data, opts) {
    return this.renderDetailOutput(data, top_level_data, opts);
  };

  CollectionsField.prototype.renderDetailOutput = function(data, top_level_data, opts) {
    var col, div, ref, ref1, search, set_empty;
    div = $div("ez5-collections-field-collections");
    set_empty = function(key) {
      return div.append(new EmptyLabel({
        text: $$(key)
      }).DOM);
    };
    if (this.isEmpty(data, top_level_data)) {
      set_empty("collections_field.no_collections");
    } else {
      if (((ref = opts.detail) != null ? ref.getSearch : void 0) && !opts.for_print) {
        search = opts.detail.getSearch();
      }
      if ((ref1 = opts.editor) != null ? ref1.getSearch : void 0) {
        search = opts.editor.getSearch();
      }
      ez5.api.search({
        json_data: {
          type: "collection",
          limit: 10,
          search: [
            {
              type: "in",
              bool: "must",
              fields: ["collection._id"],
              "in": (function() {
                var i, len, ref2, results;
                ref2 = top_level_data._collections;
                results = [];
                for (i = 0, len = ref2.length; i < len; i++) {
                  col = ref2[i];
                  results.push(col._id);
                }
                return results;
              })()
            }
          ]
        }
      }).done(function(data) {
        var col, fn, i, len, ref2, wf;
        if (data.objects.length === 0) {
          set_empty("collections_field.no_collections_visible");
          return;
        }
        ref2 = data.objects;
        fn = function(wf) {
          if (search) {
            return div.append(new LocaButton({
              "class": "ez5-collections-field-button",
              appearance: "link",
              loca_key: "collections.fields.show_collection",
              text: wf.renderNameAsText(),
              onClick: (function(_this) {
                return function() {
                  return search.selectInCollectionManager().done(function() {
                    return wf.showInSearch(search);
                  });
                };
              })(this)
            }).DOM);
          } else {
            return div.append(new Label({
              "class": "ez5-collections-field-label",
              text: wf.renderNameAsText()
            }).DOM);
          }
        };
        for (i = 0, len = ref2.length; i < len; i++) {
          col = ref2[i];
          wf = new CollectionWorkfolder({
            collection: col
          });
          fn(wf);
        }
      });
    }
    return div;
  };

  return CollectionsField;

})(DataColumn);
// Generated by CoffeeScript 1.10.0
var DateColumn,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DateColumn = (function(superClass) {
  extend(DateColumn, superClass);

  function DateColumn() {
    return DateColumn.__super__.constructor.apply(this, arguments);
  }

  DateColumn.prototype.getSearchFilter = function(data, key) {
    var filter, from, to;
    if (key == null) {
      key = this.name();
    }
    filter = DateColumn.__super__.getSearchFilter.call(this, data, key);
    if (filter) {
      return filter;
    }
    from = data[key + ":from"];
    to = data[key + ":to"];
    if (isEmpty(from) && isEmpty(to)) {
      return;
    }
    filter = {
      type: "range",
      field: this.getSearchField()
    };
    if (!isEmpty(from)) {
      filter.from = from;
    }
    if (!isEmpty(to)) {
      filter.to = to;
    }
    return filter;
  };

  DateColumn.prototype.supportsFacet = function() {
    return true;
  };

  DateColumn.prototype.getFacet = function(opts) {
    opts.field = this;
    return new DateFacet(opts);
  };

  DateColumn.prototype.getSortFunction = function() {
    return (function(_this) {
      return function(a, b) {
        return compareIndex(a[_this.name()].value || '9999', b[_this.name()].value || '9999');
      };
    })(this);
  };

  DateColumn.prototype.getSaveData = function(data, save_data, opts) {
    var ref, ref1, ref2, v;
    if (opts.demo_data) {
      v = DateTime.format(moment(), "store", this.getDateTimeInputTypes()[0]);
    } else if (!((ref = data[this.name()]) != null ? ref.value : void 0)) {
      v = (ref1 = data._template) != null ? (ref2 = ref1[this.name()]) != null ? ref2.value : void 0 : void 0;
    } else {
      v = data[this.name()].value;
    }
    if (isEmpty(v)) {
      return save_data[this.name()] = null;
    } else {
      return save_data[this.name()] = {
        value: v
      };
    }
  };

  DateColumn.prototype.getQueryFieldBadge = function(data) {
    var arr, fn, i, k, len, ref, value;
    if (data[(this.name()) + ":unset"]) {
      value = $$("field.search.badge.without");
    } else {
      arr = [];
      ref = ["from", "to"];
      for (i = 0, len = ref.length; i < len; i++) {
        k = ref[i];
        fn = this.name() + ":" + k;
        arr.push(data[fn] || "");
      }
      value = arr.join(" - ").trim();
    }
    return {
      name: this.nameLocalized(),
      value: value
    };
  };

  DateColumn.prototype.renderSearchInput = function(data) {
    var _opts, fields, fn, i, k, len, opts, ref;
    _opts = this.getElementOpts("expert");
    fields = [];
    ref = ["from", "to"];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      opts = copyObject(_opts);
      fn = (this.name()) + ":" + k;
      opts.name = fn;
      if (isUndef(data[fn])) {
        data[fn] = null;
      }
      opts.data = data;
      opts.onDataChanged = (function(_this) {
        return function(data, df, ev) {
          return Events.trigger({
            node: df,
            type: "search-input-change"
          });
        };
      })(this);
      opts.form = {
        label: $$("main.search.expert.range_" + k)
      };
      fields.push(DataField["new"](opts));
    }
    return new Form({
      "class": "ez5-date-range-form",
      undo_and_changed_support: false,
      fields: fields
    }).start();
  };

  DateColumn.prototype.hasUserData = function(data) {
    var ref;
    return !isEmpty((ref = data[this.name()]) != null ? ref.value : void 0);
  };

  DateColumn.prototype.renderStandard = function(standard, data) {
    var os;
    if (data[this.name()] && (os = this.getOutputStandard())) {
      return standard.push({
        field: this,
        value: this.renderDateValue(data[this.name()].value),
        render_info: os
      });
    }
  };

  DateColumn.prototype.getDateTimeInputTypes = function() {
    return ["date", "year_month", "year"];
  };

  DateColumn.prototype.renderEditorInput = function(data) {
    var dt;
    if (!data[this.name()]) {
      data[this.name()] = {
        value: null
      };
    }
    return dt = new CUI.DateTime({
      name: "value",
      input_types: this.getDateTimeInputTypes(),
      store_invalid: true,
      display_type: "short",
      onDataChanged: (function(_this) {
        return function(data, df) {
          return Events.trigger({
            node: dt,
            type: "editor-changed"
          });
        };
      })(this),
      data: data[this.name()]
    }).start().DOM;
  };

  DateColumn.prototype.checkValue = function(data, top_level_data, opts) {
    var ref, ref1, ref2, v;
    v = (ref = data[this.name()]) != null ? ref.value : void 0;
    if (isEmpty(v)) {
      v = (ref1 = data._template) != null ? (ref2 = ref1[this.name()]) != null ? ref2.value : void 0 : void 0;
    }
    if (v === 'invalid') {
      return false;
    }
    return this.checkBareValue(v, data, top_level_data, opts);
  };

  DateColumn.prototype.getElementOpts = function() {
    return {
      type: DateTime,
      input_types: this.getDateTimeInputTypes(),
      display_type: "short"
    };
  };

  DateColumn.prototype.renderDetailOutput = function(data, top_level_data) {
    var ref;
    return new Label({
      text: this.renderDateValue((ref = data[this.name()]) != null ? ref.value : void 0)
    }).DOM;
  };

  DateColumn.prototype.renderDateValue = function(value) {
    return DateTime.display(value, {
      input_types: this.getDateTimeInputTypes()
    });
  };

  DateColumn.prototype.isExpertCommon = function(mode) {
    return true;
  };

  DateColumn.prototype.getCSVDestinationFields = function(csvImporter) {
    var opts;
    opts = {
      csvImporter: csvImporter,
      field: this
    };
    return [new DateColumnCSVImporterDestinationField(opts)];
  };

  return DateColumn;

})(DataColumn);
// Generated by CoffeeScript 1.10.0
var DateRangeColumn,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DateRangeColumn = (function(superClass) {
  extend(DateRangeColumn, superClass);

  function DateRangeColumn() {
    return DateRangeColumn.__super__.constructor.apply(this, arguments);
  }

  DateRangeColumn.prototype.isEmpty = function(data) {
    if (data[this.name()]) {
      return isEmpty(data[this.name()].from && isEmpty(data[this.name()].to));
    } else {
      return true;
    }
  };

  DateRangeColumn.prototype.getCSVDestinationFields = function(csvImporter) {
    var opts;
    opts = {
      csvImporter: csvImporter,
      field: this
    };
    return [new DateRangeColumnCSVImporterDestinationField(opts)];
  };

  DateRangeColumn.prototype.getSaveData = function(data, save_data, opts) {
    var r, ref;
    if (opts.demo_data) {
      r = {
        from: DateTime.format(moment().startOf("year"), "store", "date"),
        to: DateTime.format(moment().endOf("year"), "store", "date")
      };
    } else if (!data[this.name()]) {
      r = ((ref = data._template) != null ? ref[this.name()] : void 0) || {};
    } else {
      r = data[this.name()];
    }
    if (isEmpty(r.from) && isEmpty(r.to)) {
      return save_data[this.name()] = null;
    } else {
      return save_data[this.name()] = r;
    }
  };

  DateRangeColumn.prototype.getSortFunction = function() {
    var get_value;
    get_value = (function(_this) {
      return function(v) {
        return v[_this.name()].from || v[_this.name()].to || '9999';
      };
    })(this);
    return (function(_this) {
      return function(a, b) {
        return compareIndex(get_value(a), get_value(b));
      };
    })(this);
  };

  DateRangeColumn.prototype.hasUserData = function(data) {
    var ref, ref1;
    return !isEmpty((ref = data[this.name()]) != null ? ref.from : void 0) || !isEmpty((ref1 = data[this.name()]) != null ? ref1.to : void 0);
  };

  DateRangeColumn.prototype.renderEditorInput = function(data) {
    var dom, from_to;
    if (CUI.isEmptyObject(data[this.name()])) {
      data[this.name()] = {
        from: null,
        to: null
      };
    }
    from_to = [
      {
        form: {
          label: $$("date.range.column.label.from")
        },
        type: DateTime,
        name: "from",
        store_invalid: true,
        undo_and_changed_support: false,
        input_types: ["date", "year_month", "year"],
        display_type: "short"
      }, {
        form: {
          label: $$("date.range.column.label.to")
        },
        type: DateTime,
        name: "to",
        store_invalid: true,
        undo_and_changed_support: false,
        input_types: ["date", "year_month", "year"],
        display_type: "short"
      }
    ];
    return dom = new Form({
      data: data[this.name()],
      "class": "ez5-date-range-form",
      undo_and_changed_support: false,
      fields: from_to,
      onDataChanged: (function(_this) {
        return function() {
          return Events.trigger({
            node: dom,
            type: "editor-changed"
          });
        };
      })(this)
    }).start().DOM;
  };

  DateRangeColumn.prototype.renderDetailOutput = function(data, top_level_data) {
    var date_text, from, to;
    if (!data[this.name()]) {
      return "";
    }
    from = this.renderDateValue(data[this.name()].from);
    to = this.renderDateValue(data[this.name()].to);
    if (!isEmpty(from) && !isEmpty(to)) {
      date_text = from + " - " + to;
    } else if (!isEmpty(from)) {
      date_text = from;
    } else {
      date_text = to;
    }
    return new Label({
      text: date_text
    }).DOM;
  };

  DateRangeColumn.prototype.sortExtraOpts = function(data) {
    return [
      {
        text: "Datum von",
        value: "from"
      }, {
        text: "Datum bis",
        value: "to"
      }
    ];
  };

  return DateRangeColumn;

})(DateColumn);
// Generated by CoffeeScript 1.10.0
var DateTimeColumn,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DateTimeColumn = (function(superClass) {
  extend(DateTimeColumn, superClass);

  function DateTimeColumn() {
    return DateTimeColumn.__super__.constructor.apply(this, arguments);
  }

  DateTimeColumn.prototype.getDateTimeInputTypes = function() {
    return ["date_time", "date"];
  };

  DateTimeColumn.prototype.renderDateValue = function(value) {
    return DateTime.format(value, "display", "date_time");
  };

  DateTimeColumn.prototype.getCSVDestinationFields = function(csvImporter) {
    var opts;
    opts = {
      csvImporter: csvImporter,
      field: this
    };
    return [new DateTimeColumnCSVImporterDestinationField(opts)];
  };

  return DateTimeColumn;

})(DateColumn);
// Generated by CoffeeScript 1.10.0
var TextColumn,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TextColumn = (function(superClass) {
  extend(TextColumn, superClass);

  function TextColumn() {
    this.getQueryFieldBadge = bind(this.getQueryFieldBadge, this);
    return TextColumn.__super__.constructor.apply(this, arguments);
  }

  TextColumn.prototype.getQueryFieldBadge = function(data) {
    var value;
    if (data[(this.name()) + ":unset"]) {
      value = $$("text.column.badge.without");
    } else {
      value = data[this.name()];
    }
    return {
      name: this.nameLocalized(),
      value: value
    };
  };

  TextColumn.prototype.getSearchFilter = function(data, key, fields) {
    var filter;
    if (key == null) {
      key = this.name();
    }
    filter = TextColumn.__super__.getSearchFilter.call(this, data, key);
    if (filter) {
      return filter;
    }
    if (!isEmpty(data[key])) {
      return this._getSearchFilter(data, key);
    }
  };

  TextColumn.prototype._getSearchFilter = function(data, key) {
    var filter, phrase, ref, str, val;
    val = data[key];
    ref = Search.getPhrase(val), str = ref[0], phrase = ref[1];
    switch (data[key + ":type"]) {
      case "token":
      case "fulltext":
        filter = {
          type: "match",
          mode: data[key + ":mode"],
          fields: [this.fullName()],
          string: str,
          phrase: phrase
        };
        break;
      case "field":
        filter = {
          type: "in",
          fields: [this.fullName()],
          "in": [str]
        };
    }
    return filter;
  };

  TextColumn.prototype.renderSearchInput = function(data, opts) {
    var search_token;
    if (opts == null) {
      opts = {};
    }
    return search_token = new SearchToken({
      column: this,
      data: data,
      fields: opts.fields
    }).getInput().DOM;
  };

  TextColumn.prototype.updateValue = function(data, value) {
    var field_data, inp, input_element;
    data[this.name()] = value;
    console.debug("TextColumn.updateValue", data, this.fullName(), value);
    field_data = data[this.name() + ":field"];
    if (!field_data.element) {
      return;
    }
    inp = CUI.DOM.matchSelector(field_data.element, ".cui-input")[0];
    input_element = CUI.DOM.data(inp, "element");
    input_element.displayValue();
    field_data.listViewColumn.checkField();
    return this;
  };

  TextColumn.prototype.getSortFunction = function() {
    return (function(_this) {
      return function(a, b) {
        return (a[_this.name()] || "").localeCompare(b[_this.name()] || "");
      };
    })(this);
  };

  TextColumn.prototype.updateEditorInputValue = function(ev, rule, top_level_data) {
    var current_value, data, done, info, ref, ref1, value;
    data = top_level_data[top_level_data._objecttype];
    current_value = (ref = data[this.name()]) != null ? ref.trim() : void 0;
    if (isEmpty((ref1 = rule.value) != null ? ref1.trim() : void 0)) {
      value = "";
    } else {
      value = rule.value;
    }
    value = ez5.replaceMap(value, this.getMainMask().getReplacementRecord(top_level_data));
    this.initSavedData(data, top_level_data);
    info = this.getInfoData(data);
    if (rule._tagfilter_match) {
      console.error("updateEditorInputValue", ev, rule, top_level_data, value, info);
    } else {
      console.warn("updateEditorInputValue", ev, rule, top_level_data, value, info);
    }
    if (!info[rule._idx]) {
      info[rule._idx] = {};
    }
    done = (function(_this) {
      return function() {
        info[rule._idx].last_tagfilter_match = rule._tagfilter_match;
        return _this;
      };
    })(this);
    if (isEmpty(current_value)) {
      if (!rule._tagfilter_match) {
        return done();
      }
      this.updateValue(data, value);
      return;
    }
    if (current_value === value) {
      if (!rule._tagfilter_match) {
        this.updateValue(data, "");
      } else {
        this.updateValue(data, value);
      }
      return done();
    }
    if (!rule._tagfilter_match || info[rule._idx].last_tagfilter_match) {
      return done();
    }
    CUI.confirm({
      markdown: true,
      text: $$("text.column.update.value.confirm", {
        name: this.nameLocalized(),
        current_value: current_value,
        new_value: value
      })
    }).fail((function(_this) {
      return function() {};
    })(this)).done((function(_this) {
      return function() {
        return _this.updateValue(data, value);
      };
    })(this));
  };

  TextColumn.prototype.getInfoData = function(data) {
    var key;
    key = this.name() + ":" + getObjectClass(this);
    if (!data[key]) {
      data[key] = {};
    }
    return data[key];
  };

  TextColumn.prototype.renderEditorInput = function(data, top_level_data, render_opts) {
    var bulk_form, element, opts, ref, ref1;
    opts = this.getElementOpts("editor");
    opts.placeholder = ((ref = data._template) != null ? ref[this.name()] : void 0) || opts.placeholder;
    if (isNumber(opts.placeholder)) {
      opts.placeholder = '' + opts.placeholder;
    }
    opts.spellcheck = ez5.session.getPref("spellcheck");
    opts.data = data;
    opts.onDataChanged = (function(_this) {
      return function() {
        return Events.trigger({
          node: element,
          type: "editor-changed"
        });
      };
    })(this);
    element = DataField["new"](opts).start().DOM;
    if ((ref1 = render_opts.mode) !== "editor-bulk" && ref1 !== "editor-header-bulk") {
      return element;
    }
    bulk_form = this.getBulkForm(data, element);
    if (bulk_form) {
      return new VerticalList({
        content: [element, bulk_form]
      }).DOM;
    } else {
      return element;
    }
  };

  TextColumn.prototype.getBulkForm = function(data, element) {
    var bulk_data, bulk_form, update_bulk_form;
    bulk_data = data[(this.name()) + ":options"];
    if (!bulk_data) {
      bulk_data = data[(this.name()) + ":options"] = {};
    }
    update_bulk_form = (function(_this) {
      return function() {
        var div_element, i, k, len, ref, ref1;
        div_element = (ref = data[_this.name() + ":field"]) != null ? ref.element : void 0;
        ref1 = ["search", "replace", "full_words", "case_sensitive"];
        for (i = 0, len = ref1.length; i < len; i++) {
          k = ref1[i];
          if (bulk_data.search_and_replace) {
            bulk_form.getFieldsByName(k)[0].show(true);
          } else {
            bulk_form.getFieldsByName(k)[0].hide(true);
          }
        }
        if (bulk_data.search_and_replace) {
          element.hide();
        } else {
          element.show();
        }
        Events.trigger({
          node: element,
          type: "editor-changed"
        });
      };
    })(this);
    bulk_form = new Form({
      data: bulk_data,
      onDataChanged: update_bulk_form,
      undo_and_changed_support: false,
      fields: [
        {
          type: Checkbox,
          undo_and_changed_support: false,
          name: "search_and_replace",
          text: $$("text.column.bulk.form.search_and_replace")
        }, {
          type: Input,
          undo_and_changed_support: false,
          name: "search",
          placeholder: $$("text.column.bulk.form.search")
        }, {
          type: Input,
          undo_and_changed_support: false,
          name: "replace",
          placeholder: $$("text.column.bulk.form.replace")
        }, {
          type: Checkbox,
          undo_and_changed_support: false,
          name: "full_words",
          text: $$("text.column.bulk.form.full_words")
        }, {
          type: Checkbox,
          undo_and_changed_support: false,
          name: "case_sensitive",
          text: $$("text.column.bulk.form.case_sensitive")
        }
      ]
    }).start();
    update_bulk_form();
    return bulk_form;
  };

  TextColumn.prototype.getSaveData = function(data, save_data, opts) {
    var ref;
    if (opts.demo_data) {
      save_data[this.name()] = "<" + this.fullNameLocalized();
      if (save_data._top_level) {
        save_data[this.name()] += " [" + save_data._top_level._system_object_id + "]>";
      } else {
        save_data[this.name()] += ">";
      }
    } else if (isEmpty(data[this.name()])) {
      save_data[this.name()] = (ref = data._template) != null ? ref[this.name()] : void 0;
    } else {
      save_data[this.name()] = data[this.name()];
    }
    if (isNull(save_data[this.name()])) {
      save_data[this.name()] = null;
    }
    this.getSearchAndReplaceSaveData(data, save_data, opts);
  };

  TextColumn.prototype.getSearchAndReplaceSaveData = function(data, save_data, opts) {
    var bulk_key, i, k, len, ref;
    if (opts.bulk && this.hasOption(data, "bulk") && data[this.name() + ":options"].search_and_replace) {
      ref = ["search", "replace", "full_words", "case_sensitive"];
      for (i = 0, len = ref.length; i < len; i++) {
        k = ref[i];
        bulk_key = this.name() + ":" + k;
        save_data[bulk_key] = data[this.name() + ":options"][k];
      }
      delete save_data[this.name()];
    }
  };

  TextColumn.prototype.checkValue = function(data, top_level_data, opts) {
    if (this.hasOption(data, "bulk") && data[this.name() + ":options"].search_and_replace) {
      if (!isEmpty(data[this.name() + ":options"].search)) {
        return true;
      } else {
        return false;
      }
    }
    return TextColumn.__super__.checkValue.call(this, data, top_level_data, opts);
  };

  TextColumn.prototype.renderDetailOutput = function(data, top_level_data, opts) {
    var html, manage_overflow, ref, value;
    if (opts == null) {
      opts = {};
    }
    if (!this.hasUserData(data)) {

    }
    if (opts.for_print) {
      manage_overflow = false;
    } else {
      manage_overflow = this.getManageOverflow();
    }
    ref = this.renderData(data), value = ref[0], html = ref[1];
    if (html) {
      return new MultilineLabel({
        content: html,
        manage_overflow: manage_overflow
      }).DOM;
    } else {
      return new MultilineLabel({
        text: value,
        manage_overflow: manage_overflow
      }).DOM;
    }
  };

  TextColumn.prototype.isExpertCommon = function(mode) {
    return true;
  };

  TextColumn.prototype.getManageOverflow = function() {
    return false;
  };

  return TextColumn;

})(DataColumn);
// Generated by CoffeeScript 1.10.0
var NumberColumn,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

NumberColumn = (function(superClass) {
  extend(NumberColumn, superClass);

  function NumberColumn() {
    return NumberColumn.__super__.constructor.apply(this, arguments);
  }

  NumberColumn.prototype._getSearchFilter = function(data, key) {
    return this.getSearchFilterTokenized(data[key] + "");
  };

  NumberColumn.prototype.getCSVDestinationFields = function(csvImporter) {
    return [];
  };

  NumberColumn.prototype.getTokenizer = function() {
    return new NumberTokenizer();
  };

  NumberColumn.prototype.getSaveData = function(data, save_data, opts) {
    if (opts.demo_data) {
      return save_data[this.name()] = Math.floor(Math.random() * 100) + 1;
    } else {
      NumberColumn.__super__.getSaveData.call(this, data, save_data, opts);
      if (isEmpty(save_data[this.name()])) {
        return save_data[this.name()] = null;
      }
    }
  };

  NumberColumn.prototype.renderSearchInput = function(data, opts) {
    var input;
    if (opts == null) {
      opts = {};
    }
    input = new Input({
      name: this.name(),
      placeholder: $$("data.field.tokenizer.example.placeholder"),
      onDataChanged: (function(_this) {
        return function() {
          return Events.trigger({
            node: input,
            type: "search-input-change"
          });
        };
      })(this),
      data: data
    }).start();
    return input.DOM;
  };

  NumberColumn.prototype.getBulkForm = function() {
    return null;
  };

  NumberColumn.prototype.getSortFunction = function() {
    return (function(_this) {
      return function(a, b) {
        return compareIndex(a[_this.name()], b[_this.name()]);
      };
    })(this);
  };

  NumberColumn.prototype.getElementOpts = function(mode) {
    return {
      name: this.name(),
      type: NumberInput,
      decimalpoint: ez5.session.frontend_locale.numbers.decimal,
      separator: ez5.session.frontend_locale.numbers.grouping,
      decimals: 0
    };
  };

  NumberColumn.prototype.getCSVDestinationFields = function(csvImporter) {
    var opts;
    opts = {
      csvImporter: csvImporter,
      field: this,
      fixed: 0
    };
    return [new NumberColumnCSVImporterDestinationField(opts)];
  };

  return NumberColumn;

})(TextColumn);
// Generated by CoffeeScript 1.10.0
var DecimalColumn,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DecimalColumn = (function(superClass) {
  extend(DecimalColumn, superClass);

  function DecimalColumn(_mask, _field_schema, fixed, store_as_integer) {
    this.fixed = fixed;
    this.store_as_integer = store_as_integer;
    DecimalColumn.__super__.constructor.call(this, _mask, _field_schema);
  }

  DecimalColumn.prototype.getSignature = function() {
    var sig;
    sig = DecimalColumn.__super__.getSignature.call(this);
    sig.fixed = this.fixed;
    return sig;
  };

  DecimalColumn.prototype.getElementOpts = function(mode) {
    return {
      name: this.name(),
      type: NumberInput,
      decimals: this.fixed,
      store_as_integer: this.store_as_integer,
      decimalpoint: ez5.session.frontend_locale.numbers.decimal,
      separator: ez5.session.frontend_locale.numbers.grouping
    };
  };

  DecimalColumn.prototype.getSaveData = function(data, save_data, opts) {
    if (opts.demo_data) {
      return save_data[this.name()] = (Math.floor(Math.random() * 10000) + 1) / 100;
    } else {
      return DecimalColumn.__super__.getSaveData.call(this, data, save_data, opts);
    }
  };

  DecimalColumn.prototype.renderDetailOutput = function(data, top_level_data) {
    var opts, out;
    opts = this.getElementOpts();
    delete opts.type;
    out = NumberInput.format(data[this.name()], opts);
    if (isEmpty(out)) {
      out = "";
    }
    return new Label({
      text: out
    }).DOM;
  };

  DecimalColumn.prototype.getCSVDestinationFields = function(csvImporter) {
    var opts;
    opts = {
      csvImporter: csvImporter,
      field: this,
      fixed: this.fixed
    };
    return [new NumberColumnCSVImporterDestinationField(opts)];
  };

  return DecimalColumn;

})(NumberColumn);
// Generated by CoffeeScript 1.10.0
var EASColumn, EASColumnSearchOriginalFilename,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

EASColumn = (function(superClass) {
  extend(EASColumn, superClass);

  function EASColumn() {
    return EASColumn.__super__.constructor.apply(this, arguments);
  }

  EASColumn.prototype.renderStandard = function(standard, data) {
    var os;
    os = this.getOutputStandardEAS();
    if (!os) {
      return;
    }
    return standard.push({
      field: this,
      data: data,
      render_info: os
    });
  };

  EASColumn.prototype.getClass = function() {
    return "ez5-eas-column";
  };

  EASColumn.prototype.isEASFieldEnabled = function() {
    return true;
  };

  EASColumn.prototype.getEASFieldOption = function() {
    return {
      value: this,
      text: this.fullNameLocalized()
    };
  };

  EASColumn.prototype.fullNameForCollectionSave = function() {
    return this.name();
  };

  EASColumn.prototype.getCSVDestinationFields = function(csvImporter) {
    var opts;
    opts = {
      csvImporter: csvImporter,
      field: this
    };
    return [new EASColumnCSVImporterDestinationField(opts)];
  };

  EASColumn.prototype.isSourceForMapping = function(required_type) {
    if (required_type["export"]) {
      return true;
    } else {
      return false;
    }
  };

  EASColumn.prototype.getReplacementRecord = function() {};

  EASColumn.prototype.getSaveData = function(data, save_data, opts) {
    var arr, i, img, j, len, len1, new_obj, obj, ref, ref1, ref2, set_preferred, value;
    if (save_data == null) {
      save_data = {};
    }
    if (opts == null) {
      opts = {};
    }
    if (opts.demo_data) {
      img = ez5.session.getConfigPicture("background");
      if (!img) {
        save_data[this.name()] = null;
        return;
      }
      img.preferred = true;
      save_data[this.name()] = [img];
      return;
    }
    if (opts.copy) {
      return;
    }
    if (!data[this.name()]) {
      return;
    }
    arr = save_data[this.name()] = [];
    set_preferred = null;
    ref = data[this.name()];
    for (i = 0, len = ref.length; i < len; i++) {
      value = ref[i];
      obj = {
        preferred: value.preferred,
        frontend_prefs: copyObject(value.frontend_prefs, true),
        name: value.name,
        _id: value._id
      };
      arr.push(obj);
      if (!((ref1 = value.transform) != null ? ref1.length : void 0)) {
        continue;
      }
      new_obj = {
        frontend_prefs: obj.frontend_prefs,
        __transform: value.transform,
        eas_parent_id: obj._id,
        _id: null
      };
      arr.push(new_obj);
      if (set_preferred === null) {
        set_preferred = arr.length - 1;
      }
      if ((ref2 = opts.produce_assets) != null) {
        ref2.push(new_obj);
      }
      delete obj.frontend_prefs;
    }
    if (set_preferred !== null) {
      for (j = 0, len1 = arr.length; j < len1; j++) {
        obj = arr[j];
        obj.preferred = false;
      }
      arr[set_preferred].preferred = true;
    }
    return arr;
  };

  EASColumn.prototype.UNUSEDgetScaleAndPos = function(value) {
    var ref, ref1;
    return (ref = value.frontend_prefs) != null ? (ref1 = ref.webfrontend) != null ? ref1.scale_and_pos : void 0 : void 0;
  };

  EASColumn.prototype.UNUSEDsetScaleAndPos = function(value, scale_and_pos) {
    if (!value.frontend_prefs) {
      value.frontend_prefs = {};
    }
    if (scale_and_pos) {
      value.frontend_prefs.webfrontend = {
        scale_and_pos: scale_and_pos
      };
    } else if (value.frontend_prefs.webfrontend) {
      delete value.frontend_prefs.webfrontend.scale_and_pos;
    }
    return value;
  };

  EASColumn.prototype.getDataAsString = function(data) {
    return JSON.stringify(this.getSaveData(data));
  };

  EASColumn.prototype.isEmpty = function(data) {
    return !this.getImgValuePreferred(data);
  };

  EASColumn.prototype.hasUserData = function(data) {
    var ref;
    return ((ref = data[this.name()]) != null ? ref.length : void 0) > 0;
  };

  EASColumn.prototype.checkValue = function(data, top_level_data, opts) {
    if (this.isEmpty(data) && (this.ColumnSchema.check === "not_empty" || this.ColumnSchema.not_null)) {
      return false;
    } else {
      return true;
    }
  };

  EASColumn.prototype.isExpertCommon = function(mode) {
    switch (mode) {
      case "sort":
        return true;
      default:
        return false;
    }
  };

  EASColumn.prototype.getQueryFieldBadge = function(data, fields) {
    var filter_and_info;
    filter_and_info = this._getSearchFilterAndInfo(data, this.name());
    return {
      name: fields ? $$("eas.column.search.badge.name") : this.nameLocalized(),
      value: filter_and_info.info.join("; ")
    };
  };

  EASColumn.prototype.getSearchFilter = function(data, key) {
    if (key == null) {
      key = this.name();
    }
    return this._getSearchFilterAndInfo(data, key).filter;
  };

  EASColumn.prototype._getSearchFilterAndInfo = function(data, key) {
    var add_range, exts, factor, fc, filter, info, name;
    info = [];
    filter = Field.prototype.getSearchFilter.call(this, data, key);
    if (filter) {
      return {
        filter: filter,
        info: $$("eas.column.search.without")
      };
    }
    if (!data[key]) {
      return {
        filter: null,
        info: ""
      };
    }
    add_range = (function(_this) {
      return function(name, es_key, key_min, key_max, factor) {
        var f, from, to, v;
        if (factor == null) {
          factor = null;
        }
        if (isString(key_min)) {
          v = data[key][key_min];
        } else {
          v = key_min;
        }
        if (!isEmpty(v)) {
          if (factor !== null) {
            v = Math.floor(v * factor);
          }
          from = v;
        }
        if (isString(key_max)) {
          v = data[key][key_max];
        } else {
          v = key_max;
        }
        if (!isEmpty(v)) {
          if (factor !== null) {
            v = Math.ceil(v * factor);
          }
          to = v;
        }
        if (isEmpty(from) && isEmpty(to)) {
          return;
        }
        f = {
          type: "range",
          field: (_this.fullName()) + "." + es_key,
          from: from,
          to: to
        };
        info.push(name);
        return filter.search.push(f);
      };
    })(this);
    filter = {
      type: "complex",
      search: []
    };
    if ((fc = data[key].fileclass) && fc !== "all") {
      filter.search.push({
        type: "in",
        fields: [(this.fullName()) + ".class"],
        "in": [data[key].fileclass],
        bool: "must"
      });
      exts = data[key]["extension_" + fc];
      if (!exts.length) {
        info.push($$("server.eas.fileclass." + data[key].fileclass));
      }
      if (exts.length) {
        filter.search.push({
          type: "in",
          fields: [(this.fullName()) + ".extension"],
          "in": exts,
          bool: "must"
        });
        info.push(exts.join(", "));
      }
    }
    switch (data[key].unit) {
      case "px":
      case "mm":
      case "cm":
        switch (data[key].unit) {
          case "cm":
            factor = data[key].unit_dpi / 2.54;
            name = "CM";
            break;
          case "mm":
            factor = data[key].unit_dpi / 2.54 / 10;
            name = "MM";
            break;
          case "px":
            factor = null;
            name = "PX";
        }
        add_range(name, "technical_metadata.width", "min_width", "max_width", factor);
        add_range(name, "technical_metadata.height", "min_height", "max_height", factor);
        break;
      case "filesize_kb":
        add_range("KB", "filesize", "min_filesize", "max_filesize", 1000);
        break;
      case "filesize_mb":
        add_range("MB", "filesize", "min_filesize", "max_filesize", 1000 * 1000);
        break;
      case "filesize_gb":
        add_range("GB", "filesize", "min_filesize", "max_filesize", 1000 * 1000 * 1000);
    }
    if (!isEmpty(data[key].original_filename_basename)) {
      filter.search.push({
        type: "match",
        fields: [(this.fullName()) + ".original_filename_basename"],
        string: data[key].original_filename_basename
      });
      info.push($$("main.search.expert.original_filename_basename"));
    }
    switch (data[key].aspect) {
      case "portrait":
        add_range("Hochkant", "technical_metadata.aspect_ratio", null, 1);
        break;
      case "landscape":
        add_range("Quer", "technical_metadata.aspect_ratio", 1, null);
        break;
      case "square":
        add_range("Quadratisch", "technical_metadata.aspect_ratio", 0.95, 1.05);
    }
    if (filter.search.length) {
      return {
        filter: filter,
        info: info
      };
    } else {
      return {
        filter: null,
        info: []
      };
    }
  };

  EASColumn.prototype.renderSearchInput = function(search_data, opts) {
    var searchPopoverForm, searchPopoverFormFields, searchPopoverSetState, search_key;
    assert((opts != null ? opts.search : void 0) instanceof Search, "EASColumn.renderSearchInput", "opts.search needs to be instance of Search", {
      opts: opts,
      search_data: search_data
    });
    search_key = this.name();
    if (!search_data[search_key]) {
      search_data[search_key] = {};
    }
    searchPopoverFormFields = this.getSearchPopoverFormFields(search_data, search_key, opts);
    searchPopoverSetState = (function(_this) {
      return function() {
        var _f, f, fc, hor_forms, i, j, k, len, len1, len2, ref, ref1, show, trigger_visibility_check, visible;
        show = ["fileclass", "filename", "date_kind", "date_from", "date_to"];
        fc = search_data[search_key].fileclass;
        switch (fc) {
          case "image":
          case "video":
            show.push("unit");
            show.push("aspect");
        }
        if (fc && fc.fileclass !== "all") {
          show.push("extension_" + fc);
        }
        if (show.indexOf("unit") > -1) {
          switch (search_data[search_key].unit) {
            case "filesize_kb":
            case "filesize_mb":
            case "filesize_gb":
              show.push("min_filesize", "max_filesize");
              break;
            case "px":
              show.push("min_width", "max_width", "min_height", "max_height");
              break;
            case "mm":
            case "cm":
              show.push("min_width", "max_width", "min_height", "max_height", "unit_dpi");
          }
        }
        hor_forms = [];
        ref = searchPopoverForm.getDataFields();
        for (i = 0, len = ref.length; i < len; i++) {
          f = ref[i];
          if (f.getForm().getForm()) {
            pushOntoArray(f.getForm(), hor_forms);
            trigger_visibility_check = false;
          } else {
            trigger_visibility_check = true;
          }
          if (show.indexOf(f.getName()) > -1) {
            f.show(trigger_visibility_check);
          } else {
            f.hide(trigger_visibility_check);
          }
        }
        for (j = 0, len1 = hor_forms.length; j < len1; j++) {
          f = hor_forms[j];
          visible = false;
          ref1 = f.getDataFields();
          for (k = 0, len2 = ref1.length; k < len2; k++) {
            _f = ref1[k];
            if (!_f.isHidden()) {
              visible = true;
              break;
            }
          }
          if (visible) {
            f.show(true);
          } else {
            f.hide(true);
          }
        }
        searchPopoverForm.getPopover().position();
      };
    })(this);
    searchPopoverForm = new FormPopover({
      popover: {
        pane: {
          padded: true
        },
        onShow: (function(_this) {
          return function() {
            return searchPopoverSetState();
          };
        })(this),
        onHide: (function(_this) {
          return function() {
            return Events.trigger({
              node: searchPopoverForm.getButton(),
              type: "search-input-change"
            });
          };
        })(this)
      },
      button: {
        loca_key: "eas.column.search.button"
      },
      fields: searchPopoverFormFields,
      data: search_data[search_key],
      trigger_data_changed_while_open: true,
      onDataChanged: (function(_this) {
        return function(data) {
          return searchPopoverSetState();
        };
      })(this),
      renderDisplayContent: (function(_this) {
        return function(data) {
          return ez5.renderFormPopoverInfo(_this._getSearchFilterAndInfo(search_data, search_key).info);
        };
      })(this)
    }).start();
    return searchPopoverForm;
  };

  EASColumn.prototype.getSearchPopoverFormFields = function(search_data, search_key, opts) {
    var aspect, aspect_opts, dpi, easSearchColumn, eas_types, ext, f, fc, fc_opt, fc_opts, ff, fileclass_opts, find_field_by_name, i, j, k, key, l, len, len1, len2, len3, len4, len5, len6, len7, m, n, o, p, ref, ref1, ref2, ref3, ref4, ref5, ref6, searchPopoverFormFields, search_token_original_filename_basename, unit, unit_dpi_opts, wrappedFields;
    easSearchColumn = new EASColumnSearchOriginalFilename(this.mask, this.FieldSchema);
    if (opts.fields) {
      wrappedFields = (function() {
        var i, len, ref, results;
        ref = opts.fields;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          f = ref[i];
          results.push(new EASColumnSearchOriginalFilename(f.mask, f.FieldSchema));
        }
        return results;
      })();
    }
    search_data[search_key]._fields = {};
    search_token_original_filename_basename = new SearchToken({
      column: easSearchColumn,
      data: search_data[search_key],
      fields: wrappedFields
    });
    fileclass_opts = [];
    ref = ["all", "image", "video", "audio", "office", "archive", "unknown"];
    for (i = 0, len = ref.length; i < len; i++) {
      fc = ref[i];
      fileclass_opts.push({
        text: $$("eas.column.fileclass.opt." + fc),
        value: fc
      });
    }
    aspect_opts = [];
    ref1 = ["", "portrait", "landscape", "square"];
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      aspect = ref1[j];
      if (aspect === "") {
        key = "all";
      } else {
        key = aspect;
      }
      aspect_opts.push({
        text: $$("eas.column.aspect.opt." + key),
        value: aspect
      });
    }
    unit_dpi_opts = [];
    ref2 = ["150", "300", "600", "1200"];
    for (k = 0, len2 = ref2.length; k < len2; k++) {
      dpi = ref2[k];
      unit_dpi_opts.push({
        text: $$("eas.column.unit_dpi", {
          dpi: dpi
        }),
        value: dpi
      });
    }
    searchPopoverFormFields = [
      {
        type: Select,
        form: {
          label: $$("main.search.expert.fileclass")
        },
        name: "fileclass",
        options: fileclass_opts
      }, {
        type: Form,
        form: {
          label: $$("main.search.expert.unit")
        },
        horizontal: true,
        fields: [
          {
            type: Select,
            options: [],
            name: "unit"
          }, {
            type: Select,
            name: "unit_dpi",
            options: unit_dpi_opts
          }
        ]
      }, {
        type: Form,
        form: {
          label: $$("main.search.expert.width")
        },
        horizontal: true,
        fields: [
          {
            type: Input,
            placeholder: $$("main.search.expert.from"),
            name: "min_width"
          }, {
            type: Input,
            name: "max_width",
            placeholder: $$("main.search.expert.to")
          }
        ]
      }, {
        type: Form,
        form: {
          label: $$("main.search.expert.height")
        },
        horizontal: true,
        fields: [
          {
            type: Input,
            placeholder: $$("main.search.expert.from"),
            name: "min_height"
          }, {
            type: Input,
            placeholder: $$("main.search.expert.to"),
            name: "max_height"
          }
        ]
      }, {
        type: Form,
        form: {
          label: $$("main.search.expert.filesize")
        },
        horizontal: true,
        fields: [
          {
            type: Input,
            placeholder: $$("main.search.expert.from"),
            name: "min_filesize"
          }, {
            type: Input,
            name: "max_filesize",
            placeholder: $$("main.search.expert.to")
          }
        ]
      }, {
        type: Form,
        form: {
          label: $$("main.search.expert.dpi")
        },
        horizontal: true,
        fields: [
          {
            type: Input,
            placeholder: $$("main.search.expert.from"),
            name: "min_dpi"
          }, {
            type: Input,
            name: "max_dpi",
            placeholder: $$("main.search.expert.to")
          }
        ]
      }, {
        type: Select,
        form: {
          label: $$("main.search.expert.aspect")
        },
        name: "aspect",
        options: aspect_opts
      }, {
        type: DataFieldProxy,
        form: {
          label: $$("main.search.expert.original_filename_basename")
        },
        element: search_token_original_filename_basename.getInput(),
        name: "filename"
      }, {
        type: Form,
        horizontal: true,
        form: {
          label: $$("main.search.expert.date.kind")
        },
        fields: [
          {
            type: Select,
            name: "date_kind",
            options: [
              {
                text: $$("eas.column.date_kind.opt.create"),
                value: "create"
              }, {
                text: $$("eas.column.date_kind.opt.upload"),
                value: "upload"
              }
            ]
          }, {
            type: Form,
            fields: [
              {
                name: "date_from",
                type: DateTime,
                input_types: ["date"],
                display_type: "short",
                placeholder: $$("main.search.expert.from")
              }, {
                name: "date_to",
                type: DateTime,
                display_type: "short",
                input_types: ["date"],
                placeholder: $$("main.search.expert.to")
              }
            ]
          }
        ]
      }
    ];
    find_field_by_name = (function(_this) {
      return function(name, fields) {
        var _ff, ff, l, len3;
        if (fields == null) {
          fields = searchPopoverFormFields;
        }
        for (l = 0, len3 = fields.length; l < len3; l++) {
          ff = fields[l];
          if (ff.fields) {
            _ff = find_field_by_name(name, ff.fields);
            if (_ff) {
              return _ff;
            }
          }
          if (ff.name === name) {
            return ff;
          }
        }
        return null;
      };
    })(this);
    fc_opts = searchPopoverFormFields[0].options;
    eas_types = opts.search.getSearchBasics().getEASTypes();
    ref3 = ["unknown", "office", "audio", "video", "image", "archive"];
    for (l = 0, len3 = ref3.length; l < len3; l++) {
      fc = ref3[l];
      ff = {
        type: Options,
        form: {
          label: $$("main.search.expert.extension")
        },
        name: "extension_" + fc,
        options: []
      };
      searchPopoverFormFields.splice(1, 0, ff);
      if (!((ref4 = eas_types[fc]) != null ? ref4.length : void 0)) {
        for (m = 0, len4 = fc_opts.length; m < len4; m++) {
          fc_opt = fc_opts[m];
          if (fc_opt.value === fc) {
            fc_opt.disabled = true;
          }
        }
      } else {
        ref5 = eas_types[fc];
        for (n = 0, len5 = ref5.length; n < len5; n++) {
          ext = ref5[n];
          ff.options.push({
            text: ext,
            value: ext
          });
        }
      }
    }
    ref6 = ["px", "mm", "cm", "filesize_kb", "filesize_mb", "filesize_gb"];
    for (o = 0, len6 = ref6.length; o < len6; o++) {
      unit = ref6[o];
      find_field_by_name("unit").options.push({
        text: $$("main.search.expert.unit." + unit),
        value: unit
      });
    }
    for (p = 0, len7 = searchPopoverFormFields.length; p < len7; p++) {
      f = searchPopoverFormFields[p];
      f.mark_changed = false;
      f.undo_support = false;
    }
    return searchPopoverFormFields;
  };

  EASColumn.prototype.uploadAdd = function(data, file) {
    var i, len, ref, value;
    if (!data[this.name()]) {
      data[this.name()] = [];
    }
    ref = data[this.name()];
    for (i = 0, len = ref.length; i < len; i++) {
      value = ref[i];
      value._old_preferred = value.preferred;
      value.preferred = false;
    }
    value = {
      preferred: true,
      _file_upload: file
    };
    file._value = value;
    data[this.name()].push(value);
    return value;
  };

  EASColumn.prototype.updateData = function() {};

  EASColumn.prototype.uploadDone = function(data, file) {
    console.error("uploadDone, uploader data:", file.getData());
    file._value._id = file.getData()[0]._id;
    file._value.original_filename = file.getName();
    delete file._file_upload;
    return this.updateData(data);
  };

  EASColumn.prototype.uploadFail = function(data, file) {
    var i, len, ref, value;
    console.error("uploadFail...", data[this.name()], file.value);
    delete file._file_upload;
    removeFromArray(file._value, data[this.name()]);
    ref = data[this.name()];
    for (i = 0, len = ref.length; i < len; i++) {
      value = ref[i];
      if (value._old_preferred) {
        delete value._old_preferred;
        value.preferred = true;
      }
    }
    return this.updateData(data);
  };

  EASColumn.prototype.getImgValueByIdx = function(data, idx) {
    var ref;
    return (ref = data[this.name()]) != null ? ref[idx] : void 0;
  };

  EASColumn.prototype.removeAsset = function(data) {
    var idx;
    idx = idxInArray(void 0, data[this.name()], function(v) {
      return !!v.preferred;
    });
    if (idx === -1) {
      data[this.name()].splice(0);
    } else {
      data[this.name()].splice(idx, 1);
      if (idx === data[this.name()].length) {
        idx--;
      }
      if (idx >= 0) {
        data[this.name()][idx].preferred = true;
      }
    }
    return this.updateData(data);
  };

  EASColumn.prototype.getImgValuePreferred = function(data) {
    var i, len, list, value;
    list = data[this.name()];
    if (!list || list.length === 0) {
      return null;
    }
    assert(CUI.isArray(list), "EASColumn.getImgValuePreferred", "Data for EAS field is not an Array", {
      data: data,
      name: this.name()
    });
    for (i = 0, len = list.length; i < len; i++) {
      value = list[i];
      if (value.preferred) {
        return value;
      }
    }
    assert(false, "EASColumn.getImgValuePreferred", "No preferred image found in list", {
      list: list,
      field: this
    });
    return null;
  };

  EASColumn.prototype.hasMetadataSelector = function() {
    return true;
  };

  EASColumn.prototype.hasManageVersions = function() {
    return true;
  };

  EASColumn.prototype.hasButtonDownloadOriginal = function() {
    return true;
  };

  EASColumn.prototype.forceButtonDownloadOriginal = function() {
    return false;
  };

  EASColumn.prototype.hasButtonShareUrl = function() {
    return true;
  };

  EASColumn.prototype.hasAssetBrowser = function() {
    return true;
  };

  EASColumn.prototype.hasInstantRotate = function(value) {
    var ref, ref1;
    return (value != null ? (ref = value.versions) != null ? (ref1 = ref.original) != null ? ref1["class"] : void 0 : void 0 : void 0) === "image";
  };

  EASColumn.prototype.scaleAndPosition = function() {
    return false;
  };

  EASColumn.prototype.getUploadUrl = function() {
    return ez5.eas.getUploadUrl();
  };

  EASColumn.prototype.renderEditorInput = function(data, top_level_data, opts) {
    var $img_el, current_value, default_pic, get_btn_items, get_img_el, lay, menubtn, multiple, sp, update_eas, upload;
    if (opts == null) {
      opts = {};
    }
    menubtn = null;
    if (opts.default_pic_name) {
      default_pic = ez5.session.getDefaultPicture(opts.default_pic_name);
    }
    if (opts.appendMultipleRows) {
      multiple = true;
      upload = this.__multipleRowsFileUpload(opts.appendMultipleRows, function() {
        return lay.DOM;
      });
    } else {
      multiple = false;
      upload = new FileUpload({
        url: this.getUploadUrl(),
        onAdd: (function(_this) {
          return function(file) {
            var value;
            value = _this.uploadAdd(data, file);
            lay.replace(get_img_el(value), "center");
            menubtn.disable();
            lay.addClass("check-value-failed");
            return Events.trigger({
              node: lay,
              type: "editor-reload-asset-browser"
            });
          };
        })(this),
        onBeforeDone: (function(_this) {
          return function(file) {
            var dupDialog;
            dupDialog = new DuplicatesDialog();
            return dupDialog.addFile(file);
          };
        })(this),
        onDone: (function(_this) {
          return function(file) {
            _this.uploadDone(data, file);
            menubtn.enable();
            lay.removeClass("check-value-failed");
            Events.trigger({
              node: lay,
              type: "editor-reload-asset-browser"
            });
            return Events.trigger({
              node: lay,
              type: "editor-changed"
            });
          };
        })(this),
        onFail: (function(_this) {
          return function(file) {
            _this.uploadFail(data, file);
            lay.removeClass("check-value-failed");
            menubtn.enable();
            if (file.getStatus() === "FAILED") {
              ez5.error_handler(file.getErrorXHR());
            }
          };
        })(this)
      });
    }
    lay = new HorizontalLayout({
      maximize_horizontal: true,
      maximize_vertical: true,
      "class": "ez5-eas-column ez5-eas-column-editor-input",
      right: {},
      center: {}
    });
    CUI.DOM.setAttribute(lay.DOM, "tabindex", "0");
    Events.listen({
      type: "eas_update",
      node: lay,
      call: (function(_this) {
        return function(ev) {
          return menubtn.enable();
        };
      })(this)
    });
    current_value = null;
    Events.listen({
      type: "keyup",
      node: lay,
      call: (function(_this) {
        return function(ev) {
          var ref, value;
          if (ev.hasModifierKey()) {
            return;
          }
          if (ev.getTarget() === lay.DOM && ((ref = ev.keyCode()) === 8 || ref === 46)) {
            ev.stopPropagation();
            value = _this.getImgValuePreferred(data);
            if (value && !value._file_upload) {
              _this.removeAsset(data);
              update_eas(true);
            }
          }
        };
      })(this)
    });
    get_btn_items = (function(_this) {
      return function() {
        var _asset, items, ref, value;
        value = _this.getImgValuePreferred(data);
        if (!value) {
          return [];
        }
        if (value._file_upload && !value._id) {
          console.debug("get btn items...", value, value._file_upload);
          return [
            {
              loca_key: "eas.column.upload.abort",
              onClick: function() {
                return value._file_upload.abort();
              }
            }
          ];
        }
        _asset = new Asset(_this, value, data[_this.name()], top_level_data);
        items = [
          new FileUploadButton({
            fileUpload: upload,
            multiple: false,
            text: ez5.loca.str_default("main.editor.eas_asset_upload|text", null),
            icon: ez5.loca.str_default("main.editor.eas_asset_upload|icon", "search"),
            onClick: function() {
              return CUI.setTimeout((function(_this) {
                return function() {
                  return menubtn.getMenu().hideAll();
                };
              })(this));
            },
            tooltip: {
              text: ez5.loca.str_default("main.editor.eas_asset_upload|tooltip", null)
            }
          }), {
            icon: "trash",
            loca_key: "eas.column.button.asset_remove",
            onClick: function() {
              _this.removeAsset(data);
              return update_eas(true);
            }
          }, _this.hasButtonDownloadOriginal() ? _asset.getButtonDownloadOriginal(null, _this.forceButtonDownloadOriginal()) : void 0, _this.hasButtonShareUrl() ? _asset.getButtonShareUrl() : void 0
        ];
        if (_this.hasAssetBrowser() && _this.__hasAssetBrowser(lay.DOM)) {
          items.push({
            loca_key: "eas.column.show_asset",
            onClick: function() {
              _this.__showInAssetBrowser(lay.DOM, current_value);
              return menubtn.getMenu().hideAll();
            }
          });
        }
        if (_this.hasManageVersions()) {
          items.push({
            icon: "fullscreen",
            loca_key: "eas.column.button.manage_versions",
            onClick: function() {
              return new AssetVersions({
                field: _this,
                data: data,
                done: function() {
                  return update_eas(true);
                }
              });
            }
          });
        }
        if (_this.hasInstantRotate(value)) {
          items.push({
            icon: "rotate_right",
            loca_key: "eas.column.button.rotate_right",
            onClick: function() {
              value = _this.getImgValuePreferred(data);
              value.transform = AssetVersions.addTransform(value.transform, 90);
              return update_eas();
            }
          });
          items.push({
            icon: "rotate_left",
            loca_key: "eas.column.button.rotate_left",
            onClick: function() {
              value = _this.getImgValuePreferred(data);
              value.transform = AssetVersions.addTransform(value.transform, -90);
              return update_eas();
            }
          });
          items.push({
            icon: "refresh",
            disabled: !((ref = value.transform) != null ? ref.length : void 0),
            loca_key: "eas.column.button.rotate_reset",
            onClick: function() {
              value = _this.getImgValuePreferred(data);
              value.transform = [];
              return update_eas();
            }
          });
        }
        return items;
      };
    })(this);
    menubtn = new FileUploadButton({
      icon: "ellipsis_v",
      icon_right: false,
      appearance: "flat",
      fileUpload: upload,
      multiple: multiple,
      tooltip: {
        text: (function(_this) {
          return function() {
            if (!_this.getImgValuePreferred(data)) {
              return ez5.loca.str_default("main.editor.eas_asset_upload|tooltip", null);
            } else {
              return ez5.loca.str_default("eas.column.upload.file_upload_menu|tooltip", null);
            }
          };
        })(this)
      },
      menu: {
        items: get_btn_items
      }
    });
    get_img_el = (function(_this) {
      return function(value) {
        var asset, div, lkey, ll, version;
        if (value) {
          current_value = value;
        } else {
          current_value = null;
        }
        if (!value && default_pic) {
          value = default_pic;
          version = "original";
        } else if (value != null ? value._id : void 0) {
          version = Asset.getStandardVersionName(value);
        } else if (value != null ? value._file_upload : void 0) {
          version = null;
        } else {
          if (opts.appendMultipleRows) {
            lkey = "eas.column.upload.zone.multiple";
          } else {
            lkey = "eas.column.upload.zone";
          }
          ll = new LocaLabel({
            "class": "ez5-eas-column-upload-zone",
            loca_key: lkey
          });
          div = ll.DOM;
        }
        if (!div) {
          if (opts.text_only) {
            value._is_text_only = true;
          }
          asset = new Asset(_this, value);
          div = asset.getImgElement(function(file) {
            switch (file.getStatus()) {
              case "DONE":
                return menubtn.enable();
              case "FAILED":
              case "ABORT":
                update_eas(true);
                return menubtn.enable();
              default:
                if (!file.isDone()) {
                  return menubtn.enable();
                } else {
                  return menubtn.disable();
                }
            }
          }, version);
        }
        upload.resetDropZones().initDropZone({
          dropZone: div,
          multiple: multiple
        });
        return div;
      };
    })(this);
    update_eas = (function(_this) {
      return function(fullReload) {
        var value;
        if (fullReload == null) {
          fullReload = false;
        }
        value = _this.getImgValuePreferred(data);
        ez5.eas.replaceImgElement(lay.DOM.find(".ez5-asset-element")[0], get_img_el(value));
        if (fullReload) {
          Events.trigger({
            node: lay,
            type: "editor-reload-asset-browser"
          });
        } else {
          Events.trigger({
            node: lay,
            type: "editor-update-asset-browser"
          });
        }
        return Events.trigger({
          node: lay,
          type: "editor-changed"
        });
      };
    })(this);
    $img_el = get_img_el(this.getImgValuePreferred(data));
    Events.listen({
      node: $img_el,
      type: "click",
      call: (function(_this) {
        return function(ev) {
          if (!current_value) {
            return;
          }
          return _this.__showInAssetBrowser(lay, current_value);
        };
      })(this)
    });
    if (sp = this.scaleAndPosition()) {
      lay.addClass("ez5-eas-image-scalable");
    }
    lay.addClass(this.getClass());
    lay.append($img_el, "center");
    lay.append(menubtn, "right");
    return lay.DOM;
  };

  EASColumn.prototype.__showInAssetBrowser = function(img_el, value) {
    Events.trigger({
      node: img_el,
      type: "asset-browser-show-asset",
      info: {
        value: value
      }
    });
  };

  EASColumn.prototype.__hasAssetBrowser = function(el) {
    var _el, i, j, len, len1, listener, listeners, ref;
    ref = DOM.parents(el);
    for (i = 0, len = ref.length; i < len; i++) {
      _el = ref[i];
      listeners = DOM.data(_el, "listeners");
      if (!((listeners != null ? listeners.length : void 0) > 0)) {
        continue;
      }
      for (j = 0, len1 = listeners.length; j < len1; j++) {
        listener = listeners[j];
        if (indexOf.call(listener.getTypes(), "asset-browser-show-asset") >= 0) {
          return true;
        }
      }
    }
    return false;
  };

  EASColumn.prototype.renderDetailOutput = function(data, top_level_data, opts) {
    var asset, get_btn_items, hl, menubtn, value;
    if (opts == null) {
      opts = {};
    }
    value = this.getImgValuePreferred(data);
    if (!value) {
      return;
    }
    asset = new Asset(this, value, data[this.name()], top_level_data);
    if (opts.for_print) {
      menubtn = null;
    } else {
      menubtn = new LocaButton({
        icon: "ellipsis_v",
        appearance: "flat",
        icon_right: false,
        loca_key: "eas.column.detail.menu",
        appearance: "flat",
        menu: {
          items: (function(_this) {
            return function() {
              return get_btn_items();
            };
          })(this)
        }
      });
    }
    hl = asset.renderDetailOutput({
      for_print: opts.for_print,
      right: {
        content: menubtn
      }
    });
    if (!opts.print) {
      get_btn_items = (function(_this) {
        return function() {
          return [
            _this.hasAssetBrowser() && _this.__hasAssetBrowser(hl.DOM) ? new LocaButton({
              loca_key: "eas.column.show_asset",
              onClick: function() {
                _this.__showInAssetBrowser(hl.DOM, value);
                return menubtn.getMenu().hideAll();
              }
            }) : void 0, asset.getButtonDownloadOriginal(), asset.getButtonShareUrl(), asset.getAssetVersionsButton()
          ];
        };
      })(this);
    }
    Events.listen({
      type: "click",
      node: hl,
      call: (function(_this) {
        return function(ev) {
          _this.__showInAssetBrowser(hl.DOM, value);
          return ev.stop();
        };
      })(this)
    });
    return hl.DOM;
  };

  EASColumn.containImage = function(img) {
    var _img, contain_image;
    _img = new Image();
    _img.src = img.src;
    contain_image = (function(_this) {
      return function() {
        var dim, height, left, ref, scale, top, vp_height, vp_width, width;
        dim = DOM.getDimensions(img.parentNode);
        if (_img.width * _img.height * dim.contentBoxWidth * dim.contentBoxHeight === 0) {
          console.warn("EASColumn.containImage: Some sizes are 0, unable to contain image.", img, _img, _img.width, _img.height, dim);
          return;
        }
        if (img.hasAttribute("turned90")) {
          vp_width = dim.contentBoxHeight;
          vp_height = dim.contentBoxWidth;
        } else {
          vp_width = dim.contentBoxWidth;
          vp_height = dim.contentBoxHeight;
        }
        if (img.hasAttribute("scale")) {
          scale = parseFloat(img.getAttribute("scale"));
        } else {
          scale = 1;
        }
        ref = ez5.fitRectangle(_img.width, _img.height, vp_width, vp_height), width = ref[0], height = ref[1], top = ref[2], left = ref[3];
        DOM.setStyle(img, {
          position: "absolute",
          top: top / scale,
          left: left / scale,
          width: width / scale,
          height: height / scale,
          transform: "none"
        });
        return DOM.setStyle(img.parentNode, {
          position: "relative"
        });
      };
    })(this);
    if (_img.width === 0) {
      Events.listen({
        type: "load",
        node: _img,
        only_once: true,
        call: (function(_this) {
          return function() {
            return contain_image();
          };
        })(this)
      });
      return;
    } else {
      contain_image();
    }
  };

  EASColumn.prototype.getImgElementForValue = function(value, version, onUpdate, opts) {
    var _version, cls, compiled, file, img, img_div, img_el, img_el_transform, original_filename_basename, ref, ref1, ref2, ref3, status_original;
    if (opts == null) {
      opts = {};
    }
    assert($.isPlainObject(value) && !$.isEmptyObject(value), "EASColumn.getImgElementForValue", "Value needs to be plain object.", {
      value: value,
      version: version
    });
    assert(value._error || version || value._file_upload || value._id, "EASColumn.getImgElementForValue", "value and/or version needs to be given.", {
      value: value,
      version: version
    });
    status_original = value != null ? value.status : void 0;
    compiled = value != null ? value.compiled : void 0;
    original_filename_basename = value != null ? value.original_filename_basename : void 0;
    if (!isEmpty(original_filename_basename)) {
      if (!isEmpty(compiled)) {
        compiled = compiled + ", " + original_filename_basename;
      } else {
        compiled = original_filename_basename;
      }
    }
    _version = (ref = value.versions) != null ? ref[version] : void 0;
    if (value._error) {
      console.debug("getImgElementForValue", value, version, value != null ? value.versions : void 0, value != null ? (ref1 = value.versions) != null ? ref1[version] : void 0 : void 0, status_original);
      img_el = $div().append(EAS.getErrorPlaceholder(value._error).DOM);
      console.error("EAS not found, showing not found error", img_el);
    } else if (status_original === "failed" || (_version != null ? _version.status : void 0) === "failed" || (!$.isPlainObject(value.versions) && status_original)) {
      console.warn("getImgElementForValue: getFailedPlaceholder: ", value, version, value != null ? value.versions : void 0, value != null ? (ref2 = value.versions) != null ? ref2[version] : void 0 : void 0, status_original);
      img_el = $div().append(EAS.getFailedPlaceholder().DOM);
    } else if (_version != null ? _version._not_allowed : void 0) {
      console.info("EASColumn.getImgElementForValue: version " + version + " not allowed.");
      img_el = $div().append(EAS.getNoRightPlaceholder().DOM);
    } else if (status_original === "done" && !_version) {
      img_el = $div().append(EAS.getNoThumbPlaceholder(value).DOM);
      img_el.append($div("ez5-asset-info").text(compiled));
    } else if ((_version != null ? _version.status : void 0) === "done") {
      if (_version.width > _version.height) {
        cls = "eas-image landscape";
      } else {
        cls = "eas-image portrait";
      }
      img_div = $div(cls, {
        "real-width": _version.width,
        "real-height": _version.height,
        version: version
      });
      if (!opts.background_image) {
        img = CUI.DOM.element("IMG", {
          src: ez5.getAbsoluteURL(_version.url)
        });
        img_div.appendChild(img);
      }
      if (opts.for_print) {
        img_el = img_div;
      } else {
        if (opts.background_image) {
          DOM.setStyleOne(img_div[0], "backgroundImage", "url(" + ez5.getAbsoluteURL(_version.url) + ")");
        }
        img_el_transform = $div("ez5-asset-element-transform").append(img_div);
        if (((ref3 = value.transform) != null ? ref3.length : void 0) > 0) {
          EAS.setTransformStyle(img_el_transform, value.transform);
        } else {
          value.transform = [];
        }
        img_el = $div().append(img_el_transform);
      }
      img_el.append($div("ez5-asset-info").text(compiled));
    } else if (value._id) {
      img_el = ez5.eas.getPollingPlaceholder(this, value, version);
    } else if ((file = value._file_upload)) {
      if (!file._divs) {
        file._update_state = function() {
          var _div, i, idx, len, ref4;
          ref4 = file._divs;
          for (idx = i = 0, len = ref4.length; i < len; idx = ++i) {
            _div = ref4[idx];
            if (_div.onUpdate) {
              _div.onUpdate(file);
            }
          }
        };
        file._divs = [];
        file.getPromise().done((function(_this) {
          return function() {
            var _div, i, idx, len, new_img_el, ref4;
            file._update_state();
            ref4 = file._divs;
            for (idx = i = 0, len = ref4.length; i < len; idx = ++i) {
              _div = ref4[idx];
              if (CUI.DOM.isInDOM(_div)) {
                new_img_el = _this.getImgElementForValue(value, version, onUpdate, opts);
                ez5.eas.replaceImgElement(_div, new_img_el);
                file._divs[idx] = new_img_el;
              }
            }
          };
        })(this)).progress(function() {
          return file._update_state();
        }).fail((function(_this) {
          return function() {
            value.status = "failed";
            return file._update_state();
          };
        })(this));
      }
      img_el = ez5.eas.getFileUploadMeter(file);
      img_el.onUpdate = onUpdate;
      file._divs.push(img_el);
      file._update_state();
    } else {
      assert(false, "EASColumn.getImgElementForValue", "Unknown state for value", {
        value: value
      });
    }
    img_el.addClass("ez5-asset-element ez5-lassoable");
    if (cls = this.getClass()) {
      img_el.addClass(cls);
    }
    return img_el;
  };

  EASColumn.prototype.isVisible = function(mode, opts) {
    if (!EASColumn.__super__.isVisible.call(this, mode, opts)) {
      return false;
    }
    switch (mode) {
      case "editor-template":
        if (this.mask.nestedTableField) {
          throw new NestedTableIsVisibleException;
        } else {
          return false;
        }
        break;
      case "editor-header-bulk":
      case "editor-bulk":
      case "editor-header":
      case "detail-header":
      case 'fulltext':
        return false;
      default:
        return true;
    }
  };

  EASColumn.prototype.sortExtraOpts = function(data) {
    var i, len, opts, ref, v;
    opts = [];
    ref = ["filesize", "class_extension", "extension"];
    for (i = 0, len = ref.length; i < len; i++) {
      v = ref[i];
      opts.push({
        text: $$("eas.column.sort." + v),
        value: v
      });
    }
    return opts;
  };

  EASColumn.prototype.getSortField = function(filter) {
    var f, ref;
    f = {
      field: "_asset." + filter._extra,
      group_field: "_asset." + filter._extra,
      order: filter._order
    };
    if ((ref = filter._extra) === "filesize") {
      f.mode = "max";
      f.group_mode = "max";
    }
    return f;
  };

  EASColumn.prototype.isSortGroupable = function() {
    return true;
  };

  EASColumn.prototype.formatSortGroupable = function(item, filter) {
    var bytes, bytes_before, i, kb, len, mb, ref, steps;
    if ((ref = filter._extra) === "filesize") {
      kb = 1024;
      mb = kb * kb;
      steps = [10 * kb, 100 * kb, mb, 100 * mb, 500 * mb];
      for (i = 0, len = steps.length; i < len; i++) {
        bytes = steps[i];
        if (item < bytes) {
          if (bytes_before) {
            return ez5.format_filesize(bytes_before) + " - " + ez5.format_filesize(bytes);
          } else {
            return "< " + ez5.format_filesize(bytes);
          }
        }
        bytes_before = bytes;
      }
      return "> " + ez5.format_filesize(bytes_before);
    } else {
      return item;
    }
  };

  EASColumn.prototype.isSortUnique = function() {
    return true;
  };

  EASColumn.prototype.allowAppendMultipleRows = function() {
    return true;
  };

  EASColumn.prototype.__multipleRowsFileUpload = function(append_row_func, dom_el_func) {
    var callback, dupDialog;
    callback = function(file, where) {
      var dom_el;
      dom_el = dom_el_func(file, where);
      switch (where) {
        case "onAdd":
          dom_el.addClass("check-value-failed");
          break;
        default:
          dom_el.removeClass("check-value-failed");
      }
      return Events.trigger({
        node: dom_el,
        require_node_in_dom: true,
        type: "editor-reload-asset-browser"
      });
    };
    dupDialog = new DuplicatesDialog();
    return new FileUpload({
      url: this.getUploadUrl(),
      onBeforeDone: (function(_this) {
        return function(file) {
          return dupDialog.addFile(file);
        };
      })(this),
      onAdd: (function(_this) {
        return function(file) {
          file._new_data = {
            _new: true
          };
          _this.uploadAdd(file._new_data, file);
          append_row_func(file._new_data);
          return callback(file, "onAdd");
        };
      })(this),
      onDone: (function(_this) {
        return function(file) {
          _this.uploadDone(file._new_data, file);
          return callback(file, "onDone");
        };
      })(this),
      onFail: (function(_this) {
        return function(file) {
          _this.uploadFail(file._new_data, file);
          if (file.getStatus() === "FAILED") {
            EAS.presentUploadError(file);
          }
        };
      })(this)
    });
  };

  EASColumn.prototype.getAppendMultipleRowsButtons = function(append_row_func, dom_el_func) {
    var btn, fu;
    fu = this.__multipleRowsFileUpload(append_row_func, dom_el_func);
    btn = new FileUploadButton({
      fileUpload: fu,
      multiple: true,
      icon: ez5.loca.str_default("main.editor.append_multiple_assets|icon", null),
      text: $$("main.editor.append_multiple_assets|text", {
        name: this.nameLocalized()
      })
    });
    return [btn];
  };

  EASColumn.prototype.getXMLFormWrapperFields = function() {
    return this.getExportOptions();
  };

  EASColumn.prototype.getXMLFormWrapperType = function() {
    return "text_eas_url";
  };

  return EASColumn;

})(DataColumn);

EASColumnSearchOriginalFilename = (function(superClass) {
  extend(EASColumnSearchOriginalFilename, superClass);

  function EASColumnSearchOriginalFilename() {
    this.getElementOpts = bind(this.getElementOpts, this);
    this.fullName = bind(this.fullName, this);
    return EASColumnSearchOriginalFilename.__super__.constructor.apply(this, arguments);
  }

  EASColumnSearchOriginalFilename.prototype.fullName = function() {
    return (EASColumnSearchOriginalFilename.__super__.fullName.call(this)) + ".original_filename_basename";
  };

  EASColumnSearchOriginalFilename.prototype.getElementOpts = function() {
    return {
      type: Input,
      name: "original_filename_basename"
    };
  };

  return EASColumnSearchOriginalFilename;

})(EASColumn);

CUI.ready(function() {
  return Events.registerEvent({
    type: "eas-scale-and-position",
    bubble: true
  });
});
// Generated by CoffeeScript 1.10.0
var EASColumnLinkedObject,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

EASColumnLinkedObject = (function(superClass) {
  extend(EASColumnLinkedObject, superClass);

  function EASColumnLinkedObject(mask, FieldSchema, __linkedObject) {
    this.mask = mask;
    this.FieldSchema = FieldSchema;
    this.__linkedObject = __linkedObject;
    assert(this.__linkedObject instanceof LinkedObject, 'new EASColumnLinkedObject', 'LinkedObject needs to be instance of LinkedObject.');
    EASColumnLinkedObject.__super__.constructor.call(this, this.mask, this.FieldSchema);
    this.__dbInfo = new DbInfo();
    this.__fieldEnabled = false;
  }

  EASColumnLinkedObject.prototype.getLinkedObject = function() {
    return this.__linkedObject;
  };

  EASColumnLinkedObject.prototype.fullNameLocalized = function() {
    return this.__linkedObject.fullNameLocalized() + ' / ' + EASColumnLinkedObject.__super__.fullNameLocalized.call(this, true, true);
  };

  EASColumnLinkedObject.prototype.fullNameForCollectionSave = function() {
    return this.__linkedObject.fullName() + '.' + this.fullName();
  };

  EASColumnLinkedObject.prototype.getDbInfo = function() {
    return this.__dbInfo;
  };

  EASColumnLinkedObject.prototype.isEASFieldEnabled = function() {
    return this.__fieldEnabled;
  };

  EASColumnLinkedObject.prototype.getEASFieldOption = function(editor_data, callback) {
    var btn, link_mask, pool_id, ref;
    if (callback == null) {
      callback = function() {};
    }
    link_mask = this.__linkedObject.linkMask();
    if (link_mask.table.poolLink()) {
      pool_id = (ref = editor_data._pool) != null ? ref.pool._id : void 0;
    } else {
      pool_id = void 0;
    }
    btn = null;
    this.__dbInfo.load({
      table: link_mask.table,
      pool_id: pool_id,
      tag_ids: null
    }).done((function(_this) {
      return function() {
        _this.__fieldEnabled = true;
        if (_this.__fieldEnabled) {
          return btn != null ? btn.enable() : void 0;
        }
      };
    })(this)).always(callback);
    return {
      value: this,
      onConstruct: (function(_this) {
        return function(_btn) {
          return btn = _btn;
        };
      })(this),
      text: this.fullNameLocalized(),
      disabled: (function(_this) {
        return function() {
          return !_this.__fieldEnabled;
        };
      })(this)
    };
  };

  return EASColumnLinkedObject;

})(EASColumn);
// Generated by CoffeeScript 1.10.0
var EASField,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

EASField = (function(superClass) {
  extend(EASField, superClass);

  function EASField(opts) {
    this.opts = opts != null ? opts : {};
    this.updateData = bind(this.updateData, this);
  }

  EASField.prototype.name = function() {
    return this.opts.name;
  };

  EASField.prototype.hasMetadataSelector = function() {
    return false;
  };

  EASField.prototype.hasAssetBrowser = function() {
    return false;
  };

  EASField.prototype.hasManageVersions = function() {
    return false;
  };

  EASField.prototype.hasButtonShareUrl = function() {
    return false;
  };

  EASField.prototype.forceButtonDownloadOriginal = function() {
    return true;
  };

  EASField.prototype.hasInstantRotate = function() {
    return false;
  };

  EASField.prototype.scaleAndPosition = function() {
    return this.opts.scale_and_position;
  };

  EASField.prototype.getClass = function() {
    return this.opts["class"];
  };

  EASField.prototype.fullNameLocalized = false;

  EASField.prototype.getUploadUrl = function() {
    return ez5.eas.getUploadUrl({
      check_for_duplicates: void 0,
      skip_extension_check: 1
    });
  };

  EASField.prototype.renderEditorInput = function(field_data, default_pic) {
    var fd, fdata;
    this.field_data = field_data;
    assert($.isPlainObject(this.field_data), "EASField.renderEditorInput", "field_data needs to be plain object", {
      field_data: this.field_data
    });
    fdata = {};
    if (!this.field_data[this.name()]) {
      this.field_data[this.name()] = {};
    }
    if ((fd = this.field_data[this.name()])._id) {
      fdata[this.name()] = [
        {
          _id: fd._id,
          frontend_prefs: fd.frontend_prefs,
          preferred: true
        }
      ];
    }
    this.div = EASField.__super__.renderEditorInput.call(this, fdata, null, {
      default_pic_name: default_pic
    });
    this.div.addClass("ez5-event-poller");
    Events.listen({
      node: this.div,
      type: "eas-scale-and-position",
      call: (function(_this) {
        return function(ev, info) {
          return _this.updateData(fdata);
        };
      })(this)
    });
    return this.div;
  };

  EASField.prototype.updateData = function(data) {
    var base, i, len, list, value;
    this.field_data[this.name()] = null;
    list = this.getSaveData(data);
    for (i = 0, len = list.length; i < len; i++) {
      value = list[i];
      if (value.preferred) {
        this.field_data[this.name()] = value;
        break;
      }
    }
    CUI.debug("updateData", data, list, this.field_data);
    Events.trigger({
      type: "data-changed",
      node: this.div
    });
    return typeof (base = this.opts).data_changed === "function" ? base.data_changed(this.field_data, this) : void 0;
  };

  return EASField;

})(EASColumn);
// Generated by CoffeeScript 1.10.0
var LinkColumn,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LinkColumn = (function(superClass) {
  extend(LinkColumn, superClass);

  function LinkColumn() {
    return LinkColumn.__super__.constructor.apply(this, arguments);
  }

  return LinkColumn;

})(NumberColumn);
// Generated by CoffeeScript 1.10.0
var LinkedObject,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

LinkedObject = (function(superClass) {
  extend(LinkedObject, superClass);

  function LinkedObject(mask, FieldSchema) {
    this.mask = mask;
    this.FieldSchema = FieldSchema;
    this.getAppendMultipleRowsButtons = bind(this.getAppendMultipleRowsButtons, this);
    LinkedObject.__super__.constructor.call(this, this.mask, this.FieldSchema);
    if (!this.FieldSchema) {
      assert(false, "new LinkedObject", "LinkedObject(mask, FieldSchema) needs to be called with FieldSchema.");
    }
  }

  LinkedObject.prototype.linkMask = function() {
    var mask_id, mask_name, ref;
    mask_id = this.__getLinkMaskId();
    if (mask_id === "PREFERRED") {
      mask_name = (ref = ez5.schema[this.mask.version]._table_by_id[this.__getLinkMaskTableId()]._preferred_mask) != null ? ref.name : void 0;
    } else if (mask_id === "ALL_FIELDS") {
      mask_name = '_all_fields';
    } else {
      mask_name = ez5.mask[this.mask.version]._mask_by_id[mask_id].name;
    }
    assert(mask_name, "LinkedObject.linkMask()", "Mask for LinkedObject not found.", {
      mask_id: mask_id,
      linkedObject: this
    });
    return Mask.getMaskByMaskName(mask_name, this.__getLinkMaskTableId(), this.mask.version);
  };

  LinkedObject.prototype.__getLinkMaskId = function() {
    return this.FieldSchema.mask_id;
  };

  LinkedObject.prototype.__getLinkMaskTableId = function() {
    return this.FieldSchema.other_table_id;
  };

  LinkedObject.prototype.__getLinkMaskInline = function() {
    return this.FieldSchema.inline;
  };

  LinkedObject.prototype.maskName = function() {
    return this.mask.name();
  };

  LinkedObject.prototype.maskNameLocalized = function() {
    return this.mask.nameLocalized();
  };

  LinkedObject.prototype.getCSVDestinationFields = function(csvImporter) {
    var opts;
    opts = {
      csvImporter: csvImporter,
      field: this
    };
    return [new LinkedObjectCSVImporterDestinationField(opts)];
  };

  LinkedObject.prototype.supportsFacet = function() {
    return true;
  };

  LinkedObject.prototype.getFacet = function(opts) {
    opts.field = this;
    return new LinkedObjectFieldFacet(opts);
  };

  LinkedObject.prototype.getReplacementRecord = function(data, key_prefix, use_array, record) {
    var _data;
    if (use_array == null) {
      use_array = false;
    }
    _data = data[this.name()];
    if (!_data) {
      return;
    }
    this.linkMask().getReplacementRecord(_data, key_prefix + this.name() + ".", use_array, record);
    return record;
  };

  LinkedObject.prototype.renderStandard = function(standard, data) {
    var os;
    if (this.isEmpty(data)) {
      return;
    }
    os = this.getOutputStandard();
    if (os) {
      standard.push({
        field: this,
        value: (new ResultObject()).setData(data[this.name()]).renderText(),
        render_info: os
      });
    }
    os = this.getOutputStandardEAS();
    if (os) {
      data[this.name()]._standard = (new ResultObject()).setData(data[this.name()]).getStandard();
      standard.push({
        field: this,
        data: data,
        render_info: os,
        eas: true
      });
    }
  };

  LinkedObject.prototype.getQueryFieldBadge = function(data, multi_field) {
    var co, col_objs, dfr, gid, i, len, linked_objs, ref, resolve;
    console.debug("LinkedObject.getQueryFieldBadge", data, this.name(), multi_field);
    dfr = new CUI.Deferred();
    resolve = (function(_this) {
      return function(value) {
        var badge;
        badge = {
          value: value,
          popoverContent: dump(_this.getSearchFilter(data))
        };
        if (multi_field) {
          if (multi_field._ot_name === "_COMMONS") {
            badge.name = multi_field.nameLocalized();
          } else {
            badge.name = multi_field.nameLocalized();
          }
        } else {
          badge.name = _this.nameLocalized();
        }
        return dfr.resolve(badge);
      };
    })(this);
    if (data[(this.name()) + ":unset"]) {
      resolve($$("linked.object.badge.without"));
    } else {
      linked_objs = data[this.name()];
      co = new CollectionTemporary();
      col_objs = [];
      for (i = 0, len = linked_objs.length; i < len; i++) {
        gid = linked_objs[i];
        if ((ref = data.__result_object) != null ? ref[gid] : void 0) {
          col_objs.push(data.__result_object[gid].getCollectionObject());
        } else {
          col_objs.push(new CollectionObject({
            _global_object_id: gid
          }));
        }
      }
      co.insertObjects(col_objs).done((function(_this) {
        return function() {
          return co.getBadgeText().done(resolve);
        };
      })(this));
    }
    return dfr.promise();
  };

  LinkedObject.prototype.renderSearchInput = function(data) {
    var collection, gid, node, trigger_change;
    collection = new CollectionTemporary();
    collection.setSingleMode(false);
    if (data[this.name()] && data[this.name()].length > 0) {
      collection.insertObjects((function() {
        var i, len, ref, results;
        ref = data[this.name()];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          gid = ref[i];
          results.push(new CollectionObject({
            _global_object_id: gid
          }));
        }
        return results;
      }).call(this));
    }
    node = this.__renderInput({
      mode: "search",
      collection: collection,
      onUpdate: (function(_this) {
        return function(_opts) {
          var _co, linked_ids;
          linked_ids = (function() {
            var i, len, ref, results;
            ref = collection.getObjects();
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              _co = ref[i];
              results.push(_co.getGlobalObjectId());
            }
            return results;
          })();
          if (linked_ids.length > 0) {
            data[_this.name()] = linked_ids;
          } else {
            data[_this.name()] = null;
          }
          if (node) {
            return trigger_change();
          }
        };
      })(this)
    });
    trigger_change = (function(_this) {
      return function() {
        return Events.trigger({
          node: node,
          type: "search-input-change"
        });
      };
    })(this);
    if (this.linkMask().table.isHierarchy()) {
      return new HorizontalLayout({
        maximize_horizontal: true,
        maximize_vertical: false,
        "class": "ez5-linked-object-search-hierarchy",
        center: {
          content: node
        },
        right: {
          content: (new Checkbox({
            data: data,
            active: true,
            name: this.name() + ":include_children",
            tooltip: {
              text: $$("linked.object.include_children.tooltip")
            },
            onDataChanged: (function(_this) {
              return function() {
                return trigger_change();
              };
            })(this)
          })).start()
        }
      }).DOM;
    } else {
      node.addClass("ez5-linked-object-search");
      return node;
    }
  };

  LinkedObject.prototype.addToCollection = function(data, top_level_data, collection) {
    return this.__addToCollection(data[this.name()], collection);
  };

  LinkedObject.prototype.__addToCollection = function(data, collection) {
    if (!data._mask) {
      data._mask = this.linkMask().name();
      data._objecttype = this.linkMask().table.name();
    }
    if (data._mask !== this.linkMask().name()) {
      assert(data._objecttype === this.linkMask().table.name(), (getObjectClass(this)) + ".renderEditorInput", "Objecttype in data does not match objecttype of schema.", {
        data: data,
        schema: this.linkMask().schema
      });
      delete data._format;
      data._mask = this.linkMask().name();
    }
    return collection.insertObjects([new CollectionObject(data)]);
  };

  LinkedObject.prototype.setData = function(data, top_level_data, linked_object_data) {
    return data[this.name()] = linked_object_data;
  };

  LinkedObject.prototype.getDataAsString = function(data) {
    var sd;
    sd = this.getSaveData(data);
    if (!sd) {
      return;
    }
    delete sd._mask;
    delete sd._objecttype;
    return JSON.stringify(sd);
  };

  LinkedObject.prototype.__renderInput = function(_opts) {
    var btn, lay, open_editor, opts, searchMini, show_collection, sopts, tmpl;
    opts = CUI.Element.readOpts(_opts, "LinkedObject.__renderInput", {
      mode: {
        check: ["editor", "search"]
      },
      collection: {
        check: Collection
      },
      allowMultipleRows: {
        check: Boolean
      },
      data: {
        check: "PlainObject"
      },
      searchMini: {
        "default": {},
        check: "PlainObject"
      },
      onUpdate: {
        check: Function
      }
    });
    sopts = copyObject(opts.searchMini);
    show_collection = (function(_this) {
      return function() {
        var append_to_div, div, i, len, obj, objs, promises;
        objs = opts.collection.getObjects();
        if (objs.length > 0) {
          btn.show();
          tmpl.map.search.pf_hide();
          tmpl.map.object.pf_show();
          lay.DOM.setAttribute("tabindex", "0");
        } else {
          btn.hide();
          tmpl.map.object.pf_hide();
          tmpl.map.search.pf_show();
          lay.DOM.removeAttribute("tabindex");
        }
        tmpl.empty("object");
        promises = [];
        btn.disable();
        for (i = 0, len = objs.length; i < len; i++) {
          obj = objs[i];
          div = $div("ez5-linked-object-container");
          tmpl.append(div, "object");
          append_to_div = function(div, mode) {
            return _this.__loadFromData(obj.getObject(), mode).done(function(ro) {
              var _div;
              _div = (function() {
                switch (mode) {
                  case "short":
                    return ro.renderCard1(null, false);
                  case "text":
                    return ro.renderTextHtml();
                  default:
                    return ro.renderCard2(null, false);
                }
              })();
              _div.appendTo(div);
              CUI.DOM.append(div, _this.__getMaskNotMatchWarning(ro, obj.getObject()));
              if (ro.isMappedMetadataCreated()) {
                _div.addClass("ez5-linked-object-mapped-metadata-created");
                new Tooltip({
                  element: _div,
                  text: $$("linked.object.mapped_metadata_created.tooltip")
                });
              }
            }).fail(function(error) {
              if (error instanceof UserError && mode === "text") {
                CUI.warn("Mode " + mode + " failed, trying 'standard'");
                return append_to_div(div, "standard");
              }
            });
          };
          append_to_div(div, _this.__getLinkMaskInline());
        }
        CUI.when(promises).done(function() {
          Events.trigger({
            node: tmpl,
            type: "content-resize"
          });
          return btn.enable();
        });
      };
    })(this);
    open_editor = (function(_this) {
      return function() {
        var co, ed, ol, params, ro;
        co = opts.collection.getObjects()[0];
        params = {
          table_id: _this.linkMask().table.id(),
          format: 'long',
          onCancel: function() {},
          onDelete: function() {
            return opts.collection.removeObjects();
          },
          onSaveReadOnly: function(editor, new_objs) {
            co.setObject(new_objs[0]);
            return sopts.onUpdate();
          },
          onSave: function(editor, new_objs) {
            co.setObject(new_objs[0]);
            return sopts.onUpdate();
          },
          popover_element: lay.center()
        };
        if (co.getGlobalObjectId()) {
          params.mode = "single";
          params.global_object_id = co.getGlobalObjectId();
        } else {
          params.mode = "new";
          ro = new ResultObject();
          ro.setData(co.getObject());
          ol = new ObjectList();
          ol.push(ro);
          params.object_list = ol;
        }
        ed = new EditorPopover(params);
        return ed.open();
      };
    })(this);
    tmpl = new Template({
      name: "linked-object-edit",
      map: {
        search: true,
        object: true
      }
    });
    lay = new HorizontalLayout({
      maximize_horizontal: true,
      maximize_vertical: false,
      "class": "ez5-linked-object-edit",
      right: {},
      center: {
        content: tmpl
      }
    });
    btn = new LocaButton({
      loca_key: "linked.object.button.menu",
      disabled: true,
      icon: "ellipsis_v",
      icon_right: false,
      menu: {
        items: (function(_this) {
          return function() {
            var co, editBtn, items;
            if (opts.mode === "editor") {
              if (opts.allowMultipleRows && opts.data._is_auto) {
                opts.collection.setSingleMode(false);
              } else {
                opts.collection.setSingleMode(true);
              }
            }
            items = [
              {
                icon: "search",
                loca_key: "linked.object.search",
                onClick: function() {
                  return searchMini.openSearch(btn);
                }
              }, opts.mode === "editor" ? editBtn = new LocaButton({
                icon: "edit",
                disabled: true,
                loca_key: "linked.object.editor",
                group: "tools",
                onClick: function() {
                  return open_editor();
                }
              }) : void 0, {
                icon: "fullscreen",
                loca_key: "linked.object.detail",
                group: "tools",
                onClick: function() {
                  return ResultObject.showCollectionObjectInPopover({
                    collectionObject: opts.collection.getObjects()[0],
                    element: lay
                  });
                }
              }, {
                icon: "trash",
                group: "tools",
                loca_key: "linked.object.trash",
                onClick: function() {
                  return opts.collection.removeObjects().done((function(_this) {
                    return function() {
                      return sopts.onUpdate();
                    };
                  })(this));
                }
              }
            ];
            if (editBtn) {
              co = opts.collection.getObjects()[0];
              if (co.isMappedMetadataCreated()) {
                editBtn.enable();
              } else {
                DbInfo.canWrite({
                  object: {
                    _global_object_id: co.getGlobalObjectId()
                  }
                }).done(function() {
                  return editBtn.enable();
                });
              }
            }
            return items;
          };
        })(this)
      }
    });
    sopts.element = tmpl.map.search;
    sopts.popover_element = tmpl.DOM;
    sopts.link_mask = this.linkMask();
    sopts.link_mask_inline = this.__getLinkMaskInline();
    sopts.collection = opts.collection;
    sopts.onUpdate = (function(_this) {
      return function(_opts) {
        var co, i, idx, len, ref;
        if (_opts == null) {
          _opts = {};
        }
        ref = opts.collection.getObjects();
        for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
          co = ref[idx];
          co.getObject()._mask = _this.linkMask().name();
        }
        if (typeof opts.onUpdate === "function") {
          opts.onUpdate(_opts, searchMini);
        }
        return show_collection();
      };
    })(this);
    searchMini = new SearchMini(sopts);
    show_collection();
    lay.append(btn, "right");
    Events.listen({
      type: "keyup",
      node: lay,
      call: function(ev) {
        var el, ref;
        if (ev.hasModifierKey()) {
          return;
        }
        if ((ref = ev.keyCode()) === 8 || ref === 46) {
          ev.stopPropagation();
          el = DOM.findNextVisibleElement(lay.DOM, "[tabindex]");
          opts.collection.removeObjects().done((function(_this) {
            return function() {
              sopts.onUpdate();
              return CUI.setTimeout(function() {
                return el.focus();
              });
            };
          })(this));
        }
      }
    });
    return lay.DOM;
  };

  LinkedObject.prototype.getPlaceholderTextForEditor = function(data, top_level_data) {
    var ref;
    if ((ref = data._template) != null ? ref[this.name()] : void 0) {
      return new ResultObject().setData(data._template[this.name()]).renderText();
    } else {
      return null;
    }
  };

  LinkedObject.prototype.renderEditorInput = function(data, top_level_data, opts) {
    var collection, node, ot, searchMiniOpts;
    if (opts == null) {
      opts = {};
    }
    assert(this.linkMask() instanceof Mask, (getObjectClass(this)) + ".renderEditorInput", "LinkMask not found", {
      data: data
    });
    collection = this.getCollectionTemporary(data, top_level_data);
    if (opts.appendMultipleRows) {
      collection.setSingleMode(false);
    } else {
      collection.setSingleMode(true);
    }
    ot = this.linkMask().table.name();
    if (data[this.name()]) {
      this.addToCollection(data, top_level_data, collection);
    }
    searchMiniOpts = {
      placeholder_text: this.getPlaceholderTextForEditor(data, top_level_data)
    };
    node = this.__renderInput({
      collection: collection,
      mode: "editor",
      allowMultipleRows: !!opts.appendMultipleRows,
      data: data,
      searchMini: searchMiniOpts,
      onUpdate: (function(_this) {
        return function(_opts, searchMini) {
          switch (collection.getCount()) {
            case 0:
              _this.setData(data, top_level_data, null);
              if (node) {
                Events.trigger({
                  node: node,
                  type: "editor-changed"
                });
              }
              break;
            case 1:
              ResultObject.loadFromData(collection.getObjects()[0].getObject(), "standard").done(function(result_object) {
                _this.setData(data, top_level_data, result_object.getData());
                if (node) {
                  return Events.trigger({
                    node: node,
                    type: "editor-changed"
                  });
                }
              });
              break;
            default:
              assert(opts.appendMultipleRows, "LinkedObject.renderEditorInput", "collection contains more than 1 object and opts.appendMultipleRows is not set.", {
                opts: opts,
                linkedObject: _this
              });
              _this.__addFromCollection(opts.appendMultipleRows, collection);
              collection.removeObjects();
              searchMini.update({
                callback: false
              });
          }
          if (!_opts.init && collection.getCount() > 0) {
            return CUI.setTimeout(function() {
              return Field.focusNextField(node);
            });
          }
        };
      })(this)
    });
    return node;
  };

  LinkedObject.prototype.getSortFunction = function() {
    return (function(_this) {
      return function(a, b) {
        var a_txt, b_txt, ref, ref1, ref2, ref3, ref4, ref5;
        a_txt = ez5.loca.getBestFrontendValue((ref = a[_this.name()]) != null ? (ref1 = ref._standard) != null ? (ref2 = ref1[1]) != null ? ref2.text : void 0 : void 0 : void 0) || "";
        b_txt = ez5.loca.getBestFrontendValue((ref3 = b[_this.name()]) != null ? (ref4 = ref3._standard) != null ? (ref5 = ref4[1]) != null ? ref5.text : void 0 : void 0 : void 0) || "";
        return a_txt.localeCompare(b_txt);
      };
    })(this);
  };

  LinkedObject.prototype.getCollectionTemporary = function(data, top_level_data) {
    return new CollectionTemporary({
      hasEASFields: this.linkMask().getEASFields("detail").length > 0
    });
  };

  LinkedObject.prototype.getClass = function() {
    return [LinkedObject.__super__.getClass.call(this), "ez5-linked-object-inline-" + (this.__getLinkMaskInline()), this.linkMask().table.getCapabilityClasses("ez5-linked-object-"), !this.linkMask().table.isHierarchy() ? "ez5-linked-object-no-hierarchy" : ""].join(" ");
  };

  LinkedObject.prototype.getSaveData = function(data, save_data, opts) {
    var data_ref, k, link_mask_opts, mask_name, new_data, obj, opts2, ot_name, rec, ref, ref1, ref2, ro, tbl_name, v;
    if (save_data == null) {
      save_data = {};
    }
    if (opts == null) {
      opts = {};
    }
    if (opts.demo_data) {
      if (!opts.demo_linked_mask_names) {
        opts.demo_linked_mask_names = [];
      }
      mask_name = this.linkMask().name();
      if (indexOf.call(opts.demo_linked_mask_names, mask_name) >= 0) {
        return;
      }
      opts2 = copyObject(opts, true);
      opts2.demo_linked_mask_names.push(mask_name);
      ro = new ResultObjectDemo({
        mask: this.linkMask(),
        version: opts.demo_version,
        demo_skip_path_create: true,
        format: opts.demo_format_linked_object,
        opts: opts2
      });
      save_data[this.name()] = ro.getData();
      if (opts.demo_format_linked_object === "standard") {
        ot_name = this.linkMask().table.name();
        obj = save_data[this.name()];
        ref = obj[ot_name];
        for (k in ref) {
          v = ref[k];
          if (!k.startsWith("_")) {
            delete obj[ot_name][k];
          }
        }
      }
      return;
    }
    link_mask_opts = copyObject(opts, false);
    delete link_mask_opts.bulk;
    tbl_name = this.linkMask().table.name();
    if (data[this.name()]) {
      data_ref = data[this.name()];
    } else if ((ref1 = data._template) != null ? ref1[this.name()] : void 0) {
      data_ref = data._template[this.name()];
    } else {
      save_data[this.name()] = null;
      return save_data[this.name()];
    }
    save_data[this.name()] = rec = {};
    rec._objecttype = tbl_name;
    rec._mask = this.linkMask().name();
    if (opts.copy) {
      rec._global_object_id = data_ref._global_object_id;
      rec._standard = data_ref._standard;
      if (data_ref._path) {
        rec._path = data_ref._path;
      }
      rec._format = data_ref._format;
    }
    if (!data_ref[tbl_name]) {
      console.error("LinkedObject.getSaveData: Inconsistent data from server received, ignoring Linked Object. Data: ", data, "Name: ", this.name(), "Linked Data:", data_ref);
      save_data[this.name()] = null;
      return null;
    }
    if (data_ref[tbl_name]._id) {
      rec[tbl_name] = {
        _id: data_ref[tbl_name]._id
      };
    } else {
      if (opts.create_objects) {
        new_data = copyObject(rec, true);
        for (k in data_ref) {
          v = data_ref[k];
          if (new_data[k] === void 0 || k === tbl_name) {
            new_data[k] = v;
          }
        }
        ref2 = new ResultObject().setData(new_data).getSaveData(opts);
        for (k in ref2) {
          v = ref2[k];
          rec[k] = v;
        }
        obj = {
          _save_data: rec,
          _data_ref: data_ref
        };
        new_data = null;
        opts.create_objects.push(obj);
      } else {
        rec[tbl_name] = {
          _id: null
        };
      }
    }
    return save_data[this.name()];
  };

  LinkedObject.prototype.__addFromCollection = function(append_row_func, collection) {
    var co, data, i, idx, len, ref;
    ref = collection.getObjects();
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      co = ref[idx];
      data = {};
      data[this.name()] = co.getObject();
      append_row_func(data);
    }
    return this;
  };

  LinkedObject.prototype.getAppendMultipleRowsButtons = function(append_row_func) {
    var mb, mb2;
    mb = {
      loca_key: "main.editor.nested.append_multiple",
      loca_key_attrs: [this.nameLocalized()],
      onClick: (function(_this) {
        return function(ev, btn) {
          var collection, sp;
          collection = new CollectionMemory();
          sp = new SearchPopover({
            collection: collection,
            popover_element: btn.getMenuRootButton(),
            link_mask: _this.linkMask(),
            onDone: function() {
              return _this.__addFromCollection(append_row_func, collection);
            }
          });
          return sp.openPopover();
        };
      })(this)
    };
    mb2 = {
      loca_key: "main.editor.nested.new_multiple",
      loca_key_attrs: [this.nameLocalized()],
      onClick: (function(_this) {
        return function(ev, btn) {
          var collection;
          collection = new CollectionMemory();
          return SearchPopover.prototype.openEditor({
            collection: collection,
            popover_element: btn.getMenuRootButton(),
            link_mask: _this.linkMask(),
            onDone: function() {
              return _this.__addFromCollection(append_row_func, collection);
            }
          });
        };
      })(this)
    };
    return [mb, mb2];
  };

  LinkedObject.prototype.isEmpty = function(data) {
    return isEmpty(data[this.name()]);
  };

  LinkedObject.prototype.checkValue = function(data, top_level_data, opts) {
    var data_ref, ref;
    if (data[this.name()]) {
      data_ref = data[this.name()];
    } else if ((ref = data._template) != null ? ref[this.name()] : void 0) {
      data_ref = data._template[this.name()];
    } else {
      data_ref = null;
    }
    if (!data_ref && (this.ColumnSchema.check === "not_empty" || this.ColumnSchema.not_null)) {
      return false;
    } else {
      return true;
    }
  };

  LinkedObject.showInSearch = function(_opts) {
    var f, gid, i, idx, len, mf, name_localized, names_added, opts, qf, ref, search_data;
    if (_opts == null) {
      _opts = {};
    }
    opts = CUI.Element.readOpts(_opts, "LinkedObject.showInSearch", {
      search_fields: {
        mandatory: true,
        check: function(v) {
          return (v != null ? v.length : void 0) > 0;
        }
      },
      search: {
        mandatory: true,
        check: SearchMain
      },
      result_object: {
        mandatory: true,
        check: ResultObject
      }
    });
    names_added = {};
    mf = new MultipleFieldsContainer();
    ref = opts.search_fields;
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      f = ref[idx];
      if (idx === 0) {
        name_localized = f.linkMask().table.nameLocalized();
      }
      if (names_added[f.fullName()]) {
        continue;
      }
      names_added[f.fullName()] = true;
      mf.addField(f);
    }
    mf.setNameLocalized(name_localized);
    gid = opts.result_object.getGlobalObjectId();
    search_data = {
      __result_object: {}
    };
    search_data[opts.search_fields[0].name()] = [gid];
    search_data.__result_object[gid] = opts.result_object;
    qf = new QueryElementField({
      data: search_data,
      field: mf
    });
    opts.search.selectInCollectionManager();
    return opts.search.showInSearch(qf);
  };

  LinkedObject.prototype.renderDetailOutput = function(data, top_level_data, opts) {
    var append_to_div, detail, div, i, lay, len, mode, result_div, ro, tool, tools;
    if (opts == null) {
      opts = {};
    }
    if (!data[this.name()]) {
      return;
    }
    if (opts.detail instanceof DetailSidebar) {
      detail = opts.detail;
    }
    ro = new ResultObject().setData(data[this.name()]);
    tools = ro.getDetailTools({
      detail: detail,
      getElement: (function(_this) {
        return function() {
          return lay;
        };
      })(this)
    });
    mode = this.__getLinkMaskInline();
    if (mode !== 'short') {
      lay = new HorizontalLayout({
        maximize_horizontal: true,
        maximize_vertical: false,
        "class": "ez5-linked-object-detail ez5-linked-object linked-object-popover",
        attr: {
          inline: this.__getLinkMaskInline()
        },
        right: {}
      });
      lay.replace(Toolbox.getFlyoutButtonbar(tools, {
        appearance: "flat"
      }), "right");
    }
    append_to_div = (function(_this) {
      return function(div, mode) {
        return _this.__loadFromData(data[_this.name()], mode).done(function(ro) {
          var _opts;
          _opts = {
            for_print: opts.for_print,
            detail: detail
          };
          switch (mode) {
            case "short":
              div.append(ro.renderShort(_opts));
              break;
            case "text":
              div.append(ro.renderTextHtml(_opts));
              Events.trigger({
                type: "content-resize",
                node: div
              });
              break;
            case "standard":
              div.append(ro.renderCard1(null, false, null, null, _opts));
          }
          return CUI.DOM.append(div, _this.__getMaskNotMatchWarning(ro, data[_this.name()]));
        }).fail(function(error) {
          if (error instanceof UserError && mode === "text") {
            CUI.warn("Mode " + mode + " failed, trying 'standard'");
            return append_to_div(div, "standard");
          }
        });
      };
    })(this);
    if (mode === 'short') {
      div = CUI.DOM.element("DIV");
      append_to_div(div, mode);
      result_div = div.children[0];
      for (i = 0, len = tools.length; i < len; i++) {
        tool = tools[i];
        if (tool.getName() === 'result.object.show_in_search') {
          (function(_this) {
            return (function(tool) {
              Events.listen({
                type: ['click', 'keyup'],
                node: result_div,
                call: function(ev) {
                  var ref;
                  ev.preventDefault();
                  if (ev.getType() === 'click' || ((ref = ev.keyCode()) === 32 || ref === 13)) {
                    tool.run();
                  }
                }
              });
              result_div.setAttribute('tabindex', '0');
              return result_div.classList.add("ez5-card--clickable");
            });
          })(this)(tool);
          break;
        }
      }
      return result_div;
    }
    append_to_div(lay.center(), mode);
    return lay;
  };

  LinkedObject.prototype.__loadFromData = function(data, mode) {
    var best_mask_filter;
    if (mode !== "text" || this.__getLinkMaskId() !== "PREFERRED") {
      best_mask_filter = false;
    } else {
      best_mask_filter = true;
    }
    return ResultObject.loadFromData(data, mode, best_mask_filter);
  };

  LinkedObject.prototype.__getMaskNotMatchWarning = function(ro, data) {
    var ref;
    if (ro.getMask().name() === data._mask) {
      return;
    }
    return new LocaLabel({
      multiline: true,
      markdown: true,
      loca_key: "linked.object.loaded_with_wrong_mask",
      loca_key_attrs: {
        output_mask: ro.getMask().nameLocalized(),
        wanted_mask: ((ref = ez5.mask.CURRENT._mask_instance_by_name[data._mask]) != null ? ref.nameLocalized() : void 0) || data._mask
      },
      "class": "ez5-linked-object-warning"
    }).DOM;
  };

  LinkedObject.prototype.getSearchFilter = function(data, key) {
    var filter;
    if (key == null) {
      key = this.name();
    }
    filter = LinkedObject.__super__.getSearchFilter.call(this, data, key);
    if (filter) {
      return filter;
    }
    if (isEmpty(data[key]) || !data[key].length) {
      return;
    }
    return filter = {
      type: "in",
      fields: this.getSearchField(data[key + ":include_children"]),
      "in": data[key]
    };
  };

  LinkedObject.prototype.getSearchField = function(include_children) {
    var fn;
    if (include_children) {
      fn = (this.fullName()) + "._path._global_object_id";
    } else {
      fn = (this.fullName()) + "._global_object_id";
    }
    return [fn];
  };

  LinkedObject.prototype.isExpertCommon = function(mode) {
    return true;
  };

  LinkedObject.prototype.isSortGroupable = function() {
    return true;
  };

  LinkedObject.prototype.isVisible = function(mode, opts) {
    if (!LinkedObject.__super__.isVisible.call(this, mode, opts)) {
      return false;
    }
    switch (mode) {
      case "detail-header":
      case "editor-header":
      case "editor-header-bulk":
      case "editor-header-template":
        return false;
      default:
        return true;
    }
  };

  LinkedObject.prototype.getFirstStandardEASColumn = function() {
    var ref;
    if (!(((ref = this.FieldSchema.output.standard_eas) != null ? ref.order : void 0) > 0)) {
      return null;
    }
    return this.linkMask().getEASFields("standard")[0];
  };

  LinkedObject.prototype.sortExtraOpts = function() {
    var i, len, opts, ref, v;
    if (!this.linkMask().table.isHierarchy()) {
      return;
    }
    opts = [];
    ref = ["hierarchical", "flat"];
    for (i = 0, len = ref.length; i < len; i++) {
      v = ref[i];
      opts.push({
        text: $$("linked.object.sort." + v),
        value: v
      });
    }
    return opts;
  };

  LinkedObject.prototype.getSortField = function(filter) {
    var f;
    f = {
      field: this.fullName(),
      group_field: this.fullName(),
      with_path: filter._extra !== "flat",
      order: filter._order
    };
    return f;
  };

  LinkedObject.prototype.allowAppendMultipleRows = function() {
    return true;
  };

  return LinkedObject;

})(Field);
// Generated by CoffeeScript 1.10.0
var LinkedObjecttype,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LinkedObjecttype = (function(superClass) {
  extend(LinkedObjecttype, superClass);

  function LinkedObjecttype(_opts) {
    this.opts = CUI.Element.prototype.readOpts.call(this, _opts, "new LinkedObjecttype", {
      objecttype: {
        mandatory: true,
        check: Objecttype
      }
    });
    Field.prototype.constructor.call(this, this._objecttype.getMask());
  }

  LinkedObjecttype.prototype.__getLinkMaskId = function() {
    return this._objecttype.getMask().id();
  };

  LinkedObjecttype.prototype.__getLinkMaskTableId = function() {
    return this._objecttype.getTable().id();
  };

  LinkedObjecttype.prototype.__getLinkMaskInline = function() {
    return "standard";
  };

  LinkedObjecttype.prototype.getQueryFieldBadge = function(data) {
    var badge, dfr;
    dfr = new CUI.Deferred();
    badge = {
      name: this._objecttype.nameLocalized(),
      popoverContent: dump(this.getSearchFilter(data))
    };
    ResultObject.loadFromId(this._objecttype.name(), data[this.name()][0], "standard", this.getMask().name()).done((function(_this) {
      return function(ro) {
        badge.value = ro.renderText();
        return dfr.resolve(badge);
      };
    })(this)).fail((function(_this) {
      return function() {
        badge.value = $$(linked.objecttype.badge.not_found);
        return dfr.resolve(badge);
      };
    })(this));
    return dfr.promise();
  };

  LinkedObjecttype.prototype.getSearchFilter = function(data, key) {
    var sf;
    if (key == null) {
      key = this.name();
    }
    sf = {
      type: "in",
      objecttype: this._objecttype.name(),
      "in": data[key],
      include_path: true
    };
    CUI.debug("getSearchFilter...", data, this._objecttype.name());
    return sf;
  };

  LinkedObjecttype.prototype.fullName = function() {
    return this.name();
  };

  LinkedObjecttype.prototype.getObjecttype = function() {
    return this._objecttype;
  };

  LinkedObjecttype.prototype.name = function() {
    return "_linked_objecttype_" + this._objecttype.name();
  };

  LinkedObjecttype.prototype.nameLocalized = function() {
    return this._objecttype.nameLocalized();
  };

  LinkedObjecttype.prototype.getSignature = function() {
    var sig;
    sig = {
      "class": getObjectClass(this),
      mask: {
        name: this.getMask().name()
      }
    };
    return sig;
  };

  LinkedObjecttype.fromSignature = function(signature) {
    var mask_id, ot;
    assert(window[signature["class"]] === this, "Field.newFromSignature", "Function mismatch", {
      signature: signature
    });
    mask_id = ez5.mask.CURRENT._mask_by_name[signature.mask.name].mask_id;
    ot = new Objecttype(new Mask("CURRENT", mask_id));
    return new LinkedObjecttype({
      objecttype: ot
    });
  };

  return LinkedObjecttype;

})(LinkedObject);
// Generated by CoffeeScript 1.10.0
var LocaTextColumn,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LocaTextColumn = (function(superClass) {
  extend(LocaTextColumn, superClass);

  function LocaTextColumn() {
    return LocaTextColumn.__super__.constructor.apply(this, arguments);
  }

  LocaTextColumn.prototype.getCSVDestinationFields = function(csvImporter) {
    return [];
  };

  LocaTextColumn.prototype.isVisible = function(mode, opts) {
    if (!LocaTextColumn.__super__.isVisible.call(this, mode, opts)) {
      return false;
    }
    switch (mode) {
      case "sort":
        return true;
      default:
        return true;
    }
  };

  LocaTextColumn.prototype.getSaveData = function(data, save_data, opts) {
    var culture, i, len, ref, ref1, ref2, ref3, ref4;
    save_data[this.name()] = {};
    ref = ez5.loca.getDatabaseLanguages();
    for (i = 0, len = ref.length; i < len; i++) {
      culture = ref[i];
      if (opts.demo_data) {
        save_data[this.name()][culture] = (this.nameLocalized()) + " [" + culture + "]";
      } else if (isEmpty((ref1 = data[this.name()]) != null ? ref1[culture] : void 0)) {
        save_data[this.name()][culture] = (ref2 = data._template) != null ? (ref3 = ref2[this.name()]) != null ? ref3[culture] : void 0 : void 0;
      } else {
        save_data[this.name()][culture] = (ref4 = data[this.name()]) != null ? ref4[culture] : void 0;
      }
      if (isNull(save_data[this.name()][culture])) {
        save_data[this.name()][culture] = null;
      }
    }
    this.getSearchAndReplaceSaveData(data, save_data, opts);
  };

  LocaTextColumn.prototype.value = function(data, val) {
    if (isUndef(val)) {
      return data[this.name()] && data[this.name()][ez5.loca.culture];
    } else {
      if (isUndef(data[this.name()])) {
        data[this.name()] = {};
      }
      return data[this.name()][ez5.loca.culture] = val;
    }
  };

  LocaTextColumn.prototype.checkValue = function(data, top_level_data, opts) {
    var culture, i, len, ref, ref1, ref2, ref3, v;
    ref = ez5.loca.getDatabaseLanguages();
    for (i = 0, len = ref.length; i < len; i++) {
      culture = ref[i];
      v = (ref1 = data[this.name()]) != null ? ref1[culture] : void 0;
      if (isEmpty(v)) {
        v = (ref2 = data._template) != null ? (ref3 = ref2[this.name()]) != null ? ref3[culture] : void 0 : void 0;
        if (!isEmpty(v)) {
          break;
        }
      } else {
        break;
      }
    }
    return this.checkBareValue(v, data, top_level_data, opts);
  };

  LocaTextColumn.prototype.getSortFunction = function() {
    return (function(_this) {
      return function(a, b) {
        var a_txt, b_txt;
        a_txt = ez5.loca.getBestFrontendValue(a[_this.name()]) || "";
        b_txt = ez5.loca.getBestFrontendValue(b[_this.name()]) || "";
        return a_txt.localeCompare(b_txt);
      };
    })(this);
  };

  LocaTextColumn.prototype.isEmpty = function(data) {
    return !this.hasUserData(data);
  };

  LocaTextColumn.prototype.hasUserData = function(data) {
    var k, ref, v;
    if (CUI.isPlainObject(data[this.name()])) {
      ref = data[this.name()];
      for (k in ref) {
        v = ref[k];
        if (!isEmpty(v)) {
          return true;
        }
      }
    }
    return false;
  };

  LocaTextColumn.prototype.renderData = function(data) {
    var html, text, v;
    if (this.isEmpty(data)) {
      return "";
    } else {
      v = data[this.name()];
      html = ez5.loca.getBestDatabaseValue(v, true, true);
      text = ez5.loca.getBestDatabaseValue(v);
      return [text, html];
    }
  };

  LocaTextColumn.prototype.getElementOpts = function(mode) {
    switch (mode) {
      case "expert":
        return {
          type: Input,
          name: this.name()
        };
      default:
        return {
          type: MultiInput,
          name: this.name(),
          spellcheck: ez5.session.getPref("spellcheck"),
          control: ez5.loca.getLanguageControl()
        };
    }
  };

  LocaTextColumn.prototype.getCSVDestinationFields = function(csvImporter) {
    var opts;
    opts = {
      csvImporter: csvImporter,
      field: this
    };
    return [new LocaTextColumnCSVImporterDestinationField(opts)];
  };

  return LocaTextColumn;

})(TextColumn);
// Generated by CoffeeScript 1.10.0
var LocaTextMultiColumn,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LocaTextMultiColumn = (function(superClass) {
  extend(LocaTextMultiColumn, superClass);

  function LocaTextMultiColumn() {
    return LocaTextMultiColumn.__super__.constructor.apply(this, arguments);
  }

  LocaTextMultiColumn.prototype.getElementOpts = function(mode) {
    switch (mode) {
      case "expert":
        return {
          name: this.name(),
          type: Input
        };
      default:
        return {
          name: this.name(),
          control: ez5.loca.getLanguageControl(),
          textarea: true,
          content_size: !bowser.msie,
          type: MultiInput
        };
    }
  };

  LocaTextMultiColumn.prototype.getManageOverflow = function() {
    return true;
  };

  return LocaTextMultiColumn;

})(LocaTextColumn);
// Generated by CoffeeScript 1.10.0
var NestedTableListViewRow,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

NestedTableListViewRow = (function(superClass) {
  extend(NestedTableListViewRow, superClass);

  function NestedTableListViewRow() {
    return NestedTableListViewRow.__super__.constructor.apply(this, arguments);
  }

  NestedTableListViewRow.prototype.initOpts = function() {
    NestedTableListViewRow.__super__.initOpts.call(this);
    return this.addOpts({
      nestedTable: {
        mandatory: true,
        check: NestedTable
      },
      treeNode: {
        check: ListViewFieldsRendererNode
      },
      data: {
        mandatory: true,
        check: "PlainObject"
      },
      top_level_data: {
        mandatory: true,
        check: "PlainObject"
      },
      read_only: {
        mandatory: true,
        check: Boolean
      },
      mode: {
        mandatory: true,
        check: String
      },
      field: {
        mandatory: true,
        check: Field
      }
    });
  };

  NestedTableListViewRow.prototype.readOpts = function() {
    NestedTableListViewRow.__super__.readOpts.call(this);
    return this.__data = this._data;
  };

  NestedTableListViewRow.prototype.getData = function() {
    return this.__data;
  };

  NestedTableListViewRow.prototype.getNestedTable = function() {
    return this._nestedTable;
  };

  NestedTableListViewRow.prototype.getTopLevelData = function() {
    return this._top_level_data;
  };

  NestedTableListViewRow.prototype.changed = function(on_off) {
    if (isNull(on_off)) {
      return this.is_changed;
    }
    this.is_changed = on_off;
    if (this.getListView()) {
      this.updateClass();
    }
    return this.is_changed;
  };

  NestedTableListViewRow.prototype.getClass = function() {
    var c, cls, i, len, ref;
    cls = NestedTableListViewRow.__super__.getClass.call(this);
    if (this.is_changed) {
      return "row-data-changed " + cls;
    }
    ref = this.columns;
    for (i = 0, len = ref.length; i < len; i++) {
      c = ref[i];
      if (typeof c.changed === "function" ? c.changed() : void 0) {
        return "row-child-data-changed " + cls;
      }
    }
    return cls;
  };

  NestedTableListViewRow.prototype.addFieldClass = function(cls) {};

  NestedTableListViewRow.prototype.removeFieldClass = function(cls) {};

  NestedTableListViewRow.prototype.addMenuColumn = function(data, idx) {};

  NestedTableListViewRow.prototype.updateClass = function() {
    this.removeClass("row-data-changed row-child-data-changed");
    return this.addClass(this.getClass());
  };

  NestedTableListViewRow.prototype.addedToListView = function() {
    this.updateClass();
    return this;
  };

  NestedTableListViewRow.prototype.loadCurrentTools = null;

  NestedTableListViewRow.prototype.setProblemClass = function() {};

  return NestedTableListViewRow;

})(ListViewRow);
// Generated by CoffeeScript 1.10.0
var NestedTable, NestedTableIsVisibleException,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

NestedTable = (function(superClass) {
  extend(NestedTable, superClass);

  function NestedTable(fatherMask, FieldSchema) {
    this.fatherMask = fatherMask;
    this.FieldSchema = FieldSchema;
    this.getMaskPath = bind(this.getMaskPath, this);
    this.table = new Table(this.fatherMask.version, this.FieldSchema.other_table_id);
    if (this.fatherMask.nestedTableField && getObjectClass(this.fatherMask.nestedTableField) !== "TreeColumn") {
      this.mainMask = this.fatherMask.nestedTableField.mainMask;
    } else {
      this.mainMask = this.fatherMask;
    }
    this.mask = new Mask(this.mainMask.version, null, this.FieldSchema.mask, this);
    this.version = this.fatherMask.version;
    this.__cls = "ez5-" + toDash(getObjectClass(this));
    this.ColumnSchema = this.FieldSchema._other_column;
    this;
  }

  NestedTable.prototype.init = function() {
    var f, j, len, ref, results;
    assert(this.table, "new " + (getObjectClass(this)), "table must be set", {
      fatherMask: this.fatherMask,
      FieldSchema: this.FieldSchema
    });
    assert(this.mainMask, "new " + (getObjectClass(this)), "mainMak could not be found", {
      fatherMask: this.fatherMask,
      FieldSchema: this.FieldSchema
    });
    assert(this.mask, "new " + (getObjectClass(this)), "mask was not set", {
      fatherMask: this.fatherMask,
      FieldSchema: this.FieldSchema
    });
    ref = this.mask.fields;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      f = ref[j];
      results.push(f.init());
    }
    return results;
  };

  NestedTable.prototype.depth = function() {
    return this.fatherMask.depth;
  };

  NestedTable.prototype.getFatherField = function() {
    if (this.fatherMask.nestedTableField) {
      return this.fatherMask.nestedTableField;
    } else {
      return null;
    }
  };

  NestedTable.prototype.insideNested = function() {
    if (this.getFatherField()) {
      return true;
    } else {
      return false;
    }
  };

  NestedTable.prototype.getSearchFilter = function(data, key, return_fields_with_filter) {
    var _data, _f, f, fields_with_filter, filter, idx, j, k, l, len, len1, len2, main_filter, ref, ref1, ref2;
    if (key == null) {
      key = this.name();
    }
    if (return_fields_with_filter == null) {
      return_fields_with_filter = false;
    }
    filter = NestedTable.__super__.getSearchFilter.call(this, data, key);
    if (filter) {
      return filter;
    }
    if (!data[key] || data[key].length === 0) {
      return;
    }
    fields_with_filter = [];
    main_filter = {
      type: "complex",
      _unnest_counter: 0,
      _is_nested_index: this.isNestedIndex(),
      search: []
    };
    ref = data[key];
    for (idx = j = 0, len = ref.length; j < len; idx = ++j) {
      _data = ref[idx];
      if (this.isNestedIndex()) {
        filter = {
          type: "nested",
          _unnest_counter: 0,
          path: this.fullName(),
          search: []
        };
      } else {
        filter = {
          type: "complex",
          _unnest_counter: 0,
          search: []
        };
      }
      main_filter.search.push(filter);
      ref1 = this.mask.getFields("expert");
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        f = ref1[k];
        _f = f.getSearchFilter(_data);
        if (_f) {
          fields_with_filter.push(f);
          filter.search.push(_f);
          if (_f._unnest) {
            filter._unnest_counter++;
          }
        }
      }
      if (filter.search.length === filter._unnest_counter) {
        main_filter.search.pop();
        ref2 = filter.search;
        for (l = 0, len2 = ref2.length; l < len2; l++) {
          _f = ref2[l];
          main_filter._unnest_counter++;
          main_filter.search.push(_f);
        }
      }
    }
    if (main_filter.search.length === main_filter._unnest_counter) {
      main_filter._unnest = true;
    }
    if (!fields_with_filter.length) {
      return null;
    } else if (return_fields_with_filter) {
      return fields_with_filter;
    } else {
      return main_filter;
    }
  };

  NestedTable.prototype.getCSVDestinationFields = function(csvImporter) {
    var f, field, fields, j, k, len, len1, ref, ref1;
    fields = [];
    ref = this.mask.getFields("editor");
    for (j = 0, len = ref.length; j < len; j++) {
      field = ref[j];
      if (!(field instanceof Field)) {
        continue;
      }
      if (field instanceof NestedTable) {
        continue;
      }
      if (field.isReadOnly()) {
        continue;
      }
      ref1 = field.getCSVDestinationFields(csvImporter);
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        f = ref1[k];
        fields.push(f);
      }
    }
    return fields;
  };

  NestedTable.prototype.getSearchField = function() {
    return this.fullName();
  };

  NestedTable.prototype.invokeOnFields = function(mode, dive_nested, callback, data, depth) {
    if (depth == null) {
      depth = 0;
    }
    if (data && !data[this.name()]) {
      data[this.name()] = [];
    }
    return this.mask.invokeOnFields(mode, dive_nested, callback, data != null ? data[this.name()] : void 0, depth + 1);
  };

  NestedTable.prototype.getMaskPath = function(path) {
    if (path == null) {
      path = [];
    }
    if (this.fatherMask.nestedTableField) {
      if (this.fatherMask.nestedTableField instanceof NestedTable) {
        this.fatherMask.nestedTableField.getMaskPath(path);
      }
    } else {
      path.push(this.fatherMask);
    }
    return path;
  };

  NestedTable.prototype.fullName = function() {
    if (this.fatherMask.nestedTableField) {
      return this.fatherMask.nestedTableField.fullName() + "." + this.name();
    } else {
      return this.fatherMask.table.name() + "." + this.name();
    }
  };

  NestedTable.prototype.getCSVName = function() {
    return this.name().split("__")[1] + "[]";
  };

  NestedTable.prototype.getCSVRecordKeyPath = function() {
    return this.fullName() + "[]";
  };

  NestedTable.prototype.getQueryFieldBadge = function(data) {
    var f, sf, value;
    sf = this.getSearchFilter(data, null, true);
    if (sf._unset_filter) {
      value = $$("field.search.badge.without");
    } else {
      value = ((function() {
        var j, len, results;
        results = [];
        for (j = 0, len = sf.length; j < len; j++) {
          f = sf[j];
          results.push(f.nameLocalized());
        }
        return results;
      })()).join(",");
    }
    return {
      name: this.fullNameLocalized(true),
      value: value,
      popoverContent: dump(sf)
    };
  };

  NestedTable.prototype.fullNameLocalized = function(include_top_level_mask, use_table_name, return_path) {
    return NestedTable.__super__.fullNameLocalized.call(this, include_top_level_mask, use_table_name, return_path, this.fatherMask);
  };

  NestedTable.prototype.name = function() {
    return "_nested:" + this.table.name();
  };

  NestedTable.prototype.nameLocalized = function() {
    return this.table.nameLocalized();
  };

  NestedTable.prototype.maskName = function() {
    return this.mainMask.name();
  };

  NestedTable.prototype.maskNameLocalized = function() {
    return this.mainMask.nameLocalized();
  };

  NestedTable.prototype.isEmpty = function(data) {
    var ref;
    return !((ref = data[this.name()]) != null ? ref.length : void 0);
  };

  NestedTable.prototype.checkValue = function(data, top_level_data, opts) {
    var check_value, f, j, k, len, len1, ref, ref1, row;
    if (opts == null) {
      opts = {};
    }
    if (data[this.name()].length === 0) {
      if (this.isRequired()) {
        return false;
      } else {
        return true;
      }
    }
    check_value = true;
    ref = data[this.name()];
    for (j = 0, len = ref.length; j < len; j++) {
      row = ref[j];
      ref1 = this.mask.getFields("all");
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        f = ref1[k];
        if (!(f.isVisible(opts.render_mode_header) || f.isVisible(opts.render_mode))) {
          continue;
        }
        if (f.checkValue(row, null, opts) === false) {
          row[f.name() + ':field'].check_failed = true;
          opts.problems.push(new CheckDataProblem({
            field: f,
            field_data: row
          }));
          check_value = false;
        } else {
          delete row[f.name() + ':field'].check_failed;
        }
      }
    }
    return check_value;
  };

  NestedTable.prototype.getSaveData = function(data, save_data, opts) {
    var _data, add_data, bulk_key, i, idx, j, k, l, len, len1, ref, ref1, ref2;
    if (opts == null) {
      opts = {};
    }
    this.initData(data, 'editor');
    save_data[this.name()] = [];
    add_data = (function(_this) {
      return function(_data, for_demo) {
        var data_row, f, j, len, ref;
        if (for_demo == null) {
          for_demo = false;
        }
        if (!for_demo && !_this.__rowHasData(_data)) {
          return;
        }
        data_row = {};
        save_data[_this.name()].push(data_row);
        ref = _this.mask.getFields("all");
        for (j = 0, len = ref.length; j < len; j++) {
          f = ref[j];
          if (opts.check) {
            if (!_data[f.name() + ':field']) {
              _data[f.name() + ':field'] = {};
            }
            data_row[f.name() + ':field'] = _data[f.name() + ':field'];
          }
          f.getSaveData(_data, data_row, opts);
        }
      };
    })(this);
    if (opts.demo_data) {
      for (i = j = 1; j <= 2; i = ++j) {
        add_data({}, true);
      }
      return;
    }
    if (((ref = data._template) != null ? ref[this.name()] : void 0) && this.getOption(data, "mode") === "append") {
      ref1 = data._template[this.name()];
      for (k = 0, len = ref1.length; k < len; k++) {
        _data = ref1[k];
        add_data(_data);
      }
    }
    if (data[this.name()]) {
      ref2 = data[this.name()];
      for (idx = l = 0, len1 = ref2.length; l < len1; idx = ++l) {
        _data = ref2[idx];
        add_data(_data);
      }
    }
    bulk_key = this.getBulkSaveData(data, save_data, opts, "mode");
    if (save_data[bulk_key] === "remove_all") {
      if (save_data[this.name()].length) {
        throw new UserError({
          label: "main.editor.nested.bulk_remove_all.error",
          label_attrs: [this.nameLocalized()]
        });
      }
      return save_data[bulk_key] = "replace";
    }
  };

  NestedTable.prototype.initForListView = function(tn) {
    NestedTable.__super__.initForListView.call(this, tn);
    if (this.FieldSchema.edit.as_table) {
      return;
    }
    if (tn instanceof ListViewFieldsRendererDataNode) {
      return this.initListViewTreeNodeVerticalDataNode(tn);
    } else {
      return this.initListViewTreeNodeVerticalTopLevelNode(tn);
    }
  };

  NestedTable.prototype.needsRowMove = function(mode) {
    if (!this.FieldSchema.edit.as_table && mode.startsWith("editor")) {
      return true;
    } else {
      return false;
    }
  };

  NestedTable.prototype.renderForListView = function(tn) {
    var data, f, fields, j, k, len, len1, ref, ref1, ul;
    if (this.FieldSchema.edit.as_table) {
      if (tn.opts.mode === "detail") {
        fields = [];
        ref = this.mask.getFields("detail");
        for (j = 0, len = ref.length; j < len; j++) {
          f = ref[j];
          if (!(f instanceof MaskSplitter) && !(f instanceof NestedTable)) {
            fields.push(f);
          }
        }
        if (fields.length === 1) {
          ul = $ul("ez5-nested-table");
          f = fields[0];
          this.initData(tn.opts.data, tn.opts.mode);
          ref1 = tn.opts.data[this.name()];
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            data = ref1[k];
            ul.append($li("ez5-nested-table-item").append(f.renderDetailOutput(data, tn.opts.top_level_data, tn.opts)));
          }
          tn.addColumn(new ListViewColumn({
            "class": "ez5-nested-table-horizontal-list " + f.getClass(),
            element: ul
          }));
          return tn.opts.field.getLabel(tn.opts.mode);
        }
      }
      return this.renderForListViewHorizontal(tn);
    } else {
      if (tn instanceof ListViewFieldsRendererDataNode) {
        return this.renderForListViewVerticalDataNode(tn);
      } else {
        return this.renderForListViewVerticalTopLevelNode(tn);
      }
    }
  };

  NestedTable.prototype.isReadOnly = function() {
    var ref, ref1, ref2;
    return ((ref = this.FieldSchema) != null ? ref.edit.mode : void 0) !== "edit" || ((ref1 = this.FieldSchema) != null ? (ref2 = ref1.custom_settings) != null ? ref2.editor_frontend_mode : void 0 : void 0) === "readonly";
  };

  NestedTable.prototype.isAppendOnly = function(data) {
    return this.FieldSchema.edit.append_only && !(data != null ? data._new : void 0);
  };

  NestedTable.prototype.initListViewTreeNodeVerticalTopLevelNode = function(tn) {
    var _data, data, idx, j, len, opts, ref, ref1;
    tn.children = [];
    this.initData(tn.opts.data, tn.opts.mode);
    if (!isUndef(tn.opts.idx)) {
      data = tn.opts.data[this.name()][tn.opts.idx];
    } else {
      data = tn.opts.data;
    }
    if (data[this.name()]) {
      removeFromArray(null, data[this.name()], (function(_this) {
        return function(_data) {
          if (_this.__rowHasData(_data)) {
            return false;
          } else if (_data._is_auto) {
            return true;
          } else {
            return false;
          }
        };
      })(this));
      ref = data[this.name()];
      for (idx = j = 0, len = ref.length; j < len; idx = ++j) {
        _data = ref[idx];
        if (((ref1 = tn.opts.mode) === "detail-header" || ref1 === "detail" || ref1 === "text") && !this.__rowHasData(_data)) {
          continue;
        }
        opts = {
          data: data,
          top_level_data: tn.opts.top_level_data,
          mode: tn.opts.mode,
          detail: tn.opts.detail,
          editor: tn.opts.editor,
          search: tn.opts.search,
          field: tn.opts.field,
          renderForListView: tn.opts.renderForListView,
          idx: idx
        };
        tn.children.push(new ListViewFieldsRendererDataNode(opts));
      }
      if (tn.children.length) {
        tn.do_open = true;
      }
    }
  };

  NestedTable.prototype.initListViewTreeNodeVerticalDataNode = function(tn) {
    var data, f, j, len, opts, ref, ref1;
    data = tn.opts.data[this.name()][tn.opts.idx];
    tn.do_open = true;
    tn.children = [];
    this.initData(tn.opts.data, tn.opts.mode);
    ref = this.mask.getFields(tn.opts.mode);
    for (j = 0, len = ref.length; j < len; j++) {
      f = ref[j];
      if (((ref1 = tn.opts.mode) === "detail-header" || ref1 === "detail" || ref1 === "text") && f.isEmpty(data)) {
        continue;
      }
      opts = {
        data: data,
        top_level_data: tn.opts.top_level_data,
        mode: tn.opts.mode,
        detail: tn.opts.detail,
        editor: tn.opts.editor,
        search: tn.opts.search,
        renderForListView: tn.opts.renderForListView,
        field: f
      };
      tn.children.push(new ListViewFieldsRendererFieldNode(opts));
    }
  };

  NestedTable.prototype.renderForListViewVerticalTopLevelNode = function(tn) {
    var btn, div, fn, lvc, promise, ref;
    div = $div("nested-table-view-vertical");
    lvc = new NestedTableListViewColumnVertical({
      element: div,
      "class": "ez5-nested-table-vertical",
      mode: tn.opts.mode
    });
    if ((tn.opts.mode.match(/^editor/) && !this.isReadOnly()) || ((ref = tn.opts.mode) === "expert")) {
      promise = null;
      fn = (function(_this) {
        return function(data, idx) {
          var c, func, j, len, new_node, opts, ref1;
          opts = {
            data: data,
            top_level_data: tn.opts.top_level_data,
            mode: tn.opts.mode,
            detail: tn.opts.detail,
            editor: tn.opts.editor,
            search: tn.opts.search,
            "class": "ez5-nested-table-data-node",
            field: _this,
            idx: idx,
            renderForListView: tn.opts.renderForListView
          };
          if (idx === 0) {
            ref1 = tn.children;
            for (j = 0, len = ref1.length; j < len; j++) {
              c = ref1[j];
              c.opts.idx++;
            }
            func = "prependChild";
          } else {
            func = "addChild";
          }
          new_node = new ListViewFieldsRendererDataNode(opts);
          tn.changed(true);
          Events.trigger({
            node: tn.getTree().getGrid(),
            type: "editor-changed"
          });
          (function(new_node, func) {
            var next_node;
            next_node = function() {
              promise = tn[func](new_node);
              return promise.done(function() {
                return promise = null;
              });
            };
            if (promise) {
              return promise.done(function() {
                return next_node(new_node, func);
              });
            } else {
              return next_node();
            }
          })(new_node, func);
        };
      })(this);
      btn = new LocaButton({
        loca_key: "nested.table.vertical.button.plus",
        group: "plusminus",
        menu: {
          items: (function(_this) {
            return function() {
              return _this.appendButtons(fn, tn.opts.data, tn.opts, tn);
            };
          })(this)
        }
      });
      tn.__btn_minus = new LocaButton({
        loca_key: "nested.table.vertical.button.minus",
        disabled: true,
        group: "plusminus",
        onClick: (function(_this) {
          return function() {
            return tn.getTree().getSelectedNode().__remove();
          };
        })(this)
      });
      div.append(new Buttonbar({
        buttons: [btn, tn.__btn_minus]
      }).DOM);
    }
    tn.addColumn(lvc);
    return tn.opts.field.getLabel(tn.opts.mode);
  };

  NestedTable.prototype.renderForListViewVerticalDataNode = function(tn) {
    var current_tools, ref, tools_btn;
    if (tn.opts.data[this.name()][tn.opts.idx]._new) {
      tn.changed(true);
    }
    if ((tn.opts.mode.match(/^editor/) && !this.isReadOnly() && !this.isAppendOnly(tn.opts.data[this.name()][tn.opts.idx])) || ((ref = tn.opts.mode) === "expert")) {
      tn.__remove = (function(_this) {
        return function() {
          tn.opts.data[_this.name()].splice(tn.opts.idx, 1);
          tn.getFather().changed(true);
          tn.remove(true);
          return Events.trigger({
            node: tn.getTree().getGrid(),
            type: "editor-changed"
          });
        };
      })(this);
    } else {
      if (this.loadCurrentTools) {
        current_tools = null;
        tools_btn = new LocaButton({
          "class": "ez5-nested-table-vertical-menu",
          appearance: "flat",
          icon_right: false,
          loca_key: "toolbox.flyout_buttonbar_side_menu_button",
          menu: {
            has_items: true,
            items: (function(_this) {
              return function() {
                var dfr;
                if (current_tools) {
                  return current_tools;
                }
                dfr = new CUI.Deferred();
                _this.loadCurrentTools({
                  data: tn.opts.data[_this.name()][tn.opts.idx],
                  detail: tn.opts.detail,
                  getElement: function() {
                    return tn.getDOMNodes()[0];
                  }
                }).done(function(tools) {
                  return dfr.resolve(Toolbox.getMenuItemsWithFallback(tools));
                }).fail(function() {
                  return dfr.resolve([]);
                });
                current_tools = dfr.promise();
                return current_tools;
              };
            })(this)
          }
        });
      }
      tn.addColumn(new ListViewColumn({
        element: tools_btn
      }));
    }
    return $$("nested.table.data_node_cell_text");
  };

  NestedTable.prototype.loadCurrentTools = null;

  NestedTable.prototype.listViewEditorTreeNodeMoveNodeAfter = function(tn) {
    if (this.FieldSchema.edit.as_table) {
      return assert(false, "should not be here");
    } else {
      return this.listViewEditorTreeNodeMoveVertical(tn);
    }
  };

  NestedTable.prototype.getTopLevelNodeContentForDetail = function() {};

  NestedTable.prototype.listViewEditorTreeNodeMoveVertical = function(tn) {
    var c, data, idx, j, len, new_data, ref;
    data = tn.opts.data[this.name()];
    new_data = [];
    ref = tn.father.children;
    for (idx = j = 0, len = ref.length; j < len; idx = ++j) {
      c = ref[idx];
      new_data[idx] = data[c.opts.idx];
      c.opts.idx = idx;
    }
    data.splice(0);
    return data.push.apply(data, new_data);
  };

  NestedTable.prototype.renderForListViewHorizontal = function(tn) {
    var lvc;
    lvc = this.getListViewColumnHorizontal(tn.opts.data, tn.opts, tn);
    lvc.addClass("ez5-nested-table-horizontal ez5-field");
    tn.addColumn(lvc);
    return tn.opts.field.getLabel(tn.opts.mode);
  };

  NestedTable.prototype.getReplacementRecord = function(data, key_prefix, use_array, record) {
    var add_row, j, len, ref, ref1, row;
    if (!((ref = data[this.name()]) != null ? ref.length : void 0)) {
      return;
    }
    key_prefix = key_prefix + this.name() + ".";
    add_row = (function(_this) {
      return function(row) {
        var f, j, len, ref1, results;
        ref1 = _this.mask.getFields("all");
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
          f = ref1[j];
          if (f instanceof MaskSplitter) {
            continue;
          }
          results.push(f.getReplacementRecord(row, key_prefix, true, record));
        }
        return results;
      };
    })(this);
    ref1 = data[this.name()];
    for (j = 0, len = ref1.length; j < len; j++) {
      row = ref1[j];
      if (this.__rowHasData(row)) {
        add_row(row);
        continue;
      }
    }
    return record;
  };

  NestedTable.prototype.ensureEmptyRowHorizontal = function(data, addRow, listView, initial_call) {
    var _data, add_empty_row_at, add_row_at, base, found, idx, j, k, len, len1, ref, ref1, trigger;
    if (initial_call == null) {
      initial_call = false;
    }
    if (this.__infoLastInsert == null) {
      this.__infoLastInsert = {};
    }
    add_empty_row_at = (function(_this) {
      return function(idx) {
        var _data, row;
        assert(idx <= data[_this.name()].length, "NestedTable.ensureEmptyRowHorizontal.add_empty_row_at", "Cannot add empty row at index > length", {
          data: data,
          name: _this.name(),
          idx: idx
        });
        _data = {
          _new: true,
          _is_auto: true
        };
        if (idx === data[_this.name()].length) {
          data[_this.name()].push(_data);
        } else {
          data[_this.name()].splice(idx, 0, _data);
        }
        row = addRow(data, idx, true);
        _this.__infoLastInsert.row = row;
      };
    })(this);
    if (data[this.name()].length === 0) {
      add_empty_row_at(0);
    } else {
      add_row_at = data[this.name()].length;
      ref = data[this.name()];
      for (idx = j = 0, len = ref.length; j < len; idx = ++j) {
        _data = ref[idx];
        if (this.__rowHasData(_data) && _data._is_auto) {
          delete _data._is_auto;
          _data._row.removeClass("ez5-nested-table-data-is-auto");
          if (idx === 0 && data[this.name()].length > 1) {
            add_row_at = 0;
          } else {
            add_row_at = idx + 1;
          }
        }
        if (typeof (base = _data._row).__update_tools === "function") {
          base.__update_tools();
        }
      }
      idx = 0;
      while (idx < data[this.name()].length) {
        _data = data[this.name()][idx];
        if (!this.__rowHasData(_data) && !_data._is_auto && !initial_call) {
          _data._row.__remove(false);
          if (add_row_at > 0) {
            add_row_at--;
          }
          trigger = true;
        } else {
          idx++;
        }
      }
      found = false;
      ref1 = data[this.name()];
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        _data = ref1[k];
        if (_data._is_auto) {
          found = true;
          break;
        }
      }
      if (!found) {
        add_empty_row_at(add_row_at);
      }
    }
    if (trigger) {
      CUI.setTimeout({
        call: (function(_this) {
          return function() {
            return Events.trigger({
              node: listView.getGrid(),
              type: "editor-changed"
            });
          };
        })(this)
      });
    }
  };

  NestedTable.prototype.getCheckInfo = function(mode) {
    var fields, warn, warnings;
    warnings = NestedTable.__super__.getCheckInfo.call(this, mode);
    if (!this.FieldSchema.edit.as_table) {
      return warnings;
    }
    fields = this.mask.getFields(mode);
    if (fields.length === 1) {
      if (fields[0].isRequired()) {
        warn = fields[0].getCheckInfo();
        if (warn.length > 0) {
          warnings.push($$("nested.table.explain_one_required_field", {
            warnings: warn.join("\n")
          }));
        }
      }
    }
    return warnings;
  };

  NestedTable.prototype.getColumnsFlat = function(mode) {
    var col, colspan_i_stack, columns, d, depth, i, j, k, last_depth, last_nested, ref, ref1, s, stack;
    columns = [];
    last_depth = 0;
    stack = [
      {
        fields: [],
        nested: this
      }
    ];
    this.invokeOnFields(mode, true, (function(_this) {
      return function(f, data, depth) {
        stack[depth - 1].fields.push(f);
        if (f instanceof NestedTable) {
          stack[depth] = {
            fields: [],
            belongs_to: stack[depth - 1],
            nested: f
          };
          return;
        }
        columns.push({
          idx: stack[depth - 1].fields.length - 1,
          depth: depth,
          belongs_to: stack[depth - 1],
          field: f
        });
        return last_depth = depth;
      };
    })(this));
    last_nested = null;
    colspan_i_stack = [];
    for (i = j = 0, ref = columns.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      col = columns[i];
      depth = col.depth;
      s = colspan_i_stack[depth];
      if (!s || (s.nested !== col.belongs_to.nested)) {
        s = colspan_i_stack[depth] = {
          colspan_i: i,
          nested: col.belongs_to.nested
        };
        col.colspan = 1;
      } else {
        columns[s.colspan_i].colspan++;
      }
      for (d = k = ref1 = depth - 1; k >= 1; d = k += -1) {
        columns[colspan_i_stack[d].colspan_i].colspan++;
      }
    }
    return columns;
  };

  NestedTable.prototype.getHeadersFromColumns = function(mode, columns) {
    var _col, _cols, _depth, _header, _idx, col, column_css, depth, headers, i, idx, j, k, l, lb, len, len1, m, ref, ref1, set_colspan, true_count, true_start;
    headers = [new ListViewHeaderRow()];
    for (idx = j = 0, len = columns.length; j < len; idx = ++j) {
      col = columns[idx];
      lb = col.field.getLabel(mode);
      column_css = "ez5-nested-table-col ez5-nested-table-col-" + col.idx + " ez5-nested-table-depth-" + (col.depth - 1);
      if (col.idx === 0 && col.depth - 1 > 0) {
        column_css += " ez5-nested-table-header-row-move-spacer";
      }
      headers[0].addColumn(new ListViewHeaderColumn({
        "class": column_css,
        element: lb
      }));
      if (!headers[col.depth]) {
        _cols = [];
        _cols.length = columns.length;
        headers[col.depth] = new ListViewHeaderRow({
          columns: _cols,
          "class": "ez5-nested-table-horizontal-header-row"
        });
      }
      for (_depth = k = 1, ref = col.depth; k < ref; _depth = k += 1) {
        headers[_depth].getColumns()[idx] = true;
      }
      if (col.idx === 0) {
        headers[col.depth].setColumn(idx, new ListViewColumn({
          text: col.belongs_to.nested.nameLocalized(),
          "class": "ez5-nested-table-horizontal-header ez5-nested-table-header-depth-" + col.depth,
          attrs: {
            depth: col.depth
          }
        }));
      } else {
        headers[col.depth].getColumns()[idx] = true;
      }
    }
    depth = 1;
    for (i = l = 1, ref1 = headers.length; l < ref1; i = l += 1) {
      _header = headers[i];
      _cols = _header.getColumns();
      true_count = 0;
      true_start = null;
      set_colspan = (function(_this) {
        return function() {
          assert(true_count > 0 && true_start > 0, "NestedTable,getHeaderFromColumns.set_colspan", "wrong true count or start");
          _cols[true_start - 1].setColspan(1 + true_count);
          true_count = 0;
          true_start = null;
        };
      })(this);
      for (_idx = m = 0, len1 = _cols.length; m < len1; _idx = m += 1) {
        _col = _cols[_idx];
        if (!_col) {
          _header.setColumn(_idx, new ListViewColumnEmpty({
            "class": "ez5-nested-table-horizontal-header ez5-nested-table-horizontal-empty-cell ez5-nested-table-header-depth-" + columns[_idx].depth,
            attrs: {
              depth: columns[_idx].depth
            }
          }));
        }
        if (_col === true) {
          assert(_idx > 0, "NestedTable.getHeaderFromColumns: First column \"true\" not supported.");
          if (true_count === 0) {
            true_start = _idx;
          }
          true_count++;
        } else if (true_count > 0) {
          set_colspan();
        }
      }
      if (true_count > 0) {
        set_colspan();
      }
      removeFromArray(true, _cols);
    }
    return headers;
  };

  NestedTable.prototype.renderDetailOutput = function(data, top_level_data, opts) {
    if (opts == null) {
      opts = {};
    }
    opts.embed = true;
    opts.top_level_data = top_level_data;
    return this.getListViewColumnHorizontal(data, opts);
  };

  NestedTable.prototype.__horizontalRowClass = NestedTableListViewRow;

  NestedTable.prototype.supportsRowMove = function() {
    if (this.FieldSchema.sort_first_field) {
      return false;
    } else {
      return true;
    }
  };

  NestedTable.prototype.getListViewColumnHorizontal = function(data, opts, tn, columns, col_i) {
    var _header, addRow, bulk_options, changable_rows, chunk, cls, col, colClasses, cols, colspan, count, depth, div, ensure_empty, has_editor_mode, header_left, headers, i, idx, j, k, l, len, len1, listView, listViewColumn, m, mode, more_btn, more_btn_set_text, offset, one_column_only, ref, ref1, ref2, ref3, rowMove;
    if (tn == null) {
      tn = null;
    }
    if (columns == null) {
      columns = null;
    }
    if (col_i == null) {
      col_i = null;
    }
    div = $div("ez5-nested-table-column-horizontal", {
      "full-name": this.fullName()
    });
    mode = opts.mode;
    has_editor_mode = mode.startsWith("editor");
    cols = [];
    colClasses = [];
    this.initData(data, mode);
    if ((has_editor_mode && !this.isReadOnly()) || (mode === "expert")) {
      changable_rows = true;
      Events.listen({
        type: ["editor-changed", "search-input-change"],
        node: div,
        call: (function(_this) {
          return function(ev) {
            _this.ensureEmptyRowHorizontal(data, addRow, listView);
          };
        })(this)
      });
    } else {
      changable_rows = false;
    }
    if (changable_rows) {
      ensure_empty = true;
    } else if (opts.embed && (!((ref = data[this.name()]) != null ? ref.length : void 0)) && !CUI.__ng__) {
      ensure_empty = true;
    } else {
      ensure_empty = false;
    }
    if (col_i === null) {
      columns = this.getColumnsFlat(mode);
      for (j = 0, len = columns.length; j < len; j++) {
        col = columns[j];
        cols.push("auto");
        if (col.idx === 0 && col.depth > 1) {
          cls = ' ez5-nested-has-row-handle';
        } else {
          cls = '';
        }
        colClasses.push(col.field.getClass() + cls);
      }
      headers = this.getHeadersFromColumns(mode, columns);
      depth = 1;
    } else {
      colspan = columns[col_i].colspan;
      depth = columns[col_i].depth;
      for (i = k = ref1 = col_i, ref2 = col_i + colspan; ref1 <= ref2 ? k < ref2 : k > ref2; i = ref1 <= ref2 ? ++k : --k) {
        cols.push("auto");
        colClasses.push(columns[col_i].field.getClass());
      }
    }
    addRow = (function(_this) {
      return function(data, idx, init, dont_add_to_list_view) {
        var _col_i, _data, _opts, l, len1, read_only, row, tools_btn;
        if (init == null) {
          init = false;
        }
        if (dont_add_to_list_view == null) {
          dont_add_to_list_view = false;
        }
        _data = data[_this.name()][idx];
        if (_data._is_auto) {
          cls = "ez5-nested-table-data-is-auto";
        } else {
          cls = "";
        }
        read_only = !(changable_rows && !_this.isAppendOnly(_data));
        row = new _this.__horizontalRowClass({
          nestedTable: _this,
          "class": cls,
          data: _data,
          top_level_data: opts.top_level_data,
          field: _this,
          mode: mode,
          read_only: read_only,
          treeNode: tn
        });
        _data._row = row;
        if (_data._new && !_data._is_auto) {
          row.changed(true);
          if (tn != null) {
            tn.changed(true);
          }
        }
        if (!read_only) {
          row.__remove = function(trigger) {
            if (trigger == null) {
              trigger = true;
            }
            removeFromArray(_data, data[_this.name()]);
            listView.removeRow(row.getRowIdx());
            if (tn) {
              tn.changed(true);
            }
            if (trigger) {
              Events.trigger({
                node: listView.getGrid(),
                type: "editor-changed"
              });
            }
          };
        }
        for (_col_i = l = 0, len1 = columns.length; l < len1; _col_i = ++l) {
          col = columns[_col_i];
          if (col.depth === depth + 1 && col.colspan && col.belongs_to.belongs_to.nested === _this) {
            row.addColumn(col.belongs_to.nested.getListViewColumnHorizontal(_data, opts, tn, columns, _col_i));
            continue;
          } else if (col.belongs_to.nested !== _this) {
            continue;
          }
          _opts = {
            mode: mode,
            search: opts.search,
            editor: opts.editor,
            detail: opts.detail,
            field: col.field,
            data: _data,
            top_level_data: opts.top_level_data,
            infoLastInsert: _this.__infoLastInsert
          };
          if (_data._is_auto) {
            _opts.appendMultipleRows = function(new_data) {
              var _idx, len2, m, ref3;
              idx = null;
              ref3 = data[_this.name()];
              for (_idx = m = 0, len2 = ref3.length; m < len2; _idx = ++m) {
                _data = ref3[_idx];
                if (!_data._is_auto) {
                  continue;
                }
                if (_idx === 0 && data[_this.name()].length > 1) {
                  idx = 1;
                } else {
                  idx = _idx;
                }
              }
              if (idx === null) {
                idx = data[_this.name()].length;
              }
              new_data._new = true;
              if (idx === data[_this.name()].length) {
                data[_this.name()].push(new_data);
              } else {
                data[_this.name()].splice(idx, 0, new_data);
              }
              return addRow(data, idx);
            };
          }
          row.addColumn(new FieldListViewColumnHorizontal(_opts));
        }
        if (row.loadCurrentTools || (!read_only && !one_column_only)) {
          row.__update_tools = function() {
            if (!_data._is_auto) {
              return tools_btn.show();
            } else {
              return tools_btn.hide();
            }
          };
          tools_btn = new LocaButton({
            appearance: "flat",
            icon_right: false,
            loca_key: "toolbox.flyout_buttonbar_side_menu_button",
            menu: {
              has_items: true,
              items: function() {
                var dfr, finish;
                dfr = new CUI.Deferred();
                finish = function(tools) {
                  if (row.__remove && !_data._is_auto) {
                    tools.push(new ToolboxTool({
                      loca_key: "nested.table.row_remove",
                      group: "row",
                      name: "row.remove",
                      run: function() {
                        return row.__remove();
                      }
                    }));
                  }
                  return dfr.resolve(Toolbox.getMenuItemsWithFallback(tools));
                };
                if (row.loadCurrentTools) {
                  row.loadCurrentTools(data, idxInArray(row.getData(), data[_this.name()]), opts, tools_btn).done(function(tools) {
                    return finish(tools);
                  }).fail(function(tools) {
                    return finish([]);
                  });
                } else {
                  finish([]);
                }
                return dfr.promise();
              }
            }
          });
          row.__update_tools();
        }
        row.addColumn(new ListViewColumn({
          element: tools_btn
        }));
        if (!dont_add_to_list_view) {
          listView.insertRowAt(idx + headers.length, row);
        }
        if (!init) {
          Events.trigger({
            type: "editor-changed",
            node: listView.getGrid()
          });
        }
        return row;
      };
    })(this);
    one_column_only = false;
    if (headers) {
      colspan = headers[0].getColumns().length;
      if (colspan === 1) {
        headers = [];
        if (tn != null) {
          tn.setClass("ez5-nested-table-one-column-only");
        }
        one_column_only = true;
      } else {
        if (tn != null) {
          tn.setClass("ez5-nested-table-horizontal-row");
        }
        if (CUI.__ng__ && headers.length >= 2) {
          if (headers[1].getColumns().length === 1) {
            headers.splice(1, 1);
          }
        }
      }
      if (opts.embed) {
        headers = [];
      }
      if (headers.length) {
        headers.push(headers.splice(0, 1)[0]);
      }
    } else {
      headers = [];
    }
    rowMove = changable_rows && !this.isAppendOnly() && this.supportsRowMove();
    if (depth === 1 && !one_column_only && !opts.embed) {
      header_left = new Label({
        text: this.nameLocalized()
      });
    } else {
      header_left = null;
    }
    colClasses.push("ez5-nested-table-menu-column");
    cols.push("auto");
    if (col_i === null) {
      if (indexOf.call(cols, 'maximize') < 0 && cols.length > 1) {
        cols[cols.length - 2] = 'maximize';
      }
    }
    listView = new ListView({
      "class": "cui-lv--has-datafields ez5-nested-table-list-view-horizontal ez5-nested-table-depth-" + depth,
      fixedRows: 0,
      maximize_horizontal: true,
      maximize_vertical: false,
      fixedCols: rowMove ? 1 : 0,
      force_footer: true,
      header_left: header_left,
      selectableRows: false,
      onRowMove: (function(_this) {
        return function(display_from_i, display_to_i, after) {
          var offset;
          offset = headers.length;
          moveInArray(display_from_i - offset, display_to_i - offset, data[_this.name()], after);
          if (tn) {
            tn.changed(true);
          }
          return Events.trigger({
            type: "editor-changed",
            node: listView.getGrid()
          });
        };
      })(this),
      rowMove: rowMove,
      rowMoveFixedRows: headers.length,
      cols: cols,
      colClasses: colClasses
    });
    for (idx = l = 0, len1 = headers.length; l < len1; idx = ++l) {
      _header = headers[idx];
      listView.appendRow(_header);
    }
    count = data[this.name()].length;
    for (idx = m = 0, ref3 = count; 0 <= ref3 ? m < ref3 : m > ref3; idx = 0 <= ref3 ? ++m : --m) {
      if (idx === 10 && this.supportsMoreButton()) {
        break;
      }
      addRow(data, idx, true);
    }
    if (count > 10 && this.supportsMoreButton()) {
      offset = 10;
      chunk = 50;
      more_btn_set_text = (function(_this) {
        return function() {
          return more_btn.setText($$("nested.table.button.show_more|text", {
            chunk: chunk,
            offset: offset,
            count: count,
            objecttype: _this.moreButtonObjecttype()
          }));
        };
      })(this);
      more_btn = new LocaButton({
        loca_key: "nested.table.button.show_more",
        left: true,
        onClick: (function(_this) {
          return function() {
            more_btn.startSpinner();
            more_btn.disable();
            CUI.setTimeout({
              ms: 100,
              call: function() {
                var n, ref4, ref5, rows;
                rows = [];
                for (idx = n = ref4 = offset, ref5 = Math.min(count, offset + chunk); ref4 <= ref5 ? n < ref5 : n > ref5; idx = ref4 <= ref5 ? ++n : --n) {
                  rows.push(addRow(data, idx, true, true));
                }
                listView.appendRows(rows);
                offset = offset + chunk;
                if (idx === count && ensure_empty) {
                  _this.ensureEmptyRowHorizontal(data, addRow, listView, true);
                }
                more_btn_set_text();
                more_btn.stopSpinner();
                if (idx < count) {
                  return more_btn.enable();
                }
              }
            });
          };
        })(this)
      });
      more_btn_set_text();
      listView.replace(more_btn, "footer_left");
    } else {
      if (ensure_empty) {
        this.ensureEmptyRowHorizontal(data, addRow, listView, true);
      }
    }
    div.append(listView.render());
    if (col_i === null) {
      if (!opts.embed) {
        colspan = 1;
      }
      bulk_options = this.getBulkOptions(data, opts);
      div.append(this.getBulkOptionsForm(bulk_options, data, "mode"));
    }
    return listViewColumn = new NestedTableListViewColumnHorizontal({
      colspan: colspan,
      field: this,
      mode: mode,
      "class": "ez5-has-nested-table",
      element: div
    });
  };

  NestedTable.prototype.supportsMoreButton = function() {
    return false;
  };

  NestedTable.prototype.sortData = function(arr, mode) {
    var func, j, len, ref, results, sort, sort_field;
    if (arr.length <= 1 || arr.__sorted) {
      return;
    }
    sort = this.FieldSchema.sort_first_field;
    if (!sort) {
      return;
    }
    switch (mode) {
      case 'editor':
      case 'detail':
        ref = this.mask.getFields(mode);
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          sort_field = ref[j];
          if (!(sort_field instanceof Field)) {
            continue;
          }
          if (sort_field instanceof NestedTable) {
            continue;
          }
          console.debug("sort_field", sort_field);
          func = sort_field.getSortFunction();
          arr.__sorted = true;
          if (!func) {
            continue;
          }
          arr.sort((function(_this) {
            return function(a, b) {
              if (sort === 'asc') {
                return func(a, b);
              } else {
                return func(b, a);
              }
            };
          })(this));
          break;
        }
        return results;
    }
  };

  NestedTable.prototype.initData = function(data, mode) {
    if (!data[this.name()]) {
      data[this.name()] = [];
    }
    this.sortData(data[this.name()], mode);
    if (data._template) {
      if (!data._template[this.name()]) {
        data._template[this.name()] = [];
      }
      if (!this.hasOption(data, "mode")) {
        this.setOption(data, "mode", "append");
      }
      this.sortData(data._template[this.name()], mode);
    }
    return this;
  };

  NestedTable.prototype.__rowHasData = function(row) {
    var field, j, len, ref;
    ref = this.mask.getFields("all");
    for (j = 0, len = ref.length; j < len; j++) {
      field = ref[j];
      if (field.hasUserData(row)) {
        return true;
      }
    }
    return false;
  };

  NestedTable.prototype.hasUserData = function(data) {
    var j, len, ref, row;
    if (!data[this.name()]) {
      return false;
    }
    ref = data[this.name()];
    for (j = 0, len = ref.length; j < len; j++) {
      row = ref[j];
      if (this.__rowHasData(row)) {
        return true;
      }
    }
    return false;
  };

  NestedTable.prototype.countUserDataRows = function(data) {
    var c, j, len, ref, row;
    c = 0;
    if (data[this.name()]) {
      ref = data[this.name()];
      for (j = 0, len = ref.length; j < len; j++) {
        row = ref[j];
        if (this.__rowHasData(row)) {
          c++;
        }
      }
    }
    return c;
  };

  NestedTable.prototype.appendButtons = function(append_function, data, opts, tn) {
    var _data, append_new_data, bulk_options, buttons, dom_el_func, f, j, len, ref;
    _data = {
      append_prepend: ez5.session.getPref("NestedTable_append_prepend")
    };
    append_new_data = (function(_this) {
      return function(new_data) {
        if (_data.append_prepend !== "prepend") {
          data[_this.name()].push(new_data);
          return append_function.call(_this, data, data[_this.name()].length - 1);
        } else {
          data[_this.name()].splice(0, 0, new_data);
          return append_function.call(_this, data, 0);
        }
      };
    })(this);
    dom_el_func = (function(_this) {
      return function(file, where) {
        return tn.getTree().getGrid();
      };
    })(this);
    buttons = [
      {
        loca_key: "main.editor.nested.new_row",
        onClick: (function(_this) {
          return function() {
            return append_new_data({
              _new: true
            });
          };
        })(this)
      }
    ];
    if (!opts.mode.match(/^editor/)) {
      return buttons;
    }
    bulk_options = this.getBulkOptions(data, opts);
    ref = this.mask.getFields(opts.mode);
    for (j = 0, len = ref.length; j < len; j++) {
      f = ref[j];
      if (!(typeof f.allowAppendMultipleRows === "function" ? f.allowAppendMultipleRows() : void 0)) {
        continue;
      }
      buttons.push.apply(buttons, f.getAppendMultipleRowsButtons(append_new_data, dom_el_func));
    }
    if (bulk_options.length) {
      buttons.push({
        content: this.getBulkOptionsForm(bulk_options, data, "mode")
      });
    } else {
      buttons.push({
        content: new Options({
          radio: true,
          horizontal: false,
          name: "append_prepend",
          data: _data,
          onDataChanged: function() {
            return ez5.session.savePref("NestedTable_append_prepend", _data.append_prepend);
          },
          options: [
            {
              text: $$("main.editor.nested.prepend"),
              value: "prepend"
            }, {
              text: $$("main.editor.nested.append"),
              value: "append"
            }
          ]
        }).start()
      });
    }
    return buttons;
  };

  NestedTable.prototype.getBulkOptions = function(data, opts) {
    var count, count_hint, fields, j, len, lo_data, options, ref, ref1, ref2, row, values;
    if ((ref = opts.mode) === "editor-bulk" || ref === "editor-header-bulk") {
      options = ["bulk_append", "bulk_prepend", "bulk_replace", "bulk_remove", "bulk_remove_all"];
    } else if (((ref1 = data._template) != null ? ref1[this.name()].length : void 0) > 0) {
      count = this.countUserDataRows(data._template);
      values = [];
      fields = this.mask.getFields(opts.mode);
      if (fields.length === 1 && fields[0] instanceof LinkedObject) {
        ref2 = data._template[this.name()];
        for (j = 0, len = ref2.length; j < len; j++) {
          row = ref2[j];
          lo_data = row[fields[0].name()];
          if (!lo_data) {
            continue;
          }
          values.push(new ResultObject().setData(lo_data).renderText());
        }
      }
      if (values.length > 0) {
        count_hint = "(" + values.join(", ") + ")";
      } else if (count > 0) {
        count_hint = "(" + count + ")";
      } else {
        count_hint = "";
      }
      options = [
        {
          text: $$("main.editor.option.append", {
            fieldname: this.nameLocalized(),
            count_hint: count_hint
          }),
          value: "append"
        }
      ];
      options.min_checked = 0;
    } else {
      options = [];
    }
    if (this.isReadOnly()) {
      options = [];
    }
    return options;
  };

  NestedTable.prototype.isVisible = function(mode, opts) {
    var e, error;
    switch (mode) {
      case 'detail-header':
      case 'editor-header':
      case 'editor-header-template':
      case 'editor-header-bulk':
      case 'fulltext':
        return false;
    }
    if (!NestedTable.__super__.isVisible.call(this, mode)) {
      return false;
    }
    if (this.FieldSchema.hierarchical_mask_hint) {
      return true;
    }
    try {
      return this.mask.getFields(mode, opts).length > 0;
    } catch (error) {
      e = error;
      if (e instanceof NestedTableIsVisibleException) {
        return false;
      }
      throw e;
    }
  };

  NestedTable.prototype.isNestedIndex = function() {
    return !!this.FieldSchema.search.nested;
  };

  NestedTable.prototype.isExpertCommon = function(mode) {
    if (mode === "sort") {
      return false;
    } else {
      return NestedTable.__super__.isExpertCommon.call(this, mode);
    }
  };

  NestedTable.prototype.isExpertCommonOnly = function(mode) {
    if (mode === "sort") {
      return false;
    } else {
      return NestedTable.__super__.isExpertCommonOnly.call(this, mode);
    }
  };

  return NestedTable;

})(Field);

NestedTableIsVisibleException = (function() {
  function NestedTableIsVisibleException() {}

  return NestedTableIsVisibleException;

})();
// Generated by CoffeeScript 1.10.0
var ObjecttypeField,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ObjecttypeField = (function(superClass) {
  extend(ObjecttypeField, superClass);

  function ObjecttypeField() {
    this.getSortField = bind(this.getSortField, this);
    return ObjecttypeField.__super__.constructor.apply(this, arguments);
  }

  ObjecttypeField.prototype.name = function() {
    return "_objecttype";
  };

  ObjecttypeField.prototype.nameLocalized = function() {
    return "Objekttyp";
  };

  ObjecttypeField.prototype.isExpertCommon = function(mode) {
    return true;
  };

  ObjecttypeField.prototype.isExpertCommonOnly = function(mode) {
    return false;
  };

  ObjecttypeField.prototype.getSaveData = function() {};

  ObjecttypeField.prototype.isVisible = function(mode, opts) {
    if (mode === "sort") {
      return true;
    } else {
      return false;
    }
  };

  ObjecttypeField.prototype.isSourceForMapping = function(required_type) {
    if (required_type["export"]) {
      return true;
    } else {
      return false;
    }
  };

  ObjecttypeField.prototype.isSortGroupable = function() {
    return true;
  };

  ObjecttypeField.prototype.getSortField = function() {
    return "_pool";
  };

  ObjecttypeField.prototype.isEmpty = function() {
    return false;
  };

  ObjecttypeField.prototype.renderEditorInput = function(data, top_level_data) {
    return $span().text(this.mask.table.nameLocalized());
  };

  ObjecttypeField.prototype.renderDetailOutput = function(data, top_level_data) {
    return new Label({
      text: this.mask.table.nameLocalized()
    });
  };

  ObjecttypeField.prototype.getSortField = function(data) {
    return this.name();
  };

  ObjecttypeField.prototype.isSortUnique = function() {
    return true;
  };

  ObjecttypeField.prototype.formatSortGroupable = function(item) {
    return ez5.schema.CURRENT._objecttype_by_name[item]._name_localized;
  };

  ObjecttypeField.prototype.isTopLevelField = function() {
    return true;
  };

  ObjecttypeField.prototype.fullName = function() {
    return this.name();
  };

  return ObjecttypeField;

})(Field);
// Generated by CoffeeScript 1.10.0
var OwnerField,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

OwnerField = (function(superClass) {
  extend(OwnerField, superClass);

  function OwnerField() {
    this.getSearchFilter = bind(this.getSearchFilter, this);
    this.getQueryFieldBadge = bind(this.getQueryFieldBadge, this);
    return OwnerField.__super__.constructor.apply(this, arguments);
  }

  OwnerField.prototype.name = function() {
    return "_owner";
  };

  OwnerField.prototype.nameLocalized = function() {
    return "Owner";
  };

  OwnerField.prototype.getDataForFieldData = function(data, top_level_data) {
    return top_level_data;
  };

  OwnerField.prototype.isExpertCommon = function(mode) {
    return true;
  };

  OwnerField.prototype.isEmpty = function() {
    return false;
  };

  OwnerField.prototype.isVisible = function(mode, opts) {
    if (mode === "editor-header" || mode === "editor-header-template" || mode === "editor-header-bulk") {
      if (this.mask.schema.system_fields.owner.edit.mode === "off") {
        return false;
      } else {
        return true;
      }
    } else if ((mode === "detail-header" || mode === "expert") && this.mask.schema.system_fields.owner.output.mode !== "off") {
      return true;
    } else {
      return false;
    }
  };

  OwnerField.prototype.isReadOnly = function(data, top_level_data) {
    var ref;
    if (this.mask.schema.system_fields.owner.edit.mode !== "edit") {
      return true;
    } else if (top_level_data._owner && !((ref = top_level_data._generated_rights) != null ? ref.change_owner : void 0)) {
      return true;
    } else {
      return false;
    }
  };

  OwnerField.prototype.isSortUnique = function() {
    return true;
  };

  OwnerField.prototype.fullName = function() {
    return this.name();
  };

  OwnerField.prototype.getQueryFieldBadge = function(data) {
    var who;
    who = AclWho.newInstance(data[this.name()]);
    return {
      name: this.nameLocalized(),
      value: who != null ? who.getDisplayText() : void 0
    };
  };

  OwnerField.prototype.renderSearchInput = function(data) {
    var selector;
    selector = new AclWhoManager({
      name: this.name(),
      filter_system_groups: true
    }).getWhoSelector(data);
    Events.listen({
      node: selector,
      type: "editor-changed",
      call: (function(_this) {
        return function() {
          return Events.trigger({
            node: selector,
            type: "search-input-change"
          });
        };
      })(this)
    });
    return selector;
  };

  OwnerField.prototype.isSourceForMapping = function(required_type) {
    if (required_type["export"]) {
      return true;
    } else {
      return false;
    }
  };

  OwnerField.prototype.getSearchFilter = function(data) {
    if ($.isEmptyObject(data[this.name()])) {
      return;
    }
    return AclWho.newInstance(data[this.name()]).getSearchFilter(this.name());
  };

  OwnerField.prototype.renderEditorInput = function(data, top_level_data, opts) {
    var ref;
    if (top_level_data._owner || ((ref = opts.mode) === "editor-bulk")) {
      return (new AclWhoManager({
        name: this.name(),
        filter_system_groups: true
      })).getWhoSelector(top_level_data);
    } else {
      return new EmptyLabel({
        text: $$("main.editor.new.pk")
      });
    }
  };

  OwnerField.prototype.renderDetailOutput = function(data, top_level_data) {
    var who;
    if (top_level_data[this.name()]) {
      who = AclWho.newInstance(top_level_data[this.name()]);
    }
    if (who) {
      return new Label({
        text: who.getDisplayText()
      }).DOM;
    } else {
      return new EmptyLabel({
        text: $$("tool.detail.view.field.owner.no-owner")
      }).DOM;
    }
  };

  OwnerField.prototype.getDataAsString = function(data, top_level_data) {
    return JSON.stringify(top_level_data[this.name()]);
  };

  OwnerField.prototype.getSaveData = function(data, save_data, opts) {
    if (opts.copy) {
      return;
    }
    if (opts.demo_data) {
      save_data._top_level._owner = ez5.session.user.getData();
      return;
    }
    if (this.isReadOnly(data, data._top_level)) {
      return;
    }
    save_data._top_level[this.name()] = data._top_level[this.name()];
    return save_data;
  };

  OwnerField.prototype.getSearchUnsetElement = function(data, listViewColumn) {};

  OwnerField.prototype.isTopLevelField = function() {
    return true;
  };

  return OwnerField;

})(Field);
// Generated by CoffeeScript 1.10.0
var PoolField, PoolFieldForEditor,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PoolField = (function(superClass) {
  extend(PoolField, superClass);

  function PoolField() {
    return PoolField.__super__.constructor.apply(this, arguments);
  }

  PoolField.prototype.name = function() {
    return "_pool";
  };

  PoolField.prototype.nameLocalized = function() {
    return $$("main.editor.pool");
  };

  PoolField.prototype.getOutputStandard = function() {
    return null;
  };

  PoolField.prototype.checkBareValue = function(v) {
    if (!v) {
      return false;
    } else {
      return true;
    }
  };

  PoolField.prototype.getReplacementRecord = function() {};

  PoolField.prototype.renderDetailOutput = function(data, top_level_data, opts) {
    var pool, ref;
    assert(!opts.text, "PoolField.renderDetailOutput", "opts.text is obsolete", {
      opts: opts
    });
    pool = data[this.name()];
    if (!pool) {
      pool = (ref = data._template) != null ? ref[this.name()] : void 0;
    }
    if (!pool) {
      return;
    }
    return Pool.renderPoolPath(pool._path);
  };

  PoolField.prototype.isVisible = function(mode, top_level_data) {
    var ref, visible;
    return visible = mode === "editor-header" || mode === "editor-header-template" || mode === "editor-header-bulk" || mode === "sort" || mode === "detail-header" || mode === "text" ? (mode === "detail-header" || mode === "text") && ((ref = this.mask.schema.system_fields) != null ? ref.pool.output.mode : void 0) === "off" ? false : true : (mode === "editor" || mode === "editor-bulk") && this.isInReverseLinkedTable() ? true : false;
  };

  PoolField.prototype.isReadOnly = function(data, top_level_data, opts) {
    var enough_pool_ids, ref, ref1, ref2;
    if (opts == null) {
      opts = {};
    }
    if (((ref = opts.editor) != null ? ref.hasTemplate() : void 0) && opts.mode === "editor") {
      return true;
    } else if (this.isInReverseLinkedTable()) {
      return true;
    } else {
      if (((ref1 = opts.mode) === "editor-bulk" || ref1 === "editor-header-bulk") && opts.pool_ids.length === 0) {
        return false;
      }
      enough_pool_ids = true;
      if (opts.pool_ids && opts.pool_ids.length < 2) {
        enough_pool_ids = false;
      }
      if (data._version && (!((ref2 = top_level_data._generated_rights) != null ? ref2.unlink : void 0) || !enough_pool_ids)) {
        if (opts.get_save_data) {
          return false;
        } else {
          return true;
        }
      } else {
        return false;
      }
    }
  };

  PoolField.prototype.isInReverseLinkedTable = function() {
    return this.mask.nestedTableField instanceof ReverseLinkedTable;
  };

  PoolField.prototype.isSortGroupable = function() {
    return true;
  };

  PoolField.prototype.getSortField = function() {
    return "_pool";
  };

  PoolField.prototype.isSortUnique = function() {
    return true;
  };

  PoolField.prototype.isExpertCommon = function(mode) {
    return true;
  };

  PoolField.prototype.hasBulkCheckbox = function(opts) {
    console.error("hasBulkCheckbox", opts);
    if (opts.bulk_mode && opts.pool_ids.length === 0) {
      return false;
    } else {
      return true;
    }
  };

  PoolField.prototype.checkField = function(data, top_level_data, opts) {
    if (opts.bulk_mode && opts.pool_ids.length === 0) {
      return true;
    } else {
      return PoolField.__super__.checkField.call(this, data, top_level_data, opts);
    }
  };

  PoolField.prototype.renderEditorInput = function(data, top_level_data, renderOpts) {
    var el, treeElement, tt_text;
    this.renderOpts = renderOpts;
    if (this.renderOpts.bulk_mode && this.renderOpts.pool_ids.length === 0) {
      return new EmptyLabel({
        multiline: true,
        text: $$("editor.load.no_pool_change_in_bulk")
      });
    }
    assert(CUI.isPlainObject(this.renderOpts), "PoolField.renderEditorInput", "renderOpts must be set", {
      data: data,
      top_level_data: top_level_data,
      renderOpts: this.renderOpts
    });
    this.inputSearch = new QueryElementInputSearch({
      manager: this,
      button: true,
      emptyExecute: true,
      blockedExecute: true,
      onInputEmptied: (function(_this) {
        return function() {
          CUI.error("inputEmptied...");
          _this.current_pool = null;
          return _this.setDataToCurrentPool(data);
        };
      })(this),
      onReset: (function(_this) {
        return function() {
          _this.current_pool = _this.init_pool;
          return _this.setDataToCurrentPool(data);
        };
      })(this),
      placeholder_text: $$("pool.field.placeholder")
    });
    this.autocompletion = new AutocompletionPopup({
      "class": "ez5-pool-field-autocompletion-popup",
      element: this.inputSearch.getElement()
    });
    this.poolManager = new PoolManagerPoolField({
      "class": CUI.__ng__ ? "" : "cui-listview-maximize-without-vertical-shrinking cui-listview-maximize-without-horizontal-shrinking",
      onSelect: (function(_this) {
        return function(ev, info) {
          if (!ev) {
            return;
          }
          _this.current_pool = info.node;
          _this.setDataToCurrentPool(data);
          _this.displayCurrentPool();
          return _this.autocompletion.hide();
        };
      })(this)
    });
    treeElement = this.poolManager.getTree().render();
    treeElement.appendTo(this.autocompletion.DOM);
    if (data[this.name()]) {
      this.setCurrentPool(new Pool({
        manager: this.poolManager,
        pool: data[this.name()]
      }));
    } else {
      this.setCurrentPool(null);
    }
    this.init_pool = this.current_pool;
    el = this.inputSearch.render();
    tt_text = ez5.loca.str_default("pool.field.select.tooltip");
    if (!isEmpty(tt_text)) {
      new Tooltip({
        element: el,
        text: tt_text
      });
    }
    return el;
  };

  PoolField.prototype.displayCurrentPool = function() {
    if (this.current_pool) {
      this.inputSearch.value(this.current_pool.getDisplayText());
    } else {
      this.inputSearch.value("");
    }
    return this;
  };

  PoolField.prototype.setCurrentPool = function(current_pool, set_init) {
    this.current_pool = current_pool;
    if (set_init == null) {
      set_init = true;
    }
    assert(this.current_pool === null || this.current_pool instanceof Pool, "PoolField.setCurrentPool", "Pool needs to be null or instance of Pool", {
      current_pool: this.current_pool
    });
    this.displayCurrentPool();
    if (set_init) {
      this.init_pool = this.current_pool;
    }
    return this;
  };

  PoolField.prototype.setDataToCurrentPool = function(data, event) {
    var old_pool, ref, ref1;
    if (event == null) {
      event = true;
    }
    old_pool = data[this.name()];
    if ((old_pool != null ? old_pool.pool._id : void 0) !== ((ref = this.current_pool) != null ? ref.id : void 0)) {
      if (this.current_pool) {
        data[this.name()] = this.current_pool.data;
      } else {
        data[this.name()] = null;
      }
      if (event) {
        Events.trigger({
          node: this.inputSearch.element,
          type: "pool-field-changed",
          info: {
            old_pool: old_pool,
            new_pool: data[this.name()],
            editor_has_changes: (ref1 = this.renderOpts.editor) != null ? typeof ref1.hasChanges === "function" ? ref1.hasChanges() : void 0 : void 0
          }
        });
      }
    }
    return this;
  };

  PoolField.prototype.__loadPools = function(_pools) {
    var pools, promise, ref;
    if (_pools.length === 0) {
      promise = this.poolManager.tree.load_data([]);
      this.autocompletion.hide();
    } else {
      this.autocompletion.show();
      if (this.omitRootPool()) {
        promise = this.poolManager.tree.load_data(_pools[0].children);
      } else {
        promise = this.poolManager.tree.load_data(_pools);
      }
    }
    if (this.inputSearch.isBlocked()) {
      pools = this.poolManager.tree.root.find((function(_this) {
        return function(pool) {
          return pool instanceof Pool && pool.getId() === _this.current_pool.getId();
        };
      })(this));
      if ((ref = pools[0]) != null) {
        ref.select();
      }
    }
    return promise;
  };

  PoolField.prototype.execute = function() {
    var filter, opts, search;
    search = [];
    if (this.renderOpts.pool_ids) {
      if (this.renderOpts.pool_ids.length === 0) {
        this.__loadPools([]);
        return CUI.resolvedPromise([]);
      }
      search.push({
        type: "in",
        bool: "must",
        fields: ["pool._id"],
        "in": this.renderOpts.pool_ids
      });
    }
    opts = {
      searchOpts: {
        search: search
      },
      doOpen: false,
      buildTree: true
    };
    if (!this.inputSearch.isBlocked()) {
      filter = this.inputSearch.value();
      if (!isEmpty(filter)) {
        search.push({
          type: "match",
          bool: "must",
          mode: "fulltext",
          string: filter
        });
        opts.doOpen = true;
      }
    }
    return this.poolManager.loadList(null, opts).done((function(_this) {
      return function(pools) {
        return _this.__loadPools(pools);
      };
    })(this));
  };

  PoolField.prototype.formatSortGroupable = function(item, sk, idx) {
    if (idx > 0) {
      return item;
    } else {
      return null;
    }
  };

  PoolField.prototype.omitRootPool = function() {
    return true;
  };

  PoolField.prototype.getSaveData = function(data, save_data, opts) {
    var i, len, pool, ref, ref1;
    if (opts.demo_data) {
      ref = ez5.pools.getList();
      for (i = 0, len = ref.length; i < len; i++) {
        pool = ref[i];
        if (pool.isStandardPool()) {
          save_data[this.name()] = pool.data;
          break;
        }
      }
      return;
    }
    pool = data[this.name()];
    if (!pool) {
      pool = (ref1 = data._template) != null ? ref1[this.name()] : void 0;
    }
    if (pool) {
      if (opts.copy) {
        save_data[this.name()] = copyObject(pool, true);
      } else {
        save_data[this.name()] = {
          pool: {
            _id: pool.pool._id
          }
        };
      }
    }
    return save_data;
  };

  return PoolField;

})(DataColumn);

PoolFieldForEditor = (function(superClass) {
  extend(PoolFieldForEditor, superClass);

  function PoolFieldForEditor(opts) {
    if (opts == null) {
      opts = {};
    }
    this.opts = CUI.Element.readOpts(opts, "new PoolFieldForEditor", {
      omitRootPool: {
        "default": true,
        check: Boolean
      }
    });
  }

  PoolFieldForEditor.prototype.omitRootPool = function() {
    return this.opts.omitRootPool;
  };

  return PoolFieldForEditor;

})(PoolField);

CUI.ready(function() {
  return Events.registerEvent({
    type: "pool-field-changed",
    bubble: true
  });
});
// Generated by CoffeeScript 1.10.0
var PrimaryKeyColumn,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PrimaryKeyColumn = (function(superClass) {
  extend(PrimaryKeyColumn, superClass);

  function PrimaryKeyColumn() {
    return PrimaryKeyColumn.__super__.constructor.apply(this, arguments);
  }

  PrimaryKeyColumn.prototype.nameLocalized = function() {
    return $$("base.primary_key_column.name");
  };

  PrimaryKeyColumn.prototype.isVisibleToSaveData = function() {
    return true;
  };

  PrimaryKeyColumn.prototype.isVisible = function(mode, opts) {
    switch (mode) {
      case 'csv-import':
        return true;
      default:
        return false;
    }
  };

  PrimaryKeyColumn.prototype.renderEditorInput = function(data) {
    if (this.isEmpty(data)) {
      return $i().text($$("main.editor.new.pk"));
    } else {
      return $span().text(data[this.name()]);
    }
  };

  PrimaryKeyColumn.prototype.getOutputStandard = function() {
    return null;
  };

  PrimaryKeyColumn.prototype.name = function() {
    return "_id";
  };

  PrimaryKeyColumn.prototype.isSourceForMapping = function(required_type) {
    if (required_type["export"]) {
      return true;
    } else {
      return false;
    }
  };

  PrimaryKeyColumn.prototype.hasUserData = function(data) {
    return false;
  };

  PrimaryKeyColumn.prototype.getSaveData = function(data, save_data, opts) {
    if (opts.copy) {
      save_data[this.name()] = null;
      return;
    }
    return PrimaryKeyColumn.__super__.getSaveData.call(this, data, save_data, opts);
  };

  PrimaryKeyColumn.prototype.getSearchUnsetElement = function(data, listViewColumn) {};

  PrimaryKeyColumn.prototype.getElementOpts = function(mode) {
    return {
      name: this.name(),
      type: NumberInput,
      decimals: 0
    };
  };

  PrimaryKeyColumn.prototype.getCSVDestinationFields = function() {
    var field;
    field = {
      format: "number",
      field: this,
      use_for_match_existing: true,
      supports_hierarchy: false,
      read_only: true
    };
    return [field];
  };

  return PrimaryKeyColumn;

})(NumberColumn);
// Generated by CoffeeScript 1.10.0
var ReverseLinkedTableListViewRow,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ReverseLinkedTableListViewRow = (function(superClass) {
  extend(ReverseLinkedTableListViewRow, superClass);

  function ReverseLinkedTableListViewRow() {
    return ReverseLinkedTableListViewRow.__super__.constructor.apply(this, arguments);
  }

  ReverseLinkedTableListViewRow.prototype.loadCurrentTools = function(data, idx, opts, tools_btn) {
    var rnt;
    rnt = this.getNestedTable();
    return rnt.loadCurrentTools({
      detail: opts.detail,
      data: data[rnt.name()][idx],
      getElement: (function(_this) {
        return function() {
          return tools_btn;
        };
      })(this)
    });
  };

  return ReverseLinkedTableListViewRow;

})(NestedTableListViewRow);
// Generated by CoffeeScript 1.10.0
var ReverseLinkedTable,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ReverseLinkedTable = (function(superClass) {
  extend(ReverseLinkedTable, superClass);

  function ReverseLinkedTable(fatherMask, FieldSchema) {
    this.fatherMask = fatherMask;
    this.FieldSchema = FieldSchema;
    this.version = this.fatherMask.version;
    if (this.fatherMask.nestedTableField) {
      this.mainMask = this.fatherMask.nestedTableField.mainMask;
    } else {
      this.mainMask = this.fatherMask;
    }
    if (this.FieldSchema.is_hierarchical) {
      this.table = new Table(this.version, this.fatherMask.table.id());
    } else {
      this.table = new Table(this.version, this.FieldSchema.other_table_id);
    }
    if (this.FieldSchema.hierarchical_mask_hint) {
      this.FieldSchema.edit = this.fatherMask.nestedTableField.FieldSchema.edit;
      return;
    }
    this.mask = new Mask(this.mainMask.version, null, this.FieldSchema.mask, this);
  }

  ReverseLinkedTable.prototype.init = function() {
    var i, len, mask, ref;
    if (this.FieldSchema.hierarchical_mask_hint) {
      assert(!this.mask, "ReverseLinkedTable", "mask is expected to be null");
      ref = this.fatherMask.getMaskPath();
      for (i = 0, len = ref.length; i < len; i++) {
        mask = ref[i];
        if (mask.schema.table_id === this.table.id()) {
          this.mask = mask;
          break;
        }
      }
      return assert(this.mask, "ReverseLinkedTable", "mask is expected to be set");
    } else {
      return ReverseLinkedTable.__super__.init.call(this);
    }
  };

  ReverseLinkedTable.prototype.__horizontalRowClass = ReverseLinkedTableListViewRow;

  ReverseLinkedTable.prototype.getTable = function() {
    return this.table;
  };

  ReverseLinkedTable.prototype.isVisible = function(mode, opts) {
    if (mode === "editor-bulk" || mode === "editor-header-bulk") {
      return false;
    } else {
      return ReverseLinkedTable.__super__.isVisible.call(this, mode, opts);
    }
  };

  ReverseLinkedTable.prototype.__searchObjectById = function(id) {
    var dfr;
    dfr = new CUI.Deferred();
    ez5.api.search({
      data: {
        debug: "ReverseLinkedTable.showObject"
      },
      json_data: {
        best_mask_filter: true,
        format: "standard",
        objecttypes: [this.table.name()],
        search: [
          {
            type: "in",
            "in": [id],
            fields: [this.table.name() + "._id"]
          }
        ]
      }
    }).done(function(data) {
      var obj;
      obj = data.objects[0];
      if (!obj) {
        return dfr.reject();
      } else {
        return dfr.resolve(obj);
      }
    }).fail(dfr.reject);
    return dfr.promise();
  };

  ReverseLinkedTable.prototype.loadCurrentTools = function(_opts) {
    var dfr, opts;
    opts = CUI.Element.readOpts(_opts, "ReverseLinkedTable.loadCurrentToolsDetail", {
      detail: {
        check: DetailSidebar
      },
      data: {
        mandatory: true,
        check: "PlainObject"
      },
      getElement: {
        mandatory: true,
        check: Function
      }
    });
    dfr = new CUI.Deferred();
    if (!opts.data._id) {
      dfr.resolve([]);
    } else {
      this.__searchObjectById(opts.data._id).done((function(_this) {
        return function(obj) {
          var ro, tools;
          ro = new ResultObject().setData(obj);
          tools = ro.getDetailTools({
            detail: opts.detail,
            getElement: opts.getElement
          });
          return dfr.resolve(tools);
        };
      })(this)).fail((function(_this) {
        return function() {
          return dfr.resolve([
            new ToolboxTool({
              disabled: true,
              name: "object_not_found",
              loca_key: "reverse.linked.table.show_info.object_not_found"
            })
          ]);
        };
      })(this));
    }
    return dfr.promise();
  };

  ReverseLinkedTable.prototype.initListViewTreeNode = function(tn) {
    return ReverseLinkedTable.__super__.initListViewTreeNode.call(this, tn, "editor-reverse-linked-table");
  };

  ReverseLinkedTable.prototype.addAfterRender = function(tn) {
    var data, i, idx, len, opts, ref, row, save_data;
    ReverseLinkedTable.__super__.addAfterRender.call(this, tn);
    if (!tn.opts.editor) {
      return;
    }
    opts = tn.opts;
    data = opts.data;
    save_data = {};
    this.getSaveData(data, save_data, tn.opts);
    ref = save_data[this.name()];
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      row = ref[idx];
      data[this.name()][idx]._row_on_load = JSON.stringify(row);
    }
  };

  ReverseLinkedTable.prototype.supportsRowMove = function() {
    return false;
  };

  ReverseLinkedTable.prototype.renderEditorInput = function(data, top_level_data) {
    var mode;
    mode = "editor-reverse-linked-table";
    return ReverseLinkedTable.__super__.renderEditorInput.call(this, data, top_level_data, mode);
  };

  ReverseLinkedTable.prototype.invokeOnFields = function(mode, dive_nested, callback, data, depth) {
    if (depth == null) {
      depth = 0;
    }
    if (this.FieldSchema.hierarchical_mask_hint) {
      return;
    }
    return ReverseLinkedTable.__super__.invokeOnFields.call(this, mode, dive_nested, callback, data, depth);
  };

  ReverseLinkedTable.prototype.getSaveData = function(data, save_data, opts) {
    var a, i, idx, len, ref, row, row_on_load;
    if (opts.demo_data) {
      return;
    } else {
      ReverseLinkedTable.__super__.getSaveData.call(this, data, save_data, opts);
      if (opts.bulk || opts["new"] || opts.check) {
        return;
      }
      ref = save_data[this.name()];
      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
        row = ref[idx];
        row_on_load = data[this.name()][idx]._row_on_load;
        if (!row_on_load) {
          continue;
        }
        a = JSON.stringify(row);
        if (a === row_on_load && row._version > 1) {
          row._version = row._version - 1;
        }
      }
    }
  };

  ReverseLinkedTable.prototype.supportsMoreButton = function() {
    return true;
  };

  ReverseLinkedTable.prototype.moreButtonObjecttype = function() {
    return this.table.nameLocalized();
  };

  ReverseLinkedTable.prototype.name = function() {
    if (this.FieldSchema.is_hierarchical) {
      return "_reverse_nested:" + this.table.name() + ":_id_parent";
    } else {
      return "_reverse_nested:" + this.table.name() + ":" + this.FieldSchema._reverse_link_column._other_column.name;
    }
  };

  ReverseLinkedTable.prototype.nameLocalized = function() {
    return this.FieldSchema._name_localized;
  };

  return ReverseLinkedTable;

})(NestedTable);
// Generated by CoffeeScript 1.10.0
var StandardField,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

StandardField = (function(superClass) {
  extend(StandardField, superClass);

  function StandardField() {
    return StandardField.__super__.constructor.apply(this, arguments);
  }

  StandardField.prototype.name = function() {
    return "_standard";
  };

  StandardField.prototype.fullName = function() {
    return this.name();
  };

  StandardField.prototype.getSaveData = function() {};

  StandardField.prototype.nameLocalized = function() {
    return $$("standard.field.name");
  };

  StandardField.prototype.isExpertCommon = function(mode) {
    return true;
  };

  StandardField.prototype.getDataForReplacementRecord = function(data) {
    var ref, ref1, txt;
    txt = ez5.loca.getBestFrontendValue((ref = data._standard) != null ? (ref1 = ref["1"]) != null ? ref1.text : void 0 : void 0);
    if (isEmpty(txt)) {
      return;
    }
    data = {};
    data["1.text"] = txt;
    return data;
  };

  StandardField.prototype.isTopLevelField = function() {
    return true;
  };

  StandardField.prototype.isVisible = function(mode, opts) {
    switch (mode) {
      case "sort":
        return true;
      default:
        return false;
    }
  };

  StandardField.prototype.isSortUnique = function() {
    return true;
  };

  StandardField.prototype.getSortField = function() {
    return "_standard.1.text";
  };

  return StandardField;

})(Field);
// Generated by CoffeeScript 1.10.0
var StringColumn,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

StringColumn = (function(superClass) {
  extend(StringColumn, superClass);

  function StringColumn() {
    return StringColumn.__super__.constructor.apply(this, arguments);
  }

  StringColumn.prototype._getSearchFilter = function(data, key) {
    return this.getSearchFilterTokenized(data[key]);
  };

  StringColumn.prototype.getTokenizer = function() {
    return new Tokenizer();
  };

  return StringColumn;

})(TextColumn);
// Generated by CoffeeScript 1.10.0
var SystemObjectIdColumn,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SystemObjectIdColumn = (function(superClass) {
  extend(SystemObjectIdColumn, superClass);

  function SystemObjectIdColumn() {
    return SystemObjectIdColumn.__super__.constructor.apply(this, arguments);
  }

  SystemObjectIdColumn.prototype.nameLocalized = function() {
    return $$("base.system_object_id_column.name");
  };

  SystemObjectIdColumn.prototype.isVisible = function(mode, opts) {
    switch (mode) {
      case "sort":
      case "expert":
      case "csv-import":
        return true;
      default:
        return false;
    }
  };

  SystemObjectIdColumn.prototype.renderEditorInput = function(data, top_level_data) {
    return SystemObjectIdColumn.__super__.renderEditorInput.call(this, top_level_data);
  };

  SystemObjectIdColumn.prototype.renderDetailOutput = function(data, top_level_data) {
    return SystemObjectIdColumn.__super__.renderDetailOutput.call(this, top_level_data);
  };

  SystemObjectIdColumn.prototype.getSaveData = function(data, save_data, opts) {
    if (opts.demo_data) {
      save_data._top_level[this.name()] = this.__getDemoData();
      return;
    }
  };

  SystemObjectIdColumn.prototype.__getDemoData = function() {
    return Math.floor(Math.random() * 100) + 1;
  };

  SystemObjectIdColumn.prototype.name = function() {
    return "_system_object_id";
  };

  SystemObjectIdColumn.prototype.fullName = function() {
    return this.name();
  };

  SystemObjectIdColumn.prototype.isEmpty = function(data) {
    return isEmpty(data != null ? data[this.name()] : void 0);
  };

  SystemObjectIdColumn.prototype.isExpertCommon = function(mode) {
    return true;
  };

  SystemObjectIdColumn.prototype.isSortUnique = function() {
    return true;
  };

  SystemObjectIdColumn.prototype.isSortGroupable = function() {
    return false;
  };

  SystemObjectIdColumn.prototype.isTopLevelField = function() {
    return true;
  };

  return SystemObjectIdColumn;

})(PrimaryKeyColumn);
// Generated by CoffeeScript 1.10.0
var GlobalObjectIdColumn,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GlobalObjectIdColumn = (function(superClass) {
  extend(GlobalObjectIdColumn, superClass);

  function GlobalObjectIdColumn() {
    return GlobalObjectIdColumn.__super__.constructor.apply(this, arguments);
  }

  GlobalObjectIdColumn.prototype.nameLocalized = function() {
    return $$("base.global_object_id_column.name");
  };

  GlobalObjectIdColumn.prototype.isVisible = function(mode, opts) {
    switch (mode) {
      case "csv-import":
        return true;
      default:
        return false;
    }
  };

  GlobalObjectIdColumn.prototype.__getDemoData = function() {
    return GlobalObjectIdColumn.__super__.__getDemoData.call(this) + "@local";
  };

  GlobalObjectIdColumn.prototype.name = function() {
    return "_global_object_id";
  };

  GlobalObjectIdColumn.prototype.getCSVDestinationFields = function() {
    var field;
    field = {
      format: "string",
      field: this,
      use_for_match_existing: true,
      supports_hierarchy: false,
      read_only: true
    };
    return [field];
  };

  return GlobalObjectIdColumn;

})(SystemObjectIdColumn);
// Generated by CoffeeScript 1.10.0
var TagsField, TagsFieldForBaseConfig, TagsFieldForEditor,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

TagsField = (function(superClass) {
  extend(TagsField, superClass);

  function TagsField() {
    return TagsField.__super__.constructor.apply(this, arguments);
  }

  TagsField.prototype.name = function() {
    return "_tags";
  };

  TagsField.prototype.nameLocalized = function() {
    return $$("tags.field.name");
  };

  TagsField.prototype.getReplacementRecord = function() {};

  TagsField.prototype.isExpertCommon = function(mode) {
    return true;
  };

  TagsField.prototype.getDataAsString = function(data, top_level_data) {
    var str;
    str = JSON.stringify(top_level_data[this.name()]);
    return str;
  };

  TagsField.prototype.getDataForFieldData = function(data, top_level_data) {
    return top_level_data;
  };

  TagsField.prototype.getSaveData = function(data, save_data, opts) {
    var i, len, ref, tag, tags;
    if (opts.demo_data) {
      tags = [];
      ref = ez5.tagForm.getAllTags();
      for (i = 0, len = ref.length; i < len; i++) {
        tag = ref[i];
        if (tag.getDisplayType() === "hidden") {
          continue;
        }
        tags.push({
          _id: tag.getId()
        });
      }
      save_data._top_level._tags = tags;
      return;
    }
    tags = data._top_level[this.name()] || [];
    if (tags.length === 0 && data._top_level._template) {
      tags = data._top_level._template[this.name()] || [];
    }
    save_data._top_level._tags = tags;
    return this.getBulkSaveData(data, save_data._top_level, opts, "mode");
  };

  TagsField.prototype.isEmpty = function(data, top_level_data, opts) {
    var ref;
    if (((ref = top_level_data[this.name()]) != null ? ref.length : void 0) > 0) {
      return false;
    } else {
      return true;
    }
  };

  TagsField.prototype.isTopLevelField = function() {
    return true;
  };

  TagsField.prototype.isVisible = function(mode, opts) {
    if (mode === "editor-header" || mode === "editor-header-template" || mode === "editor-header-bulk") {
      if (this.mask.schema.system_fields.tags.edit.mode === "off") {
        return false;
      } else {
        return true;
      }
    } else if ((mode === "detail-header" || mode === "expert" || mode === "text") && this.mask.schema.system_fields.tags.output.mode !== "off") {
      if (opts.history || mode !== 'detail-header') {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  };

  TagsField.prototype.isReadOnly = function(data, top_level_data) {
    if (this.mask.schema.system_fields.tags.edit.mode !== "edit") {
      return true;
    } else {
      return false;
    }
  };

  TagsField.prototype.getQueryFieldBadge = function(data) {
    var i, len, ref, tag, txt, value;
    if (data[(this.name()) + ":unset"]) {
      value = $$("field.search.badge.without");
    } else {
      txt = [];
      ref = ez5.tagForm.getTagsByData(data[this.name()]);
      for (i = 0, len = ref.length; i < len; i++) {
        tag = ref[i];
        txt.push(tag.getDisplayName());
      }
      value = txt.join(", ");
    }
    return {
      name: this.nameLocalized(),
      value: value
    };
  };

  TagsField.prototype.getSearchFilter = function(data) {
    var filter, ref, tag;
    filter = {
      type: "complex",
      search: [
        {
          type: "in",
          bool: "must",
          fields: ["_objecttype"],
          "in": [this.path()]
        }, {
          type: "in",
          bool: "must",
          fields: [this.name() + "._id"]
        }
      ]
    };
    if (data[(this.name()) + ":unset"]) {
      filter.search[1]["in"] = [null];
    } else if (((ref = data[this.name()]) != null ? ref.length : void 0) > 0) {
      filter.search[1]["in"] = (function() {
        var i, len, ref1, results;
        ref1 = data[this.name()];
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
          tag = ref1[i];
          results.push(tag._id);
        }
        return results;
      }).call(this);
    } else {
      filter = null;
    }
    return filter;
  };

  TagsField.prototype.fullName = function() {
    return this.name();
  };

  TagsField.prototype.__getFormPopover = function(data, opts) {
    var _data, empty_loca_key, fields, form, i, j, k, l, len, len1, len2, len3, options, ref, ref1, ref2, ref3, tag, tag_id, tg;
    if (opts == null) {
      opts = {};
    }
    CUI.Element.readOpts(opts, "TagsField.__getFormPopover", {
      render_choice: {
        mandatory: true,
        check: Boolean
      },
      show_tag: {
        mandatory: true,
        check: Function
      },
      mode: {
        check: String
      },
      has_template: {
        check: Boolean
      },
      set_default_only: {
        check: Boolean
      }
    });
    _data = {
      ids: []
    };
    ref = data[this.name()];
    for (i = 0, len = ref.length; i < len; i++) {
      tag = ref[i];
      _data.ids.push(tag._id);
    }
    fields = [];
    ref1 = ez5.tagForm.tagGroups;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      tg = ref1[j];
      options = [];
      ref2 = tg.children;
      for (k = 0, len2 = ref2.length; k < len2; k++) {
        tag = ref2[k];
        if (!opts.show_tag(tag, _data.ids)) {
          continue;
        }
        if (options.length === 0) {
          fields.push({
            type: Options,
            name: "ids",
            horizontal: false,
            radio: tg.isChoice() && opts.render_choice,
            min_checked: 0,
            title: tg.getDisplayName(),
            options: options
          });
        }
        options.push({
          content: tag.getLabel(),
          value: tag.getId()
        });
      }
    }
    if (opts.set_default_only) {
      data[this.name()].splice(0);
      ref3 = _data.ids;
      for (l = 0, len3 = ref3.length; l < len3; l++) {
        tag_id = ref3[l];
        data[this.name()].push({
          _id: tag_id
        });
      }
      return;
    }
    if (fields.length === 0) {
      return new EmptyLabel({
        text: $$("tag.form-popover.no_tags_available")
      });
    }
    if (opts.mode === "new" && opts.has_template) {
      empty_loca_key = "tags.field.set_by_template";
    } else {
      empty_loca_key = "tag.form-popover.empty";
    }
    form = new FormPopover({
      popover: {
        "class": "ez5-tag-form-popover",
        pane: {
          padded: true
        }
      },
      button: {
        loca_key: "tags.field.button.open_popover"
      },
      data: _data,
      renderDisplayContent: (function(_this) {
        return function() {
          var len4, m, ref4;
          data[_this.name()].splice(0);
          ref4 = _data.ids;
          for (m = 0, len4 = ref4.length; m < len4; m++) {
            tag_id = ref4[m];
            data[_this.name()].push({
              _id: tag_id
            });
          }
          return _this.renderDetailOutput(null, data, {
            empty_loca_key: empty_loca_key
          });
        };
      })(this),
      fields: fields
    });
    form.start();
    data[this.name() + ":popover"] = form;
    return form;
  };

  TagsField.prototype.updateTags = function(data, tags) {
    var __tag, _tag, current_tags, group, i, j, len, len1, popover, ref, tag;
    popover = data[this.name() + ":popover"];
    current_tags = popover.getData().ids;
    for (i = 0, len = tags.length; i < len; i++) {
      _tag = tags[i];
      tag = ez5.tagForm.findTagByAnyId(_tag._id);
      group = tag.tagFormGroup;
      if (group.getType() === "choice") {
        ref = group.children;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          __tag = ref[j];
          removeFromArray(__tag.getId(), current_tags);
        }
      }
      pushOntoArray(tag.getId(), current_tags);
    }
    popover.displayValue();
    popover.triggerDataChanged();
    return this;
  };

  TagsField.prototype.__showTag = function(tag, arr, _opts) {
    var _tag, av_tag, i, len, opts, ref, ref1, show, tag_id;
    if (_opts == null) {
      _opts = {};
    }
    opts = CUI.Element.readOpts(_opts, 'TagsField.__showTag', {
      dbInfo: {
        mandatory: !_opts.demo,
        check: DbInfo
      },
      set_default_data: {
        mandatory: !_opts.demo,
        check: Boolean,
        "default": false
      },
      demo: {
        mandatory: true,
        check: Boolean,
        "default": false
      }
    });
    show = (ref = tag.getDisplayType()) === "search" || ref === "detail" || ref === "editor";
    if (!show) {
      if (arr) {
        removeFromArray(tag.getId(), arr);
      }
      return false;
    }
    if (opts.demo) {
      return true;
    }
    tag_id = tag.getId();
    av_tag = opts.dbInfo.tagIdAvailable(tag.getId());
    if (!av_tag) {
      if (arr) {
        removeFromArray(tag.getId(), arr);
      }
      return false;
    }
    if (!arr) {
      return true;
    }
    if (av_tag.is_default && opts.set_default_data) {
      if (tag.tagFormGroup.isChoice()) {
        ref1 = tag.tagFormGroup.children;
        for (i = 0, len = ref1.length; i < len; i++) {
          _tag = ref1[i];
          removeFromArray(_tag.getId(), arr);
        }
      }
      if (indexOf.call(arr, tag_id) < 0) {
        arr.push(tag_id);
      }
    }
    return true;
  };

  TagsField.prototype.initData = function(top_level_data, _opts) {
    var opts, set_default_data;
    if (_opts == null) {
      _opts = {};
    }
    opts = CUI.Element.readOpts(_opts, 'TagsField.__showTag', {
      dbInfo: {
        mandatory: !_opts.demo,
        check: DbInfo
      },
      mode: {
        mandatory: !_opts.demo,
        check: String
      },
      demo: {
        mandatory: true,
        check: Boolean,
        "default": false
      }
    });
    if (top_level_data[this.name()]) {
      return;
    }
    top_level_data[this.name()] = [];
    if (opts.mode !== "new") {
      return;
    }
    set_default_data = null;
    if (top_level_data._template) {
      if (!top_level_data._template[this.name()]) {
        top_level_data._template[this.name()] = [];
        set_default_data = top_level_data._template;
      }
    } else {
      set_default_data = top_level_data;
    }
    console.debug("initData... setting default?", set_default_data);
    if (!set_default_data) {
      return;
    }
    return this.__getFormPopover(set_default_data, {
      set_default_only: true,
      render_choice: true,
      show_tag: (function(_this) {
        return function(tag, arr) {
          return _this.__showTag(tag, arr, {
            dbInfo: opts.dbInfo,
            demo: opts.demo,
            set_default_data: true
          });
        };
      })(this),
      mode: opts.mode
    });
  };

  TagsField.prototype.renderEditorInput = function(data, top_level_data, renderOpts) {
    var div, form, o, old_tags, options, opts, ref, ref1, ref2;
    this.renderOpts = renderOpts;
    opts = {
      dbInfo: (ref = this.renderOpts.editor) != null ? ref.editor_data.dbInfo : void 0,
      mode: (ref1 = this.renderOpts.editor) != null ? ref1.editor_data.mode : void 0,
      demo: top_level_data.__version === "TEMP"
    };
    this.initData(top_level_data, opts);
    old_tags = copyObject(top_level_data[this.name()], true);
    form = this.__getFormPopover(top_level_data, {
      render_choice: true,
      show_tag: (function(_this) {
        return function(tag, arr) {
          return _this.__showTag(tag, arr, {
            dbInfo: opts.dbInfo,
            demo: opts.demo
          });
        };
      })(this),
      mode: opts.mode,
      has_template: !!top_level_data._template
    });
    Events.listen({
      type: "data-changed",
      node: form,
      call: (function(_this) {
        return function() {
          var ref2;
          return Events.trigger({
            type: "tags-field-changed",
            node: form,
            info: {
              old_tags: old_tags,
              new_tags: top_level_data[_this.name()],
              editor_has_changes: (ref2 = _this.renderOpts.editor) != null ? ref2.hasChanges() : void 0
            }
          });
        };
      })(this)
    });
    if ((ref2 = this.renderOpts.mode) !== "editor-bulk" && ref2 !== "editor-header-bulk") {
      return form.DOM;
    }
    div = $div("ez5-tags-field-group-mode");
    div.append(form.DOM);
    options = (function() {
      var i, len, ref3, results;
      ref3 = ["add", "replace", "remove", "remove_all"];
      results = [];
      for (i = 0, len = ref3.length; i < len; i++) {
        o = ref3[i];
        results.push("bulk_tag_" + o);
      }
      return results;
    })();
    div.append(this.getBulkOptionsForm(options, data, "mode"));
    return div;
  };

  TagsField.prototype.renderSearchInput = function(data) {
    var form;
    if (!data[this.name()]) {
      data[this.name()] = [];
    }
    form = this.__getFormPopover(data, {
      render_choice: false,
      show_tag: (function(_this) {
        return function(tag) {
          var ref;
          return (ref = tag.getDisplayType()) === "search" || ref === "detail" || ref === "editor";
        };
      })(this)
    });
    Events.listen({
      type: "data-changed",
      node: form,
      call: (function(_this) {
        return function() {
          return Events.trigger({
            type: "search-input-change",
            node: form
          });
        };
      })(this)
    });
    return form.DOM;
  };

  TagsField.prototype.renderDetailOutput = function(data, top_level_data, opts) {
    var div, empty_loca_key, i, len, tag, tags;
    if (opts == null) {
      opts = {};
    }
    tags = ez5.tagForm.getTagsByData(top_level_data[this.name()]);
    if (tags.length > 0) {
      div = $div("tags-field");
      for (i = 0, len = tags.length; i < len; i++) {
        tag = tags[i];
        div.append(tag.getLabel(true, true).DOM);
      }
      return div;
    } else {
      empty_loca_key = opts.empty_loca_key || "tag.form-popover.empty";
      return new EmptyLabel({
        text: $$(empty_loca_key)
      }).DOM;
    }
  };

  return TagsField;

})(Field);

TagsFieldForEditor = (function(superClass) {
  extend(TagsFieldForEditor, superClass);

  function TagsFieldForEditor() {}

  return TagsFieldForEditor;

})(TagsField);

TagsFieldForBaseConfig = (function(superClass) {
  extend(TagsFieldForBaseConfig, superClass);

  function TagsFieldForBaseConfig(opts) {
    if (opts == null) {
      opts = {};
    }
    CUI.Element.readOpts.call(this, opts, "new TagsField", {
      name: {
        mandatory: true,
        check: String
      }
    });
  }

  TagsFieldForBaseConfig.prototype.name = function() {
    return this._name;
  };

  TagsFieldForBaseConfig.prototype.render = function(data) {
    return this.renderSearchInput(data);
  };

  return TagsFieldForBaseConfig;

})(TagsField);

CUI.ready(function() {
  return Events.registerEvent({
    type: "tags-field-changed",
    bubble: true
  });
});
// Generated by CoffeeScript 1.10.0
var TextMultiColumn,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TextMultiColumn = (function(superClass) {
  extend(TextMultiColumn, superClass);

  function TextMultiColumn() {
    return TextMultiColumn.__super__.constructor.apply(this, arguments);
  }

  TextMultiColumn.prototype.getElementOpts = function(mode) {
    switch (mode) {
      case "expert":
        return {
          name: this.name(),
          type: Input
        };
      default:
        return {
          name: this.name(),
          textarea: true,
          content_size: !bowser.msie,
          type: Input
        };
    }
  };

  TextMultiColumn.prototype.getManageOverflow = function() {
    return true;
  };

  TextMultiColumn.prototype.isVisible = function(mode, opts) {
    if (!TextMultiColumn.__super__.isVisible.call(this, mode, opts) || mode === 'fulltext') {
      return false;
    } else {
      return true;
    }
  };

  return TextMultiColumn;

})(TextColumn);
// Generated by CoffeeScript 1.10.0
var TreeColumn,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

TreeColumn = (function(superClass) {
  extend(TreeColumn, superClass);

  function TreeColumn(mask) {
    this.mask = mask;
    Field.prototype.constructor.call(this, this.mask);
    this.__parentInfo = this.mask.schema.system_fields.parent;
  }

  TreeColumn.prototype.name = function() {
    return "_id_parent";
  };

  TreeColumn.prototype.addToCollection = function(data, top_level_data, collection) {
    return this.__addToCollection(this.__getObjectFromPath(top_level_data), collection);
  };

  TreeColumn.prototype.getOutputStandard = function() {
    return {
      design: "normal",
      format: "comma"
    };
  };

  TreeColumn.prototype.nameLocalized = function() {
    return $$("main.editor.parent");
  };

  TreeColumn.prototype.renderStandard = function() {};

  TreeColumn.prototype.getFirstStandardEASColumn = function() {};

  TreeColumn.prototype.__getLinkMaskId = function() {
    if (this.mask.name() === "_all_fields") {
      return "ALL_FIELDS";
    } else if (this.__parentInfo.mask_id === "SAME") {
      return this.mask.id();
    } else {
      return this.__parentInfo.mask_id;
    }
  };

  TreeColumn.prototype.__getLinkMaskTableId = function() {
    return this.mask.table.id();
  };

  TreeColumn.prototype.__getLinkMaskInline = function() {
    return this.__parentInfo.inline;
  };

  TreeColumn.prototype.isReadOnly = function(data, top_level_data) {
    var ref;
    if (this.__parentInfo.edit.mode !== "edit" || ((ref = this.__parentInfo.custom_settings) != null ? ref.editor_frontend_mode : void 0) === "readonly") {
      return true;
    } else {
      return false;
    }
  };

  TreeColumn.prototype.getReplacementRecord = function(data, key_prefix, use_array, record) {
    if (use_array == null) {
      use_array = false;
    }
    return Field.prototype.getReplacementRecord.call(this, data, key_prefix, use_array, record);
  };

  TreeColumn.prototype.checkValue = function(data, top_level_data, opts) {
    return true;
  };

  TreeColumn.prototype.isVisible = function(mode, opts) {
    var ref;
    switch (mode) {
      case "editor-header":
      case "editor-header-template":
      case "editor-header-bulk":
        if (this.__parentInfo.edit.mode !== "off" && ((ref = this.__parentInfo.custom_settings) != null ? ref.editor_frontend_mode : void 0) !== "hide") {
          return true;
        }
        break;
      case "sort":
      case "detail-header":
        if (this.__parentInfo.output.mode === "show") {
          return true;
        }
    }
    return false;
  };

  TreeColumn.prototype.getPlaceholderTextForEditor = function(data, top_level_data) {
    var ref;
    if ((ref = data._template) != null ? ref[this.name()] : void 0) {
      return new ResultObject().setData(this.__getObjectFromPath(top_level_data._template)).renderText();
    } else {
      return null;
    }
  };

  TreeColumn.prototype.__getObjectFromPath = function(top_level_data) {
    var pdata;
    pdata = copyObject(top_level_data._path[top_level_data._path.length - 2], true);
    pdata._path = copyObject(top_level_data._path.slice(0, top_level_data._path.length - 1), true);
    return pdata;
  };

  TreeColumn.prototype.renderDetailOutput = function(data, top_level_data, opts) {
    if (opts == null) {
      opts = {};
    }
    if (!top_level_data._path || top_level_data._path.length === 1) {
      return new EmptyLabel({
        text: $$("tree.column.no_parent_object")
      }).DOM;
    } else {
      return TreeColumn.__super__.renderDetailOutput.call(this, {
        _id_parent: this.__getObjectFromPath(top_level_data)
      }, null, opts);
    }
  };

  TreeColumn.prototype.renderEditorInput = function(data, top_level_data, opts) {
    if (opts == null) {
      opts = {};
    }
    return TreeColumn.__super__.renderEditorInput.call(this, data, top_level_data, opts);
  };

  TreeColumn.prototype.setData = function(data, top_level_data, linked_object_data) {
    var i, key, keys, len, path_obj;
    keys = ["_format", "_global_object_id", "_system_object_id", "_mask", "_objecttype", "_standard"];
    keys.push(top_level_data._objecttype);
    path_obj = {};
    for (i = 0, len = keys.length; i < len; i++) {
      key = keys[i];
      path_obj[key] = copyObject(top_level_data[key], true);
    }
    if (!linked_object_data) {
      top_level_data._path = [path_obj];
      return data[this.name()] = null;
    } else {
      data[this.name()] = linked_object_data[linked_object_data._objecttype]._id;
      assert(linked_object_data._path, "TreeColumn.setData", "_path not set in data", {
        data: data,
        top_level_data: top_level_data,
        linked_object_data: linked_object_data,
        TreeColumn: this
      });
      top_level_data._path = linked_object_data._path.slice(0);
      return top_level_data._path.push(path_obj);
    }
  };

  TreeColumn.prototype.getCollectionTemporary = function(data, top_level_data) {
    return new CollectionTemporary({
      hasEASFields: this.mask.getEASFields("detail").length > 0,
      isObjectInsertable: (function(_this) {
        return function(collectionObject) {
          var ids, p_el, ref;
          if (!collectionObject.getObject()._path) {
            return true;
          }
          ids = (function() {
            var i, len, ref, results;
            ref = collectionObject.getObject()._path;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              p_el = ref[i];
              results.push(p_el[p_el._objecttype]._id);
            }
            return results;
          })();
          if (ref = data._id, indexOf.call(ids, ref) >= 0) {
            return false;
          } else {
            return true;
          }
        };
      })(this)
    });
  };

  TreeColumn.prototype.getSaveData = function(data, save_data, opts) {
    var ref;
    if (save_data == null) {
      save_data = {};
    }
    if (opts == null) {
      opts = {};
    }
    if (!isNull(data[this.name()]) || opts.bulk) {
      save_data[this.name()] = data[this.name()];
    } else if ((ref = data._template) != null ? ref[this.name()] : void 0) {
      save_data[this.name()] = data._template[this.name()];
    }
    if (opts.copy) {
      save_data._top_level._path = copyObject(data._top_level._path, true);
      save_data._top_level._path[save_data._top_level._path.length - 1][save_data._top_level._objecttype]._id = null;
    }
    return save_data;
  };

  return TreeColumn;

})(LinkedObject);
// Generated by CoffeeScript 1.10.0
var VersionColumn,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

VersionColumn = (function(superClass) {
  extend(VersionColumn, superClass);

  function VersionColumn() {
    return VersionColumn.__super__.constructor.apply(this, arguments);
  }

  VersionColumn.prototype.name = function() {
    return "_version";
  };

  VersionColumn.prototype.nameLocalized = function() {
    return $$("base.version_column.name");
  };

  VersionColumn.prototype.getSaveData = function(data, save_data, opts) {
    if (opts.copy) {
      return;
    }
    if (data._version) {
      assert(data._id, "VersionColumn.getSaveData", "data._version is set, but data._id is not: unable to get save data.", {
        data: data,
        save_data: save_data
      });
      return save_data._version = data._version + 1;
    } else {
      assert(!data._id, "VersionColumn.getSaveData", "data._version is not set, but data._id is: unable to get save data.", {
        data: data,
        save_data: save_data
      });
      return save_data._version = 1;
    }
  };

  VersionColumn.prototype.isVisibleToSaveData = function() {
    return true;
  };

  VersionColumn.prototype.isVisible = function(mode, opts) {
    return false;
  };

  VersionColumn.prototype.isSourceForMapping = function(required_type) {
    if (required_type["export"]) {
      return true;
    } else {
      return false;
    }
  };

  VersionColumn.prototype.isEmpty = function() {
    return false;
  };

  VersionColumn.prototype.hasUserData = function(data) {
    return false;
  };

  VersionColumn.prototype.getDataAsString = function(data) {
    return data._version;
  };

  VersionColumn.prototype.renderDetailOutput = function(data) {
    return new Label({
      text: data._version
    }).DOM;
  };

  VersionColumn.prototype.renderEditorInput = function(data, top_level_data) {
    return $span().text(data._version || 1);
  };

  VersionColumn.prototype.getOutputStandard = function() {
    return null;
  };

  return VersionColumn;

})(Field);
// Generated by CoffeeScript 1.10.0
var MultipleFieldsContainer,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

MultipleFieldsContainer = (function(superClass) {
  extend(MultipleFieldsContainer, superClass);

  function MultipleFieldsContainer(_fields) {
    var f, i, len;
    if (_fields == null) {
      _fields = [];
    }
    this.sortExtraOpts = bind(this.sortExtraOpts, this);
    this.fields = [];
    for (i = 0, len = _fields.length; i < len; i++) {
      f = _fields[i];
      this.addField(f);
    }
  }

  MultipleFieldsContainer.prototype.addLinkedObjecttype = function(lot, filter_by_ot_name) {
    var count, fn, lfs, ref;
    if (filter_by_ot_name == null) {
      filter_by_ot_name = null;
    }
    this.setNameLocalized(lot.nameLocalized());
    count = 0;
    ref = lot._linked_object_fields_by_name;
    for (fn in ref) {
      lfs = ref[fn];
      if (!filter_by_ot_name || lfs[0].getMainMask().table.name() === filter_by_ot_name) {
        count++;
        this.addField(lfs[0]);
      }
    }
    return count;
  };

  MultipleFieldsContainer.prototype.setNameLocalized = function(__nameLocalized) {
    this.__nameLocalized = __nameLocalized;
  };

  MultipleFieldsContainer.prototype.addField = function(f) {
    return this.fields.push(f);
  };

  MultipleFieldsContainer.prototype.getSearchFilter = function(data, key) {
    var f, filter, i, idx, len, multi_filter, ref;
    if (key == null) {
      key = this.fields[0].name();
    }
    multi_filter = {
      type: "complex",
      search: []
    };
    ref = this.fields;
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      f = ref[idx];
      filter = f.getSearchFilterWithNested(data, key);
      if (filter) {
        filter.bool = filter._unnest ? "must" : "should";
        multi_filter.search.push(filter);
      }
      if (f.isTopLevelField()) {
        break;
      }
    }
    if (multi_filter.search.length) {
      return multi_filter;
    } else {
      return null;
    }
  };

  MultipleFieldsContainer.prototype.getSearchFilterWithNested = function(data, key) {
    return this.getSearchFilter(data, key);
  };

  MultipleFieldsContainer.prototype.getSortField = function(data) {
    var f, i, len, ref, sort_fields;
    sort_fields = [];
    ref = this.fields;
    for (i = 0, len = ref.length; i < len; i++) {
      f = ref[i];
      sort_fields.push(f.getSortField(data));
      if (f.isSortUnique()) {
        break;
      }
    }
    return sort_fields;
  };

  MultipleFieldsContainer.prototype.fullName = function() {
    var f;
    return ((function() {
      var i, len, ref, results;
      ref = this.fields;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        f = ref[i];
        results.push(f.fullName());
      }
      return results;
    }).call(this)).join("-");
  };

  MultipleFieldsContainer.prototype.needsRowMove = function() {
    return false;
  };

  MultipleFieldsContainer.prototype.name = function() {
    return this.fields[0].name();
  };

  MultipleFieldsContainer.prototype.getLabel = function(mode) {
    return new Label({
      text: this.nameLocalized(),
      multiline: true
    });
  };

  MultipleFieldsContainer.prototype.initForListView = function() {};

  MultipleFieldsContainer.prototype.renderForListView = function(listViewEditorTreeNode) {
    return Field.prototype.renderForListView.call(this, listViewEditorTreeNode);
  };

  MultipleFieldsContainer.prototype.addAfterRender = function(listViewEditorTreeNode) {
    return Field.prototype.addAfterRender.call(this, listViewEditorTreeNode);
  };

  MultipleFieldsContainer.prototype.setFieldData = function() {
    return Field.prototype.setFieldData.apply(this, arguments);
  };

  MultipleFieldsContainer.prototype.getDataForFieldData = function() {
    return Field.prototype.getDataForFieldData.apply(this.fields[0], arguments);
  };

  MultipleFieldsContainer.prototype.getSearchUnsetElement = function(data, listViewRow) {
    return this.fields[0].getSearchUnsetElement(data, listViewRow);
  };

  MultipleFieldsContainer.prototype.getClass = function() {
    return this.fields[0].getClass() + " multiple-fields-container";
  };

  MultipleFieldsContainer.prototype.isSortGroupable = function() {
    return this.fields[0].isSortGroupable();
  };

  MultipleFieldsContainer.prototype.formatSortGroupable = function(item, filter, idx) {
    return this.fields[0].formatSortGroupable(item, filter, idx);
  };

  MultipleFieldsContainer.prototype.isTopLevelField = function() {
    return this.fields[0].isTopLevelField();
  };

  MultipleFieldsContainer.prototype.nameLocalized = function() {
    if (!isEmpty(this.__nameLocalized)) {
      return this.__nameLocalized;
    } else {
      return this.fields[0].nameLocalized();
    }
  };

  MultipleFieldsContainer.prototype.getQueryFieldBadge = function(data) {
    return this.fields[0].getQueryFieldBadge(data, this);
  };

  MultipleFieldsContainer.prototype.renderSearchInput = function(data, opts) {
    var inp;
    if (opts == null) {
      opts = {};
    }
    opts.fields = this.fields;
    inp = this.fields[0].renderSearchInput(data, opts);
    return inp;
  };

  MultipleFieldsContainer.prototype.sortExtraOpts = function(data) {
    return this.fields[0].sortExtraOpts(data);
  };

  MultipleFieldsContainer.prototype.getSignature = function() {
    var f;
    return {
      "class": "MultipleFieldsContainer",
      fields: (function() {
        var i, len, ref, results;
        ref = this.fields;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          f = ref[i];
          results.push(f.getSignature());
        }
        return results;
      }).call(this)
    };
  };

  MultipleFieldsContainer.fromSignature = function(signature) {
    var f, fields, i, len, ref;
    fields = [];
    ref = signature.fields;
    for (i = 0, len = ref.length; i < len; i++) {
      f = ref[i];
      fields.push(window[f["class"]].fromSignature(f));
    }
    fields;
    return new window[signature["class"]](fields);
  };

  return MultipleFieldsContainer;

})(CUI.Dummy);
// Generated by CoffeeScript 1.10.0
var MaskFieldSelector, MaskFieldSelectorDetail,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

MaskFieldSelector = (function(superClass) {
  extend(MaskFieldSelector, superClass);

  function MaskFieldSelector() {
    return MaskFieldSelector.__super__.constructor.apply(this, arguments);
  }

  MaskFieldSelector.prototype.initOpts = function() {
    MaskFieldSelector.__super__.initOpts.call(this);
    return this.addOpts({
      dbInfo: {
        mandatory: true,
        check: DbInfo
      },
      mask_name: {
        mandatory: true,
        "default": {},
        check: String
      },
      onChanged: {
        mandatory: true,
        check: Function
      },
      form: {
        check: "PlainObject"
      },
      show_all_fields_mask: {
        "default": false,
        check: Boolean
      }
    });
  };

  MaskFieldSelector.prototype.getSelect = function() {
    var current_mask_name, data, df, i, len, mask, mask_options, ref, tooltip;
    mask_options = [];
    ref = this.availableMasks();
    for (i = 0, len = ref.length; i < len; i++) {
      mask = ref[i];
      if (mask.name() === "_all_fields" && !this._show_all_fields_mask) {
        continue;
      }
      mask_options.push({
        value: mask.name(),
        text: mask.nameLocalized()
      });
    }
    data = {
      mask_name: this._mask_name
    };
    current_mask_name = data.mask_name;
    if (mask_options.length > 1) {
      tooltip = {
        text: $$("mask.field.selector.tooltip")
      };
    } else {
      tooltip = void 0;
    }
    df = Select.newSelectOrOutput({
      name: "mask_name",
      form: this._form,
      data: data,
      tooltip: tooltip,
      undo_and_changed_support: false,
      onDataChanged: (function(_this) {
        return function() {
          var ret;
          ret = _this._onChanged(current_mask_name, data.mask_name);
          assert(isPromise(ret), "MaskFieldSelector.renderInput", "onChanged needs to return Promise", {
            ret: ret
          });
          ret.done(function() {
            return current_mask_name = data.mask_name;
          });
          ret.fail(function() {
            data.mask_name = current_mask_name;
            return df.displayValue();
          });
        };
      })(this),
      options: mask_options,
      data: data
    });
    return df;
  };

  MaskFieldSelector.prototype.availableMasks = function() {
    return this._dbInfo.availableMasks();
  };

  return MaskFieldSelector;

})(CUI.Element);

MaskFieldSelectorDetail = (function(superClass) {
  extend(MaskFieldSelectorDetail, superClass);

  function MaskFieldSelectorDetail() {
    return MaskFieldSelectorDetail.__super__.constructor.apply(this, arguments);
  }

  MaskFieldSelectorDetail.prototype.initOpts = function() {
    MaskFieldSelectorDetail.__super__.initOpts.call(this);
    this.removeOpt("dbInfo");
    return this.addOpts({
      masks: {
        check: function(v) {
          return (v != null ? v.length : void 0) > 0;
        }
      }
    });
  };

  MaskFieldSelectorDetail.prototype.availableMasks = function() {
    return this._masks;
  };

  return MaskFieldSelectorDetail;

})(MaskFieldSelector);
// Generated by CoffeeScript 1.10.0
var Toolbox,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

Toolbox = (function(superClass) {
  extend(Toolbox, superClass);

  function Toolbox() {
    return Toolbox.__super__.constructor.apply(this, arguments);
  }

  Toolbox.getMenuItems = function(tools, toolboxInst, empty_fallback) {
    var i, items, last_group, len, ref, tool;
    if (empty_fallback == null) {
      empty_fallback = false;
    }
    items = [];
    last_group = null;
    ref = ToolboxTool.sortTools(tools.slice(0));
    for (i = 0, len = ref.length; i < len; i++) {
      tool = ref[i];
      if (last_group && last_group !== tool.getSortGroup()) {
        items.push({
          divider: true
        });
      }
      last_group = tool.getSortGroup();
      items.push(tool.getMenuItem(toolboxInst));
    }
    if (empty_fallback && items.length === 0) {
      items.push(new LocaLabel({
        loca_key: "toolbox.no_menu_item"
      }));
    }
    return items;
  };

  Toolbox.getMenuItemsWithFallback = function(tools) {
    return this.getMenuItems(tools, null, true);
  };

  Toolbox.prototype.showContextMenu = function(ev, tools) {
    var grouped_tools, groups, grp, i, items, items_per_group, j, len, len1, ref, t, tls;
    groups = [];
    grouped_tools = {};
    for (i = 0, len = tools.length; i < len; i++) {
      t = tools[i];
      grp = t.getGroup();
      if (!grp) {
        CUI.error("Toolbox.showContextMenu: not showing tool, group not set. tool: ", t);
        continue;
      }
      if (!grouped_tools[grp]) {
        grouped_tools[grp] = [];
        groups.push(grp);
      }
      grouped_tools[grp].push(t);
    }
    groups.sort(function(a, b) {
      return compareIndex(grouped_tools[a][0].getGroupText(), grouped_tools[b][0].getGroupText());
    });
    items = [];
    for (j = 0, len1 = groups.length; j < len1; j++) {
      grp = groups[j];
      tls = grouped_tools[grp];
      items.push({
        label: {
          text: tls[0].getGroupText()
        }
      });
      items_per_group = Toolbox.getMenuItems(tls, this);
      items.push.apply(items, items_per_group);
    }
    if (ez5.session.isDebug()) {
      items.push({
        label: new EmptyLabel({
          size: "mini",
          "class": "ez5-toolbox-hint-browser-context-menu",
          text: $$("toolbox.use_crtl_for_browser_context_menu")
        })
      });
    }
    if (items.length === 0) {
      if ((ref = this.__menu) != null) {
        ref.destroy();
      }
      this.__menu = null;
      return;
    }
    if (this.__menu) {
      return this.__menu.setItemList({
        items: items
      });
    } else {
      this.__menu = new Menu({
        "class": "ez5-toolbox-menu",
        itemList: {
          items: items
        },
        show_at_position: {
          top: ev.clientY(),
          left: ev.clientX()
        },
        onHide: (function(_this) {
          return function(menu, ev) {
            return _this.__menu = null;
          };
        })(this)
      });
      this.__menu.show(ev);
      return this;
    }
  };

  Toolbox.findToolByName = function(name, tools) {
    var i, len, tool;
    for (i = 0, len = tools.length; i < len; i++) {
      tool = tools[i];
      if (tool.getName() === name) {
        return tool;
      }
    }
    return null;
  };

  Toolbox.removeToolByName = function(name, tools) {
    return removeFromArray(name, tools, function(v) {
      return v.getName() === name;
    });
  };

  Toolbox.__group = 0;

  Toolbox.getFlyoutButtons = function(tools, btn_opts) {
    var buttons, fav, flyouts, i, item, len, opts;
    if (btn_opts == null) {
      btn_opts = {};
    }
    buttons = [];
    flyouts = this.getMenuItems(tools);
    for (i = 0, len = flyouts.length; i < len; i++) {
      item = flyouts[i];
      if (!item._tool) {
        continue;
      }
      opts = CUI.mergeMap({
        group: "toolbox-group-" + this.__group
      }, copyObject(btn_opts, true));
      fav = item._tool.getAsFavoriteButton(opts);
      if (!fav) {
        continue;
      }
      buttons.push(fav);
    }
    if (flyouts.length > 0 && flyouts.length >= buttons.length) {
      opts = CUI.mergeMap({
        group: "toolbox-group-" + this.__group,
        loca_key: "toolbox.flyout_buttonbar_side_menu_button",
        icon_right: false,
        menu: {
          items: flyouts
        }
      }, copyObject(btn_opts, true));
      buttons.push(opts);
    }
    this.__group++;
    return buttons;
  };

  Toolbox.getFlyoutButtonbar = function(tools, btn_opts) {
    if (btn_opts == null) {
      btn_opts = {};
    }
    return new Buttonbar({
      buttons: this.getFlyoutButtons(tools, btn_opts)
    });
  };

  Toolbox.mergeFlyoutButtons = function() {
    var _last_btn, btn, btns, i, idx, items, j, k, last_btn, last_btns, len, len1, len2, source_btn, source_btns, sources;
    sources = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    btns = [];
    last_btns = sources.pop();
    last_btn = last_btns[last_btns.length - 1];
    if (!last_btn) {
      return btns;
    }
    items = last_btn.menu.items;
    items.splice(0, 0, {
      label: last_btn.menu.items[0]._tool.getGroupText()
    });
    for (i = 0, len = sources.length; i < len; i++) {
      source_btns = sources[i];
      if (!((source_btns != null ? source_btns.length : void 0) > 0)) {
        continue;
      }
      _last_btn = source_btns.pop();
      for (j = 0, len1 = source_btns.length; j < len1; j++) {
        source_btn = source_btns[j];
        btns.push(source_btn);
      }
      items.push({
        label: _last_btn.menu.items[0]._tool.getGroupText()
      });
      items.push.apply(items, _last_btn.menu.items);
    }
    for (idx = k = 0, len2 = last_btns.length; k < len2; idx = ++k) {
      btn = last_btns[idx];
      btns.push(btn);
    }
    return btns;
  };

  return Toolbox;

})(CUI.Element);

CUI.ready(function() {
  Events.registerEvent({
    type: "toolbox",
    bubble: true
  });
  Events.registerEvent({
    type: "toolbox-sink",
    sink: true,
    bubble: false,
    exclude_self: true
  });
  return Events.registerEvent({
    type: "toolbox-before-show",
    bubble: false,
    sink: false
  });
});

ez5.session_ready(function() {
  var tb;
  tb = new Toolbox();
  Events.listen({
    type: "contextmenu",
    node: document,
    call: function(ev) {
      var info, tools;
      if (ev.ctrlKey() && ez5.session.isDebug()) {
        return;
      }
      ev.preventDefault();
      tools = [];
      info = {
        tools: tools
      };
      Events.trigger({
        type: 'toolbox',
        node: ev.getTarget(),
        info: info
      }).done((function(_this) {
        return function() {
          return Events.trigger({
            type: "toolbox-before-show",
            info: info
          }).done(function() {
            return tb.showContextMenu(ev, tools);
          });
        };
      })(this));
    }
  });
  Events.listen({
    type: "mousedown",
    call: (function(_this) {
      return function(ev) {
        var node;
        node = CUI.DOM.closest(ev.getTarget(), "[tabindex]");
        if (!node) {
          return;
        }
        if (node.hasAttribute("tabindex-prevent-default")) {
          ev.preventDefault();
        }
      };
    })(this)
  });
});
// Generated by CoffeeScript 1.10.0
var ToolboxTool,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ToolboxTool = (function(superClass) {
  extend(ToolboxTool, superClass);

  function ToolboxTool() {
    this.setToolbox = bind(this.setToolbox, this);
    return ToolboxTool.__super__.constructor.apply(this, arguments);
  }

  ToolboxTool.prototype.initOpts = function() {
    ToolboxTool.__super__.initOpts.call(this);
    return this.addOpts({
      text: {
        check: String
      },
      group: {
        check: String
      },
      sort: {
        check: String
      },
      tools: {
        check: Array
      },
      label: {
        check: String
      },
      label_attrs: {},
      loca_key: {
        check: String
      },
      loca_key_attrs: {},
      disabled: {
        "default": false,
        check: Boolean
      },
      active: {
        check: Boolean
      },
      favorite: {
        "default": false,
        check: function(v) {
          return v === false || v === true || CUI.isPlainObject(v);
        }
      },
      left: {},
      center: {},
      name: {
        mandatory: true,
        check: String
      },
      run: {
        mandatory: true,
        "default": function() {},
        check: Function
      },
      icon: {
        check: function(v) {
          return isString(v) || v instanceof Icon;
        }
      }
    });
  };

  ToolboxTool.prototype.readOpts = function() {
    var number, parts;
    ToolboxTool.__super__.readOpts.call(this);
    if (isString(this._icon)) {
      this.__icon = new Icon({
        icon: this._icon
      });
    } else {
      this.__icon = this._icon;
    }
    this.setDisabled(this._disabled);
    if (this._sort) {
      parts = this._sort.split(":");
      number = parseInt(parts[1]);
      assert(parts.length === 2 && parts[0].length === 1 && number < 100 && number > 0, "new ToolboxTool", "opts.sort needs to be of format: A:<1-99>", {
        opts: this.opts
      });
      this.__sort_group = parts[0];
      this.__sort_string = parts[0] + "_" + String.fromCharCode(65 + number);
    } else {
      this.__sort_group = "z";
      this.__sort_string = "z_z";
    }
    this.__group_text = $$("toolbox.class." + this.getGroup());
    return this;
  };

  ToolboxTool.prototype.getTools = function() {
    return this._tools;
  };

  ToolboxTool.prototype.getSortGroup = function() {
    return this.__sort_group;
  };

  ToolboxTool.prototype.getGroup = function() {
    return this._group;
  };

  ToolboxTool.prototype.getGroupText = function() {
    return this.__group_text;
  };

  ToolboxTool.prototype.setToolbox = function(toolbox1) {
    var i, len, ref, results, t;
    this.toolbox = toolbox1;
    if (this._tools) {
      ref = this._tools;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        t = ref[i];
        results.push(t.setToolbox(this.toolbox));
      }
      return results;
    }
  };

  ToolboxTool.prototype.getSort = function() {
    return this._sort;
  };

  ToolboxTool.prototype.getName = function() {
    return this._name;
  };

  ToolboxTool.prototype.getIcon = function() {
    var key;
    if (this.__icon) {
      return this.__icon.copy();
    } else {
      key = this.__getCsvKey() + "|icon";
      if (ez5.loca.has(key)) {
        return $$(key);
      } else {
        return null;
      }
    }
  };

  ToolboxTool.prototype.getText = function() {
    var keys;
    keys = this.getLabelKeys();
    if (keys.text) {
      return keys.text;
    } else {
      return $$(keys.loca_key + "|text", keys.loca_key_attrs);
    }
  };

  ToolboxTool.prototype.getLabelKeys = function() {
    var key;
    key = this.__getCsvKey();
    if (!isEmpty(this._text)) {
      return {
        text: this._text
      };
    } else if (this._label) {
      return {
        text: $$(key, this._label_attrs)
      };
    } else if (ez5.loca.has(key + "|text")) {
      return {
        loca_key: key,
        loca_key_attrs: this._loca_key_attrs,
        _sort_text: $$(key + "|text")
      };
    } else {
      return {
        text: $$(key, this._loca_key_attrs)
      };
    }
  };

  ToolboxTool.prototype.__getCsvKey = function() {
    if (this._loca_key) {
      return this._loca_key;
    } else if (this._label) {
      return "tool." + this._label;
    } else {
      return "tool." + this._name;
    }
  };

  ToolboxTool.prototype.toString = function() {
    return "ToolboxTool." + this._name;
  };

  ToolboxTool.prototype.run = function() {
    return this._run.apply(this, arguments);
  };

  ToolboxTool.prototype.getAsFavoriteButton = function(btn_opts) {
    var button_class, key, menuButton;
    if (btn_opts == null) {
      btn_opts = {};
    }
    if (!this._favorite) {
      return;
    }
    if (CUI.isPlainObject(this._favorite)) {
      CUI.mergeMap(btn_opts, this._favorite);
    }
    CUI.mergeMap(btn_opts, this.getMenuItem());
    key = this.__getCsvKey();
    if (ez5.loca.has(key + "|favorite")) {
      btn_opts.text = $$(key + "|favorite", btn_opts.loca_key_attrs);
    } else {
      btn_opts.text = "";
    }
    btn_opts.icon = this.getIcon();
    if (ez5.loca.has(key + "|tooltip")) {
      btn_opts.tooltip = {
        text: $$(key + "|tooltip")
      };
    }
    if (ez5.loca.has(key + "|favorite_tooltip")) {
      btn_opts.tooltip = {
        text: $$(key + "|favorite_tooltip")
      };
    }
    btn_opts.loca_key = null;
    if (this._tools) {
      btn_opts.menu_on_hover = false;
    }
    button_class = "cui-toolbox-tool-button-" + this._name.split(".").join("-");
    if (btn_opts["class"]) {
      btn_opts["class"] += " " + button_class;
    } else {
      btn_opts["class"] = button_class;
    }
    if (!(btn_opts.icon || ez5.loca.has(btn_opts.loca_key + "|icon"))) {
      btn_opts.icon = "fa-question";
    }
    menuButton = this.__button;
    this.__favButton = new CUI.defaults["class"].Button(btn_opts);
    this.__button = menuButton;
    return this.__favButton;
  };

  ToolboxTool.prototype.enable = function() {
    return this.setDisabled(false);
  };

  ToolboxTool.prototype.disable = function() {
    return this.setDisabled(true);
  };

  ToolboxTool.prototype.setDisabled = function(__disabled) {
    var ref, ref1, ref2, ref3;
    this.__disabled = __disabled;
    if (this.__disabled) {
      if ((ref = this.__button) != null) {
        ref.disable();
      }
      if ((ref1 = this.__favButton) != null) {
        ref1.disable();
      }
    } else {
      if ((ref2 = this.__button) != null) {
        ref2.enable();
      }
      if ((ref3 = this.__favButton) != null) {
        ref3.enable();
      }
    }
    return this;
  };

  ToolboxTool.prototype.isDisabled = function() {
    return this.__disabled;
  };

  ToolboxTool.prototype.destroy = function() {};

  ToolboxTool.prototype.getMenuItem = function(toolbox) {
    var i, idx, item, len, mi, ref, t;
    item = {
      _tool: this,
      onConstruct: (function(_this) {
        return function(element) {
          return _this.__button = element;
        };
      })(this),
      onDestroy: (function(_this) {
        return function() {
          return delete _this.__button;
        };
      })(this),
      disabled: (function(_this) {
        return function() {
          return _this.__disabled;
        };
      })(this),
      active: this._active,
      onClick: (function(_this) {
        return function(ev, btn) {
          return _this.run(ev, btn);
        };
      })(this)
    };
    if (this._left) {
      item.left = this._left;
    } else if (this.__icon) {
      item.icon = this.__icon.copy();
    }
    if (this._center) {
      item.center = this._center;
    } else {
      CUI.mergeMap(item, this.getLabelKeys());
    }
    if (!this._text && !this._loca_key && !ez5.loca.has("tool." + this._name + "|text")) {
      console.error("new ToolboxTool \"" + this._name + "\" needs loca_key or \"tool." + this._name + "|text\" in CSV.");
    }
    if (this._tools) {
      item.menu_on_hover = true;
      item.menu = {
        items: []
      };
      ref = this._tools;
      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
        t = ref[idx];
        if (!t) {
          continue;
        }
        if (t instanceof ToolboxTool) {
          mi = t.getMenuItem(toolbox);
          item.menu.items.push(mi);
        } else {
          item.menu.items.push(t);
        }
      }
    }
    return item;
  };

  ToolboxTool.sortTools = function(tools) {
    tools.sort(function(a, b) {
      return compareIndex(a.__sort_string, b.__sort_string);
    });
    return tools;
  };

  return ToolboxTool;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var ToolboxToolButton,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ToolboxToolButton = (function(superClass) {
  extend(ToolboxToolButton, superClass);

  function ToolboxToolButton() {
    return ToolboxToolButton.__super__.constructor.apply(this, arguments);
  }

  ToolboxToolButton.prototype.initOpts = function() {
    ToolboxToolButton.__super__.initOpts.call(this);
    this.mergeOpts({
      name: {
        mandatory: false
      }
    });
    return this.addOpts({
      button: {
        mandatory: true,
        check: function(v) {
          return v instanceof CUI.Button || CUI.isPlainObject(v);
        }
      },
      favorite: {
        check: function(v) {
          return v instanceof CUI.Button || CUI.isPlainObject(v);
        }
      }
    });
  };

  ToolboxToolButton.prototype.readOpts = function() {
    ToolboxToolButton.__super__.readOpts.call(this);
    if (this._button instanceof CUI.Button) {
      this.__button = this._button;
    } else {
      this.__button = new CUI.defaults["class"].Button(this._button);
    }
    if (this._favorite) {
      if (this._favorite instanceof CUI.Button) {
        return this.__favorite = this._favorite;
      } else {
        return this.__favorite = new CUI.defaults["class"].Button(this._favorite);
      }
    } else {
      return this.__favorite = null;
    }
  };

  ToolboxToolButton.prototype.getMenuItem = function() {
    return this.__button;
  };

  ToolboxToolButton.prototype.getAsFavoriteButton = function(opts) {
    var k, v;
    if (opts == null) {
      opts = {};
    }
    if (!this.__favorite) {
      return;
    }
    for (k in opts) {
      v = opts[k];
      switch (k) {
        case "group":
          this.__favorite.setGroup(v);
          break;
        case "size":
          this.__favorite.setSize(v);
          break;
        default:
          assert(false, "ToolboxToolButton.getAsFavoriteButton", "opts." + k + " not supported.", {
            opts: opts,
            toolboxToolButton: this
          });
      }
    }
    return this.__favorite;
  };

  return ToolboxToolButton;

})(ToolboxTool);
// Generated by CoffeeScript 1.10.0
var Mask,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Mask = (function(superClass) {
  extend(Mask, superClass);

  function Mask(version1, _id, schema, nestedTableField, opts1) {
    var col_obj, column_schema, f, field_schema, i, idx, j, len1, len2, ref, ref1, ref2, ref3, type_map;
    this.version = version1;
    this._id = _id;
    this.schema = schema;
    this.nestedTableField = nestedTableField;
    this.opts = opts1;
    this.getMaskPath = bind(this.getMaskPath, this);
    assert(this._id || this.schema, "new " + (getObjectClass(this)), "schema or id must be set", {
      version: this.version,
      id: this._id,
      schema: this.schema,
      nestedTableField: this.nestedTableField
    });
    if (this._id) {
      this.schema = ez5.mask[this.version]._mask_by_id[this._id];
    } else {
      this._id = this.schema.mask_id;
    }
    assert(!this.nestedTableField || this.nestedTableField instanceof NestedTable, "new Mask", "nestedTableField needs to be instanceof NestedTable", {
      version: this.version,
      id: this._id,
      schema: this.schema,
      nestedTableField: this.nestedTableField
    });
    this.table = new Table(this.version, this.schema.table_id);
    type_map = {
      text_oneline: TextColumn,
      text: TextMultiColumn,
      text_l10n_oneline: LocaTextColumn,
      text_l10n: LocaTextMultiColumn,
      string: StringColumn,
      date: DateColumn,
      daterange: DateRangeColumn,
      datetime: DateTimeColumn,
      number: NumberColumn,
      "integer.2": [DecimalColumn, 2, true],
      eas: EASColumn,
      boolean: BooleanColumn,
      link: LinkColumn,
      text_1: TextColumn,
      text_multi: TextMultiColumn,
      l10ntext: LocaTextColumn,
      "decimal.2": [DecimalColumn, 2, false]
    };
    if (this.nestedTableField) {
      this.depth = this.nestedTableField.depth() + 1;
    } else {
      this.depth = 0;
    }
    this.fields = [];
    if (this.table.poolLink()) {
      this.fields.push(new PoolField(this));
    }
    if (!this.nestedTableField) {
      this.fields.push(new StandardField(this));
      this.fields.push(new ObjecttypeField(this));
      this.fields.push(new PrimaryKeyColumn(this));
      this.fields.push(new SystemObjectIdColumn(this));
      this.fields.push(new GlobalObjectIdColumn(this));
      this.fields.push(new VersionColumn(this));
      this.fields.push(new ChangelogColumn(this));
    }
    if (this.nestedTableField instanceof ReverseLinkedTable) {
      this.fields.push(new PrimaryKeyColumn(this));
      this.fields.push(new VersionColumn(this));
    }
    if (!this.nestedTableField) {
      this.fields.push(new OwnerField(this));
      if (this.aclTable()) {
        this.fields.push(new AclField(this));
      }
      if (this.hasTags()) {
        this.fields.push(new TagsField(this));
      }
      if (this.inMainSearch()) {
        this.fields.push(new CollectionsField(this));
      }
    }
    if (!this.nestedTableField && this.table.isHierarchy()) {
      this.fields.push(new TreeColumn(this));
    }
    ref = this.schema.fields;
    for (idx = i = 0, len1 = ref.length; i < len1; idx = ++i) {
      field_schema = ref[idx];
      switch (field_schema.kind) {
        case "field":
          column_schema = this.table.schema._column_by_id[field_schema.column_id];
          col_obj = type_map[column_schema.type];
          if (!col_obj) {
            col_obj = (ref1 = CustomDataType.get(column_schema.type)) != null ? ref1.getClassFunction() : void 0;
          }
          if (col_obj === CustomDataTypeUnknown) {
            if (ref2 = column_schema.type, indexOf.call(Mask.warnTypes, ref2) < 0) {
              CUI.error("Unsuported Column Type in Mask: \"" + this.schema.name + "\": Column \"" + column_schema.name + "\" has column type: \"" + column_schema.type + "\".", this.schema, column_schema);
              Mask.warnTypes.push(column_schema.type);
            }
            continue;
          }
          if ($.isArray(col_obj)) {
            f = new col_obj[0](this, field_schema, col_obj[1], col_obj[2]);
          } else {
            f = new col_obj(this, field_schema);
          }
          break;
        case "link":
          f = new LinkedObject(this, field_schema);
          break;
        case "linked-table":
          f = new NestedTable(this, field_schema);
          break;
        case "reverse-linked-table":
          f = new ReverseLinkedTable(this, field_schema);
          break;
        case "splitter":
          f = MaskSplitter.getFromField({
            l10n_prefix: (function(_this) {
              return function() {
                return "mask." + (_this.table.id()) + "." + (_this.name()) + ".";
              };
            })(this),
            version: this.version,
            field: field_schema
          });
          break;
        default:
          assert(false, "new Mask", "field.kind \"" + field_schema.kind + "\" unknown", {
            field: field_schema
          });
      }
      this.fields.push(f);
    }
    ref3 = this.fields;
    for (idx = j = 0, len2 = ref3.length; j < len2; idx = ++j) {
      f = ref3[idx];
      if (this.depth === 0) {
        f.init();
      }
      f.idx = idx;
    }
    this.__dbg_name = this.name();
    this.__dbg_table_name = this.table.name();
  }

  Mask.prototype.getVersion = function() {
    return this.version;
  };

  Mask.prototype.getMaskPath = function(path) {
    if (path == null) {
      path = [];
    }
    path.push(this);
    if (this.nestedTableField) {
      this.nestedTableField.fatherMask.getMaskPath(path);
    }
    return path;
  };

  Mask.prototype.getFields = function(mode, opts) {
    var f, fields, i, len1, ref;
    if (mode == null) {
      mode = this.mode();
    }
    if (opts == null) {
      opts = {};
    }
    fields = [];
    ref = this.fields;
    for (i = 0, len1 = ref.length; i < len1; i++) {
      f = ref[i];
      if (mode === "all" || f.isVisible(mode, opts)) {
        fields.push(f);
      }
    }
    return fields;
  };

  Mask.prototype.getHierarchyField = function() {
    var f, i, len1, ref;
    ref = this.fields;
    for (i = 0, len1 = ref.length; i < len1; i++) {
      f = ref[i];
      if (f instanceof TreeColumn) {
        return f;
      }
    }
    return null;
  };

  Mask.prototype.getTable = function() {
    return this.table;
  };

  Mask.prototype.inMainSearch = function() {
    return this.table.inMainSearch();
  };

  Mask.prototype.hasTags = function() {
    return this.table.hasTags();
  };

  Mask.prototype.aclTable = function() {
    return this.table.aclTable();
  };

  Mask.prototype.isHierarchy = function() {
    return this.table.isHierarchy();
  };

  Mask.prototype.id = function() {
    return this._id;
  };

  Mask.prototype.isAllFieldsMask = function() {
    if (this.schema._is_all_fields) {
      return true;
    } else {
      return false;
    }
  };

  Mask.prototype.name = function() {
    return this.schema.name;
  };

  Mask.prototype.nameSort = function() {
    if (this.schema.name === "_all_fields") {
      return "ZZZZZ";
    } else {
      return this.nameLocalized();
    }
  };

  Mask.prototype.nameLocalized = function() {
    return this.schema._name_localized;
  };

  Mask.prototype.requireComment = function() {
    return this.schema.require_comment;
  };

  Mask.prototype.isStandard = function() {
    return this.schema.is_preferred;
  };

  Mask.prototype.getReplacementRecord = function(data, key_prefix, use_array, record) {
    var f, i, len1, ref;
    if (key_prefix == null) {
      key_prefix = "";
    }
    if (use_array == null) {
      use_array = false;
    }
    if (record == null) {
      record = {};
    }
    ref = this.getFields("all");
    for (i = 0, len1 = ref.length; i < len1; i++) {
      f = ref[i];
      if (f instanceof MaskSplitter) {
        continue;
      }
      if (f.isTopLevelField()) {
        f.getReplacementRecord(data, key_prefix, use_array, record);
      } else {
        f.getReplacementRecord(data[data._objecttype], key_prefix + data._objecttype + ".", use_array, record);
      }
    }
    return record;
  };

  Mask.prototype.invokeOnFields = function(mode, dive_nested, callback, data, depth) {
    var f, i, len1, ref, ret;
    if (mode == null) {
      mode = this.mode();
    }
    if (dive_nested == null) {
      dive_nested = false;
    }
    if (depth == null) {
      depth = 0;
    }
    if (!mode || !callback) {
      throw "invokeOnFields needs to be called with mode, dive_nested, callback.";
    }
    ref = this.getFields(mode);
    for (i = 0, len1 = ref.length; i < len1; i++) {
      f = ref[i];
      ret = callback(f, data, depth);
      if (dive_nested && ret !== false && f.invokeOnFields) {
        f.invokeOnFields(mode, dive_nested, callback, data, depth);
      }
    }
    return this;
  };

  Mask.prototype.renderEditor = function(top_level_data, mode, header_mode, opts) {
    var fields, mainDiv, mainFieldsRenderer;
    if (top_level_data._template) {
      top_level_data[this.table.name()]._template = top_level_data._template[this.table.name()];
    }
    fields = [];
    mainFieldsRenderer = new FieldsRendererTopLevel();
    if (header_mode) {
      fields = this.getFields(header_mode, {
        top_level_data: top_level_data,
        history: opts.history
      });
    } else {
      fields = [];
    }
    fields.push.apply(fields, this.getFields(mode, {
      top_level_data: top_level_data,
      history: opts.history
    }));
    mainFieldsRenderer.read(fields);
    mainDiv = mainFieldsRenderer.render({
      data: top_level_data[this.table.name()],
      top_level_data: top_level_data,
      mode: mode,
      for_print: opts.for_print,
      onDone: opts.onDone,
      onFail: opts.onFail,
      onProgress: opts.onProgress,
      editor: opts.editor,
      bulk_mode: opts.bulk_mode,
      pool_ids: opts.pool_ids,
      detail: opts.detail,
      cols: mode === "editor-bulk" ? ["auto", "auto", "auto"] : ["auto", "maximize"],
      colClasses: mode === "editor-bulk" ? ["ez5-fields-renderer-option", "ez5-fields-renderer-key", "ez5-fields-renderer-value"] : ["ez5-fields-renderer-key", "ez5-fields-renderer-value"],
      maximize_horizontal: true,
      selectable: opts.selectable
    });
    Events.listen({
      type: ["editor-changed", "pool-field-changed", "tags-field-changed", "editor-reload-asset-browser", "editor-changed-reload", "editor-update-asset-browser"],
      node: mainDiv,
      call: (function(_this) {
        return function(ev, info) {
          if (typeof opts.onChange === "function") {
            opts.onChange(ev, top_level_data, info);
          }
        };
      })(this)
    });
    return mainDiv;
  };

  Mask.prototype.renderDetail = function(data, mode, header_mode, opts) {
    opts.maximize = false;
    opts.selectable = false;
    return this.renderEditor(data, mode, header_mode, opts);
  };

  Mask.prototype.renderText = function(data, mode, header_mode, opts) {
    opts.maximize = false;
    opts.selectable = false;
    return this.renderEditor(data, mode, header_mode, opts);
  };

  Mask.prototype.checkSaveData = function(data, opts) {
    var problems;
    if (opts == null) {
      opts = {};
    }
    opts.check = true;
    problems = this.__getSaveData(data, opts);
    return problems;
  };

  Mask.prototype.getSaveData = function(data, opts) {
    if (opts == null) {
      opts = {};
    }
    return this.__getSaveData(data, opts);
  };

  Mask.prototype.__getSaveData = function(data, opts) {
    var _data, _field, base_fields_only, bulk_fields_count, check_failed, check_fields, error, ex, f, field_data, fields, i, j, len1, len2, save_data;
    if (opts == null) {
      opts = {};
    }
    assert(CUI.isPlainObject(data), "Mask.getSaveData", "data is not a plain object", {
      data: data,
      opts: opts
    });
    save_data = {};
    save_data[this.table.name()] = {};
    save_data._mask = this.name();
    save_data._objecttype = this.table.name();
    save_data[this.table.name()]._top_level = save_data;
    data[this.table.name()]._top_level = data;
    if (data._template) {
      data[this.table.name()]._template = data._template[this.table.name()];
    }
    check_fields = [];
    bulk_fields_count = 0;
    base_fields_only = null;
    fields = this.getFields('all');
    fields.sort(function(a, b) {
      if (a instanceof TagsField) {
        return 1;
      } else {
        return 0;
      }
    });
    for (i = 0, len1 = fields.length; i < len1; i++) {
      f = fields[i];
      if (f instanceof MaskSplitter) {
        continue;
      }
      if (opts.bulk && !f.getOption(data[this.table.name()], "bulk")) {
        continue;
      }
      bulk_fields_count += 1;
      if (!(f instanceof PoolField || f instanceof TagsField)) {
        base_fields_only = false;
      }
      if (f.isReadOnly(data[this.table.name()], data, {
        mode: "editor",
        get_save_data: true
      })) {
        continue;
      }
      if (opts.render_mode && !f.isVisibleToSaveData(opts.render_mode, opts.render_mode_header, {
        top_level_data: save_data
      })) {
        continue;
      }
      if (!opts.check) {
        f.getSaveData(data[this.table.name()], save_data[this.table.name()], opts);
        continue;
      }
      try {
        f.getSaveData(data[this.table.name()], save_data[this.table.name()], opts);
        check_failed = false;
      } catch (error) {
        ex = error;
        if (ex instanceof InvalidSaveDataException) {
          check_failed = true;
        } else {
          throw ex;
        }
      }
      field_data = f.getDataForFieldData(data[this.table.name()], data);
      _field = field_data[f.name() + ':field'] || {};
      if (field_data === data) {
        save_data[f.name() + ':field'] = _field;
        save_data[f.name() + ':options'] = field_data[f.name() + ':options'];
      } else {
        save_data[this.table.name()][f.name() + ':field'] = _field;
      }
      save_data[this.table.name()][f.name() + ':options'] = data[this.table.name()][f.name() + ':options'];
      if (check_failed) {
        _field.check_failed = true;
      } else {
        delete _field.check_failed;
      }
      check_fields.push(f);
    }
    if (bulk_fields_count > 0 && base_fields_only === null) {
      base_fields_only = true;
    }
    opts.base_fields_only = base_fields_only;
    delete save_data[this.table.name()]._top_level;
    delete data[this.table.name()]._top_level;
    if (opts.check) {
      opts.problems = [];
      _data = save_data[this.table.name()];
      for (j = 0, len2 = check_fields.length; j < len2; j++) {
        f = check_fields[j];
        field_data = f.getDataForFieldData(_data, save_data);
        if (field_data[f.name() + ':field'].check_failed || f.checkValue(_data, save_data, opts) === false) {
          field_data[f.name() + ':field'].check_failed = true;
          opts.problems.push(new CheckDataProblem({
            field: f,
            field_data: field_data
          }));
        }
      }
      return opts.problems;
    }
    return save_data;
  };

  Mask.prototype.renderStandard = function(data) {
    var callback, standard;
    standard = [];
    callback = (function(_this) {
      return function(f, data, depth) {
        var i, len1, results, row;
        if (depth > 0) {
          assert(CUI.isArray(data, "Mask.renderStandard", "Depth > 0 and data is not an Array", {
            data: data,
            depth: depth
          }));
          results = [];
          for (i = 0, len1 = data.length; i < len1; i++) {
            row = data[i];
            results.push(f.renderStandard(standard, row));
          }
          return results;
        } else {
          return f.renderStandard(standard, data);
        }
      };
    })(this);
    this.invokeOnFields("all", true, callback, data[this.table.name()]);
    return standard;
  };

  Mask.prototype.getEASFields = function(mode) {
    return this.getFieldsByType(mode, EASColumn);
  };

  Mask.prototype.getReverseLinkedTableFields = function(mode) {
    return this.getFieldsByType(mode, ReverseLinkedTable);
  };

  Mask.prototype.getTagsField = function(mode) {
    return this.getFieldsByType(mode, TagsField, false)[0];
  };

  Mask.prototype.getFieldsByType = function(mode, type, dive_nested) {
    var fields;
    if (dive_nested == null) {
      dive_nested = true;
    }
    assert(mode && type, "Mask.getFieldsByType", "mode, type must be set", {
      mode: mode,
      type: type
    });
    fields = [];
    this.invokeOnFields(mode, dive_nested, (function(_this) {
      return function(f) {
        if (f instanceof type) {
          return fields.push(f);
        }
      };
    })(this));
    return fields;
  };

  Mask.prototype.hasStandardEASFields = function() {
    return this.getEASFields("standard").length > 0;
  };

  Mask.prototype.getStandardTextFields = function(filterOrder) {
    var f, fields, i, len1, ref, ref1, standard;
    if (filterOrder == null) {
      filterOrder = null;
    }
    fields = [];
    ref = this.getFields("all");
    for (i = 0, len1 = ref.length; i < len1; i++) {
      f = ref[i];
      if (!(f instanceof TextColumn)) {
        continue;
      }
      standard = f.getOutputStandard();
      if (!standard) {
        continue;
      }
      if (!filterOrder || (ref1 = standard.order, indexOf.call(filterOrder, ref1) >= 0)) {
        fields.push({
          standard: standard,
          field: f
        });
      }
    }
    return fields;
  };

  Mask.prototype.getAssetsForBrowser = function(_data, _mode) {
    var append_asset, asset_browser_idx, browse_assets, eas_fields, ef, i, idx, j, len1, len2, ref, row;
    eas_fields = [];
    this.invokeOnFields(_mode, true, (function(_this) {
      return function(f, data) {
        if (f instanceof EASColumn || f instanceof LinkedObject && f.getOutputStandardEAS()) {
          return eas_fields.push({
            field: f,
            data: data
          });
        }
      };
    })(this), _data[this.table.name()]);
    if (eas_fields.length === 0) {
      return false;
    }
    eas_fields.sort(function(a, b) {
      var a_standard, b_standard, ref, ref1;
      a_standard = ((ref = a.field.getOutputStandardEAS()) != null ? ref.order : void 0) || 4;
      b_standard = ((ref1 = b.field.getOutputStandardEAS()) != null ? ref1.order : void 0) || 4;
      return compareIndex(a_standard, b_standard);
    });
    browse_assets = [];
    asset_browser_idx = 0;
    append_asset = function(field, data, idx, len) {
      var _value, add_value, eas_column, eas_values, i, len1, ref, ref1, ref2, value;
      add_value = (function(_this) {
        return function(field, value) {
          if (!value) {
            return;
          }
          value._field = field;
          value._asset_browser_idx = asset_browser_idx++;
          value._idx = idx;
          value._len = len;
          return browse_assets.push(new Asset(field, value, data[field.name()], _data));
        };
      })(this);
      if (field instanceof LinkedObject) {
        eas_column = field.getFirstStandardEASColumn();
        if (!eas_column) {
          return;
        }
        eas_values = (ref = data[field.name()]) != null ? (ref1 = ref._standard) != null ? (ref2 = ref1.eas) != null ? ref2["1"] : void 0 : void 0 : void 0;
        if (!eas_values || eas_values.length === 0) {
          return;
        }
        for (i = 0, len1 = eas_values.length; i < len1; i++) {
          _value = eas_values[i];
          value = copyObject(_value);
          value._incomplete_versions = true;
          value._linked_object_data = data[field.name()];
          value._linked_object = field;
          add_value(eas_column, value);
        }
      } else {
        add_value(field, field.getImgValuePreferred(data));
      }
    };
    for (i = 0, len1 = eas_fields.length; i < len1; i++) {
      ef = eas_fields[i];
      if (ef.field.mask.nestedTableField) {
        ref = ef.data;
        for (idx = j = 0, len2 = ref.length; j < len2; idx = ++j) {
          row = ref[idx];
          append_asset(ef.field, row, idx, ef.data.length);
        }
      } else {
        append_asset(ef.field, ef.data);
      }
    }
    return browse_assets;
  };

  Mask.getMaskByMaskName = function(mask_name, table_id, version, all_fields_preferred) {
    var mask, type;
    if (table_id == null) {
      table_id = null;
    }
    if (version == null) {
      version = "CURRENT";
    }
    if (all_fields_preferred == null) {
      all_fields_preferred = true;
    }
    if (isEmpty(mask_name)) {
      return null;
    }
    if (table_id === null && mask_name !== '_all_fields') {
      table_id = ez5.mask[version]._mask_by_name[mask_name].table_id;
    }
    assert(isString(mask_name) && isInteger(table_id), "Mask.getMaskByName", "mask_name must be String and table_id Integer", {
      mask_name: mask_name,
      table_id: table_id
    });
    if (mask_name === '_all_fields') {
      if (all_fields_preferred) {
        type = 'all_fields_mask_preferred';
      } else {
        type = 'all_fields_mask';
      }
      assert(ez5[type][version], "Mask.getMaskByName", "_all_fields mask not available for version " + version + " and type " + type + ".");
      mask = new Mask(version, null, ez5[type][version]._masks_by_table_id[table_id][0]);
    } else {
      mask = ez5.mask[version]._mask_instance_by_name[mask_name];
    }
    assert(mask instanceof Mask, "Mask.getMaskByMaskName", "mask not found: \"" + mask_name + "\"", {
      table_id: table_id,
      version: version
    });
    return mask;
  };

  Mask.warnTypes = [];

  return Mask;

})(CUI.Dummy);
// Generated by CoffeeScript 1.10.0
var ListViewFieldsRenderer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ListViewFieldsRenderer = (function(superClass) {
  extend(ListViewFieldsRenderer, superClass);

  function ListViewFieldsRenderer(opts) {
    if (opts == null) {
      opts = {};
    }
    if (opts.headerFields && !opts.hasOwnProperty("fixedRows")) {
      opts.fixedRows = 1;
    }
    ListViewFieldsRenderer.__super__.constructor.call(this, opts);
    this.root.children = [];
  }

  ListViewFieldsRenderer.prototype.initOpts = function() {
    ListViewFieldsRenderer.__super__.initOpts.call(this);
    return this.addOpts({
      headerFields: {
        check: Array
      }
    });
  };

  ListViewFieldsRenderer.prototype.render = function() {
    if (this._headerFields) {
      ListViewEditTree.prototype.addHeader.call(this, this._headerFields);
    }
    return ListViewFieldsRenderer.__super__.render.call(this, false);
  };

  ListViewFieldsRenderer.prototype.addField = function(opts) {
    return this.addNode(new ListViewFieldsRendererNode({
      field: opts.field,
      data: opts.data,
      top_level_data: opts.top_level_data,
      search: opts.search,
      editor: opts.editor,
      pool_ids: opts.pool_ids,
      for_print: opts.for_print,
      bulk_mode: opts.bulk_mode,
      detail: opts.detail,
      mode: opts.mode,
      renderForListView: opts.renderForListView
    }));
  };

  return ListViewFieldsRenderer;

})(ListViewTree);
// Generated by CoffeeScript 1.10.0
var ListViewFieldsRendererNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ListViewFieldsRendererNode = (function(superClass) {
  extend(ListViewFieldsRendererNode, superClass);

  function ListViewFieldsRendererNode() {
    return ListViewFieldsRendererNode.__super__.constructor.apply(this, arguments);
  }

  ListViewFieldsRendererNode.prototype.initOpts = function() {
    ListViewFieldsRendererNode.__super__.initOpts.call(this);
    return this.addOpts({
      field: {
        check: function(v) {
          return v instanceof Field || v instanceof MultipleFieldsContainer;
        }
      },
      top_level_data: {
        check: "PlainObject"
      },
      data: {
        mandatory: true,
        check: "PlainObject"
      },
      mode: {
        check: String
      },
      search: {
        check: Search
      },
      editor: {
        check: Editor
      },
      pool_ids: {
        check: "Array"
      },
      for_print: {
        check: Boolean
      },
      bulk_mode: {
        check: Boolean
      },
      detail: {
        check: function(v) {
          return v instanceof DetailSidebar || v instanceof DetailInfo;
        }
      },
      idx: {
        check: function(v) {
          return v >= 0;
        }
      },
      renderForListView: {
        check: Function
      }
    });
  };

  ListViewFieldsRendererNode.prototype.readOpts = function() {
    ListViewFieldsRendererNode.__super__.readOpts.call(this);
    this._field.initForListView(this);
    if (this._field instanceof Field) {
      return this.__field_cls = " " + toDash(this._field.getElementClass()) + "-row";
    } else {
      return this.__field_cls = "";
    }
  };

  ListViewFieldsRendererNode.prototype.render = function() {
    ListViewFieldsRendererNode.__super__.render.call(this);
    this._field.addAfterRender(this);
    return this;
  };

  ListViewFieldsRendererNode.prototype.setSearchUnsetCheckbox = function(__searchUnsetCheckbox) {
    this.__searchUnsetCheckbox = __searchUnsetCheckbox;
  };

  ListViewFieldsRendererNode.prototype.getSearchUnsetCheckbox = function() {
    return this.__searchUnsetCheckbox;
  };

  ListViewFieldsRendererNode.prototype.getData = function() {
    return this._data;
  };

  ListViewFieldsRendererNode.prototype.getTopLevelData = function() {
    return this._top_level_data;
  };

  ListViewFieldsRendererNode.prototype.renderContent = function() {
    return this._field.renderForListView(this);
  };

  ListViewFieldsRendererNode.prototype.moveNodeAfter = function() {
    var base;
    return typeof (base = this._field).listViewEditorTreeNodeMoveNodeAfter === "function" ? base.listViewEditorTreeNodeMoveNodeAfter(this) : void 0;
  };

  ListViewFieldsRendererNode.prototype.addFieldClass = function(cls) {
    return this.addClass(cls);
  };

  ListViewFieldsRendererNode.prototype.removeFieldClass = function(cls) {
    return this.removeClass(cls);
  };

  ListViewFieldsRendererNode.prototype.getChangedRecursive = function() {
    var c, i, idx, len, ref;
    if (this.is_changed) {
      return true;
    }
    if (!this.children) {
      return false;
    }
    ref = this.children;
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      c = ref[idx];
      if (c.getChangedRecursive()) {
        return true;
      }
    }
    return false;
  };

  ListViewFieldsRendererNode.prototype.setProblemClass = function() {
    if (this.getFather() instanceof ListViewFieldsRendererNode) {
      this.getFather().setProblemClass();
    }
    return this.addClass('ez5-check-failed-row');
  };

  ListViewFieldsRendererNode.prototype.checkProblemClass = function() {
    var ref;
    if ((ref = this._data[this._field.name() + ':field']) != null ? ref.check_failed : void 0) {
      this.setProblemClass();
    }
    return this;
  };

  ListViewFieldsRendererNode.prototype.bulkEnabled = function(on_off) {
    var c, i, len, ref;
    if (on_off) {
      this.addClass("ez5-bulk-enabled");
    } else {
      this.removeClass("ez5-bulk-enabled");
    }
    if (this.children) {
      ref = this.children;
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        c.bulkEnabled(on_off);
      }
    }
    return this;
  };

  ListViewFieldsRendererNode.prototype.bulkDisabled = function() {
    return this.bulkEnabled(false);
  };

  ListViewFieldsRendererNode.prototype.changed = function(on_off) {
    if (isNull(on_off)) {
      if (this.is_changed) {
        return true;
      } else {
        return false;
      }
    }
    this.is_changed = on_off;
    this.updateClass();
    return this.changed();
  };

  ListViewFieldsRendererNode.prototype.updateClass = function() {
    var ref;
    this.removeClass("row-data-changed row-child-data-changed");
    this.addClass(this.getClass());
    return (ref = this.father) != null ? typeof ref.updateClass === "function" ? ref.updateClass() : void 0 : void 0;
  };

  ListViewFieldsRendererNode.prototype.addedToListView = function(nodes) {
    var i, len, node;
    if (this._field instanceof Field) {
      for (i = 0, len = nodes.length; i < len; i++) {
        node = nodes[i];
        node.setAttribute("ez5-field-name", this._field.fullName());
        node.setAttribute("ez5-field-id", this._field.id());
      }
    }
    this.checkProblemClass();
    return this;
  };

  ListViewFieldsRendererNode.prototype.getClass = function() {
    var c, cls, i, j, len, p, pe, ref;
    cls = ListViewFieldsRendererNode.__super__.getClass.call(this) || "";
    cls = cls + this.__field_cls;
    if (this.changed()) {
      return "row-data-changed " + cls;
    }
    p = this.getPath();
    for (i = p.length - 1; i >= 0; i += -1) {
      pe = p[i];
      if (!(pe instanceof ListViewFieldsRendererNode)) {
        break;
      }
      if (pe.changed()) {
        return "row-data-changed " + cls;
      }
    }
    if (!this.children) {
      return cls;
    }
    ref = this.children;
    for (j = 0, len = ref.length; j < len; j++) {
      c = ref[j];
      if (c.getChangedRecursive()) {
        return "row-child-data-changed  " + cls;
      }
    }
    return cls;
  };

  ListViewFieldsRendererNode.prototype.select = function(ev) {
    return ListViewFieldsRendererNode.__super__.select.call(this, ev).done((function(_this) {
      return function() {
        return _this.getFather().__btn_minus.enable();
      };
    })(this));
  };

  ListViewFieldsRendererNode.prototype.deselect = function(ev) {
    var ret;
    return ret = ListViewFieldsRendererNode.__super__.deselect.call(this).done((function(_this) {
      return function() {
        return _this.getFather().__btn_minus.disable();
      };
    })(this));
  };

  ListViewFieldsRendererNode.prototype.isSelectable = function() {
    return CUI.isFunction(this.__remove);
  };

  ListViewFieldsRendererNode.prototype.isMovable = function() {
    return CUI.isFunction(this.__remove);
  };

  return ListViewFieldsRendererNode;

})(ListViewTreeNode);
// Generated by CoffeeScript 1.10.0
var ListViewFieldsRendererDataNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ListViewFieldsRendererDataNode = (function(superClass) {
  extend(ListViewFieldsRendererDataNode, superClass);

  function ListViewFieldsRendererDataNode() {
    return ListViewFieldsRendererDataNode.__super__.constructor.apply(this, arguments);
  }

  ListViewFieldsRendererDataNode.prototype.setProblemClass = function() {
    return this.addClass('ez5-check-failed-row');
  };

  ListViewFieldsRendererDataNode.prototype.checkProblemClass = function() {
    var f, fdata, i, len, ref;
    ref = this._field.mask.getFields(this._mode);
    for (i = 0, len = ref.length; i < len; i++) {
      f = ref[i];
      fdata = this._data[this._field.name()][this._idx][f.name() + ':field'];
      if (fdata != null ? fdata.check_failed : void 0) {
        this.setProblemClass();
      }
    }
    return this;
  };

  return ListViewFieldsRendererDataNode;

})(ListViewFieldsRendererNode);
// Generated by CoffeeScript 1.10.0
var ListViewFieldsRendererFieldNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ListViewFieldsRendererFieldNode = (function(superClass) {
  extend(ListViewFieldsRendererFieldNode, superClass);

  function ListViewFieldsRendererFieldNode() {
    return ListViewFieldsRendererFieldNode.__super__.constructor.apply(this, arguments);
  }

  return ListViewFieldsRendererFieldNode;

})(ListViewFieldsRendererNode);
// Generated by CoffeeScript 1.10.0
var ListViewEditTreeMaskRowNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ListViewEditTreeMaskRowNode = (function(superClass) {
  extend(ListViewEditTreeMaskRowNode, superClass);

  function ListViewEditTreeMaskRowNode(opts) {
    this.opts = opts != null ? opts : {};
    ListViewEditTreeMaskRowNode.__super__.constructor.call(this, this.opts);
    this.data = this.getData();
  }

  ListViewEditTreeMaskRowNode.prototype.allowRowMove = function(to_node, new_father, after) {
    var c, children, err, error, f, f_idx, fields, fieldsRenderer, i, id_array, id_array_sort, idx, j, len, len1, new_child_idx, ref;
    if (new_father) {
      return false;
    }
    children = this.father.children.slice(0);
    id_array = [];
    for (idx = i = 0, len = children.length; i < len; idx = ++i) {
      c = children[idx];
      id_array[idx] = idx;
    }
    id_array_sort = id_array.slice(0);
    fields = typeof this.getRowsToMove === "function" ? this.getRowsToMove() : void 0;
    moveInArray(this.getChildIdx(), to_node.getChildIdx(), children, after);
    moveInArray(this.getChildIdx(), to_node.getChildIdx(), id_array_sort, after);
    if (fields != null ? fields.length : void 0) {
      ref = fields.reverse();
      for (j = 0, len1 = ref.length; j < len1; j++) {
        f = ref[j];
        f_idx = idxInArray(f, children);
        new_child_idx = idxInArray(this, children);
        moveInArray(f_idx, new_child_idx, children, true);
        moveInArray(f_idx, new_child_idx, id_array_sort, true);
      }
    }
    if (id_array_sort.join(",") === id_array.join(",")) {
      return false;
    }
    fieldsRenderer = new FieldsRendererTopLevel();
    try {
      fieldsRenderer.read(children);
      return true;
    } catch (error) {
      err = error;
      CUI.debug("allowRowMove not allowed", err);
      return false;
    }
  };

  return ListViewEditTreeMaskRowNode;

})(ListViewEditTreeNode);
// Generated by CoffeeScript 1.10.0
var FieldsRenderer,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FieldsRenderer = (function(superClass) {
  extend(FieldsRenderer, superClass);

  function FieldsRenderer() {
    this.dumpId = bind(this.dumpId, this);
    return FieldsRenderer.__super__.constructor.apply(this, arguments);
  }

  FieldsRenderer.prototype.initOpts = function() {
    FieldsRenderer.__super__.initOpts.call(this);
    return this.addOpts({
      field: {
        check: function(v) {
          return v instanceof Field || v instanceof ListViewEditTreeMaskRowNode || v instanceof MultipleFieldsContainer;
        }
      }
    });
  };

  FieldsRenderer.prototype.readOpts = function() {
    FieldsRenderer.__super__.readOpts.call(this);
    return this.fields = [];
  };

  FieldsRenderer.prototype.getField = function() {
    return this._field;
  };

  FieldsRenderer.prototype.addField = function(field) {
    if (!this.isFieldAllowed(field)) {
      throw (getObjectClass(this)) + ".addField: Field of instance " + (getObjectClass(field)) + " is not allowed.";
    }
    if (field instanceof FieldsRenderer) {
      field.setFather(this);
    }
    this.fields.push(field);
    return this;
  };

  FieldsRenderer.prototype.setFather = function(__father) {
    this.__father = __father;
  };

  FieldsRenderer.prototype.getFather = function() {
    return this.__father;
  };

  FieldsRenderer.prototype.addFields = function(fields) {
    var f, j, len;
    for (j = 0, len = fields.length; j < len; j++) {
      f = fields[j];
      this.addField(f);
    }
    return this;
  };

  FieldsRenderer.prototype.beginSplitterType = function() {
    return this.type() + "-begin";
  };

  FieldsRenderer.prototype.endSplitterType = function() {
    return this.type() + "-end";
  };

  FieldsRenderer.prototype.renderFields = function(opts, div) {
    var f, j, len, ref;
    ref = this.fields;
    for (j = 0, len = ref.length; j < len; j++) {
      f = ref[j];
      if (f instanceof MaskSplitterEnd) {
        continue;
      }
      div.append(f.render(opts));
    }
    return div;
  };

  FieldsRenderer.prototype.read = function(fields, idx) {
    var base, base1, field, type;
    if ((typeof (base = fields[idx]).splitterType === "function" ? base.splitterType() : void 0) !== this.beginSplitterType()) {
      throw "Cannot read " + (this.beginSplitterType()) + " from field type " + (typeof (base1 = fields[idx]).splitterType === "function" ? base1.splitterType() : void 0);
    }
    idx++;
    while (idx < fields.length) {
      field = fields[idx];
      type = typeof field.splitterType === "function" ? field.splitterType() : void 0;
      if (type) {
        if (type === this.endSplitterType()) {
          this.addField(fields[idx++]);
          break;
        }
        throw "Cannot read type " + type + " inside " + (this.type());
      } else {
        this.addField(fields[idx++]);
      }
    }
    return idx;
  };

  FieldsRenderer.prototype.findPlain = function() {
    var check_fields, f, j, k, len, len1, plain, ref;
    ref = this.fields;
    for (j = 0, len = ref.length; j < len; j++) {
      f = ref[j];
      if (f instanceof FieldsRenderer) {
        f.findPlain();
      }
    }
    check_fields = this.fields.splice(0);
    plain = null;
    for (k = 0, len1 = check_fields.length; k < len1; k++) {
      f = check_fields[k];
      if ((f instanceof ListViewEditTreeMaskRowNode || f instanceof Field || f instanceof MultipleFieldsContainer) && !(f instanceof MaskSplitterEnd)) {
        if (!plain) {
          plain = new FieldsRendererPlain();
          this.addField(plain);
        }
        plain.addField(f);
      } else {
        plain = null;
        this.addField(f);
      }
    }
    return this;
  };

  FieldsRenderer.prototype.hasContent = function(opts) {
    var f, has_content, j, len, ref;
    ref = this.fields;
    for (j = 0, len = ref.length; j < len; j++) {
      f = ref[j];
      has_content = typeof f.hasContent === "function" ? f.hasContent(opts) : void 0;
      if (has_content) {
        return true;
      }
    }
    return false;
  };

  FieldsRenderer.prototype.dump = function(lines, depth) {
    var f, i, idx, j, k, len, ref, ref1, schema, spc;
    if (lines == null) {
      lines = [];
    }
    if (depth == null) {
      depth = 0;
    }
    spc = "";
    for (i = j = 0, ref = depth; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      spc += "  ";
    }
    lines.push("" + spc + (this.dumpId()));
    ref1 = this.fields;
    for (idx = k = 0, len = ref1.length; k < len; idx = ++k) {
      f = ref1[idx];
      if (f instanceof FieldsRenderer) {
        f.dump(lines, depth + 1);
      } else if (f instanceof MaskSplitter) {
        lines.push(spc + "  " + (f.splitterType()) + " [" + (getObjectClass(f)) + "]");
      } else if (f instanceof MultipleFieldsContainer) {
        lines.push(spc + "  " + (f.fullName()) + " [" + (getObjectClass(f)) + "]");
      } else {
        if (f instanceof Field) {
          schema = f.FieldSchema;
        } else {
          schema = f.opts.data.field;
        }
        if (schema != null ? schema._other_table : void 0) {
          lines.push(spc + "  " + schema._other_table.name + " [" + schema.kind + "]");
        } else if (schema != null ? schema._column : void 0) {
          lines.push(spc + "  " + schema._column.name + " [" + schema._column.type + "]");
        } else {
          lines.push(spc + "  " + (getObjectClass(f)));
        }
      }
    }
    if (depth === 0) {
      return "\n" + lines.join("\n");
    } else {
      return null;
    }
  };

  FieldsRenderer.prototype.needsDirectRender = function(opts) {
    var field, j, len, ref;
    ref = this.fields;
    for (j = 0, len = ref.length; j < len; j++) {
      field = ref[j];
      if (typeof field.needsDirectRender === "function" ? field.needsDirectRender(opts) : void 0) {
        return true;
      }
    }
    return false;
  };

  FieldsRenderer.prototype.dumpId = function() {
    var s;
    s = getObjectClass(this);
    if (this.opts.field instanceof MaskSplitter) {
      s += " [" + (getObjectClass(this.opts.field)) + " / " + (this.opts.field.splitterType()) + "]";
    } else if (this.opts.field) {
      s += " [" + (getObjectClass(this.opts.field)) + "]";
    }
    return s;
  };

  FieldsRenderer.prototype.getAllFields = function(fields, depth) {
    var _f, f, idx, j, len, ref;
    if (fields == null) {
      fields = [];
    }
    if (depth == null) {
      depth = 0;
    }
    ref = this.fields;
    for (idx = j = 0, len = ref.length; j < len; idx = ++j) {
      f = ref[idx];
      if (f instanceof FieldsRenderer) {
        _f = f.getField();
        if (_f && _f !== this.getField()) {
          fields.push(_f);
        }
        f.getAllFields(fields, depth + 1);
      } else {
        fields.push(f);
      }
    }
    return fields;
  };

  FieldsRenderer.prototype.findField = function(field) {
    var f, found, j, len, ref;
    if (this.opts.field === field) {
      return this;
    }
    ref = this.fields;
    for (j = 0, len = ref.length; j < len; j++) {
      f = ref[j];
      if (f === field) {
        return this;
      }
      if (f.findField) {
        found = f.findField(field);
        if (found) {
          return found;
        }
      }
    }
    return null;
  };

  return FieldsRenderer;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var FieldsRendererTopLevel,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FieldsRendererTopLevel = (function(superClass) {
  extend(FieldsRendererTopLevel, superClass);

  function FieldsRendererTopLevel(opts1) {
    this.opts = opts1 != null ? opts1 : {};
    FieldsRendererTopLevel.__super__.constructor.call(this, this.opts);
    this.div = $div("fields-renderer-top-level ez5-fields-renderer-" + this.getUniqueId());
  }

  FieldsRendererTopLevel.prototype.render = function(opts) {
    var content_resize, f, i, len, ref;
    opts.__waits = [];
    opts.__idx = 0;
    ref = this.fields;
    for (i = 0, len = ref.length; i < len; i++) {
      f = ref[i];
      this.div.append(f.render(opts));
    }
    content_resize = (function(_this) {
      return function() {
        return Events.trigger({
          type: "content-resize",
          node: _this.div
        });
      };
    })(this);
    CUI.when(opts.__waits).progress((function(_this) {
      return function() {
        return typeof opts.onProgress === "function" ? opts.onProgress({
          idx: opts.__idx,
          count: _this.__fields_length
        }) : void 0;
      };
    })(this)).done((function(_this) {
      return function() {
        content_resize();
        opts.__waits.splice(0);
        return typeof opts.onDone === "function" ? opts.onDone() : void 0;
      };
    })(this)).fail((function(_this) {
      return function() {
        return typeof opts.onFail === "function" ? opts.onFail() : void 0;
      };
    })(this));
    return this.div;
  };

  FieldsRendererTopLevel.prototype.read = function(read_fields) {
    var _fields, body, f, field, fn, i, idx, in_split, j, len, len1, m, new_fr, read_field, type;
    this.__fields_length = 0;
    this.__read_fields = [];
    in_split = null;
    for (i = 0, len = read_fields.length; i < len; i++) {
      read_field = read_fields[i];
      if (read_field instanceof MaskSplitter) {
        if (in_split) {
          this.__read_fields.push(new MaskSplitterSplitEnd());
          in_split = null;
        }
      } else {
        this.__fields_length++;
      }
      if (read_field instanceof MaskSplitterSplit) {
        in_split = read_field;
      }
      this.__read_fields.push(read_field);
    }
    if (in_split) {
      this.__read_fields.push(new MaskSplitterSplitEnd());
      in_split = null;
    }
    idx = 0;
    in_split = false;
    _fields = [];
    while (idx < this.__read_fields.length) {
      field = this.__read_fields[idx];
      type = typeof field.splitterType === "function" ? field.splitterType() : void 0;
      if (!type) {
        fn = "FieldsRendererPlain";
      } else if (type === "split") {
        fn = "FieldsRendererSplit";
      } else {
        m = type.match(/^(.*?)-begin$/);
        if (!m) {
          throw "FieldsRendererTopLevel: Cannot read field " + idx + ", type " + type + " [" + (getObjectClass(field)) + "]";
        } else {
          fn = "FieldsRenderer" + (toCamel(m[1], true));
        }
      }
      assert(window[fn], "FieldsRendererTopLevel.read", "Function " + fn + " not found.", {
        fields: this.__read_fields
      });
      new_fr = new window[fn]({
        field: field
      });
      _fields.push(new_fr);
      idx = new_fr.read(this.__read_fields, idx);
    }
    body = new FieldsRendererBody();
    for (j = 0, len1 = _fields.length; j < len1; j++) {
      f = _fields[j];
      if (f instanceof FieldsRendererHead) {
        this.addField(f);
      } else {
        body.addField(f);
      }
    }
    this.addField(body);
    this.findPlain();
    return this;
  };

  FieldsRendererTopLevel.prototype.dump = function() {
    var f, i, idx, len, lines, ref;
    lines = [];
    ref = this.__read_fields;
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      f = ref[idx];
      if (f.nameLocalized) {
        if (f instanceof MaskSplitter) {
          lines.push("#" + idx + " ----- " + f.nameLocalized() + " ----- ");
        } else {
          lines.push("#" + idx + ": field: " + (typeof f.nameLocalized === "function" ? f.nameLocalized() : void 0));
        }
      } else if (!(f instanceof MaskSplitter)) {
        switch (f.type) {
          case "field":
            lines.push("#" + idx + ": field: " + f.data.field_name + " [" + f.data.field_displayname + "]");
            break;
          default:
            if (!f.type) {
              console.debug(f);
            }
            lines.push("#" + idx + ": " + f.type);
        }
      } else {
        lines.push("#" + idx + ": " + f.fullName());
      }
    }
    lines.push("");
    lines.push("");
    return FieldsRendererTopLevel.__super__.dump.call(this, lines);
  };

  FieldsRendererTopLevel.prototype.isFieldAllowed = function(field) {
    return field instanceof FieldsRendererHead || field instanceof FieldsRendererBody;
  };

  return FieldsRendererTopLevel;

})(FieldsRenderer);
// Generated by CoffeeScript 1.10.0
var FieldsRendererPlain,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FieldsRendererPlain = (function(superClass) {
  extend(FieldsRendererPlain, superClass);

  function FieldsRendererPlain() {
    return FieldsRendererPlain.__super__.constructor.apply(this, arguments);
  }

  FieldsRendererPlain.prototype.render = function(opts) {
    var dom, lve;
    lve = this.getListViewFieldsRenderer(opts);
    if (!lve) {
      return;
    }
    dom = lve.render();
    opts.__waits.push(lve.root.open());
    return dom;
  };

  FieldsRendererPlain.prototype.hasContent = function(opts) {
    return this.getFieldsWithContent(opts, true);
  };

  FieldsRendererPlain.prototype.getFieldsWithContent = function(opts, has_content_check) {
    var empty, f, fields, filter, i, len, readonly, ref;
    if (has_content_check == null) {
      has_content_check = false;
    }
    switch (opts.mode) {
      case "detail":
      case "detail-header":
      case "text":
        filter = "empty";
        break;
      case "editor":
        filter = "empty+readonly";
        break;
      case "editor-bulk":
      case "editor-template":
        filter = "readonly";
        break;
      default:
        filter = null;
    }
    if (!has_content_check) {
      fields = [];
    }
    ref = this.fields;
    for (i = 0, len = ref.length; i < len; i++) {
      f = ref[i];
      if (filter) {
        empty = f.isEmpty(opts.data, opts.top_level_data, opts);
        readonly = f.isReadOnly(opts.data, opts.top_level_data, opts);
        if (filter === "empty" && empty) {
          continue;
        }
        if (filter === "readonly" && readonly) {
          continue;
        }
        if (filter === "empty+readonly" && empty && readonly) {
          continue;
        }
      }
      if (has_content_check) {
        return true;
      } else {
        fields.push(f);
      }
    }
    if (has_content_check) {
      return false;
    } else {
      return fields;
    }
  };

  FieldsRendererPlain.prototype.getListViewFieldsRenderer = function(opts) {
    var cls, dfr, f, fields, i, len, lve, lve_opts, rowMove;
    fields = this.getFieldsWithContent(opts);
    if (fields.length === 0) {
      return;
    }
    rowMove = false;
    for (i = 0, len = fields.length; i < len; i++) {
      f = fields[i];
      if (f.needsRowMove(opts.mode)) {
        rowMove = true;
      }
    }
    if (opts.mode.startsWith('detail') || opts.mode === 'text') {
      cls = void 0;
    } else {
      cls = 'cui-lv--has-datafields';
    }
    lve_opts = {
      maximize_horizontal: true,
      maximize_vertical: false,
      "class": cls,
      rowMove: rowMove,
      rowMoveWithinNodesOnly: true,
      selectableRows: opts.selectable !== false,
      cols: opts.cols,
      colClasses: opts.colClasses,
      no_hierarchy: opts.no_hierarchy,
      headerFields: opts.headerFields,
      fixedRows: 0,
      fixedCols: 0
    };
    lve = new ListViewFieldsRenderer(lve_opts);
    cls = lve.getListViewClass();
    dfr = new CUI.Deferred();
    opts.__waits.push(dfr);
    CUI.chunkWork.call(this, {
      items: fields,
      chunk_size: 5,
      timeout: 0,
      call: (function(_this) {
        return function(_fields) {
          var _field, j, len1, local_waits, options, promise;
          if (lve.isDestroyed()) {
            return false;
          }
          local_waits = [];
          for (j = 0, len1 = _fields.length; j < len1; j++) {
            _field = _fields[j];
            options = copyObject(opts);
            options.field = _field;
            if (typeof opts.setOptionsForListView === "function") {
              opts.setOptionsForListView(options);
            }
            promise = lve.addField(options);
            local_waits.push(promise);
            promise.done(function() {
              dfr.notify();
              return opts.__idx++;
            });
          }
          return CUI.when(local_waits);
        };
      })(this)
    }).done((function(_this) {
      return function() {
        return dfr.resolve();
      };
    })(this)).fail((function(_this) {
      return function() {
        return dfr.reject();
      };
    })(this));
    return lve;
  };

  FieldsRendererPlain.prototype.findPlain = function() {};

  FieldsRendererPlain.prototype.read = function(fields, idx) {
    var base;
    while (idx < fields.length) {
      if (typeof (base = fields[idx]).splitterType === "function" ? base.splitterType() : void 0) {
        return idx;
      }
      this.addField(fields[idx++]);
    }
    return idx;
  };

  FieldsRendererPlain.prototype.isFieldAllowed = function(field) {
    return field instanceof ListViewEditTreeMaskRowNode || field instanceof FieldsRendererSplit || field instanceof Field || field instanceof MultipleFieldsContainer;
  };

  return FieldsRendererPlain;

})(FieldsRenderer);
// Generated by CoffeeScript 1.10.0
var FieldsRendererHead,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FieldsRendererHead = (function(superClass) {
  extend(FieldsRendererHead, superClass);

  function FieldsRendererHead() {
    return FieldsRendererHead.__super__.constructor.apply(this, arguments);
  }

  FieldsRendererHead.prototype.render = function(opts) {
    var div;
    div = $div("ez5-fields-renderer-head-container");
    this.renderFields(opts, div);
    return div;
  };

  FieldsRendererHead.prototype.type = function() {
    return "head";
  };

  FieldsRendererHead.prototype.isFieldAllowed = function(field) {
    return field instanceof FieldsRendererPlain || field instanceof MaskSplitterHeadEnd || field instanceof ListViewEditTreeMaskRowNode || field instanceof Field;
  };

  return FieldsRendererHead;

})(FieldsRenderer);
// Generated by CoffeeScript 1.10.0
var FieldsRendererHeadInternal,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FieldsRendererHeadInternal = (function(superClass) {
  extend(FieldsRendererHeadInternal, superClass);

  function FieldsRendererHeadInternal() {
    return FieldsRendererHeadInternal.__super__.constructor.apply(this, arguments);
  }

  FieldsRendererHeadInternal.prototype.type = function() {
    return "head-internal";
  };

  return FieldsRendererHeadInternal;

})(FieldsRendererHead);
// Generated by CoffeeScript 1.10.0
var FieldsRendererBody,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FieldsRendererBody = (function(superClass) {
  extend(FieldsRendererBody, superClass);

  function FieldsRendererBody() {
    return FieldsRendererBody.__super__.constructor.apply(this, arguments);
  }

  FieldsRendererBody.prototype.render = function(opts) {
    var div;
    div = $div("fields-renderer-body");
    return this.renderFields(opts, div);
  };

  FieldsRendererBody.prototype.type = function() {
    return "body";
  };

  FieldsRendererBody.prototype.isFieldAllowed = function(field) {
    return field instanceof FieldsRendererPlain || field instanceof FieldsRendererTabs || field instanceof FieldsRendererPanel || field instanceof FieldsRendererSplit || field instanceof ListViewEditTreeMaskRowNode || field instanceof Field;
  };

  return FieldsRendererBody;

})(FieldsRenderer);
// Generated by CoffeeScript 1.10.0
var FieldsRendererPanel,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FieldsRendererPanel = (function(superClass) {
  extend(FieldsRendererPanel, superClass);

  function FieldsRendererPanel() {
    return FieldsRendererPanel.__super__.constructor.apply(this, arguments);
  }

  FieldsRendererPanel.prototype.render = function(opts) {
    var field, i, len, load_on_open, panel, ref;
    if (!this.hasContent(opts)) {
      return;
    }
    load_on_open = true;
    if (opts.for_print || this._field.isClosed() === false) {
      load_on_open = false;
    } else {
      ref = this.fields;
      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];
        if (typeof field.needsDirectRender === "function" ? field.needsDirectRender(opts) : void 0) {
          load_on_open = false;
          break;
        }
      }
    }
    if (!load_on_open) {
      if (opts.for_print && CUI.__ng__) {
        return new Block({
          text: this.opts.field.nameLocalized(),
          content: (function(_this) {
            return function() {
              var div;
              div = $div();
              _this.renderFields(opts, div);
              return div.children;
            };
          })(this)
        }).DOM;
      } else {
        return new Panel({
          text: this.opts.field.nameLocalized(),
          radio: true,
          closed: false,
          content: (function(_this) {
            return function() {
              var div;
              div = $div();
              _this.renderFields(opts, div);
              return div.children;
            };
          })(this)
        }).DOM;
      }
    } else {
      return panel = new Panel({
        text: this.opts.field.nameLocalized(),
        closed: true,
        load_on_open: true,
        content_placeholder: new LocaLabel({
          loca_key: "fields.renderer.panel.loading"
        }),
        content: (function(_this) {
          return function() {
            var dfr, div;
            dfr = new CUI.Deferred();
            div = $div();
            _this.renderFields(opts, div);
            CUI.when(opts.__waits).always(function() {
              dfr.resolve(div.children);
              return Events.trigger({
                type: "editor-changed",
                node: panel
              });
            });
            return dfr.promise();
          };
        })(this)
      }).DOM;
    }
  };

  FieldsRendererPanel.prototype.type = function() {
    return "panel";
  };

  FieldsRendererPanel.prototype.isFieldAllowed = function(field) {
    return field instanceof FieldsRendererPlain || field instanceof MaskSplitterPanelEnd || field instanceof ListViewEditTreeMaskRowNode || field instanceof MultipleFieldsContainer || field instanceof FieldsRendererSplit || field instanceof FieldsRendererPlain || field instanceof Field;
  };

  return FieldsRendererPanel;

})(FieldsRenderer);
// Generated by CoffeeScript 1.10.0
var FieldsRendererSplit,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FieldsRendererSplit = (function(superClass) {
  extend(FieldsRendererSplit, superClass);

  function FieldsRendererSplit() {
    return FieldsRendererSplit.__super__.constructor.apply(this, arguments);
  }

  FieldsRendererSplit.prototype.type = function() {
    return "split";
  };

  FieldsRendererSplit.prototype.beginSplitterType = function() {
    return "split";
  };

  FieldsRendererSplit.prototype.endSplitterType = function() {
    return "split-end";
  };

  FieldsRendererSplit.prototype.render = function(opts) {
    var bl, div;
    if (!this.hasContent(opts)) {
      return;
    }
    div = $div();
    this.renderFields(opts, div);
    bl = new Block({
      text: this.opts.field.nameLocalized(),
      content: div.children
    });
    return bl.DOM;
  };

  FieldsRendererSplit.prototype.isFieldAllowed = function(field) {
    return FieldsRendererSplit.__super__.isFieldAllowed.call(this, field) || field instanceof MaskSplitterSplitEnd;
  };

  return FieldsRendererSplit;

})(FieldsRendererPanel);
// Generated by CoffeeScript 1.10.0
var FieldsRendererTabs,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FieldsRendererTabs = (function(superClass) {
  extend(FieldsRendererTabs, superClass);

  function FieldsRendererTabs() {
    return FieldsRendererTabs.__super__.constructor.apply(this, arguments);
  }

  FieldsRendererTabs.prototype.render = function(opts) {
    var div, field, i, j, len, len1, load_later, panel, panels, ref, tabs;
    panels = [];
    tabs = [];
    ref = this.fields;
    for (i = 0, len = ref.length; i < len; i++) {
      field = ref[i];
      if (field instanceof MaskSplitterTabsEnd) {
        continue;
      }
      if (field.hasContent && !field.hasContent(opts)) {
        continue;
      }
      div = $div();
      if (tabs.length === 0 || opts.for_print || field.needsDirectRender(opts)) {
        field.render(opts, div);
        load_later = false;
      } else {
        load_later = true;
      }
      if (opts.for_print) {
        panels.push(new Panel({
          text: field.getTabTitle(),
          closed: !opts.for_print,
          content: div.children
        }));
      } else if (!load_later) {
        tabs.push({
          text: field.getTabTitle(),
          content: div.children
        });
      } else {
        (function(_this) {
          return (function(field, div) {
            return tabs.push({
              text: field.getTabTitle(),
              load_on_show: true,
              content_placeholder: CUI.__ng__ ? new EmptyLocaLabel({
                loca_key: "fields.renderer.tab.loading",
                centered: true
              }) : new LocaLabel({
                loca_key: "fields.renderer.tab.loading"
              }),
              content: function() {
                var dfr;
                dfr = new CUI.Deferred();
                field.render(opts, div);
                CUI.when(opts.__waits).always(function() {
                  dfr.resolve(div.children);
                  Events.trigger({
                    type: "content-resize",
                    node: tabs
                  });
                  return Events.trigger({
                    type: "editor-changed",
                    node: tabs
                  });
                });
                return dfr.promise();
              }
            });
          });
        })(this)(field, div);
      }
    }
    if (opts.for_print) {
      div = $div();
      for (j = 0, len1 = panels.length; j < len1; j++) {
        panel = panels[j];
        div.append(panel.DOM);
      }
      return div;
    }
    if (tabs.length) {
      return tabs = new Tabs({
        "class": "ez5-fields-renderer-tabs",
        tabs: tabs,
        maximize_horizontal: true,
        maximize_vertical: false
      }).DOM;
    } else {
      return null;
    }
  };

  FieldsRendererTabs.prototype.type = function() {
    return "tabs";
  };

  FieldsRendererTabs.prototype.read = function(fields, idx) {
    var base, base1, field, panel, split, tab, type;
    if ((typeof (base = fields[idx]).splitterType === "function" ? base.splitterType() : void 0) !== this.beginSplitterType()) {
      throw "Cannot read " + (this.type()) + "-begin from field type " + (typeof (base1 = fields[idx]).splitterType === "function" ? base1.splitterType() : void 0);
    }
    tab = new FieldsRendererTab({
      field: this.opts.field
    });
    this.addField(tab);
    idx++;
    while (idx < fields.length) {
      field = fields[idx];
      type = typeof field.splitterType === "function" ? field.splitterType() : void 0;
      if (type) {
        if (type === "tabs-end") {
          this.addField(field);
          return idx + 1;
        } else if (type === "tab") {
          tab = new FieldsRendererTab({
            field: field
          });
          this.addField(tab);
          idx++;
          continue;
        } else if (type === "panel-begin") {
          panel = new FieldsRendererPanel({
            field: field
          });
          tab.addField(panel);
          idx = panel.read(fields, idx);
          continue;
        } else if (type === "split") {
          split = new FieldsRendererSplit({
            field: field
          });
          tab.addField(split);
          idx = split.read(fields, idx);
          continue;
        } else {
          throw "Cannot read type " + type + " inside " + (this.type());
        }
      }
      tab.addField(fields[idx]);
      idx++;
    }
    return idx;
  };

  FieldsRendererTabs.prototype.isFieldAllowed = function(field) {
    return field instanceof FieldsRendererTab || field instanceof MaskSplitterTabsEnd;
  };

  return FieldsRendererTabs;

})(FieldsRenderer);
// Generated by CoffeeScript 1.10.0
var FieldsRendererTab,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FieldsRendererTab = (function(superClass) {
  extend(FieldsRendererTab, superClass);

  function FieldsRendererTab() {
    return FieldsRendererTab.__super__.constructor.apply(this, arguments);
  }

  FieldsRendererTab.prototype.getTabTitle = function() {
    return this.opts.field.nameLocalized();
  };

  FieldsRendererTab.prototype.render = function(opts, div) {
    return this.renderFields(opts, div);
  };

  FieldsRendererTab.prototype.isFieldAllowed = function(field) {
    return field instanceof FieldsRendererPanel || field instanceof FieldsRendererPlain || field instanceof FieldsRendererSplit || field instanceof ListViewEditTreeMaskRowNode || field instanceof Field;
  };

  return FieldsRendererTab;

})(FieldsRenderer);
// Generated by CoffeeScript 1.10.0
var MaskSplitter, MaskSplitterBegin, MaskSplitterEnd, MaskSplitterHead, MaskSplitterHeadEnd, MaskSplitterHeadInternal, MaskSplitterHeadInternalEnd, MaskSplitterPanel, MaskSplitterPanelEnd, MaskSplitterPanelFixed, MaskSplitterSplit, MaskSplitterSplitEnd, MaskSplitterSplitFixed, MaskSplitterTab, MaskSplitterTabs, MaskSplitterTabsEnd,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

MaskSplitter = (function(superClass) {
  extend(MaskSplitter, superClass);

  function MaskSplitter() {
    this.getLocaKey = bind(this.getLocaKey, this);
    return MaskSplitter.__super__.constructor.apply(this, arguments);
  }

  MaskSplitter.prototype.initOpts = function() {
    MaskSplitter.__super__.initOpts.call(this);
    return this.addOpts({
      field: {
        check: function(v) {
          return v.kind === "splitter";
        }
      },
      options: {
        check: "PlainObject"
      },
      version: {
        check: ["CURRENT", "HEAD", "TEMP"]
      },
      l10n_prefix: {
        check: Function
      },
      rows: {
        check: Array
      },
      maskEditor: {
        check: MaskEditor
      }
    });
  };

  MaskSplitter.prototype.readOpts = function() {
    var ref;
    if (!this.opts.field) {
      this.opts.field = {
        kind: "splitter"
      };
    }
    if (this.opts.field.options) {
      try {
        this.opts.options = JSON.parse(this.opts.field.options);
      } catch (undefined) {}
    }
    if (this._l10n_prefix) {
      console.debug("options", (ref = this.opts.field) != null ? ref.options : void 0);
    }
    if (!this.opts.options) {
      this.opts.options = {};
    }
    if (!this.opts.options.splitterIdx) {
      this.opts.options.splitterIdx = ++MaskSplitter.maxSplitterIdx;
    } else if (MaskSplitter.maxSplitterIdx < this.opts.options.splitterIdx) {
      MaskSplitter.maxSplitterIdx = this.opts.options.splitterIdx;
    }
    this.opts.data = {
      version: this.opts.version,
      field: this.opts.field,
      options: this.opts.options,
      _fields: {}
    };
    MaskSplitter.__super__.readOpts.call(this);
    if (this._l10n_prefix) {
      this.opts.data.field.displayname_l10n = ez5.loca.get_user_key(this.opts.data.version, this.getLocaKey(this._l10n_prefix));
    }
    return this.maskEditor = this._maskEditor;
  };

  MaskSplitter.prototype.getLocaKey = function(l10n_prefix) {
    assert($.isFunction(l10n_prefix), (getObjectClass(this)) + ".getLocaKey", "l10n_prefix is not a Function", {
      opts: this.opts
    });
    return (l10n_prefix()) + "splitter." + this.opts.data.options.splitterIdx;
  };

  MaskSplitter.prototype.renderContent = function() {
    return assert(false, getObjectClass(this) + ".renderContent", "Needs implementation.");
  };

  MaskSplitter.prototype.renderNameInput = function() {
    var loca_key, mi;
    loca_key = "mask.splitter.panel.spliter_name." + this.splitterType();
    mi = new MultiInput({
      name: "displayname_l10n",
      control: ez5.loca.getLanguageControlAdmin(),
      data: this.opts.data.field
    }).start();
    return new VerticalList({
      content: [
        new LocaLabel({
          loca_key: loca_key
        }), mi
      ]
    });
  };

  MaskSplitter.prototype.getFieldToSave = function(opts) {
    if (this.opts.data.field.displayname_l10n) {
      opts.l10n_keys[this.getLocaKey(opts.l10n_prefix)] = this.opts.data.field.displayname_l10n;
    }
    return {
      kind: "splitter",
      options: JSON.stringify(this.opts.data.options),
      type: this.splitterType()
    };
  };

  MaskSplitter.prototype.getElementClass = function() {
    return "";
  };

  MaskSplitter.prototype.getClass = function() {
    var cls;
    cls = MaskSplitter.__super__.getClass.call(this);
    cls + " mask-splitter " + toDash(getObjectClass(this));
    return cls;
  };

  MaskSplitter.prototype.addToMaskEditor = function(maskEditor1) {
    this.maskEditor = maskEditor1;
    this.maskEditor.addNode(this);
    this.select();
    return this;
  };

  MaskSplitter.prototype.splitterType = function() {
    return assert(false, (getObjectClass(this)) + ".splitterType", "Overwrite me");
  };

  MaskSplitter.prototype.init = function() {};

  MaskSplitter.prototype.supportsFacet = function() {
    return false;
  };

  MaskSplitter.prototype.isSourceForMapping = function() {
    return false;
  };

  MaskSplitter.prototype.getSaveData = function(data, save_data, opts) {};

  MaskSplitter.prototype.name = function() {
    return this.splitterType();
  };

  MaskSplitter.prototype.nameLocalized = function() {
    return ez5.loca.getBestFrontendValue(this.opts.data.field.displayname_l10n) || getObjectClass(this).substring("MaskSplitter".length) + (" [" + this.opts.data.options.splitterIdx + "]");
  };

  MaskSplitter.prototype.fullNameLocalized = function() {
    return this.splitterType();
  };

  MaskSplitter.prototype.getOption = function() {
    return false;
  };

  MaskSplitter.prototype.fullName = function() {
    return this.splitterType();
  };

  MaskSplitter.prototype.depth = function() {
    return 0;
  };

  MaskSplitter.prototype.needsRowMove = function() {
    return false;
  };

  MaskSplitter.prototype.isExpertCommon = function() {
    return false;
  };

  MaskSplitter.prototype.isExpertCommonOnly = function() {
    return false;
  };

  MaskSplitter.prototype.isVisible = function(mode, opts) {
    switch (mode) {
      case "editor-header":
      case "editor-header-bulk":
      case "editor-header-template":
      case "detail-header":
      case "text":
      case "table":
      case 'fulltext':
      case 'standard':
        return false;
      default:
        return true;
    }
  };

  MaskSplitter.prototype.renderStandard = function(standard, data) {};

  MaskSplitter.maxSplitterIdx = -1;

  MaskSplitter.getFromField = function(opts) {
    var fn, i, len, ref, type;
    if (opts == null) {
      opts = {};
    }
    fn = "MaskSplitter.getFromField";
    assert(opts.field.kind === "splitter", fn, "opts.field.kind needs to be splitter", {
      opts: opts
    });
    assert(!opts.maskEditor || opts.maskEditor instanceof MaskEditor, fn, "opts.maskEditor needs to be MaskEditor", {
      opts: opts
    });
    ref = [MaskSplitterTabs, MaskSplitterTab, MaskSplitterTabsEnd, MaskSplitterPanel, MaskSplitterPanelEnd, MaskSplitterHead, MaskSplitterHeadEnd, MaskSplitterSplit];
    for (i = 0, len = ref.length; i < len; i++) {
      type = ref[i];
      if (type.prototype.splitterType() === opts.field.type) {
        return new type(opts);
      }
    }
    assert(false, fn, "opts.field.type " + opts.field.type + " not found", {
      opts: opts
    });
  };

  MaskSplitter.getMenuItems = function(maskEditor) {
    var fn1, head, i, items, j, k, kL, len, len1, ref, ref1, row;
    items = [];
    head = false;
    ref = maskEditor.current_mask.getRows();
    for (i = 0, len = ref.length; i < len; i++) {
      row = ref[i];
      if (row instanceof MaskSplitterHead) {
        head = true;
      }
    }
    ref1 = ["Tabs", "Tab", "Panel", "Split"];
    fn1 = (function(_this) {
      return function(k) {
        var disabled;
        switch (k) {
          case "Tab":
            disabled = !(maskEditor.mask_table.getSelectedNode() instanceof MaskSplitterTabs);
            break;
          case "Head":
            disabled = head;
            break;
          default:
            disabled = false;
        }
        return items.push({
          value: k,
          disabled: disabled,
          text: $$("admin.mask.add_" + kL),
          onClick: function() {
            return (new window["MaskSplitter" + k]()).addToMaskEditor(maskEditor);
          }
        });
      };
    })(this);
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      k = ref1[j];
      kL = k.toLowerCase();
      fn1(k);
    }
    return items;
  };

  return MaskSplitter;

})(ListViewEditTreeMaskRowNode);

MaskSplitterSplit = (function(superClass) {
  extend(MaskSplitterSplit, superClass);

  function MaskSplitterSplit() {
    return MaskSplitterSplit.__super__.constructor.apply(this, arguments);
  }

  MaskSplitterSplit.prototype.splitterType = function() {
    return "split";
  };

  MaskSplitterSplit.prototype.renderContent = function() {
    return this.renderNameInput();
  };

  MaskSplitterSplit.prototype.trashable = function() {
    return true;
  };

  return MaskSplitterSplit;

})(MaskSplitter);

MaskSplitterSplitFixed = (function(superClass) {
  extend(MaskSplitterSplitFixed, superClass);

  function MaskSplitterSplitFixed() {
    return MaskSplitterSplitFixed.__super__.constructor.apply(this, arguments);
  }

  MaskSplitterSplitFixed.prototype.initOpts = function() {
    MaskSplitterSplitFixed.__super__.initOpts.call(this);
    return this.addOpts({
      text: {
        mandatory: true,
        check: String
      }
    });
  };

  MaskSplitterSplitFixed.prototype.nameLocalized = function() {
    return this._text;
  };

  return MaskSplitterSplitFixed;

})(MaskSplitterSplit);

MaskSplitterEnd = (function(superClass) {
  extend(MaskSplitterEnd, superClass);

  function MaskSplitterEnd() {
    return MaskSplitterEnd.__super__.constructor.apply(this, arguments);
  }

  MaskSplitterEnd.prototype.renderContent = function() {
    return "";
  };

  MaskSplitterEnd.prototype.getClass = function() {
    return (MaskSplitterEnd.__super__.getClass.call(this)) + " mask-splitter-end";
  };

  return MaskSplitterEnd;

})(MaskSplitter);

MaskSplitterHeadEnd = (function(superClass) {
  extend(MaskSplitterHeadEnd, superClass);

  function MaskSplitterHeadEnd() {
    return MaskSplitterHeadEnd.__super__.constructor.apply(this, arguments);
  }

  MaskSplitterHeadEnd.prototype.splitterType = function() {
    return "head-end";
  };

  return MaskSplitterHeadEnd;

})(MaskSplitterEnd);

MaskSplitterPanelEnd = (function(superClass) {
  extend(MaskSplitterPanelEnd, superClass);

  function MaskSplitterPanelEnd() {
    return MaskSplitterPanelEnd.__super__.constructor.apply(this, arguments);
  }

  MaskSplitterPanelEnd.prototype.splitterType = function() {
    return "panel-end";
  };

  return MaskSplitterPanelEnd;

})(MaskSplitterEnd);

MaskSplitterSplitEnd = (function(superClass) {
  extend(MaskSplitterSplitEnd, superClass);

  function MaskSplitterSplitEnd() {
    return MaskSplitterSplitEnd.__super__.constructor.apply(this, arguments);
  }

  MaskSplitterSplitEnd.prototype.splitterType = function() {
    return "split-end";
  };

  return MaskSplitterSplitEnd;

})(MaskSplitterEnd);

MaskSplitterTabsEnd = (function(superClass) {
  extend(MaskSplitterTabsEnd, superClass);

  function MaskSplitterTabsEnd() {
    return MaskSplitterTabsEnd.__super__.constructor.apply(this, arguments);
  }

  MaskSplitterTabsEnd.prototype.splitterType = function() {
    return "tabs-end";
  };

  return MaskSplitterTabsEnd;

})(MaskSplitterEnd);

MaskSplitterBegin = (function(superClass) {
  extend(MaskSplitterBegin, superClass);

  function MaskSplitterBegin() {
    return MaskSplitterBegin.__super__.constructor.apply(this, arguments);
  }

  MaskSplitterBegin.prototype.renderContent = function() {
    return this.renderNameInput();
  };

  MaskSplitterBegin.prototype.trashable = function() {
    return true;
  };

  MaskSplitterBegin.prototype.remove = function() {
    var f, i, len, ref;
    ref = this.getRowsToMove();
    for (i = 0, len = ref.length; i < len; i++) {
      f = ref[i];
      if (!(f instanceof MaskSplitter)) {
        continue;
      }
      f.remove();
    }
    return MaskSplitterBegin.__super__.remove.call(this);
  };

  MaskSplitterBegin.prototype.addToMaskEditor = function(maskEditor1) {
    this.maskEditor = maskEditor1;
    this.maskEditor.addNode(this);
    this.select();
    this.maskEditor.addNode(new window[getObjectClass(this) + "End"]());
    this.maskEditor.update_mask_form();
    return this;
  };

  MaskSplitterBegin.prototype.getRowsToMove = function() {
    var fr, rows_to_move;
    fr = (new FieldsRendererTopLevel()).read(this.father.children);
    rows_to_move = fr.findField(this).getAllFields();
    return rows_to_move;
  };

  MaskSplitterBegin.prototype.moveRow = function(listView, target_node, after) {
    var f, fields, from_i, i, j, len, len1, move_rows_i, ref, row_i, to_i;
    fields = this.getRowsToMove();
    move_rows_i = [];
    for (i = 0, len = fields.length; i < len; i++) {
      f = fields[i];
      move_rows_i.push(f.getRowIdx());
    }
    from_i = this.getRowIdx();
    to_i = target_node.getRowIdx();
    listView.moveRow(from_i, to_i, after);
    ref = move_rows_i.reverse();
    for (j = 0, len1 = ref.length; j < len1; j++) {
      row_i = ref[j];
      listView.moveRow(row_i, from_i, true);
    }
    return this;
  };

  return MaskSplitterBegin;

})(MaskSplitter);

MaskSplitterTabs = (function(superClass) {
  extend(MaskSplitterTabs, superClass);

  function MaskSplitterTabs() {
    return MaskSplitterTabs.__super__.constructor.apply(this, arguments);
  }

  MaskSplitterTabs.prototype.splitterType = function() {
    return "tabs-begin";
  };

  MaskSplitterTabs.prototype.renderContent = function() {
    return this.renderNameInput();
  };

  MaskSplitterTabs.prototype.trashable = function() {
    return true;
  };

  return MaskSplitterTabs;

})(MaskSplitterBegin);

MaskSplitterTab = (function(superClass) {
  extend(MaskSplitterTab, superClass);

  function MaskSplitterTab() {
    return MaskSplitterTab.__super__.constructor.apply(this, arguments);
  }

  MaskSplitterTab.prototype.splitterType = function() {
    return "tab";
  };

  MaskSplitterTab.prototype.renderContent = function() {
    return this.renderNameInput();
  };

  MaskSplitterTab.prototype.trashable = function() {
    return true;
  };

  MaskSplitterTab.prototype.addToMaskEditor = function(maskEditor1) {
    var tabs_row;
    this.maskEditor = maskEditor1;
    tabs_row = this.maskEditor.mask_table.getSelectedNode();
    MaskSplitterTab.__super__.addToMaskEditor.call(this, this.maskEditor);
    this.maskEditor.mask_table.moveRow(this.getRowIdx(), tabs_row.getRowIdx(), true);
    return this;
  };

  return MaskSplitterTab;

})(MaskSplitter);

MaskSplitterPanel = (function(superClass) {
  extend(MaskSplitterPanel, superClass);

  function MaskSplitterPanel() {
    return MaskSplitterPanel.__super__.constructor.apply(this, arguments);
  }

  MaskSplitterPanel.prototype.splitterType = function() {
    return "panel-begin";
  };

  MaskSplitterPanel.prototype.isClosed = function() {
    return true;
  };

  return MaskSplitterPanel;

})(MaskSplitterBegin);

MaskSplitterPanelFixed = (function(superClass) {
  extend(MaskSplitterPanelFixed, superClass);

  function MaskSplitterPanelFixed() {
    return MaskSplitterPanelFixed.__super__.constructor.apply(this, arguments);
  }

  MaskSplitterPanelFixed.prototype.initOpts = function() {
    MaskSplitterSplitFixed.prototype.initOpts.apply(this, arguments);
    return this.addOpts({
      closed: {
        check: Boolean
      }
    });
  };

  MaskSplitterPanelFixed.prototype.nameLocalized = function() {
    return MaskSplitterSplitFixed.prototype.nameLocalized.apply(this, arguments);
  };

  MaskSplitterPanelFixed.prototype.isClosed = function() {
    return this._closed !== true;
  };

  return MaskSplitterPanelFixed;

})(MaskSplitterPanel);

MaskSplitterHead = (function(superClass) {
  extend(MaskSplitterHead, superClass);

  function MaskSplitterHead() {
    return MaskSplitterHead.__super__.constructor.apply(this, arguments);
  }

  MaskSplitterHead.prototype.splitterType = function() {
    return "head-begin";
  };

  MaskSplitterHead.prototype.addToMaskEditor = function(maskEditor) {
    MaskSplitterHead.__super__.addToMaskEditor.call(this, maskEditor);
    this.moveRow(maskEditor.mask_table, this.father.children[0], false);
    return this;
  };

  return MaskSplitterHead;

})(MaskSplitterBegin);

MaskSplitterHeadInternal = (function(superClass) {
  extend(MaskSplitterHeadInternal, superClass);

  function MaskSplitterHeadInternal() {
    return MaskSplitterHeadInternal.__super__.constructor.apply(this, arguments);
  }

  MaskSplitterHeadInternal.prototype.splitterType = function() {
    return "head-internal-begin";
  };

  return MaskSplitterHeadInternal;

})(MaskSplitterHead);

MaskSplitterHeadInternalEnd = (function(superClass) {
  extend(MaskSplitterHeadInternalEnd, superClass);

  function MaskSplitterHeadInternalEnd() {
    return MaskSplitterHeadInternalEnd.__super__.constructor.apply(this, arguments);
  }

  MaskSplitterHeadInternalEnd.prototype.splitterType = function() {
    return "head-internal-end";
  };

  return MaskSplitterHeadInternalEnd;

})(MaskSplitterEnd);
// Generated by CoffeeScript 1.10.0
var FieldListViewColumn,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FieldListViewColumn = (function(superClass) {
  extend(FieldListViewColumn, superClass);

  function FieldListViewColumn() {
    return FieldListViewColumn.__super__.constructor.apply(this, arguments);
  }

  FieldListViewColumn.prototype.readOpts = function() {
    FieldListViewColumn.__super__.readOpts.call(this);
    this.field = this._field;
    this.data = this._data;
    this.top_level_data = this._top_level_data;
    this.mode = this._mode;
    return this.addClass(this.field.getClass());
  };

  FieldListViewColumn.prototype.initOpts = function() {
    FieldListViewColumn.__super__.initOpts.call(this);
    return this.addOpts({
      field: {
        mandatory: true,
        check: function(v) {
          return v instanceof Field || v instanceof MultipleFieldsContainer;
        }
      },
      data: {
        mandatory: true,
        check: "PlainObject"
      },
      top_level_data: {
        mandatory: true,
        check: "PlainObject"
      },
      mode: {
        mandatory: true,
        check: String
      },
      for_print: {
        check: Boolean
      },
      bulk_mode: {
        check: Boolean
      },
      editor: {
        check: Editor
      },
      search: {
        check: Search
      },
      detail: {
        check: function(v) {
          return v instanceof DetailSidebar || v instanceof DetailInfo || v === true;
        }
      },
      pool_ids: {
        check: Array
      },
      infoLastInsert: {
        check: "PlainObject"
      },
      appendMultipleRows: {
        check: Function
      }
    });
  };

  FieldListViewColumn.prototype.render = function() {
    switch (this.mode) {
      case "detail":
      case "detail-no-eas":
      case "detail-header":
      case "text":
      case "table":
        return this.renderDetail();
      case "expert":
        return this.renderSearch();
      default:
        if (this.mode.startsWith("editor")) {
          if (this.field.isReadOnly(this.data, this.top_level_data, this.opts)) {
            return this.renderDetail();
          } else {
            return this.renderEditor();
          }
        } else {
          return assert(false, "FieldListViewColumn.render", "Unknown mode " + this.opts.mode + ".", {
            opts: this.opts
          });
        }
    }
  };

  FieldListViewColumn.prototype.renderSearch = function() {
    return this.__input_element = this.field.renderSearchInput(this.data, this.opts);
  };

  FieldListViewColumn.prototype.updateSearch = function() {
    var ref;
    this.renderSearch();
    if ((ref = this.getRow().getSearchUnsetCheckbox()) != null) {
      ref.setValue(false);
    }
    this.__element.empty().append(this.__input_element);
    return this.__input_element;
  };

  FieldListViewColumn.prototype.renderDetail = function() {
    return this.field.renderDetailOutput(this.data, this.top_level_data, this.opts);
  };

  FieldListViewColumn.prototype.renderEditor = function() {
    return this.initializeInputElement(this.field.renderEditorInput(this.data, this.top_level_data, this.opts));
  };

  FieldListViewColumn.prototype.initializeInputElement = function(input_element) {
    var order, ref, ref1;
    this.__input_element = input_element.DOM || input_element;
    assert(!isNull(this.__input_element), "FieldListViewColumn.renderEditor", "element returned by field.renderEditorInput must not be null", {
      element: this.__input_element,
      field: this.field,
      data: this.data,
      top_level_data: this.top_level_data,
      opts: this.opts
    });
    if ((ref = typeof this.__input_element) === "string" || ref === "number") {
      CUI.warn("FieldListViewColumn.renderEditor: Element is 'string' or 'number'.", this.__input_element);
      return this.__input_element;
    }
    this.saved = this.field.initSavedData(this.data, this.top_level_data);
    order = (ref1 = this.field.getOutputStandard()) != null ? ref1.order : void 0;
    if (order) {
      this.__input_element.addClass("ez5-standard-order");
      this.__input_element.attr("standard-order", order);
    }
    Events.listen({
      type: ["pool-field-changed", "tags-field-changed", "editor-changed", "editor-changed-reload", "editor-update-asset-browser", "editor-reload-asset-browser"],
      node: this.__input_element,
      call: (function(_this) {
        return function(ev) {
          _this.checkField();
        };
      })(this)
    });
    return this.__input_element;
  };

  FieldListViewColumn.prototype.setElement = function(__element) {
    var ret;
    this.__element = __element;
    ret = FieldListViewColumn.__super__.setElement.call(this, this.__element);
    if (this.__input_element) {
      if (this.mode.startsWith("editor")) {
        this.field.setFieldData(this, this.__element[0]);
        this.checkField();
        this.checkProblemClass();
      } else {
        this.field.setFieldData(this, this.__element[0]);
      }
    }
    return ret;
  };

  FieldListViewColumn.prototype.getInputElement = function() {
    return this.__input_element;
  };

  FieldListViewColumn.prototype.checkField = function() {
    var e, error;
    try {
      this.changed(this.hasChangedData());
    } catch (error) {
      e = error;
      if (e instanceof InvalidSaveDataException) {
        this.changed(true);
      } else {
        throw e;
      }
    }
    return this;
  };

  FieldListViewColumn.prototype.checkProblemClass = function() {
    var field_data, ref;
    field_data = this._field.getDataForFieldData(this._data, this._top_level_data);
    if ((ref = field_data[this._field.name() + ':field']) != null ? ref.check_failed : void 0) {
      this.addClass('ez5-check-failed-column');
    }
    return this;
  };

  FieldListViewColumn.prototype.setProblemClass = function() {
    this.addClass('ez5-check-failed-column');
    this.getRow().setProblemClass();
    return this;
  };

  FieldListViewColumn.prototype.hasChangedData = function() {
    return this.field.getDataAsString(this.data, this.top_level_data) !== this.saved;
  };

  FieldListViewColumn.prototype.changed = function(on_off) {
    if (isNull(on_off)) {
      return this.is_changed;
    }
    this.is_changed = on_off;
    if (this.is_changed) {
      this.addClass("data-changed");
    } else {
      this.removeClass("data-changed");
    }
    return this.is_changed;
  };

  return FieldListViewColumn;

})(ListViewColumn);
// Generated by CoffeeScript 1.10.0
var FieldListViewColumnVertical,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FieldListViewColumnVertical = (function(superClass) {
  extend(FieldListViewColumnVertical, superClass);

  function FieldListViewColumnVertical() {
    return FieldListViewColumnVertical.__super__.constructor.apply(this, arguments);
  }

  FieldListViewColumnVertical.prototype.changed = function(on_off) {
    if (isNull(on_off)) {
      return FieldListViewColumnVertical.__super__.changed.call(this, on_off);
    }
    return this.getRow().changed(FieldListViewColumnVertical.__super__.changed.call(this, on_off));
  };

  FieldListViewColumnVertical.prototype.setElement = function(__element) {
    this.__element = __element;
    this.addClass("ez5-field-list-view-column-vertical");
    return FieldListViewColumnVertical.__super__.setElement.call(this, this.__element);
  };

  return FieldListViewColumnVertical;

})(FieldListViewColumn);
// Generated by CoffeeScript 1.10.0
var FieldListViewColumnHorizontal,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FieldListViewColumnHorizontal = (function(superClass) {
  extend(FieldListViewColumnHorizontal, superClass);

  function FieldListViewColumnHorizontal() {
    return FieldListViewColumnHorizontal.__super__.constructor.apply(this, arguments);
  }

  FieldListViewColumnHorizontal.prototype.updateClass = function() {
    FieldListViewColumnHorizontal.__super__.updateClass.call(this);
    return this.getRow().updateClass();
  };

  FieldListViewColumnHorizontal.prototype.setElement = function(__element) {
    this.__element = __element;
    this.addClass("ez5-field-list-view-column-horizontal");
    return FieldListViewColumnHorizontal.__super__.setElement.call(this, this.__element);
  };

  return FieldListViewColumnHorizontal;

})(FieldListViewColumn);
// Generated by CoffeeScript 1.10.0
var NestedTableListViewColumn,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

NestedTableListViewColumn = (function(superClass) {
  extend(NestedTableListViewColumn, superClass);

  function NestedTableListViewColumn() {
    return NestedTableListViewColumn.__super__.constructor.apply(this, arguments);
  }

  NestedTableListViewColumn.prototype.initOpts = function() {
    NestedTableListViewColumn.__super__.initOpts.call(this);
    return this.addOpts({
      mode: {
        check: String
      }
    });
  };

  NestedTableListViewColumn.prototype.getData = function() {
    return this.getOpt("data");
  };

  NestedTableListViewColumn.prototype.getTopLevelData = function() {
    return this.getOpt("top_level_data");
  };

  NestedTableListViewColumn.prototype.updateInputElement = function() {};

  NestedTableListViewColumn.prototype.setProblemClass = function() {
    return this.getRow().setProblemClass();
  };

  return NestedTableListViewColumn;

})(ListViewColumn);
// Generated by CoffeeScript 1.10.0
var NestedTableListViewColumnHorizontal,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

NestedTableListViewColumnHorizontal = (function(superClass) {
  extend(NestedTableListViewColumnHorizontal, superClass);

  function NestedTableListViewColumnHorizontal() {
    return NestedTableListViewColumnHorizontal.__super__.constructor.apply(this, arguments);
  }

  NestedTableListViewColumnHorizontal.prototype.initOpts = function() {
    NestedTableListViewColumnHorizontal.__super__.initOpts.call(this);
    return this.addOpts({
      field: {
        mandatory: true,
        check: NestedTable
      }
    });
  };

  NestedTableListViewColumnHorizontal.prototype.setElement = function(__element) {
    var ref;
    this.__element = __element;
    if ((ref = this._mode) != null ? ref.startsWith("editor") : void 0) {
      this.__element.attr("full-name", this._field.fullName());
      this._field.setFieldData(this, this.__element[0]);
    } else {
      this._field.setFieldData(this, this.__element[0]);
    }
    NestedTableListViewColumnHorizontal.__super__.setElement.call(this, this.__element);
    return this;
  };

  NestedTableListViewColumnHorizontal.prototype.updateSearch = function() {
    var lvc, node, ref;
    node = this.getRow();
    if ((ref = node.getSearchUnsetCheckbox()) != null) {
      ref.setValue(false);
    }
    lvc = this._field.getListViewColumnHorizontal(node.opts.data, node.opts, node);
    return this.__element.empty().append(lvc.getOpt("element"));
  };

  return NestedTableListViewColumnHorizontal;

})(NestedTableListViewColumn);
// Generated by CoffeeScript 1.10.0
var NestedTableListViewColumnVertical,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

NestedTableListViewColumnVertical = (function(superClass) {
  extend(NestedTableListViewColumnVertical, superClass);

  function NestedTableListViewColumnVertical() {
    return NestedTableListViewColumnVertical.__super__.constructor.apply(this, arguments);
  }

  NestedTableListViewColumnVertical.prototype.setElement = function(__element) {
    var field, node, ref;
    this.__element = __element;
    node = this.getRow();
    field = node.getOpt("field");
    if (!field) {
      assert(field, "NestedTableListViewColumnVertical.setElement", "Node does not have opts.field set which is required when mode is " + this._mode + ".", {
        opts: this.opts,
        node: node
      });
    }
    if ((ref = this._mode) != null ? ref.startsWith("editor") : void 0) {
      this.__element.attr("full-name", field.fullName());
      field.setFieldData(this, this.__element[0]);
    } else {
      field.setFieldData(this, this.__element[0]);
    }
    NestedTableListViewColumnVertical.__super__.setElement.call(this, this.__element);
    return this;
  };

  NestedTableListViewColumnVertical.prototype.updateSearch = function() {
    var field, node, ref;
    node = this.getRow();
    if ((ref = node.getSearchUnsetCheckbox()) != null) {
      ref.setValue(false);
    }
    field = node.getOpt("field");
    field.initData(node.getData());
    console.debug(node.getData(), node, node.children);
    node.removeFromDOM(false);
    node.children = [];
    return node.replaceSelf();
  };

  return NestedTableListViewColumnVertical;

})(NestedTableListViewColumn);
// Generated by CoffeeScript 1.10.0
var AutocompletionPopup,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AutocompletionPopup = (function(superClass) {
  extend(AutocompletionPopup, superClass);

  function AutocompletionPopup(opts) {
    this.opts = opts;
    this.emptyContainer = bind(this.emptyContainer, this);
    AutocompletionPopup.__super__.constructor.call(this, this.opts);
    Events.listen({
      type: "mousedown",
      node: this.getLayer(),
      call: (function(_this) {
        return function(ev) {
          console.debug("mousedown on document, preventing default");
          ev.preventDefault();
        };
      })(this)
    });
    Events.listen({
      type: "keydown",
      node: this.getLayer(),
      call: (function(_this) {
        return function(ev) {
          return _this.keydown(ev);
        };
      })(this)
    });
    Events.listen({
      type: "keyup",
      node: this.getLayer(),
      call: (function(_this) {
        return function(ev) {
          return _this.keyup(ev);
        };
      })(this)
    });
    this.__popupContent = new Template({
      name: "autocompletion-popup"
    });
    this.getLayer().append(this.__popupContent);
  }

  AutocompletionPopup.prototype.knownPlacements = ["s", "e", "w", "ws", "wn", "n", "se", "ne", "es", "en", "nw", "sw"];

  AutocompletionPopup.prototype.initOpts = function() {
    AutocompletionPopup.__super__.initOpts.call(this);
    this.mergeOpt("element", {
      mandatory: true
    });
    this.mergeOpt("use_element_width_as_min_width", {
      "default": true
    });
    this.removeOpt("handle_focus");
    return this.removeOpt("placements");
  };

  AutocompletionPopup.prototype.readOpts = function() {
    this.opts.placement = this.opts.placement || "se";
    this.opts.backdrop = {
      policy: "click"
    };
    AutocompletionPopup.__super__.readOpts.call(this);
    this._placements = ["se", "sw", "ne", "nw"];
    this._handle_focus = false;
    return this.container = {};
  };

  AutocompletionPopup.prototype.getPopupContent = function() {
    return this.__popupContent;
  };

  AutocompletionPopup.prototype.getPlacements = function() {
    return ["se", "sw", "ne", "nw"];
  };

  AutocompletionPopup.prototype.addContainer = function(name) {
    this.createContainer(name, "container-" + (toCamel(name)));
    return this.__popupContent.append(this.container[name]);
  };

  AutocompletionPopup.prototype.createContainer = function(name, cls) {
    this.container[name] = new Template({
      name: "autocompletion-popup-container",
      "class": cls
    });
    DOM.data(this.container[name].DOM[0], "name", name);
    return this.container[name];
  };

  AutocompletionPopup.prototype.emptyContainer = function(regex) {
    var child, cn, i, len, name, ref;
    if (regex == null) {
      regex = null;
    }
    for (name in this.container) {
      if (!regex || name.match(regex)) {
        ref = this.container[name].DOM.find(".cui-tmpl-autocompletion-popup-container");
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          cn = DOM.data(child, "name");
          delete this.container[cn];
        }
        this.container[name].DOM.empty();
      }
    }
    return this.container[name];
  };

  AutocompletionPopup.prototype.getContainer = function(name) {
    return this.container[name];
  };

  AutocompletionPopup.prototype.appendItem = function(name, content) {
    var item;
    item = new Template({
      name: "autocompletion-popup-item"
    });
    item.append(content);
    this.container[name].append(item);
    return item;
  };

  AutocompletionPopup.prototype.show = function() {
    if (!$elementIsInDOM(this.getElement())) {
      return this.destroy();
    } else {
      return AutocompletionPopup.__super__.show.call(this);
    }
  };

  AutocompletionPopup.prototype.keydown = function(ev) {
    var activate, active, i, idx, item, items, j, len, len1, ref;
    this.__active_on_return = null;
    if (ev.keyCode() === 13 && this.isShown()) {
      ev.preventDefault();
      this.__active_on_return = this.getActiveItem();
      return;
    }
    if ((ref = ev.keyCode()) !== 38 && ref !== 40) {
      return;
    }
    ev.preventDefault();
    items = DOM.matchSelector(this.DOM[0], "[tabindex]");
    if (!items.length) {
      return;
    }
    active = this.getActiveItem();
    if (ev.keyCode() === 40) {
      if (!this.isShown()) {
        this.show();
      } else if (active) {
        for (idx = i = 0, len = items.length; i < len; idx = ++i) {
          item = items[idx];
          if (item === active && idx < items.length - 1) {
            activate = idx + 1;
            break;
          }
        }
      } else {
        activate = 0;
      }
    }
    if (ev.keyCode() === 38) {
      if (!active) {
        return;
      }
      for (idx = j = 0, len1 = items.length; j < len1; idx = ++j) {
        item = items[idx];
        if (item === active) {
          activate = idx - 1;
          break;
        }
      }
    }
    if (activate >= 0 && activate < items.length) {
      this._element.blur();
      items[activate].focus();
    } else if (activate === -1) {
      active.blur();
      this._element.focus();
    }
  };

  AutocompletionPopup.prototype.keyup = function(ev) {
    var input, ref;
    if (!this.isShown()) {
      return;
    }
    input = ev.getTarget();
    if (ev.keyCode() === 13 && this.__active_on_return) {
      ev.stopPropagation();
      Events.trigger({
        node: this.__active_on_return,
        type: "click"
      });
      this.__active_on_return = null;
    }
    if (ev.keyCode() === 27) {
      if ((ref = this.getActiveItem()) != null) {
        ref.blur();
      }
      this._element[0].focus();
      this.hide();
      ev.stopPropagation();
    }
  };

  AutocompletionPopup.prototype.getActiveItem = function() {
    var active;
    active = DOM.matchSelector(this.DOM, ":focus")[0];
    return active;
  };

  return AutocompletionPopup;

})(CUI.Layer);
// Generated by CoffeeScript 1.10.0
var ObjectList,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ObjectList = (function(superClass) {
  extend(ObjectList, superClass);

  function ObjectList() {
    return ObjectList.__super__.constructor.apply(this, arguments);
  }

  ObjectList.prototype.readOpts = function() {
    ObjectList.__super__.readOpts.call(this);
    this.count = 0;
    this.objects = [];
    this.current_idx = null;
    return this.toolboxCallbacks = [];
  };

  ObjectList.prototype.getCount = function(skip_template) {
    var c, i, len, obj, ref;
    if (skip_template == null) {
      skip_template = false;
    }
    if (!skip_template) {
      return this.objects.length;
    } else {
      c = 0;
      ref = this.objects;
      for (i = 0, len = ref.length; i < len; i++) {
        obj = ref[i];
        if (!(obj instanceof TemplateObject)) {
          c++;
        }
      }
      return c;
    }
  };

  ObjectList.prototype.getCountWithoutTemplate = function() {
    return this.getCount(true);
  };

  ObjectList.prototype.idxByData = function(data) {
    var i, idx, len, obj, ref;
    ref = this.objects;
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      obj = ref[idx];
      if (obj.getData() === data) {
        return idx;
      }
    }
    return -1;
  };

  ObjectList.prototype.remove = function(idx) {
    var obj;
    if (idx == null) {
      idx = this.current_idx;
    }
    obj = this.objects.splice(idx, 1);
    if (this.browserDiv) {
      this.removeObjectFromBrowser(idx);
    }
    this.setCurrentIdx(idx - 1);
    return obj;
  };

  ObjectList.prototype.push = function(ro) {
    assert(ro instanceof ResultObject, "ObjectList.push", "Object must be instance of ResultObject.", {
      resultObject: ro
    });
    this.objects.push(ro);
    if (this.browserDiv) {
      this.appendObjectToBrowser(this.getCount() - 1);
    }
    return this;
  };

  ObjectList.prototype.getObjectIdx = function(ro) {
    return idxInArray(ro, this.objects);
  };

  ObjectList.prototype.getObject = function(idx) {
    if (idx == null) {
      idx = this.current_idx;
    }
    return this.objects[idx];
  };

  ObjectList.prototype.getObjects = function() {
    return this.objects;
  };

  ObjectList.prototype.setObject = function(obj, idx) {
    if (idx == null) {
      idx = this.current_idx;
    }
    this.objects[idx] = obj;
    return obj;
  };

  ObjectList.prototype.getCurrentIdx = function() {
    return this.current_idx;
  };

  ObjectList.prototype.setCurrentIdx = function(idx) {
    if (!isNull(idx)) {
      idx = parseInt(idx);
      assert(!isNaN(idx), (getObjectClass(this)) + ".setCurrentIdx", "idx is not null and not an integer", {
        idx: idx
      });
    } else {
      idx = null;
    }
    if (this.getCount() === 0 || idx === null) {
      this.current_idx = null;
    } else if (idx < 0) {
      this.current_idx = 0;
    } else if (idx >= this.getCount()) {
      this.current_idx = this.getCount() - 1;
    } else {
      this.current_idx = idx;
    }
    this.focusCurrent();
    return this.current_idx;
  };

  ObjectList.prototype.focusCurrent = function() {
    var el, i, len, ref;
    if (!this.browserDiv) {
      return;
    }
    ref = this.browserDiv.find("." + ez5.defaults.focusClass);
    for (i = 0, len = ref.length; i < len; i++) {
      el = ref[i];
      el.classList.remove(ez5.defaults.focusClass);
    }
    if (this.getCurrentIdx() === null) {
      return;
    }
    return CUI.DOM.addClass(this.findObjectInBrowser(), ez5.defaults.focusClass);
  };

  ObjectList.prototype.renderBrowser = function() {
    return this.browserDiv = $div("ez5-object-list result-standard-format-square");
  };

  ObjectList.prototype.updateBrowser = function() {
    var i, idx, ref;
    this.browserDiv.empty();
    for (idx = i = 0, ref = this.getCount(); 0 <= ref ? i < ref : i > ref; idx = 0 <= ref ? ++i : --i) {
      this.appendObjectToBrowser(idx);
    }
    this.focusCurrent();
    return this.browserDiv;
  };

  ObjectList.prototype.appendObjectToBrowser = function(idx) {
    var div;
    div = $div("ez5-object-list-object").appendTo(this.browserDiv);
    div.attr("idx", idx);
    this.browserDiv.attr("data-object-count", this.getCount(true));
    return this.appendToDivInBrowser(div, idx);
  };

  ObjectList.prototype.findObjectInBrowser = function(idx) {
    var div;
    if (idx == null) {
      idx = this.getCurrentIdx();
    }
    if (!this.browserDiv) {
      return;
    }
    div = this.browserDiv.find("div[idx=\"" + idx + "\"]");
    assert(div.length, "ObjectList.findObjectInBrowser", "div for idx " + idx + " not found in browser", {
      idx: idx
    });
    return div[0];
  };

  ObjectList.prototype.updateObjectInBrowser = function(idx) {
    var div;
    if (idx == null) {
      idx = this.getCurrentIdx();
    }
    if (!this.browserDiv) {
      return;
    }
    div = this.findObjectInBrowser(idx);
    div.empty();
    return this.appendToDivInBrowser(div, idx);
  };

  ObjectList.prototype.removeObjectFromBrowser = function(idx) {
    var d, div, i, len, ref;
    div = this.findObjectInBrowser(idx);
    div.remove();
    ref = this.browserDiv.children;
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      d = ref[idx];
      $(d).attr("idx", idx);
    }
    this.browserDiv.attr("data-object-count", this.getCount(true));
    return div;
  };

  ObjectList.prototype.appendToDivInBrowser = function(div, idx) {
    var object;
    object = this.getObject(idx);
    if (CUI.__ng__) {
      return div.append(object.renderStandard().addClass("ez5-editor-object-list-card"));
    } else {
      return div.append(object.renderCard3(false).addClass("ez5-editor-object-list-card"));
    }
  };

  return ObjectList;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var ResultManagerResult,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ResultManagerResult = (function(superClass) {
  extend(ResultManagerResult, superClass);

  function ResultManagerResult() {
    return ResultManagerResult.__super__.constructor.apply(this, arguments);
  }

  ResultManagerResult.prototype.initOpts = function() {
    ResultManagerResult.__super__.initOpts.call(this);
    return this.addOpts({
      pane_absolute: {
        "default": true,
        check: Boolean
      },
      container: {
        mandatory: true,
        check: function(v) {
          return isElement(v);
        }
      },
      navigation_buttons_left: {
        check: Array
      },
      selectable_opts: {
        check: CollectionSelection.selectableOptsCheck()
      }
    });
  };

  ResultManagerResult.prototype.getNavigation = function() {};

  ResultManagerResult.prototype.initSelectable = function(object_selector, container) {
    var sel_opts;
    if (!this._selectable_opts) {
      return;
    }
    sel_opts = copyObject(this._selectable_opts);
    delete sel_opts.collection;
    sel_opts.object_selector = object_selector;
    sel_opts.container = container;
    if (this.getNavigation()) {
      sel_opts.onUpdate = (function(_this) {
        return function(col) {
          var bb, btns, lbl;
          if (col.getCount() > 0) {
            btns = [];
            lbl = new LocaLabel({
              loca_key: "result.manager.result.selected_objects",
              loca_key_attrs: {
                count: col.getCount()
              }
            });
            btns.push(lbl);
            btns.push(new LocaButton({
              loca_key: "result.manager.result.selected_objects_remove",
              size: "mini",
              appearance: CUI.__ng__ ? void 0 : "flat",
              onClick: function() {
                return col.removeObjects();
              }
            }));
            bb = new Buttonbar({
              "class": "ez5-navigation-selected-objects-count",
              buttons: btns
            });
            return _this.getNavigation().replace(bb, "center");
          } else {
            return _this.getNavigation().empty("center");
          }
        };
      })(this);
    }
    this._selectable_opts.collection.setSelectableContainer(sel_opts);
    return this;
  };

  ResultManagerResult.prototype.initSelectableCollection = function() {
    var ref;
    return (ref = this._selectable_opts) != null ? ref.collection.triggerEvent("select") : void 0;
  };

  ResultManagerResult.prototype.getCollectionSelection = function() {
    var ref;
    return (ref = this._selectable_opts) != null ? ref.collection : void 0;
  };

  ResultManagerResult.prototype.addToResultDiv = function(request, result_object, div) {
    var info_btn;
    ResultManagerResult.__super__.addToResultDiv.call(this, request, result_object, div);
    info_btn = new LocaButton({
      "class": "ez5-result-standard-info-button",
      appearance: "flat",
      size: "mini",
      loca_key: "result.manager.result.info_button",
      onClick: (function(_this) {
        return function() {
          return new Tooltip({
            "class": "ez5-result-standard-tooltip-info",
            element: info_btn,
            on_hover: false,
            on_click: false,
            backdrop: {
              policy: "click"
            },
            content: function() {
              return result_object.renderStandard();
            }
          }).show();
        };
      })(this)
    });
    div.append(info_btn.DOM[0]);
  };

  ResultManagerResult.prototype.readOpts = function() {
    ResultManagerResult.__super__.readOpts.call(this);
    this.result_container = this._container;
    if (ez5.session.isDebug() && !this.result_container._debug_registered) {
      this.result_container._debug_registered = true;
      Events.listen({
        node: this.result_container,
        type: "toolbox",
        selector: "[global-object-id]",
        call: function(ev, info) {
          var data, more, sid;
          data = DOM.data(ev.getCurrentTarget());
          if (!data.object) {
            return;
          }
          sid = data.object._system_object_id;
          if (sid) {
            more = " [" + sid + "]";
          } else {
            more = "";
          }
          info.tools.push(new ToolboxTool({
            group: "object",
            name: "object.dump",
            sort: "I:1",
            loca_key: "base.debug.to.console",
            loca_key_attrs: {
              more: more
            },
            run: (function(_this) {
              return function(ev) {
                return CUI.info("object DUMP. request:", data.request, "data", data);
              };
            })(this)
          }));
        }
      });
    }
    return this;
  };

  ResultManagerResult.prototype.getResultContainer = function() {
    return this.result_container;
  };

  ResultManagerResult.prototype.getName = function() {
    return assert(false, getObjectClass(this) + ".getName needs implementation");
  };

  ResultManagerResult.prototype.setData = function() {};

  ResultManagerResult.prototype.getViewFields = function() {
    return [];
  };

  ResultManagerResult.prototype.destroy = function() {
    var ref;
    if ((ref = this._selectable_opts) != null) {
      ref.collection.unsetSelectableContainer();
    }
    return ResultManagerResult.__super__.destroy.call(this);
  };

  ResultManagerResult.prototype.getViewDataDefault = function() {
    return {};
  };

  ResultManagerResult.prototype.initView = function(form) {};

  ResultManagerResult.prototype.updateView = function(form) {};

  ResultManagerResult.prototype.saveViewDone = function() {
    return CUI.resolvedPromise();
  };

  return ResultManagerResult;

})(SearchManager);
// Generated by CoffeeScript 1.10.0
var ResultDynamic,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

ResultDynamic = (function(superClass) {
  extend(ResultDynamic, superClass);

  function ResultDynamic() {
    return ResultDynamic.__super__.constructor.apply(this, arguments);
  }

  ResultDynamic.prototype.initOpts = function() {
    ResultDynamic.__super__.initOpts.call(this);
    return this.addOpts({
      container: {
        mandatory: true,
        check: function(v) {
          return isElement(v);
        }
      },
      page_size: {
        check: "Integer"
      }
    });
  };

  ResultDynamic.prototype.readOpts = function() {
    ResultDynamic.__super__.readOpts.call(this);
    if (this._page_size) {
      this.__page_size = this._page_size;
    }
    return this.setData();
  };

  ResultDynamic.prototype.__page_size = 100;

  ResultDynamic.prototype.getNavigation = function() {
    return this.__navi;
  };

  ResultDynamic.prototype.init = function() {
    var scheduleResize;
    this.__navi = new ResultNavigationToolbar({
      "class": "ez5-result-dynamic-navigation-toolbar",
      search: this.getSearch(),
      navigation_buttons_left: this._navigation_buttons_left,
      getPageSize: (function(_this) {
        return function() {
          return _this.getRequestPageSize();
        };
      })(this)
    });
    this.__pane = new Pane({
      "class": "ez5-result-dynamic-pane ez5-result-dynamic-pane-" + this.getRenderType(),
      absolute: this._pane_absolute,
      center: {
        "class": "ez5-result-dynamic-pane-center"
      },
      bottom: {
        content: this.__navi
      }
    });
    this.__pane.center().setAttribute('tabindex', '-1');
    DOM.empty(this.getResultContainer()).append(this.__pane.DOM);
    this.result_standard_appearance_info_dummy_div = new Template({
      name: "result-object-standard-dummy"
    }).DOM;
    this.__pane.bottom().append(this.result_standard_appearance_info_dummy_div);
    this.__objects = this.__pane.center();
    this.__loader = new ResultDynamicLoading({
      container: this.__objects,
      search: this.getSearch()
    });
    this.initSelectable(".result-dynamic:not(.ez5-deleted)", this.__objects);
    this.__current = {
      offset: null,
      pageSize: null,
      autoPageSize: false,
      page: null
    };
    scheduleResize = (function(_this) {
      return function() {
        return _this.__scheduleViewportResize();
      };
    })(this);
    Events.listen({
      type: "viewport-resize",
      node: this.__pane,
      call: (function(_this) {
        return function(ev) {
          if (CUI.__ng__) {
            return scheduleResize();
          } else {
            return CUI.scheduleCallback({
              call: scheduleResize,
              ms: 200
            });
          }
        };
      })(this)
    });
    return this;
  };

  ResultDynamic.prototype.__scheduleViewportResize = function() {
    var page;
    if (!this.__loader) {
      return;
    }
    if (this.__current.autoPageSize && this.__current.pageSize !== this.calcPageSize()) {
      page = Math.floor(this.__current.offset / this.calcPageSize());
      return this.__navi.loadPage(page);
    } else {
      this.__updateFillViewLayout();
      return this.__loader.markLoadMe();
    }
  };

  ResultDynamic.prototype.destroy = function() {
    var ref, ref1, ref2;
    if ((ref = this.__loader) != null) {
      ref.destroy();
    }
    this.__loader = null;
    if ((ref1 = this.__navi) != null) {
      ref1.destroy();
    }
    this.__navi = null;
    if ((ref2 = this.__pane) != null) {
      ref2.destroy();
    }
    this.__pane = null;
    return ResultDynamic.__super__.destroy.call(this);
  };

  ResultDynamic.prototype.unsetSearch = function() {
    ResultDynamic.__super__.unsetSearch.call(this);
    DOM.empty(this.__objects);
    return this.destroyWaitBlock();
  };

  ResultDynamic.prototype.updateView = function(form) {
    var page;
    if (this.view_data.page_size === "auto" && this.__current.pageSize !== this.calcPageSize()) {
      page = Math.floor(this.__current.offset / this.calcPageSize());
      return this.__navi.loadPage(page);
    } else if ((this.view_data.page_size !== "auto" && this.__current.autoPageSize) || (this.__current.pageSize !== this.getRequestPageSize())) {
      page = Math.floor(this.__current.offset / this.view_data.page_size);
      return this.__navi.loadPage(page);
    } else {
      this.__updateFillViewLayout();
      return this.__loader.markLoadMe();
    }
  };

  ResultDynamic.prototype.setData = function(view_data) {
    var i, k, len1, ref, ref1;
    this.view_data = view_data != null ? view_data : {};
    ref = ["page_size"];
    for (i = 0, len1 = ref.length; i < len1; i++) {
      k = ref[i];
      if (isUndef(this.view_data[k])) {
        this.view_data[k] = this["__" + k];
      }
    }
    if (ref1 = this.view_data.page_size, indexOf.call(this.getPageSizes(), ref1) < 0) {
      this.view_data.page_size = this.__page_size;
    }
    return this;
  };

  ResultDynamic.prototype.getLoader = function() {
    return this.__loader;
  };

  ResultDynamic.prototype.getPageSizes = function() {
    if (ez5.session.isDebug()) {
      return [1, 2, 3, 5, 10, 20, 50, 100, 1000];
    } else {
      return [10, 25, 50, 100, 500, 1000];
    }
  };

  ResultDynamic.prototype.filterTopLevel = function(request) {
    if (!this.searchHasObjecttypes()) {
      return false;
    } else if (this.view_data['show_hierarchy']) {
      return false;
    } else {
      return true;
    }
  };

  ResultDynamic.prototype.searchHasObjecttypes = function() {
    return !(this.getSearch() instanceof SearchCollection);
  };

  ResultDynamic.prototype.getViewFields = function() {
    var fields, i, j, len1, len2, o, ot, page_sizes, ref, size_opts;
    page_sizes = this.getPageSizes();
    size_opts = [];
    for (i = 0, len1 = page_sizes.length; i < len1; i++) {
      o = page_sizes[i];
      if (o === "auto") {
        size_opts.push({
          text: $$("result.dynamic.page_size.auto"),
          value: o
        });
      } else {
        size_opts.push({
          text: o + "",
          value: o
        });
      }
    }
    fields = [];
    if (this.searchHasObjecttypes()) {
      ref = this.getSearch().getSearchObjecttypes(false);
      for (j = 0, len2 = ref.length; j < len2; j++) {
        ot = ref[j];
        if (ot.isHierarchy()) {
          fields.push({
            type: Checkbox,
            form: {
              label: $$("result.dynamic.view.show_hierarchy")
            },
            name: 'show_hierarchy'
          });
          break;
        }
      }
    }
    fields.push({
      type: Select,
      form: {
        label: $$("result.dynamic.page_size")
      },
      name: "page_size",
      options: size_opts
    });
    return fields;
  };

  ResultDynamic.prototype.calcPageSize = function() {
    var d, dim, pageSize, remove_d, viewport;
    d = this.__current.first_result_div;
    if (!d) {
      d = $div("result-dynamic placeholder " + this.getName());
      d.appendTo(this.__objects);
      remove_d = true;
    } else {
      remove_d = false;
    }
    dim = {
      width: d.outerWidth(true),
      height: d.outerHeight(true)
    };
    viewport = {
      width: this.__objects.width(),
      height: this.__objects.height()
    };
    assert(dim.width * dim.height > 0, "ResultDynamic.calcPageSize", "Object dim has a width or height eq 0.", {
      dim: dim,
      viewport: viewport,
      element: d
    });
    if (viewport.width === 0 || viewport.height === 0) {
      pageSize = 10;
    } else {
      pageSize = Math.max(10, Math.floor(viewport.width / dim.width) * Math.floor(viewport.height / dim.height));
    }
    if (remove_d) {
      d.remove();
    }
    return pageSize;
  };

  ResultDynamic.prototype.getRequestPageSize = function() {
    if (this.view_data.page_size === "auto") {
      return this.calcPageSize();
    } else {
      return this.view_data.page_size;
    }
  };

  ResultDynamic.prototype.addToRequest = function(request) {
    request.limit = this.getRequestPageSize();
    if (request.offset % request.limit !== 0) {
      request.offset = Math.floor(request.offset / request.limit) * request.limit;
    }
    request.format = "standard";
    if (request.execute) {
      assert(!this.__waitBlock, "ResultDynamic.addRequest", "wait block is already there");
      this.__waitBlock = new WaitBlock({
        element: this.getResultContainer()
      }).show();
    }
    return this;
  };

  ResultDynamic.prototype.failResult = function() {
    return this.destroyWaitBlock();
  };

  ResultDynamic.prototype.renderObject = function(o, offset) {};

  ResultDynamic.prototype.getRenderType = function() {
    return "standard";
  };

  ResultDynamic.prototype.destroyWaitBlock = function() {
    var ref;
    if ((ref = this.__waitBlock) != null) {
      ref.destroy();
    }
    return delete this.__waitBlock;
  };

  ResultDynamic.prototype.saveViewDone = function() {
    var page;
    if (this.view_data['show_hierarchy'] !== this.__show_hierarchy) {
      page = Math.floor((this.__current.offset || 0) / this.view_data.page_size);
      return this.__navi.loadPage(page);
    } else {
      return CUI.resolvedPromise();
    }
  };

  ResultDynamic.prototype.showResult = function(request, data) {
    var _k, c, chunk, chunk_no, divScrollIntoView, el, finish_render, grouping_badges, i, idx, j, len, len1, len2, object_reload_store, ref, ref1, ref2, render_next_chunk, render_one_object, shc, sk, sort_keys;
    this.__show_hierarchy = this.view_data['show_hierarchy'];
    if (!this.__pane || this.__pane.isDestroyed()) {
      return;
    }
    if (request.update) {
      ref = this.__objects.children;
      for (i = 0, len1 = ref.length; i < len1; i++) {
        el = ref[i];
        CUI.DOM.setAttribute(el, "remove-me", 1);
      }
      object_reload_store = {};
      ref1 = CUI.DOM.children(this.__objects, ".result-dynamic:not(.placeholder):not([loading=\"1\"]):not([load-me=\"1\"])");
      for (idx = j = 0, len2 = ref1.length; j < len2; idx = ++j) {
        c = ref1[idx];
        object_reload_store[$(c).attr("global-object-id")] = c;
      }
    } else {
      DOM.empty(this.__objects);
      this.__objects[0].scrollTop = 0;
    }
    shc = new StickyHeaderControl({
      element: this.__objects
    });
    this.__current.first_result_div = null;
    divScrollIntoView = null;
    if (request.sort_keys) {
      grouping_badges = [];
      sort_keys = [];
      ref2 = request.sort_keys;
      for (_k in ref2) {
        sk = ref2[_k];
        sort_keys.push(sk);
        grouping_badges[sort_keys.length - 1] = null;
      }
    } else {
      sort_keys = null;
    }
    render_one_object = (function(_this) {
      return function(o, idx) {
        var __k, _idx, content, d, item, k, l, len3, len4, m, n, offset, path, ref3, ref4, ref5, ref6, sh, st_opts, v;
        offset = request.offset + idx;
        o = data.objects[idx];
        o._format = data.format;
        if (sort_keys) {
          for (k = l = 0, len3 = sort_keys.length; l < len3; k = ++l) {
            sk = sort_keys[k];
            path = [];
            if (((ref3 = o._fields[sk._key]) != null ? ref3.length : void 0) > 0) {
              ref4 = o._fields[sk._key];
              for (_idx = m = 0, len4 = ref4.length; m < len4; _idx = ++m) {
                item = ref4[_idx];
                v = sk.field.formatSortGroupable(item, sk, _idx);
                if (!isNull(v)) {
                  path.push(v);
                }
              }
            }
            content = path.join("|");
            if (content !== grouping_badges[k]) {
              grouping_badges[k] = content;
              for (__k = n = ref5 = k + 1, ref6 = grouping_badges.length; ref5 <= ref6 ? n < ref6 : n > ref6; __k = ref5 <= ref6 ? ++n : --n) {
                grouping_badges[__k] = null;
              }
              st_opts = {
                control: shc,
                level: k
              };
              if (content === "") {
                st_opts.content = new Label({
                  "class": "ez5-result-dynamic-no-grouping-header",
                  text: $$("result.dynamic.no_grouping_header", {
                    name: sk.field.nameLocalized()
                  })
                });
              } else {
                st_opts.content = ResultObject.renderPath(path).DOM;
              }
              sh = new StickyHeader(st_opts);
              _this.__object_divs.push(sh.DOM);
              sh.DOM.appendTo(_this.__objects);
            }
          }
        }
        d = null;
        if (request.update && object_reload_store[o._global_object_id]) {
          d = $(object_reload_store[o._global_object_id]);
          if (DOM.data(d, "request").format === request.format) {
            d.removeAttr("remove-me");
            DOM.data(d, "request", request);
            d.attr("offset", request.offset + idx);
            d.attr("idx", idx);
          }
        }
        if (!d) {
          d = _this.__loader.getPlaceholder({
            "class": _this.getName(),
            offset: offset,
            object: o,
            request: request,
            idx: offset - request.offset,
            render_type: _this.getRenderType()
          });
        }
        if (idx === 0) {
          _this.__current.first_result_div = d;
        }
        if (request.offset + idx === request.scroll_into_view_offset) {
          divScrollIntoView = d;
        }
        _this.__object_divs.push(d);
        return d;
      };
    })(this);
    finish_render = (function(_this) {
      return function() {
        if (request.update) {
          CUI.DOM.removeChildren(_this.__objects, "[remove-me]");
        }
        CUI.DOM.scrollIntoView(divScrollIntoView);
        object_reload_store = null;
        _this.__updateFillViewLayout();
        _this.__loader.markLoadMe();
        _this.__current.offset = request.offset;
        _this.__current.pageSize = request.limit;
        _this.__current.autoPageSize = _this.view_data.page_size === "auto";
        if (data.count === 0) {
          _this.__objects.append(_this.getSearch().getEmptyResultDiv(request));
        }
        return _this.initSelectableCollection();
      };
    })(this);
    idx = 0;
    len = data.objects.length;
    chunk = 50;
    chunk_no = 0;
    this.__object_divs = [];
    render_next_chunk = (function(_this) {
      return function() {
        var count;
        if (_this.isDestroyed() || !_this.getSearch()) {
          return;
        }
        count = 0;
        while (idx < len && count < chunk) {
          render_one_object(data.objects[idx], idx).appendTo(_this.__objects);
          idx++;
          count++;
        }
        if (chunk_no === 0) {
          _this.__loader.markLoadMe();
          _this.destroyWaitBlock();
        }
        chunk_no++;
        if (idx < len) {
          CUI.setTimeout(render_next_chunk, 0);
        } else {
          finish_render();
        }
      };
    })(this);
    this.__navi.update(data);
    render_next_chunk();
    return this;
  };

  ResultDynamic.prototype.getFillViewMode = function() {
    return "dynamic";
  };

  ResultDynamic.prototype.__updateFillViewLayout = function(relayout_when_scrollbar_changes) {
    var addRow, add_current_row_objects, add_row_as_last_row, aspect_ratio, available_row_width, calcFitRowScaleFactor, check_need_recalc, container, container_dim, current_row_objects, current_row_scale_factor, current_row_width, div, error, ex, has_scrollbar, i, idx, is_header, len1, marginInner, marginLeft, marginRight, marginTopBottom, max_aspect_ratio, max_obj_count, max_row_scale_factor, measure_dim, min_aspect_ratio, min_height, min_row_scale_factor, mode, new_row_scale_factor, new_row_width, next_div, object_counter, object_width, objects_count, ref, ref1, ref2, result_container_client_height, result_container_client_width, row_counter, sticky_dim, used_height, wanted_height;
    if (relayout_when_scrollbar_changes == null) {
      relayout_when_scrollbar_changes = true;
    }
    if (!((ref = this.__object_divs) != null ? ref.length : void 0)) {
      return;
    }
    if (!DOM.isInDOM((ref1 = this.__object_divs[0]) != null ? ref1[0] : void 0)) {
      return;
    }
    mode = this.getFillViewMode();
    container = this.__objects[0];
    CUI.DOM.setStyle(this.result_standard_appearance_info_dummy_div, {
      width: ""
    });
    measure_dim = DOM.getDimensions(this.result_standard_appearance_info_dummy_div);
    container_dim = DOM.getDimensions(container);
    result_container_client_width = container.clientWidth;
    result_container_client_height = container.clientHeight;
    if (container_dim.scrollHeight > container_dim.clientHeight) {
      has_scrollbar = true;
    } else {
      has_scrollbar = false;
    }
    used_height = 0;
    marginInner = measure_dim.marginBottom || 0;
    marginTopBottom = measure_dim.marginTop || 0;
    marginLeft = measure_dim.marginLeft || 0;
    marginRight = measure_dim.marginRight || 0;
    available_row_width = result_container_client_width - marginRight - marginLeft;
    if (mode !== "fill") {
      object_width = measure_dim.contentBoxWidth;
      max_obj_count = Math.floor((available_row_width + marginInner) / (object_width + marginInner));
      if (max_obj_count <= 1) {
        object_width = available_row_width;
      } else {
        object_width = ((available_row_width + marginInner) / max_obj_count) - marginInner;
      }
      CUI.DOM.setStyle(this.result_standard_appearance_info_dummy_div, {
        width: object_width
      });
      measure_dim = CUI.DOM.getDimensions(this.result_standard_appearance_info_dummy_div);
    }
    row_counter = 0;
    current_row_width = 0;
    current_row_objects = [];
    object_counter = 0;
    max_aspect_ratio = 4 / 1;
    min_aspect_ratio = 2 / 4;
    wanted_height = measure_dim.contentBoxHeight;
    if (mode === "fill") {
      if (!wanted_height) {
        console.warn("ResultDynamic: Mode:", mode, "Could not a find height for result. Setting height to 100.");
        wanted_height = 100;
      }
      min_height = measure_dim.minHeight;
      if (!min_height) {
        console.warn("ResultDynamic: Mode:", mode, "Could not a find a minimum height for result. Setting minHeight to 50.");
        min_height = CUI.__ng__ ? wanted_height : 50;
      }
      min_row_scale_factor = Math.min(1, measure_dim.minHeight / wanted_height);
    }
    max_row_scale_factor = 1.33;
    objects_count = this.__object_divs.length;
    calcFitRowScaleFactor = (function(_this) {
      return function(num_objects, row_width) {
        var ignore_margin, max, width;
        ignore_margin = (num_objects - 1) * marginInner;
        max = available_row_width - ignore_margin;
        width = row_width - ignore_margin;
        return max / width;
      };
    })(this);
    addRow = (function(_this) {
      return function(last_row) {
        var _marginBottom, _marginLeft, _marginRight, _marginTop, diff, fit_row_scale_factor, i, idx, len1, new_height, new_width, object, used_row_width;
        if (last_row == null) {
          last_row = false;
        }
        new_height = null;
        if (current_row_objects.length > 0) {
          if (mode === "fill") {
            if (last_row && !(current_row_width > available_row_width * (1.0 / max_row_scale_factor))) {
              fit_row_scale_factor = 1;
            } else {
              fit_row_scale_factor = calcFitRowScaleFactor(current_row_objects.length, current_row_width);
            }
            new_height = wanted_height * fit_row_scale_factor;
          } else {
            new_height = wanted_height;
          }
        }
        used_row_width = 0;
        for (idx = i = 0, len1 = current_row_objects.length; i < len1; idx = ++i) {
          object = current_row_objects[idx];
          switch (mode) {
            case "fill":
              new_width = object.width * fit_row_scale_factor;
              break;
            case "sideways":
              new_width = object.width;
              break;
            case "overlay":
              new_width = object.width;
              new_height = new_width;
              break;
            case "underlay":
              new_width = object.width;
              if (!CUI.__ng__) {
                new_height = new_width + wanted_height;
              }
              break;
            default:
              new_width = object.width;
          }
          diff = 0;
          if (idx === 0) {
            _marginLeft = 0;
          } else {
            _marginLeft = marginInner;
          }
          _marginRight = 0;
          if (idx === current_row_objects.length - 1) {
            if (idx > 0 && !last_row) {
              diff = (available_row_width - used_row_width) - (new_width + _marginLeft);
              if (diff !== 0) {
                if (mode === "fill") {
                  new_width = new_width + diff;
                } else {
                  _marginLeft = _marginLeft + diff;
                }
              }
            }
          }
          if (row_counter === 0) {
            _marginTop = marginTopBottom;
          } else {
            _marginTop = marginInner;
          }
          if (last_row) {
            _marginBottom = marginTopBottom;
          } else {
            _marginBottom = 0;
          }
          DOM.setStyle(object.div, {
            top: Math.floor(used_height),
            left: Math.floor(used_row_width + marginLeft),
            height: Math.floor(new_height),
            width: Math.floor(new_width),
            marginLeft: _marginLeft,
            marginTop: _marginTop,
            marginRight: _marginRight,
            marginBottom: _marginBottom
          });
          used_row_width = used_row_width + _marginLeft + new_width + _marginRight;
        }
        if (current_row_objects.length > 0) {
          used_height = used_height + new_height + _marginTop + _marginBottom;
          row_counter++;
        }
        current_row_objects = [];
        current_row_width = 0;
        return _this;
      };
    })(this);
    add_current_row_objects = (function(_this) {
      return function(as_last_in_row, last_row) {
        if (as_last_in_row == null) {
          as_last_in_row = false;
        }
        if (last_row == null) {
          last_row = false;
        }
        addRow(as_last_in_row);
        if (check_need_recalc(last_row)) {
          throw "recalc";
        }
      };
    })(this);
    is_header = function(div) {
      return div != null ? div.hasClass("cui-sticky-header") : void 0;
    };
    aspect_ratio = function(div) {
      var _aspect_ratio, ref2, ref3, ref4, ref5, ref6, result_object, thumb_version, vname;
      result_object = DOM.data(div[0], "object");
      thumb_version = null;
      if (result_object) {
        ref6 = (ref2 = result_object._standard) != null ? (ref3 = ref2.eas) != null ? (ref4 = ref3[1]) != null ? (ref5 = ref4[0]) != null ? ref5.versions : void 0 : void 0 : void 0 : void 0;
        for (vname in ref6) {
          thumb_version = ref6[vname];
          break;
        }
      }
      if (thumb_version) {
        _aspect_ratio = thumb_version.width / thumb_version.height;
        if (isNaN(_aspect_ratio)) {
          _aspect_ratio = 1;
        } else {
          _aspect_ratio = Math.max(Math.min(max_aspect_ratio, _aspect_ratio), min_aspect_ratio);
        }
      } else {
        _aspect_ratio = 1;
      }
      return _aspect_ratio;
    };
    check_need_recalc = (function(_this) {
      return function(last_row) {
        if (last_row == null) {
          last_row = false;
        }
        if (!relayout_when_scrollbar_changes) {
          return false;
        }
        if ((last_row && has_scrollbar && used_height <= container_dim.clientHeight) || (!has_scrollbar && used_height > result_container_client_height)) {
          return true;
        } else {
          return false;
        }
      };
    })(this);
    try {
      ref2 = this.__object_divs;
      for (idx = i = 0, len1 = ref2.length; i < len1; idx = ++i) {
        div = ref2[idx];
        next_div = this.__object_divs[idx + 1];
        if (div.hasClass("ez-sticky-header-control")) {
          continue;
        }
        if (is_header(div)) {
          add_current_row_objects(true);
          DOM.setStyle(div[0], {
            position: "absolute",
            top: used_height,
            left: 0,
            right: 0
          });
          sticky_dim = DOM.getDimensions(div[0]);
          used_height = used_height + sticky_dim.marginBoxHeight;
          continue;
        }
        if (mode === "fill") {
          object_width = wanted_height * aspect_ratio(div);
        }
        if (current_row_width === 0) {
          new_row_width = current_row_width + object_width;
        } else {
          new_row_width = current_row_width + marginInner + object_width;
        }
        add_row_as_last_row = null;
        if (mode === "fill" && current_row_objects.length > 0) {
          current_row_scale_factor = calcFitRowScaleFactor(current_row_objects.length, current_row_width);
          new_row_scale_factor = calcFitRowScaleFactor(current_row_objects.length + 1, new_row_width);
          if (current_row_scale_factor < max_row_scale_factor || new_row_scale_factor < min_row_scale_factor) {
            add_row_as_last_row = false;
          }
        } else {
          if (Math.floor(new_row_width) > available_row_width) {
            add_row_as_last_row = false;
          }
        }
        if (add_row_as_last_row !== null) {
          add_current_row_objects(add_row_as_last_row);
        }
        if (current_row_width === 0) {
          current_row_width = current_row_width + object_width;
        } else {
          current_row_width = current_row_width + marginInner + object_width;
        }
        current_row_objects.push({
          div: div[0],
          width: object_width
        });
      }
      add_current_row_objects(true, true);
    } catch (error) {
      ex = error;
      if (ex === "recalc") {
        return this.__updateFillViewLayout(false);
      } else {
        throw ex;
      }
    }
    return this;
  };

  return ResultDynamic;

})(ResultManagerResult);

CUI.Events.registerEvent({
  type: "result-dynamic-loading-done",
  sink: true
});
// Generated by CoffeeScript 1.10.0
var ResultDynamicLoading,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ResultDynamicLoading = (function(superClass) {
  extend(ResultDynamicLoading, superClass);

  function ResultDynamicLoading(opts1) {
    var mark_load_me;
    this.opts = opts1 != null ? opts1 : {};
    ResultDynamicLoading.__super__.constructor.call(this, this.opts);
    this._container.attr("result-dynamic-loading", "1");
    mark_load_me = (function(_this) {
      return function() {
        if (_this.__marking) {
          return;
        }
        _this.__marking = true;
        _this.markLoadMe();
        _this.__marking = false;
      };
    })(this);
    Events.listen({
      node: this._container,
      instance: this,
      type: "scroll",
      call: (function(_this) {
        return function(ev) {
          CUI.scheduleCallback({
            ms: 250,
            call: mark_load_me
          });
        };
      })(this)
    });
    EventPoller.listen({
      filter: {
        type: ["OBJECT_INDEX", "OBJECT_DELETE"]
      },
      instance: this,
      call: (function(_this) {
        return function(events) {
          var check_loading, el, els, event, gid, i, j, len, len1;
          check_loading = false;
          for (i = 0, len = events.length; i < len; i++) {
            event = events[i];
            gid = event.global_object_id;
            if (!gid) {
              continue;
            }
            els = CUI.DOM.matchSelector(_this._container, "[global-object-id=\"" + gid + "\"]");
            for (j = 0, len1 = els.length; j < len1; j++) {
              el = els[j];
              if (event.type === "OBJECT_INDEX" && event.object_version > 0) {
                el.removeAttribute("render-from-data");
                el.setAttribute("load-me", 1);
                check_loading = true;
              }
              if (event.type === "OBJECT_DELETE") {
                el.removeAttribute("load-me", 1);
                el.classList.add("ez5-deleted");
                CUI.DOM.empty(el);
                CUI.DOM.append(el, new LocaLabel({
                  "class": "ez5-object-deleted",
                  loca_key: "ez5.object.deleted",
                  centered: true
                }));
              }
            }
          }
          if (check_loading) {
            _this.checkLoading();
          }
        };
      })(this)
    });
    DOM.data(this._container[0], "loader", this);
  }

  ResultDynamicLoading.prototype.initOpts = function() {
    ResultDynamicLoading.__super__.initOpts.call(this);
    return this.addOpts({
      container: {
        mandatory: true,
        check: function(v) {
          return isElement(v);
        }
      },
      search: {
        check: function(v) {
          return $.isFunction(v != null ? v.addToResultDiv : void 0);
        }
      }
    });
  };

  ResultDynamicLoading.prototype.destroy = function() {
    this._container.removeAttr("result-dynamic-loading");
    DOM.removeData(this._container[0], "loader");
    Events.ignore({
      instance: this
    });
    return ResultDynamicLoading.__super__.destroy.call(this);
  };

  ResultDynamicLoading.prototype.preloadVisiblePages = 1;

  ResultDynamicLoading.prototype.loadingChunkSize = 50;

  ResultDynamicLoading.prototype.markLoadMe = function() {
    var $c, bottom, c, c_rect, err, i, left, len, marked, r, ref, right, top, viewport_height, viewport_width;
    c_rect = this._container.rect();
    err = false;
    marked = 0;
    if (c_rect.width === 0 || c_rect.height === 0) {
      return;
    }
    ref = CUI.DOM.matchSelector(this._container, ".placeholder:not([loading=\"1\"])");
    for (i = 0, len = ref.length; i < len; i++) {
      c = ref[i];
      $c = $(c);
      $c.removeAttr("load-me");
      r = $c.rect();
      if ((r.width === 0 || r.height === 0) && !err) {
        console.warn("ResultDynamicLoading.markLoadMe", "Container with no width or height found. Make sure your containers have their final sizes even as placeholders.", {
          rect: r,
          container: c
        });
        err = true;
      }
      top = r.top - c_rect.top;
      bottom = r.bottom - c_rect.top;
      left = r.left - c_rect.left;
      right = r.right - c_rect.left;
      viewport_height = c_rect.height;
      viewport_height += viewport_height * this.preloadVisiblePages;
      viewport_width = c_rect.width;
      viewport_width += viewport_width * this.preloadVisiblePages;
      if (bottom < 0 || right < 0) {
        continue;
      }
      if (top > viewport_height || left > viewport_width) {
        break;
      }
      $c.attr("load-me", 1);
      marked++;
    }
    if (marked) {
      this.checkLoading().done((function(_this) {
        return function() {
          return Events.trigger({
            type: "result-dynamic-loading-done",
            node: _this.getContainer()
          });
        };
      })(this));
    }
    return this;
  };

  ResultDynamicLoading.prototype.checkLoading = function(dfr) {
    var $el, counter, el, format, gid, global_ids, i, idx, len, load_me, req_data, txt;
    if (dfr == null) {
      dfr = new CUI.Deferred();
    }
    load_me = CUI.DOM.matchSelector(this._container, "[load-me=\"1\"]");
    if (load_me.length === 0) {
      return dfr.resolve().promise();
    }
    counter = ++ResultDynamicLoading.counter;
    format = null;
    global_ids = [];
    for (idx = i = 0, len = load_me.length; i < len; idx = ++i) {
      el = load_me[idx];
      $el = $(el);
      $el.removeAttr("load-me");
      $el.attr("loading", 1);
      if ($el.attr("render-from-data")) {
        this.__renderObject($el);
        continue;
      }
      gid = $el.attr("global-object-id");
      if (global_ids.indexOf(gid) === -1) {
        global_ids.push(gid);
        switch ($el.attr("render-type")) {
          case "standard":
            if (format === null) {
              format = "standard";
            }
            break;
          case "text":
            if (format === null || format === "standard") {
              format = "long";
            }
            break;
          default:
            format = "long";
        }
        if (global_ids.length > this.loadingChunkSize) {
          break;
        }
      }
    }
    if (format === null) {
      format = "long";
    }
    if (global_ids.length === 0) {
      return this.checkLoading(dfr);
    }
    req_data = {
      search: [
        {
          type: "in",
          fields: ["_global_object_id"],
          "in": global_ids
        }
      ],
      format: format,
      offset: 0,
      limit: global_ids.length
    };
    txt = "dynamic load [" + counter + "]";
    ez5.api.search({
      json_data: req_data
    }).done((function(_this) {
      return function(data) {
        var div, j, k, l, len1, len2, len3, node, nodeList, not_found, not_founds, obj, ref;
        txt = ("ResultDynamicLoading.render [" + counter + "] ") + global_ids.length + " objects, elasticsearch:" + data.took + "ms";
        ref = data.objects;
        for (idx = j = 0, len1 = ref.length; j < len1; idx = ++j) {
          obj = ref[idx];
          nodeList = CUI.DOM.matchSelector(_this._container[0], "[global-object-id=\"" + obj._global_object_id + "\"]");
          if (nodeList.length === 0) {
            CUI.warn("Requested Result Object " + obj._global_object_id + " not found in DOM tree.", _this._container[0]);
            continue;
          }
          for (k = 0, len2 = nodeList.length; k < len2; k++) {
            node = nodeList[k];
            div = $(node);
            obj.__offset = parseInt(node.getAttribute("offset"));
            obj.__idx = parseInt(node.getAttribute("idx"));
            DOM.data(node, "object", obj);
            _this.__renderObject(div);
          }
        }
        not_founds = CUI.DOM.matchSelector(_this._container[0], "[loading=\"1\"]");
        if (not_founds.length > 0) {
          CUI.warn("ResultDynamicLoading: objects not returned by search:", (function() {
            var l, len3, results;
            results = [];
            for (l = 0, len3 = not_founds.length; l < len3; l++) {
              not_found = not_founds[l];
              results.push(DOM.getAttribute(not_found, "global-object-id"));
            }
            return results;
          })());
        }
        for (l = 0, len3 = not_founds.length; l < len3; l++) {
          not_found = not_founds[l];
          DOM.removeData(not_found, "object");
          _this.__resetDiv($(not_found)).append(new LocaLabel({
            "class": "ez5-result-dynamic-loading-not-found",
            loca_key: "result.dynamic.loading.not_found",
            multiline: true,
            centered: true
          }).DOM);
        }
        return _this.checkLoading(dfr);
      };
    })(this));
    return dfr.promise();
  };

  ResultDynamicLoading.prototype.__resetDiv = function(div) {
    div.removeClass("placeholder");
    div.removeAttr("loading");
    div.empty();
    return div;
  };

  ResultDynamicLoading.prototype.__renderObject = function(div) {
    var dfr, idx, obj, req, resultObject, rt, set_focus;
    this.__resetDiv(div);
    obj = DOM.data(div, "object");
    req = DOM.data(div, "request");
    resultObject = new ResultObject().setData(obj);
    resultObject.setCSSClasses(div);
    rt = div.attr("render-type");
    if (rt !== "none") {
      switch (rt) {
        case "standard":
          div.append(resultObject.renderStandard());
          break;
        case "hires":
          div.append(resultObject.renderHires());
          break;
        case "card3-no-path":
          div.append(resultObject.renderCard3(false));
          break;
        case "text":
          div.append(resultObject.renderTextHtml());
          break;
        default:
          assert(false, "ResultDynamicLoading.checkLoading", "Unsupported render-type: \"" + rt + "\".");
      }
    }
    if (req) {
      this._search.addToResultDiv(req, resultObject, div);
    }
    if ((idx = parseInt(div.attr("asset-browser-idx"))) >= 0) {
      dfr = DOM.data(div, "show-asset-idx-deferred");
      set_focus = DOM.data(div, "show-asset-idx-set-focus");
      if (dfr) {
        this.showAsset(div, idx, set_focus, dfr);
      }
    }
  };

  ResultDynamicLoading.prototype.getContainer = function() {
    return this._container;
  };

  ResultDynamicLoading.prototype.getPlaceholder = function(opts) {
    var d, ref, ref1, render_from_data;
    assert((ref = opts.object) != null ? ref._global_object_id : void 0, "ResultDynamicLoading.getPlaceholder", "opts.object._global_object_id not set", {
      opts: opts
    });
    assert(opts.render_type, "ResultDynamicLoading.getPlaceholder", "opts.render_type not set", {
      opts: opts
    });
    assert(!opts.request || opts.request instanceof Request, "ResultDynamicLoading.getPlaceholder", "opts.request not set", {
      opts: opts
    });
    assert($.isPlainObject(opts.object), "ResultDynamicLoading.getPlaceholder", "opts.object not set", {
      opts: opts
    });
    render_from_data = void 0;
    switch (opts.object._format) {
      case "standard":
        if ((ref1 = opts.render_type) === "card3-no-path" || ref1 === "standard") {
          render_from_data = 1;
        }
        break;
      case "long":
        render_from_data = 1;
    }
    d = $div("result-dynamic placeholder " + (opts["class"] || ""));
    d.append(new Template({
      name: "result-object-standard-placeholder"
    }).DOM);
    d.attr({
      "tabindex": "0",
      "global-object-id": opts.object._global_object_id,
      "render-type": opts.render_type,
      "render-from-data": render_from_data,
      "offset": opts.offset,
      "idx": opts.idx
    });
    Events.listen({
      node: d,
      type: "toolbox",
      call: (function(_this) {
        return function(ev, info) {
          info.tools.push(new ToolboxTool({
            group: "object",
            name: "object.detail",
            run: function() {
              var colObj;
              colObj = new CollectionObject(opts.object);
              return ResultObject.showCollectionObjectInPopover({
                collectionObject: colObj,
                element: d
              });
            }
          }));
          if (ez5.session.isDebug()) {
            info.tools.push(new ToolboxTool({
              group: "object",
              name: "object.dump",
              sort: "I:1",
              loca_key: "base.debug.to.console",
              loca_key_attrs: {
                more: " [" + opts.object._system_object_id + "]"
              },
              run: function(ev) {
                return CUI.info("result object DUMP: ", dump(opts.object), _this);
              }
            }));
          }
        };
      })(this)
    });
    opts.object.__offset = opts.offset;
    opts.object.__idx = opts.idx;
    DOM.data(d, "object", opts.object);
    DOM.data(d, "request", opts.request);
    return d;
  };

  ResultDynamicLoading.prototype.showAsset = function(el_or_gid, idx, set_focus, dfr) {
    var ab, el, gid;
    if (set_focus == null) {
      set_focus = false;
    }
    if (dfr == null) {
      dfr = new CUI.Deferred();
    }
    if (isString(el_or_gid)) {
      gid = el_or_gid;
      el = CUI.DOM.matchSelector(this._container, "[global-object-id=\"" + gid + "\"]")[0];
      if (!el) {
        console.error("Could not showAsset in container. global_object_id: " + gid + ", asset_browser_idx: " + idx + ", container:", this._container[0]);
        return dfr.reject().promise();
      }
    } else {
      el = el_or_gid;
    }
    if (!el || (!(idx >= 0))) {
      CUI.error("Could not showAsset in container. elements: " + el.length + ", asset_browser_idx: " + idx + ", container:", this._container[0], el, idx);
      return dfr.reject().promise();
    }
    if (set_focus) {
      if (this.__last_asset) {
        CUI.DOM.removeClass(this.__last_asset, "cui-selected");
        this.__last_asset = null;
      }
      if (this.__last_el) {
        this.__last_el.classList.remove(ez5.defaults.focusClass);
        this.__last_el = null;
      }
      el.classList.add(ez5.defaults.focusClass);
      this.__last_el = el;
    }
    if (CUI.DOM.hasClass(el, "placeholder")) {
      DOM.data(el, "show-asset-idx-deferred", dfr);
      DOM.data(el, "show-asset-idx-set-focus", set_focus);
      CUI.DOM.setAttribute(el, "asset-browser-idx", idx);
      if (!CUI.DOM.getAttribute(el, "loading")) {
        CUI.DOM.setAttribute(el, "load-me", 1);
        this.checkLoading();
      }
    } else {
      DOM.removeData(el, "show-asset-idx-deferred");
      DOM.removeData(el, "show-asset-idx-set-focus");
      ab = DOM.data(CUI.DOM.matchSelector(el, ".cui-asset-browser")[0], "element");
      if (!ab) {
        return dfr.resolve().promise();
      }
      if (!isInteger(idx)) {
        console.error("ResultDynamicLoading.showAsset: idx not Integer", idx);
        ab.setIdx(0);
      } else {
        ab.setIdx(idx);
      }
      if (set_focus) {
        this.__last_asset = CUI.DOM.addClass(ab.getCurrentAssetEement(), "cui-selected");
      }
      dfr.resolve();
    }
    return dfr.promise();
  };

  ResultDynamicLoading.counter = 0;

  return ResultDynamicLoading;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var NavigationToolbar,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

NavigationToolbar = (function(superClass) {
  extend(NavigationToolbar, superClass);

  function NavigationToolbar(opts1) {
    this.opts = opts1 != null ? opts1 : {};
    NavigationToolbar.__super__.constructor.call(this, this.opts);
    this.count_label = new Label({
      text: "..."
    });
    this.__current = {};
  }

  NavigationToolbar.prototype.initOpts = function() {
    NavigationToolbar.__super__.initOpts.call(this);
    return this.addOpts({
      navigation_buttons_left: {
        check: Array
      },
      append_count_label: {
        mandatory: true,
        "default": true,
        check: Boolean
      },
      loca_key_prefix: {
        "default": "result.navigation.toolbar",
        mandatory: true,
        check: String
      },
      onLoadPage: {
        "default": function(page, opts) {
          return console.error("NavigationToolbar.onLoadPage", page, opts);
        },
        mandatory: true,
        check: Function
      }
    });
  };

  NavigationToolbar.prototype.getCountLabel = function() {
    return this.count_label;
  };

  NavigationToolbar.prototype.loadPage = function(page, opts) {
    if (opts == null) {
      opts = {};
    }
    return this._onLoadPage(page, opts);
  };

  NavigationToolbar.prototype.getCurrent = function() {
    return this.__current;
  };

  NavigationToolbar.prototype.update = function(data) {
    var lastPage, page;
    if (data == null) {
      data = {};
    }
    page = Math.floor(data.offset / data.limit);
    lastPage = Math.ceil(data.count / data.limit) - 1;
    this.__current.offset = data.offset;
    if (this.__current.count !== data.count || this.__current.pageSize !== data.limit || this.__current.lastPage !== lastPage || this.__current.page !== page) {
      this.__current.page = page;
      this.__current.count = data.count;
      this.__current.pageSize = data.limit;
      this.__current.lastPage = lastPage;
      return this.__render(data);
    } else {
      return this.__update();
    }
  };

  NavigationToolbar.prototype.__update = function() {
    var csv_key;
    if (this.__current.count === 1) {
      csv_key = this._loca_key_prefix + ".count_one";
    } else if (this.__current.lastPage === 0 || this.__current.count === 0 || this.__current.pageSize === 1) {
      csv_key = this._loca_key_prefix + ".count";
    } else {
      csv_key = this._loca_key_prefix + ".count_page";
    }
    this.count_label.setText($$(csv_key, {
      from: ez5.format_number(this.__current.page * this.__current.pageSize + 1),
      to: ez5.format_number(Math.min(this.__current.count, (this.__current.page + 1) * this.__current.pageSize)),
      count: ez5.format_number(this.__current.count)
    }));
    if (this.__current.page === 0) {
      this.prev.disable();
      this.first.disable();
    } else {
      this.prev.enable();
      this.first.enable();
    }
    this.input.setPlaceholder((this.__current.page + 1) + this.__separator + (this.__current.lastPage + 1));
    if (this.__current.page === this.__current.lastPage || this.__current.count === 0) {
      this.next.disable();
      this.last.disable();
    } else {
      this.next.enable();
      this.last.enable();
    }
    return this;
  };

  NavigationToolbar.prototype.__separator = " / ";

  NavigationToolbar.prototype.__rescueNavigationButtonsLeft = function() {
    CUI.DOM.removeChildren(this.left());
  };

  NavigationToolbar.prototype.__render = function() {
    var lastPage, load_page, page_data;
    this.__rescueNavigationButtonsLeft();
    this.replace(this._navigation_buttons_left, "left");
    if (this._append_count_label) {
      this.append(this.count_label, "left");
    }
    lastPage = "" + (this.__current.lastPage + 1);
    this.prev = new LocaButton({
      icon: "left",
      loca_key: this._loca_key_prefix + ".left",
      group: "navi",
      onClick: (function(_this) {
        return function(ev) {
          _this.loadPage(_this.__current.page - 1);
        };
      })(this)
    });
    this.next = new LocaButton({
      icon: "right",
      group: "navi",
      loca_key: this._loca_key_prefix + ".right",
      onClick: (function(_this) {
        return function(ev) {
          _this.loadPage(_this.__current.page + 1);
        };
      })(this)
    });
    page_data = {
      page: null
    };
    load_page = (function(_this) {
      return function() {
        if (page_data.page === null) {
          return;
        }
        if (_this.__current.page === page_data.page - 1) {
          return;
        }
        CUI.debug("loading page", page_data.page);
        return _this.loadPage(page_data.page - 1);
      };
    })(this);
    this.input = new NumberInput({
      min: 1,
      max: this.__current.lastPage + 1,
      "class": "ez5-navi-input",
      group: "navi",
      name: "page",
      data: page_data,
      onBlur: (function(_this) {
        return function(input) {
          return input.setValue(null);
        };
      })(this),
      onDataChanged: (function(_this) {
        return function() {
          CUI.debug("input changed to", page_data.page);
          CUI.scheduleCallback({
            ms: 1000,
            call: load_page
          });
        };
      })(this)
    }).start();
    CUI.DOM.setAttribute(this.input.getElement(), "data-max-chars", ("" + (this.__current.lastPage + 1)).length * 2 + this.__separator.length);
    this.first = new LocaButton({
      icon: "fa-step-backward",
      loca_key: this._loca_key_prefix + ".first",
      "class": "ez5-navi-first",
      group: "navi",
      onClick: (function(_this) {
        return function(ev) {
          _this.loadPage(0);
        };
      })(this)
    });
    this.last = new LocaButton({
      icon: "fa-step-forward",
      loca_key: this._loca_key_prefix + ".last",
      "class": "ez5-navi-last",
      group: "navi",
      onClick: (function(_this) {
        return function(ev) {
          _this.loadPage(_this.__current.lastPage);
        };
      })(this)
    });
    if (this.__current.count > 0) {
      this.replace(new Buttonbar({
        buttons: [this.first, this.prev, this.input, this.next, this.last]
      }), "right");
    } else {
      this.empty("right");
    }
    this.__update();
    CUI.DOM.setAttribute(this.DOM, "last-page", this.__current.lastPage);
    Events.trigger({
      node: this.DOM,
      type: "content-resize"
    });
    return this;
  };

  NavigationToolbar.prototype.destroy = function() {
    this.__rescueNavigationButtonsLeft();
    return NavigationToolbar.__super__.destroy.call(this);
  };

  return NavigationToolbar;

})(Toolbar);
// Generated by CoffeeScript 1.10.0
var ResultNavigationToolbar,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ResultNavigationToolbar = (function(superClass) {
  extend(ResultNavigationToolbar, superClass);

  function ResultNavigationToolbar() {
    return ResultNavigationToolbar.__super__.constructor.apply(this, arguments);
  }

  ResultNavigationToolbar.prototype.initOpts = function() {
    ResultNavigationToolbar.__super__.initOpts.call(this);
    this.addOpts({
      search: {
        mandatory: true,
        check: Search
      },
      getPageSize: {
        mandatory: true,
        check: Function
      }
    });
    return this.removeOpt("onLoadPage");
  };

  ResultNavigationToolbar.prototype.getSearch = function() {
    return this._search;
  };

  ResultNavigationToolbar.prototype.loadPage = function(page, opts) {
    if (opts == null) {
      opts = {};
    }
    opts.page_request = true;
    opts.offset = page * this._getPageSize();
    return this.getSearch().execute(new Request(opts));
  };

  return ResultNavigationToolbar;

})(NavigationToolbar);
// Generated by CoffeeScript 1.10.0
var ResultObject, ResultObjectDemo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ResultObject = (function(superClass) {
  extend(ResultObject, superClass);

  function ResultObject(opts) {
    assert(!opts, "new ResultObject", "opts are obsolete", {
      opts: opts
    });
    this.history_browser_data = {};
  }

  ResultObject.prototype.setData = function(_data) {
    var last_data, ref;
    if ((ref = _data._path) != null ? ref.length : void 0) {
      last_data = _data._path[_data._path.length - 1];
      assert(last_data[last_data._objecttype]._id === _data[_data._objecttype]._id, "ResultObject.setData", "Last _path element does not match element.", {
        data: _data
      });
    }
    assert(_data._mask, "ResultObject.setData", "data._mask must be set", {
      data: _data
    });
    assert(_data._objecttype, "ResultObject.setData", "data._objecttype must be set", {
      data: _data
    });
    this.data = _data;
    this.setMask(this.data._mask, this.data.__version);
    return this;
  };

  ResultObject.prototype.setMask = function(mask_name, version) {
    var table_id;
    if (version == null) {
      version = "CURRENT";
    }
    table_id = ez5.schema[version]._objecttype_by_name[this.objecttype()].table_id;
    this.mask = Mask.getMaskByMaskName(mask_name, table_id, version);
    if (isUndef(this.data._orig_mask)) {
      this.data._orig_mask = this.data._mask;
    }
    this.data._mask = this.mask.name();
    return this;
  };

  ResultObject.prototype.getMask = function() {
    return this.mask;
  };

  ResultObject.prototype.getData = function() {
    return this.data;
  };

  ResultObject.prototype.hasChildren = function() {
    var ref;
    return !!((ref = this.data) != null ? ref._has_children : void 0);
  };

  ResultObject.prototype.getReplacementRecord = function() {
    return this.mask.getReplacementRecord(this.getData());
  };

  ResultObject.prototype.loadFromDbWithMask = function(mask) {
    return this.loadFromDb(null, mask);
  };

  ResultObject.prototype.loadFromDb = function(version, mask) {
    var url_data;
    if (mask == null) {
      mask = this.maskName();
    }
    assert(this.id(), "ResultObject.loadFromDb", "Cannot load, no ID set.", {
      resultObject: this
    });
    url_data = {};
    if (version) {
      url_data.version = version;
    }
    return ez5.api.db({
      type: "GET",
      api: "/" + this.objecttype() + "/" + mask + "/" + this.id(),
      data: url_data
    }).done((function(_this) {
      return function(data) {
        return _this.setData(data[0]);
      };
    })(this));
  };

  ResultObject.prototype.loadFromSearch = function(search_data, mask_name) {
    var dfr;
    if (mask_name == null) {
      mask_name = null;
    }
    dfr = new CUI.Deferred();
    ez5.api.search({
      data: {
        debug: "ResultObject.loadFromSearch"
      },
      json_data: search_data
    }).done((function(_this) {
      return function(searchData) {
        var best_mask_name;
        _this.searchData = searchData;
        if (_this.searchData.objects.length === 0) {
          CUI.warn("ResultObject.loadFromSearch: No object found for search.", search_data, mask_name);
          dfr.reject(new UserError({
            label: "result_object.error.not_found"
          }));
          return;
        }
        if (_this.searchData.objects.length === 1) {
          _this.setData(_this.searchData.objects[0]);
        } else {
          if (!mask_name) {
            best_mask_name = _this.getBestMaskName();
            if (!best_mask_name) {
              assert(_this.searchData.objects.length === 0, "ResultObject.loadFromSearch", "Object with _best_mask not found in response.", {
                data: _this.searchData
              });
              delete _this.searchData;
              CUI.warn("ResultObject.loadFromSearch: No best mask found.");
              dfr.reject(new UserError({
                label: "result_object.error.not_found"
              }));
              return;
            }
            mask_name = best_mask_name;
          }
          _this.setDataByMaskName(mask_name);
        }
        return dfr.resolve(_this);
      };
    })(this)).fail((function(_this) {
      return function(xhr) {
        CUI.warn("ResultObject.loadFromSearch[fail]:", xhr);
        return dfr.reject(new UserError({
          label: "result_object.error.not_found"
        }));
      };
    })(this));
    return dfr.promise();
  };

  ResultObject.prototype.setDataByMaskName = function(mask_name) {
    var best_mask_name, found, j, len, obj, ref, ref1;
    assert(CUI.isArray((ref = this.searchData) != null ? ref.objects : void 0), (getObjectClass(this)) + ".setDataByMaskName", "No search data found.", {
      searchData: this.searchData
    });
    best_mask_name = this.getBestMaskName();
    found = null;
    ref1 = this.searchData.objects;
    for (j = 0, len = ref1.length; j < len; j++) {
      obj = ref1[j];
      if (obj._mask === mask_name || (!mask_name && best_mask_name === obj._mask)) {
        this.setData(obj);
        found = obj._mask;
        break;
      }
    }
    if (mask_name && !found) {
      return this.setDataByMaskName();
    }
    assert(found, (getObjectClass(this)) + ".setDataByMaskName", "Mask " + mask_name + " not found in search data.", {
      searchData: this.searchData
    });
    return found;
  };

  ResultObject.prototype.getBestMaskName = function() {
    var j, len, obj, ref, ref1;
    if (this.searchData.objects.length === 1) {
      return this.searchData.objects[0]._mask;
    }
    ref = this.searchData.objects;
    for (j = 0, len = ref.length; j < len; j++) {
      obj = ref[j];
      if (obj._best_mask) {
        return obj._mask;
      }
    }
    console.warn("ResultObject.getBestMaskName: Data from server does not contain ._best_mask. Using first object.", this.searchData);
    return (ref1 = this.searchData.objects[0]) != null ? ref1._mask : void 0;
  };

  ResultObject.prototype.getAvailableMasks = function() {
    var j, len, mask, masks, obj, ref;
    masks = [];
    ref = this.searchData.objects;
    for (j = 0, len = ref.length; j < len; j++) {
      obj = ref[j];
      mask = ez5.mask.CURRENT._mask_instance_by_name[obj._mask];
      assert(mask instanceof Mask, "ResultObject.loadFromSearch", "Mask " + obj._mask + " not found in search data.", {
        searchData: this.searchData,
        mask: obj._mask
      });
      masks.push(mask);
    }
    return masks;
  };

  ResultObject.prototype.getArrayForSearchFilter = function() {
    return [this.objecttype(), this.id()];
  };

  ResultObject.prototype.getCollectionObject = function() {
    return new CollectionObject(this.getData());
  };

  ResultObject.prototype.isMappedMetadataCreated = function() {
    return !!this.data._mapped_metadata_created;
  };

  ResultObject.prototype.getGlobalObjectId = function() {
    var ref;
    return (ref = this.data) != null ? ref._global_object_id : void 0;
  };

  ResultObject.prototype.getSystemObjectId = function() {
    var ref;
    return (ref = this.data) != null ? ref._system_object_id : void 0;
  };

  ResultObject.prototype.getUuid = function() {
    var ref;
    return (ref = this.data) != null ? ref._uuid : void 0;
  };

  ResultObject.prototype.uniqueId = function() {
    assert(false, "do not USE unique id");
    if (this.id()) {
      return this.data._objecttype + "-" + (this.id());
    }
  };

  ResultObject.prototype.copy = function() {
    var ro;
    ro = new ResultObject();
    ro.setData(copyObject(this.data, true));
    return ro;
  };

  ResultObject.prototype.initData = function(objecttype, data) {
    var ref;
    if (data == null) {
      data = {};
    }
    data._objecttype = objecttype;
    if (!data[objecttype]) {
      data[objecttype] = {
        _id: null
      };
    }
    if (!data._generated_rights) {
      data._generated_rights = {
        acl: true,
        "delete": true,
        write: true,
        read: true,
        unlink: true,
        change_owner: true
      };
    }
    if (!data._mask) {
      data._mask = (ref = ez5.schema.CURRENT._table_by_name[objecttype]) != null ? ref._preferred_mask.name : void 0;
    }
    return this.setData(data);
  };

  ResultObject.prototype.objecttype = function() {
    return this.data._objecttype;
  };

  ResultObject.prototype.objecttypeLocalized = function() {
    return ez5.schema.CURRENT._objecttype_by_name[this.objecttype()]._name_localized;
  };

  ResultObject.prototype.maskName = function() {
    return this.data._mask;
  };

  ResultObject.prototype.getFormat = function() {
    return this.data._format;
  };

  ResultObject.prototype.getRights = function() {
    return this.data._generated_rights || {};
  };

  ResultObject.prototype.hasRight = function(right_name) {
    return this.getRights()[right_name] || false;
  };

  ResultObject.prototype.id = function() {
    var ref, ref1;
    return (ref = this.data) != null ? (ref1 = ref[this.data._objecttype]) != null ? ref1._id : void 0 : void 0;
  };

  ResultObject.prototype.getParentId = function() {
    var ref;
    return ((ref = this.data) != null ? ref[this.objecttype()]._id_parent : void 0) || null;
  };

  ResultObject.prototype.getRootId = function() {
    var ref;
    if (!((ref = this.data._path) != null ? ref.length : void 0)) {
      return this.id();
    }
    return this.data._path[0][this.objecttype()]._id;
  };

  ResultObject.prototype.pool = function() {
    var ref, ref1;
    return (ref = this.data) != null ? (ref1 = ref[this.data._objecttype]) != null ? ref1._pool : void 0 : void 0;
  };

  ResultObject.prototype.changelog = function() {
    var ref;
    return ((ref = this.data) != null ? ref._changelog : void 0) || [];
  };

  ResultObject.prototype.version = function() {
    var ref, ref1;
    return (ref = this.data) != null ? (ref1 = ref[this.data._objecttype]) != null ? ref1._version : void 0 : void 0;
  };

  ResultObject.prototype.getVersion = function() {
    var ref;
    return (ref = this.data) != null ? ref[this.objecttype()]._version : void 0;
  };

  ResultObject.prototype.table = function() {
    return this.mask.table;
  };

  ResultObject.prototype.tableId = function() {
    return this.mask.table.id();
  };

  ResultObject.prototype.renderText = function(data) {
    if (data == null) {
      data = this.data;
    }
    return ez5.loca.getBestDatabaseValue(this.__getFirstStandard(data).text);
  };

  ResultObject.prototype.renderShort = function(opts) {
    if (opts == null) {
      opts = {};
    }
    if (this.mask.isHierarchy()) {
      opts.path_mode = "flat";
      return this.__render("short", opts);
    } else {
      return this.__render("short", opts);
    }
  };

  ResultObject.prototype.renderCard1 = function(hierarchy, tags, highlight, data, opts) {
    if (hierarchy == null) {
      hierarchy = this.mask.isHierarchy();
    }
    if (tags == null) {
      tags = true;
    }
    if (highlight == null) {
      highlight = false;
    }
    if (data == null) {
      data = this.data;
    }
    if (opts == null) {
      opts = {};
    }
    return this.__renderCard(hierarchy, tags, highlight, "1", data, opts);
  };

  ResultObject.prototype.renderCard2 = function(hierarchy, tags, highlight, data, opts) {
    if (hierarchy == null) {
      hierarchy = this.mask.isHierarchy();
    }
    if (tags == null) {
      tags = true;
    }
    if (highlight == null) {
      highlight = false;
    }
    if (data == null) {
      data = this.data;
    }
    if (opts == null) {
      opts = {};
    }
    return this.__renderCard(hierarchy, tags, highlight, "2", data, opts);
  };

  ResultObject.prototype.renderCard3 = function(hierarchy, tags, highlight, data, opts) {
    if (hierarchy == null) {
      hierarchy = this.mask.isHierarchy();
    }
    if (tags == null) {
      tags = true;
    }
    if (highlight == null) {
      highlight = false;
    }
    if (data == null) {
      data = this.data;
    }
    if (opts == null) {
      opts = {};
    }
    return this.__renderCard(hierarchy, tags, highlight, "3", data, opts);
  };

  ResultObject.prototype.__renderCard = function(hierarchy, tags, highlight, max_standard, data, opts) {
    if (opts == null) {
      opts = {};
    }
    if (hierarchy) {
      return this.__render("card" + max_standard, {
        path_mode: "separate",
        tags: tags,
        for_print: opts.for_print,
        highlight: highlight,
        data: data
      });
    } else {
      return this.__render("card" + max_standard, {
        tags: tags,
        for_print: opts.for_print,
        highlight: highlight,
        data: data
      });
    }
  };

  ResultObject.prototype.renderStandard = function(opts) {
    if (opts == null) {
      opts = {
        tags: true
      };
    }
    return this.__render("standard", opts);
  };

  ResultObject.prototype.renderHires = function() {
    var ref;
    assert((ref = this.getFormat()) === "long", "ResultObject.renderHires", "format \"long\" required for renderStandardHires", {
      data: this.getData()
    });
    return this.__render("hires");
  };

  ResultObject.prototype.getStandard = function(data, force) {
    var standard;
    if (data == null) {
      data = this.data;
    }
    if (force == null) {
      force = false;
    }
    if (!this.id() || force || CUI.isEmptyObject(data._standard)) {
      standard = this.getStandardData(data);
    } else {
      standard = data._standard;
    }
    assert(CUI.isPlainObject(standard), "ResultObject.__getStandard", "Unable to render, _standard not found in data.", {
      data: data
    });
    return standard;
  };

  ResultObject.prototype.__getFirstStandard = function(data) {
    var j, k, len, ref, standard;
    standard = this.getStandard(data);
    ref = [1, 2, 3];
    for (j = 0, len = ref.length; j < len; j++) {
      k = ref[j];
      if (standard[k]) {
        return standard[k];
      }
    }
    return assert(false, "ResultObject.__getFirstStandard", "No rendered standard found in data", {
      data: data
    });
  };

  ResultObject.prototype.renderAltText = function(data) {
    var standard;
    if (data == null) {
      data = this.data;
    }
    standard = this.getStandard(data);
    return this.__getAltText(standard);
  };

  ResultObject.prototype.__getAltText = function(standard) {
    var j, k, len, ref, ref1, txt, value;
    txt = [];
    ref = [1, 2];
    for (j = 0, len = ref.length; j < len; j++) {
      k = ref[j];
      if (!standard[k]) {
        continue;
      }
      value = ez5.loca.getBestFrontendValue((ref1 = standard[k]) != null ? ref1.text : void 0);
      if (!isEmpty(value)) {
        txt.push(value);
      }
    }
    return txt.join("\n");
  };

  ResultObject.prototype.__render = function(tmpl_name, opts) {
    var asset_browser, assets, btn, data, eas_field, els, for_print, highlight, hires, idx, img_alt, j, l, len, len1, m, map, max_order, max_standard, order, path_els, path_mode, pp, ref, ref1, ref2, render, show_asset_placeholder, standard, tags, tags_style, tmpl, tmpl_p, value, values;
    if (opts == null) {
      opts = {};
    }
    path_mode = opts.path_mode || null;
    tags = opts.tags || false;
    highlight = opts.highlight || false;
    data = opts.data || this.data;
    for_print = opts.for_print || false;
    switch (tmpl_name) {
      case "short":
        map = {
          standard_1: true
        };
        render = "text";
        max_standard = 1;
        assert(!tags, "ResultObject.__render", "\"short\" cannot be used with \"tags\"");
        break;
      case "card1":
        map = {
          asset: true,
          tags: true,
          standard_1: true,
          info: true
        };
        max_standard = 1;
        tags_style = "text";
        break;
      case "card2":
        map = {
          asset: true,
          tags: true,
          standard_1: true,
          standard_2: true,
          info: true
        };
        max_standard = 2;
        tags_style = "text";
        break;
      case "card3":
        map = {
          asset: true,
          tags: true,
          standard_1: true,
          standard_2: true,
          standard_3: true,
          info: true
        };
        max_standard = 3;
        tags_style = "text";
        break;
      case "standard":
      case "hires":
        map = {
          asset: true,
          tags: true,
          standard_1: true,
          standard_2: true,
          standard_3: true,
          objecttype: true,
          pool_path: true,
          info: true
        };
        max_standard = 3;
        asset_browser = true;
        tags_style = "icon";
        assert(!path_mode, "ResultObject.__render", "\"standard\" cannot be combined with \"path_mode\"");
    }
    if (!render) {
      if (highlight) {
        render = "text";
      } else {
        render = "html";
      }
    } else {
      assert(!highlight, "ResultObject.__render", "highlight cannot be set for tmpl == \"short\"");
    }
    if (tmpl_name === "hires") {
      hires = true;
    }
    standard = this.getStandard(data, hires);
    tmpl = new Template({
      name: "result-object-" + tmpl_name,
      map: map
    });
    if (tmpl_name === "standard" || tmpl_name === "hires") {
      tmpl.append($text(this.objecttypeLocalized()), "objecttype");
      pp = Pool.renderPoolPath((ref = this.data[this.objecttype()]._pool) != null ? ref._path : void 0);
      if (pp) {
        tmpl.append(pp, "pool_path");
        tmpl.addClass("ez5-has-pool");
      } else {
        tmpl.addClass("ez5-has-no-pool");
      }
    }
    max_order = 0;
    img_alt = null;
    for (order = j = 1, ref1 = max_standard; 1 <= ref1 ? j <= ref1 : j >= ref1; order = 1 <= ref1 ? ++j : --j) {
      if (standard[order]) {
        max_order = order;
        value = ez5.loca.getBestDatabaseValue(standard[order][render], highlight);
        if (render === "text" && !highlight) {
          img_alt = value;
          tmpl.append(CUI.DOM.htmlToNodes(toHtml(value)), "standard_" + order);
        } else {
          img_alt = ez5.loca.getBestDatabaseValue(standard[order].text);
          tmpl.append(CUI.DOM.htmlToNodes(value), "standard_" + order);
        }
      }
    }
    if (max_order) {
      tmpl.addClass("ez5-max-order-" + max_order);
    } else {
      tmpl.addClass("ez5-max-order-0");
    }
    show_asset_placeholder = true;
    if (standard.eas && tmpl.map.asset) {
      eas_field = new EASField();
      if (values = standard.eas["1"]) {
        assets = [];
        for (idx = l = 0, len = values.length; l < len; idx = ++l) {
          value = values[idx];
          if (!CUI.isPlainObject(value)) {
            assets.push(new Asset(eas_field, {
              _error: {
                code: "result.object.asset.faulty_data_from_server"
              }
            }));
            console.error("ResultObject.__render: standard.eas does not contain value", standard, this.getData(), this);
            continue;
          }
          assets.push(new Asset(eas_field, value));
          if (!asset_browser) {
            break;
          }
        }
        if (assets.length > 0) {
          show_asset_placeholder = false;
          if (asset_browser) {
            tmpl.append(new AssetBrowser({
              img_alt: this.__getAltText(standard),
              hires: hires,
              assets: assets,
              resultObject: this,
              for_print: for_print
            }), "asset");
          } else {
            tmpl.append(assets[0].getImgElement(null, null, {
              for_print: for_print
            }), "asset");
          }
        }
      }
      tmpl.addClass("ez5-mask-has-assets");
    } else {
      tmpl.addClass("ez5-mask-has-no-assets");
    }
    if (tags) {
      els = this.renderTags(tags_style);
      if (els.length > 0) {
        tmpl.append(els, "tags");
        tmpl.addClass("ez5-has-tags");
      } else {
        tmpl.addClass("ez5-has-no-tags");
      }
    } else if (tmpl_name !== "short") {
      tmpl.addClass("ez5-has-no-tags");
    }
    if (show_asset_placeholder && tmpl.map.asset) {
      if (hires) {
        tmpl.append(btn = new LocaButton({
          "class": "ez5-result-object-detail-info-button",
          loca_key: "detail.info.button",
          onClick: (function(_this) {
            return function() {
              return _this.showModal({
                modal: {
                  fill_space: 'both',
                  element: tmpl.map.asset
                }
              });
            };
          })(this)
        }), "asset");
      }
      tmpl.append(new EmptyLabel({
        "class": "ez5-result-object-no-asset-browser ez5-lassoable",
        text: this.mask.table.nameLocalized(),
        centered: true,
        icon: "fa-file-o"
      }), "asset");
    }
    if (path_mode) {
      assert(this.mask.isHierarchy(), "hierarchical_mode needs objecttype to be hierarchical");
      assert(path_mode === "flat" || path_mode === "separate", "path_mode needs to be \"flat\" or \"separate\"", {
        path_mode: path_mode
      });
      if (!$.isArray(this.data._path)) {
        CUI.warn("ResultObject.__render", "path_mode needs @data._path to be set. Ignoring.", {
          data: this.data
        });
      } else {
        path_els = [];
        ref2 = this.getPathData(false);
        for (idx = m = 0, len1 = ref2.length; m < len1; idx = ++m) {
          data = ref2[idx];
          path_els.push(this.renderText(data));
        }
        tmpl_p = ResultObject.renderPath(path_els);
        tmpl.DOM.addClass("ez5-has-path");
        if (path_mode === "flat") {
          tmpl_p.DOM.append(tmpl.DOM.children);
        }
        if (tmpl_name === 'short') {
          tmpl.prepend(tmpl_p.DOM);
        } else {
          tmpl.prepend(tmpl_p.DOM, 'info');
        }
      }
    }
    tmpl.removeEmptySlots();
    return tmpl.DOM;
  };

  ResultObject.prototype.getPathData = function(include_self) {
    if (include_self == null) {
      include_self = true;
    }
    if (include_self) {
      return this.data._path;
    } else {
      return this.data._path.slice(0, this.data._path.length - 1);
    }
  };

  ResultObject.prototype.hasTags = function() {
    var ref;
    return ((ref = this.data._tags) != null ? ref.length : void 0) > 0;
  };

  ResultObject.prototype.renderTags = function(style) {
    var _tag, els, icon, j, len, ref, tag;
    assert(style === "icon" || style === "text", "ResultObject.renderTags", "style must be \"icon\" or \"text\"", {
      style: style
    });
    els = [];
    if (!this.hasTags()) {
      return els;
    }
    ref = this.data._tags;
    for (j = 0, len = ref.length; j < len; j++) {
      _tag = ref[j];
      tag = ez5.tagForm.findTagByAnyId(_tag._id);
      if (!tag) {
        continue;
      }
      switch (style) {
        case "icon":
          icon = tag.getIconElement();
          if (!icon) {
            continue;
          }
          els.push(icon);
          continue;
        case "text":
          els.push(tag.getLabel(true, true).DOM);
      }
    }
    return els;
  };

  ResultObject.prototype.dump = function() {
    CUI.info("--- " + (this.getGlobalObjectId()) + " ---");
    CUI.info(dump(this.data));
    return CUI.info("--- ---");
  };

  ResultObject.prototype.renderTitle = function() {
    var content, sid;
    content = [$text(this.objecttypeLocalized(), "objecttype")];
    if (sid = this.getSystemObjectId()) {
      content.push($text("#" + sid, "sid"));
    } else if (this instanceof TemplateObject) {
      content.push($empty$("main.editor.template").addClass("sid"));
    } else {
      content.push($empty$("main.editor.new").addClass("sid"));
    }
    return new Label({
      "class": "result-object-title",
      content: content
    });
  };

  ResultObject.prototype.renderTextHtml = function(opts) {
    if (opts == null) {
      opts = {};
    }
    return this.mask.renderText(this.data, "text", null, opts);
  };

  ResultObject.prototype.renderPrint = function(opts) {
    var ab, assets, dfr, tmpl;
    if (opts == null) {
      opts = {};
    }
    dfr = new CUI.Deferred();
    tmpl = new Template({
      name: "result-object-print",
      map: {
        card: true,
        detail: true,
        objecttype: true,
        id: true
      }
    });
    tmpl.map.card.appendChild(this.renderCard1());
    tmpl.map.id.textContent = "#" + this.getSystemObjectId();
    tmpl.map.objecttype.textContent = this.objecttypeLocalized();
    assets = this.getAssetsForBrowser("detail");
    if (assets !== false && (assets != null ? assets.length : void 0) > 0) {
      ab = new AssetBrowser({
        hires: true,
        for_print: true,
        assets: assets,
        start_idx: 0
      });
      tmpl.map.detail.append(ab.DOM);
    }
    opts.for_print = true;
    opts.onDone = (function(_this) {
      return function() {
        return dfr.resolve(tmpl.DOM);
      };
    })(this);
    tmpl.map.detail.append(this.renderDetail("detail", "detail-header", opts));
    return dfr.promise();
  };

  ResultObject.prototype.renderEditor = function(mode, header_mode, opts) {
    if (opts == null) {
      opts = {};
    }
    assert(mode && header_mode && this.mask, "ResultObject.renderEditor", "mode, header_mode amd mask must be set", {
      ResultObject: this,
      Mask: this.mask,
      resultObject: this
    });
    return this.mask.renderEditor(this.data, mode, header_mode, opts);
  };

  ResultObject.prototype.renderDetail = function(mode, header_mode, opts) {
    var div, ref;
    if (opts == null) {
      opts = {};
    }
    assert(mode && header_mode && this.mask, "ResultObject.renderDetail", "mode, header_mode amd mask must be set", {
      ResultObject: this,
      Mask: this.mask,
      resultObject: this
    });
    assert((ref = this.getFormat()) === "long" || ref === "full", "ResultObject.renderDetail", "format \"long\" or \"full\" required for renderStandardHires", {
      data: this.getData()
    });
    div = this.mask.renderDetail(this.data, mode, header_mode, opts);
    return div;
  };

  ResultObject.prototype.getFormat = function() {
    return this.data._format;
  };

  ResultObject.prototype.getEASFields = function(mode) {
    return this.mask.getEASFields(mode);
  };

  ResultObject.prototype.getAssetsForBrowser = function(mode) {
    assert(mode, "ResultObject.getAssetsForBrowser", "mode must be set", {
      ResultObject: this
    });
    return this.mask.getAssetsForBrowser(this.data, mode);
  };

  ResultObject.prototype.getSaveData = function(opts) {
    return this.mask.getSaveData(this.data, opts);
  };

  ResultObject.prototype.checkSaveData = function(opts) {
    return this.mask.checkSaveData(this.data, opts);
  };

  ResultObject.prototype.getCopyFromSaveData = function() {
    var dfr;
    dfr = new CUI.Deferred();
    ResultObject.loadFromGlobalObjectId(this.getGlobalObjectId()).done((function(_this) {
      return function(ro) {
        var save_data;
        save_data = ro.getSaveData({
          copy: true
        });
        ro.initData(_this.objecttype(), save_data);
        return dfr.resolve(ro);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  ResultObject.prototype.getStandardData = function(data) {
    var _html, _standard, _text, c, container, eas_value, eas_values, element, get_eas, idx, info, j, l, last, len, len1, len2, m, order, ref, ref1, ref2, ref3, sid, standard, value;
    if (data == null) {
      data = this.data;
    }
    standard = this.mask.renderStandard(data);
    _standard = {};
    get_eas = (function(_this) {
      return function(order) {
        var eas, ref;
        eas = (ref = _standard.eas) != null ? ref[order] : void 0;
        if (!eas) {
          if (!_standard.eas) {
            _standard.eas = {};
          }
          eas = _standard.eas[order] = [];
        }
        return eas;
      };
    })(this);
    for (idx = j = 0, len = standard.length; j < len; idx = ++j) {
      element = standard[idx];
      order = element.render_info.order;
      if (element.field instanceof EASColumn) {
        value = element.field.getImgValuePreferred(element.data);
        if (isEmpty(value)) {
          continue;
        }
        get_eas(order).push(value);
        continue;
      }
      if (element.field instanceof LinkedObject && element.eas) {
        eas_values = (ref = element.data[element.field.name()]) != null ? (ref1 = ref._standard) != null ? (ref2 = ref1.eas) != null ? ref2["1"] : void 0 : void 0 : void 0;
        if (eas_values && eas_values.length > 0) {
          for (l = 0, len1 = eas_values.length; l < len1; l++) {
            eas_value = eas_values[l];
            get_eas(order).push(eas_value);
            eas_value._incomplete_versions = true;
          }
        }
        continue;
      }
      if (isEmpty(element.value)) {
        continue;
      }
      if (!(container = _standard[order])) {
        container = _standard[order] = {
          __info: []
        };
      }
      container.__info.push({
        design: element.render_info.design,
        format: element.render_info.format,
        value: element.value
      });
    }
    if (!_standard["1"]) {
      sid = this.getSystemObjectId();
      if (sid) {
        sid = '#' + sid;
      } else {
        sid = '';
      }
      _standard["1"] = {
        __info: [
          {
            design: "normal",
            format: "comma",
            value: sid
          }
        ]
      };
    }
    for (order in _standard) {
      container = _standard[order];
      if (order === "eas") {
        continue;
      }
      _text = [];
      _html = $span("ez-output-" + order);
      ref3 = container.__info;
      for (idx = m = 0, len2 = ref3.length; m < len2; idx = ++m) {
        info = ref3[idx];
        last = idx === container.__info.length - 1;
        c = ResultObject.charTextMap[info.format] || [", "];
        if (c.length === 1) {
          _text.push(info.value);
          if (!last) {
            _text.push(c);
          }
        } else {
          _text.push(c[0]);
          _text.push(info.value);
          _text.push(c[1]);
        }
        _html.append($span("ez-design-" + info.design + " ez-format-" + info.format).text(info.value));
      }
      _standard[order] = {
        text: {},
        html: {}
      };
      _standard[order].text[ez5.loca.culture] = _text.join("").trim();
      _standard[order].html[ez5.loca.culture] = _html.outerHTML;
      delete _standard[order].__info;
    }
    return _standard;
  };

  ResultObject.prototype.renderHistoryBrowser = function() {
    var __buttons, __comment, fn, j, lay, len, opts, ref, sel, show_version, version;
    __buttons = new PaneToolbar();
    __comment = new PaneToolbar();
    lay = new VerticalLayout({
      "class": "ez5-result-object-history-browser",
      top: {
        content: [__buttons, __comment]
      }
    });
    if (this.changelog().length === 0) {
      lay.replace($textEmpty("No Changelog found."), "center");
      return cl;
    }
    opts = [];
    ref = this.changelog();
    fn = (function(_this) {
      return function(version) {
        return opts.push({
          text: $$("changelog.select.option", {
            version: version.version,
            time: version.time,
            user: version.user.user._generated_displayname,
            operation: $$("changelog.operation." + version.operation)
          }),
          value: version
        });
      };
    })(this);
    for (j = 0, len = ref.length; j < len; j++) {
      version = ref[j];
      fn(version);
    }
    show_version = (function(_this) {
      return function(version) {
        var gid, ro, wb;
        gid = _this.getGlobalObjectId();
        if (!isEmpty(version.comment)) {
          __comment.replace(new MultilineLabel({
            text: version.comment
          }), "center");
        } else {
          __comment.replace(new EmptyLabel({
            text: $$("result.object.history_browser.no_comment")
          }), "center");
        }
        wb = new WaitBlock({
          element: lay.center()
        }).show();
        ro = _this.copy();
        return ro.loadFromDb(version.version).done(function() {
          wb.destroy();
          return lay.replace(ro.renderDetail("detail", "detail-header", {
            history: true
          }), "center");
        });
      };
    })(this);
    if (!this.history_browser_data.version) {
      if (opts.length === 1) {
        this.history_browser_data.version = opts[0].value;
      } else {
        this.history_browser_data.version = opts[opts.length - 2].value;
      }
    }
    show_version(this.history_browser_data.version);
    sel = new Select({
      options: opts,
      mark_changed: false,
      name: "version",
      data: this.history_browser_data,
      onDataChanged: (function(_this) {
        return function() {
          return show_version(_this.history_browser_data.version);
        };
      })(this)
    }).start();
    __buttons.replace(sel, "center");
    return lay.DOM;
  };

  ResultObject.prototype.showModal = function(_opts) {
    var mod, mod_opts, opts;
    if (_opts == null) {
      _opts = {
        modal: {}
      };
    }
    opts = CUI.Element.readOpts(_opts, "ResultObject.showModal", {
      modal: {
        mandatory: true,
        check: "PlainObject"
      }
    });
    mod_opts = copyObject(opts.modal, false);
    CUI.mergeMap(mod_opts, {
      "class": "ez5-result-object-details-modal",
      cancel: true,
      onHide: (function(_this) {
        return function() {
          return mod.destroy();
        };
      })(this),
      pane: {
        header_left: this.renderTitle(),
        content: (function(_this) {
          return function() {
            return _this.renderDetail("detail", "detail-header");
          };
        })(this)
      }
    });
    mod = new CUI.Modal(mod_opts);
    mod.show();
    return mod;
  };

  ResultObject.prototype.showPopover = function(_opts) {
    var opts, pop, pop_opts;
    opts = CUI.Element.readOpts(_opts, "ResultObject.showPopover", {
      detail: {
        check: DetailSidebar
      },
      popover: {
        mandatory: true,
        check: "PlainObject"
      }
    });
    pop_opts = copyObject(opts.popover, false);
    CUI.mergeMap(pop_opts, {
      "class": "ez5-result-object-details-popover",
      fill_screen_button: true,
      onHide: (function(_this) {
        return function() {
          return pop.destroy();
        };
      })(this),
      placement: "w",
      pane: {
        header_left: this.renderTitle(),
        content: (function(_this) {
          return function() {
            return _this.renderDetail("detail", "detail-header", {
              detail: opts.detail
            });
          };
        })(this)
      }
    });
    pop = new CUI.Popover(pop_opts);
    pop.show();
    return pop;
  };

  ResultObject.prototype.setCSSClasses = function(_element) {
    var element;
    if (_element.DOM) {
      element = _element.DOM;
    } else {
      element = _element;
    }
    CUI.DOM.setAttributeMap(element, {
      "ez5-objecttype": this.objecttype(),
      "ez5-mask": this.maskName()
    });
    return this;
  };

  ResultObject.prototype.getDetailShareUrl = function() {
    var share_url;
    share_url = document.location.origin + "/detail/" + this.getSystemObjectId();
    if (window.easydb_server_url) {
      share_url += "?server=" + encodeURIComponent(window.easydb_server_url);
    }
    return share_url;
  };

  ResultObject.prototype.getDeeplinkUrl = function() {
    var arr, dfr, object_url;
    if (!this.getUuid()) {
      return CUI.rejectedPromise();
    }
    dfr = new CUI.Deferred();
    arr = ["", "uuid", this.getUuid()];
    object_url = arr.join("/");
    ez5.api.objects({
      api: object_url,
      handle_error: (function(_this) {
        return function(xhr) {
          var ref, ref1;
          if ((ref = xhr != null ? (ref1 = xhr.responseJSON) != null ? ref1.code : void 0 : void 0) === "error.user.objects_not_allowed" || ref === "error.user.object_not_found") {
            return true;
          }
        };
      })(this),
      add_token: false
    }).done((function(_this) {
      return function() {
        var _object_url;
        _object_url = "/api/v1/objects" + object_url + "/format/xml_easydb";
        return dfr.resolve(_object_url);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  ResultObject.prototype.getOaiPmhUrl = function() {
    var arr, dfr, oai_pmh, object_url, parms;
    if (!this.getUuid()) {
      return CUI.rejectedPromise();
    }
    oai_pmh = ez5.session.getBaseConfig().system.oai_pmh;
    if (!oai_pmh) {
      return CUI.rejectedPromise();
    }
    dfr = new CUI.Deferred();
    arr = ["", "uuid", this.getUuid()];
    object_url = arr.join("/");
    parms = {
      verb: "GetRecord",
      identifier: "oai:" + oai_pmh.namespace_identifier + ":" + this.getUuid(),
      metadataPrefix: "easydb"
    };
    object_url = "/api/v1/plugin/base/oai/oai?" + CUI.encodeUrlData(parms);
    ez5.server({
      url: object_url,
      dataType: "text",
      handle_error: (function(_this) {
        return function(xhr) {
          return true;
        };
      })(this),
      add_token: false
    }).fail(dfr.reject).done((function(_this) {
      return function(data, status, xhr) {
        var error, parser, xml;
        if (!window.DOMParser) {
          dfr.resolve(object_url);
          return;
        }
        parser = new window.DOMParser();
        xml = parser.parseFromString(data, "text/xml");
        error = xml.querySelector("parsererror,OAI-PMH > error");
        if (error) {
          return dfr.reject();
        } else {
          return dfr.resolve(object_url);
        }
      };
    })(this));
    return dfr.promise();
  };

  ResultObject.prototype.presentShareUrls = function() {
    var add_type, get_url_input, idx, present_dialog, ref, ref1, rows, spinner, types;
    types = ["detail"];
    if ((ref = ez5.session.getBaseConfig().system.deep_link_access) != null ? ref.enabled : void 0) {
      types.push("deeplink");
    }
    if ((ref1 = ez5.session.getBaseConfig().system.oai_pmh) != null ? ref1.enabled : void 0) {
      types.push("oai_pmh");
    }
    rows = [];
    idx = -1;
    spinner = CUI.spinner({
      text: $$("result.object.share.loading")
    });
    get_url_input = (function(_this) {
      return function(url) {
        return new Input({
          name: "url",
          readonly: true,
          data: {
            url: ez5.getAbsoluteURL(url)
          }
        }).start();
      };
    })(this);
    add_type = (function(_this) {
      return function() {
        var row, type;
        idx = idx + 1;
        if (idx === types.length) {
          present_dialog();
          return;
        }
        type = types[idx];
        row = {
          type: $$("result.object.share.type." + type)
        };
        switch (type) {
          case "detail":
            row.url = get_url_input(_this.getDetailShareUrl());
            rows.push(row);
            return add_type();
          case "deeplink":
            return _this.getDeeplinkUrl().done(function(url) {
              row.url = get_url_input(url);
              rows.push(row);
              return add_type();
            }).fail(function() {
              return add_type();
            });
          case "oai_pmh":
            return _this.getOaiPmhUrl().done(function(url) {
              row.url = get_url_input(url);
              rows.push(row);
              return add_type();
            }).fail(function() {
              return add_type();
            });
        }
      };
    })(this);
    present_dialog = (function(_this) {
      return function() {
        var hint, mod, table;
        spinner.destroy();
        table = new CUI.Table({
          "class": "ez5-result-object-share-url-form cui-table--has-datafields",
          columns: [
            {
              text: $$("result.object.share.column.type"),
              name: "type"
            }, {
              text: $$("result.object.share.column.url"),
              name: "url"
            }
          ],
          rows: rows
        });
        hint = new Label({
          appearance: "secondary",
          "class": "ez5-result-object-share-hint",
          multiline: true,
          markdown: true,
          text: $$("result.object.share.text")
        });
        return mod = new Modal({
          "class": "ez5-result-object-share-url-modal",
          cancel: true,
          pane: {
            header_left: new Label({
              text: $$("result.object.share.title")
            }),
            content: [table, hint],
            footer_right: {
              text: $$("base.ok"),
              onClick: function() {
                return mod.destroy();
              }
            }
          }
        }).show();
      };
    })(this);
    add_type();
  };

  ResultObject.prototype.getDetailTools = function(_opts) {
    var disabled, field, j, l, len, len1, len2, len3, m, match, n, opts, ot, ref, ref1, ref2, ref3, search, search_could_be_possible, search_fields, tools;
    opts = CUI.Element.readOpts(_opts, "ResultObject.getDetailTools", {
      detail: {
        check: DetailSidebar
      },
      search: {
        check: SearchMain
      },
      getElement: {
        check: Function
      }
    });
    search = opts.search;
    if (!search && opts.detail) {
      search = opts.detail.getMainSearch();
    }
    search_fields = [];
    if (search) {
      search_could_be_possible = false;
      ref = search.getLinkedObjectFields("expert");
      for (j = 0, len = ref.length; j < len; j++) {
        field = ref[j];
        if (field.linkMask().table.name() === this.objecttype()) {
          search_could_be_possible = true;
          break;
        }
      }
      ref1 = search.getLinkedObjectFields("expert", true);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        field = ref1[l];
        if (field.linkMask().table.name() === this.objecttype()) {
          search_fields.push(field);
        }
      }
    }
    tools = [];
    if (opts.getElement) {
      tools.push(new ToolboxTool({
        loca_key: "result.object.show_info",
        name: "result.object.show_info",
        run: (function(_this) {
          return function() {
            return ResultObject.showCollectionObjectInPopover({
              collectionObject: new CollectionObject({
                _global_object_id: _this.getGlobalObjectId()
              }),
              detail: opts.detail,
              element: opts.getElement()
            });
          };
        })(this)
      }));
    }
    if (search_fields.length > 0 || search_could_be_possible) {
      tools.push(new ToolboxTool({
        loca_key: "result.object.show_in_search",
        name: "result.object.show_in_search",
        disabled: search_fields.length === 0,
        run: (function(_this) {
          return function() {
            return LinkedObject.showInSearch({
              search_fields: search_fields,
              search: search,
              result_object: _this
            });
          };
        })(this)
      }));
    }
    if (opts.detail) {
      tools.push(new ToolboxTool({
        loca_key: "result.object.show_in_sidebar",
        name: "result.object.show_in_sidebar",
        run: (function(_this) {
          return function() {
            return opts.detail.loadGlobalObjectId(_this.getGlobalObjectId());
          };
        })(this)
      }));
    }
    if (search && this.hasChildren() && search.getSearchHierarchyManager()) {
      match = false;
      ref2 = search.getSearchObjecttypes();
      for (m = 0, len2 = ref2.length; m < len2; m++) {
        ot = ref2[m];
        if (ot.name() === this.objecttype()) {
          match = true;
          break;
        }
      }
      if (match) {
        disabled = true;
        ref3 = search.getSearchObjecttypes(true);
        for (n = 0, len3 = ref3.length; n < len3; n++) {
          ot = ref3[n];
          if (ot.name() === this.objecttype()) {
            disabled = false;
            break;
          }
        }
        tools.push(new ToolboxTool({
          loca_key: "result.object.dive_in_search",
          disabled: disabled,
          name: "result.object.dive_in_search",
          run: (function(_this) {
            return function() {
              search.emptyRequest();
              search.getSearchHierarchyManager().addFilter(_this);
              return search.execute();
            };
          })(this)
        }));
      }
    }
    return tools;
  };

  ResultObject.renderPath = function(path_els, content) {
    var cls, idx, j, len, path_el, path_separator_icon, tmpl_p;
    if (path_els == null) {
      path_els = [];
    }
    if (content == null) {
      content = false;
    }
    tmpl_p = new Template({
      name: "result-object-path"
    });
    for (idx = j = 0, len = path_els.length; j < len; idx = ++j) {
      path_el = path_els[idx];
      if (content) {
        tmpl_p.DOM.append(path_el);
      } else {
        tmpl_p.DOM.append($span("ez5-path-element").text(path_el));
      }
      cls = ["ez5-path-separator"];
      if (idx === 0) {
        cls.push("ez5-path-separator-first");
      }
      if (idx === path_els.length - 1) {
        cls.push("ez5-path-separator-last");
      }
      path_separator_icon = new Icon({
        icon: ez5.icon_map.result_object_path_separator,
        "class": cls.join(" ")
      });
      tmpl_p.DOM.append(path_separator_icon.DOM);
    }
    return tmpl_p;
  };

  ResultObject.charTextMap = {
    "comma": [", "],
    "space": [" "],
    "colon": [": "],
    "semicolon": ["; "],
    "newline": ["\n"],
    "brackets": ["{", "}"],
    "round-parentheses": ["(", ")"],
    "square-brackets": ["[", "]"],
    "dash": [" - "]
  };

  ResultObject.showCollectionObjectInPopover = function(opts) {
    CUI.Element.readOpts(opts, "ResultObject.showCollectionObjectInPopover", {
      collectionObject: {
        check: function(v) {
          return v instanceof CollectionObject;
        }
      },
      detail: {
        check: DetailSidebar
      },
      element: {
        check: function(v) {
          return isElement(v) || isElement(v != null ? v.DOM : void 0);
        }
      }
    });
    return ResultObject.loadFromData(copyObject(opts.collectionObject.getObject(), true), "long").done((function(_this) {
      return function(ro) {
        return ro.showPopover({
          detail: opts.detail,
          popover: {
            element: opts.element
          }
        });
      };
    })(this));
  };

  ResultObject.loadFromDb = function(global_object_id) {
    var dfr;
    dfr = new CUI.Deferred();
    ResultObject.loadFromData({
      _global_object_id: global_object_id
    }).fail(dfr.reject).done((function(_this) {
      return function(ro) {
        return ro.loadFromDb().done(function() {
          return dfr.resolve(ro);
        }).fail(dfr.reject);
      };
    })(this));
    return dfr.promise();
  };

  ResultObject.loadFromData = function(data, _format, present_error, best_mask_filter, generate_rights) {
    var format, ro;
    if (_format == null) {
      _format = "long";
    }
    if (present_error == null) {
      present_error = true;
    }
    if (best_mask_filter == null) {
      best_mask_filter = false;
    }
    if (generate_rights == null) {
      generate_rights = false;
    }
    assert(data._global_object_id || data._mapped_metadata_created, "ResultObject.loadFromData", "Data needs to contain _global_object_id or _mapped_metadata_created", {
      data: data
    });
    if (data._global_object_id) {
      format = (function() {
        switch (_format) {
          case "text":
          case "long":
            return "long";
          case "short":
          case "standard":
            return "standard";
          default:
            return assert(false, "ResultObject.resultObjectFromData", "Unknown format " + _format + ".", {
              format: _format
            });
        }
      })();
      if (data._objecttype && _format !== 'short' && !data._path && ez5.schema.CURRENT._objecttype_by_name[data._objecttype].is_hierarchical) {
        data._format_incomplete = true;
      }
    } else {
      format = null;
    }
    if (format && (ResultObject.compareFormats(data._format, format) < 0 || data._format_incomplete)) {
      return this.loadFromGlobalObjectId(data._global_object_id, format, data._mask, best_mask_filter, generate_rights).fail(function(error) {
        if (present_error) {
          return error.presentError();
        }
      });
    } else {
      ro = new ResultObject().setData(data);
      return CUI.resolvedPromise(ro);
    }
  };

  ResultObject.prototype.loadFromCollectionObject = function(collection_object, format, mask_name, best_mask_filter, generate_rights) {
    var search_data;
    if (format == null) {
      format = "long";
    }
    if (mask_name == null) {
      mask_name = null;
    }
    if (best_mask_filter == null) {
      best_mask_filter = false;
    }
    if (generate_rights == null) {
      generate_rights = true;
    }
    assert(collection_object instanceof CollectionObject, "ResultObject.loadFromCollectionObject", "collection_object needs to be instance of CollectionObject", {
      collection_object: collection_object
    });
    search_data = {
      best_mask_filter: best_mask_filter,
      format: format,
      generate_rights: generate_rights,
      search: [collection_object.getSearchFilter()]
    };
    return this.loadFromSearch(search_data, mask_name);
  };

  ResultObject.prototype.loadFromId = function(objecttype, id, format, mask_name, best_mask_filter, generate_rights) {
    var search_data;
    if (format == null) {
      format = "standard";
    }
    if (mask_name == null) {
      mask_name = null;
    }
    if (best_mask_filter == null) {
      best_mask_filter = false;
    }
    if (generate_rights == null) {
      generate_rights = true;
    }
    search_data = {
      best_mask_filter: best_mask_filter,
      generate_rights: generate_rights,
      format: format,
      search: [
        {
          type: "in",
          "in": [objecttype],
          fields: ["_objecttype"]
        }, {
          type: "in",
          "in": [id],
          fields: [objecttype + "._id"]
        }
      ]
    };
    return this.loadFromSearch(search_data, mask_name);
  };

  ResultObject.loadFromGlobalObjectId = function(gid, format, mask, best_mask_filter, generate_rights) {
    if (mask == null) {
      mask = null;
    }
    if (best_mask_filter == null) {
      best_mask_filter = false;
    }
    if (generate_rights == null) {
      generate_rights = true;
    }
    return (new ResultObject()).loadFromCollectionObject(new CollectionObject({
      _global_object_id: gid
    }), format, mask, best_mask_filter, generate_rights);
  };

  ResultObject.loadFromId = function(objecttype, id, format, mask_name, best_mask_filter, generate_rights) {
    if (format == null) {
      format = "standard";
    }
    if (mask_name == null) {
      mask_name = null;
    }
    if (best_mask_filter == null) {
      best_mask_filter = false;
    }
    if (generate_rights == null) {
      generate_rights = true;
    }
    return (new ResultObject()).loadFromId(objecttype, id, format, mask_name, best_mask_filter, generate_rights);
  };

  ResultObject.__formats = ["", "short", "standard", "long", "full"];

  ResultObject.compareFormats = function(format1, format2) {
    if (format1 == null) {
      format1 = "";
    }
    if (format2 == null) {
      format2 = "";
    }
    return compareIndex(idxInArray(format1, this.__formats), idxInArray(format2, this.__formats));
  };

  return ResultObject;

})(CUI.Dummy);

ResultObjectDemo = (function(superClass) {
  extend(ResultObjectDemo, superClass);

  function ResultObjectDemo(opts) {
    var _id_parent, _opts, _ro, _sd, format, format_linked_object, i, j, k, mask, ref, sd, top_data, v, version;
    if (opts == null) {
      opts = {};
    }
    ResultObjectDemo.__super__.constructor.call(this);
    mask = opts.mask;
    version = opts.version || "CURRENT";
    format = opts.format;
    format_linked_object = opts.format_linked_object || "long";
    assert(mask instanceof Mask, "new ResultObjectDemo", "opts.mask needs to be instanceof Mask", {
      opts: opts
    });
    assert(format === "long" || format === "standard", "new ResultObjectDemo", "opts.format needs to be \"long\" or \"standard\".", {
      opts: opts
    });
    this.initData(mask.table.name(), {
      _mask: mask.name(),
      __version: version
    });
    _opts = opts.opts || {};
    _opts.demo_data = true;
    _opts.demo_version = version;
    _opts.demo_format_linked_object = format_linked_object;
    sd = this.getSaveData(_opts);
    sd._global_object_id = sd._system_object_id + "@" + version;
    sd._standard = this.getStandardData(sd);
    sd._generated_rights = {
      unlink: true,
      change_owner: true,
      "delete": true,
      write: true,
      acl: true
    };
    sd._format = opts.format;
    sd.__version = version;
    this.setData(sd);
    top_data = copyObject(sd, true);
    if (mask.table.isHierarchy() && !opts.demo_skip_path_create) {
      _id_parent = null;
      sd._path = [];
      for (i = j = 1; j <= 2; i = ++j) {
        _ro = new ResultObjectDemo({
          demo_skip_path_create: true,
          version: version,
          mask: mask,
          demo_format_linked_object: format_linked_object,
          format: "standard"
        });
        _sd = _ro.getData();
        _id_parent = _ro.id();
        delete _sd._owner;
        _sd[sd._objecttype]._id_parent = _id_parent;
        ref = _sd[sd._objecttype];
        for (k in ref) {
          v = ref[k];
          if (k.startsWith("_")) {
            continue;
          }
          delete _sd[sd._objecttype][k];
        }
        sd._path.push(_sd);
      }
      sd._path.push(top_data);
    }
    this;
  }

  return ResultObjectDemo;

})(ResultObject);
// Generated by CoffeeScript 1.10.0
var ResultManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ResultManager = (function(superClass) {
  extend(ResultManager, superClass);

  function ResultManager() {
    return ResultManager.__super__.constructor.apply(this, arguments);
  }

  ResultManager.prototype.initOpts = function() {
    ResultManager.__super__.initOpts.call(this);
    return this.addOpts({
      managers: {
        check: Array
      },
      pref: {
        check: String
      }
    });
  };

  ResultManager.prototype.readOpts = function() {
    var i, len, m, ref;
    ResultManager.__super__.readOpts.call(this);
    ref = this._managers;
    for (i = 0, len = ref.length; i < len; i++) {
      m = ref[i];
      assert(m instanceof ResultManagerResult, "new ResultManager", "opts.managers needs to be instance of ResultManagerResult", {
        opts: this.opts
      });
    }
    return this.managers = this._managers;
  };

  ResultManager.prototype.init = function() {
    var d, fn, i, idx, j, len, len1, ref, ref1, settings_btn, sm, switch_view;
    if (this._pref) {
      this.data = ez5.session.getPref(this._pref);
    }
    if (!this.data) {
      this.data = {
        view_select: 0,
        view_data: {}
      };
      ref = this.managers;
      for (i = 0, len = ref.length; i < len; i++) {
        sm = ref[i];
        this.data.view_data[sm.getName()] = sm.getViewDataDefault();
      }
    }
    this.viewBtns = [];
    switch_view = (function(_this) {
      return function() {
        return _this.setResultManagerInSearch().done(function() {
          return _this.saveViewData().done(function() {
            if (_this.getSearch().getSearchButton().isDisabled()) {
              return;
            }
            _this.disableViewBtns();
            return _this.getSearch().execute().always(function() {
              return _this.enableViewBtns();
            });
          });
        });
      };
    })(this);
    ref1 = this.managers;
    fn = (function(_this) {
      return function(idx) {
        return _this.viewBtns.push(new LocaButton({
          loca_key: "main.search.view." + sm.getName().toLocaleLowerCase(),
          group: "view",
          radio: "view",
          attr: {
            value: sm.getName()
          },
          value: idx,
          active: idx === _this.data.view_select,
          onClick: function() {
            _this.data.view_select = idx;
            return switch_view();
          }
        }));
      };
    })(this);
    for (idx = j = 0, len1 = ref1.length; j < len1; idx = ++j) {
      sm = ref1[idx];
      fn(idx);
      if (!(d = this.data.view_data[sm.getName()])) {
        d = this.data.view_data[sm.getName()] = {};
      }
      sm.setData(d);
    }
    settings_btn = new LocaButton({
      "class": "ez5-result-manager-button-options",
      loca_key: "result.manager.button.options",
      group: "view",
      onClick: (function(_this) {
        return function() {
          if (!CUI.__ng__) {
            return _this.showPopover(settings_btn.DOM);
          } else {
            return _this.showPopover(_this.viewBtns[_this.data.view_select].DOM);
          }
        };
      })(this)
    });
    this.viewBtns.push(settings_btn);
    this.getSearch().getButtonToolbar().append(this.viewBtns, "left");
    return this.setResultManagerInSearch();
  };

  ResultManager.prototype.destroy = function() {
    var i, len, ref, sm;
    ref = this.managers;
    for (i = 0, len = ref.length; i < len; i++) {
      sm = ref[i];
      sm.destroy();
    }
    return ResultManager.__super__.destroy.call(this);
  };

  ResultManager.prototype.showPopover = function(element) {
    var pop;
    pop = new Popover({
      element: element,
      backdrop: {
        policy: "click"
      },
      "class": "view-select-popover",
      pane: {
        header_left: new LocaLabel({
          loca_key: "main.search.view.result.title",
          loca_key_attrs: {
            view: $$("main.search.view." + this.managers[this.data.view_select].getName())
          }
        }),
        content: (function(_this) {
          return function() {
            var f, fields, form, i, len;
            fields = _this.current_result_manager.getViewFields();
            for (i = 0, len = fields.length; i < len; i++) {
              f = fields[i];
              f.undo_and_changed_support = false;
            }
            form = new Form({
              fields: fields,
              undo_and_changed_support: false,
              onDataChanged: function(data, df) {
                pop.changed = true;
                return _this.current_result_manager.updateView(form);
              },
              data: _this.data.view_data[_this.current_result_manager.getName()]
            });
            form.start();
            _this.current_result_manager.initView(form);
            return form;
          };
        })(this)
      },
      onHide: (function(_this) {
        return function() {
          if (pop.changed) {
            return _this.saveViewData(true);
          }
        };
      })(this)
    });
    return pop.show();
  };

  ResultManager.prototype.disableViewBtns = function() {
    var btn, i, len, ref;
    console.debug("disable...");
    ref = this.viewBtns;
    for (i = 0, len = ref.length; i < len; i++) {
      btn = ref[i];
      btn.disable();
    }
    return this;
  };

  ResultManager.prototype.enableViewBtns = function() {
    var btn, i, len, ref;
    console.debug("enable...");
    ref = this.viewBtns;
    for (i = 0, len = ref.length; i < len; i++) {
      btn = ref[i];
      btn.enable();
    }
    return this;
  };

  ResultManager.prototype.saveViewData = function(call_save_view_done) {
    if (call_save_view_done == null) {
      call_save_view_done = false;
    }
    if (this._pref) {
      this.disableViewBtns();
      return ez5.session.savePref(this._pref, this.data).always((function(_this) {
        return function() {
          if (call_save_view_done) {
            return _this.current_result_manager.saveViewDone().always(function() {
              return _this.enableViewBtns();
            });
          } else {
            return CUI.resolvedPromise();
          }
        };
      })(this));
    } else {
      return CUI.resolvedPromise();
    }
  };

  ResultManager.prototype.setResultManagerInSearch = function() {
    var ret;
    if (this.current_result_manager === this.managers[this.data.view_select]) {
      return CUI.rejectedPromise();
    }
    if (this.current_result_manager) {
      this.getSearch().removeSearchManager(this.current_result_manager);
    }
    this.current_result_manager = this.managers[this.data.view_select];
    ret = this.getSearch().insertAfterSearchManager(this, this.current_result_manager).init();
    if (isPromise(ret)) {
      return ret;
    } else {
      return CUI.resolvedPromise();
    }
  };

  return ResultManager;

})(SearchManager);
// Generated by CoffeeScript 1.10.0
var ResultStandard,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ResultStandard = (function(superClass) {
  extend(ResultStandard, superClass);

  function ResultStandard() {
    return ResultStandard.__super__.constructor.apply(this, arguments);
  }

  ResultStandard.prototype.getName = function() {
    return "result-standard";
  };

  ResultStandard.prototype.getRenderType = function() {
    return "standard";
  };

  ResultStandard.prototype.init = function() {
    ResultStandard.__super__.init.call(this);
    return this.cssSwitcher = new CSSSwitcher({
      element: this.__pane.DOM,
      variants: window[this.getElementClass()].CSSVariants,
      data: this.view_data
    });
  };

  ResultStandard.prototype.updateView = function(form) {
    this.checkOptionDependencies(form);
    this.cssSwitcher.setCSS();
    return ResultStandard.__super__.updateView.call(this, form);
  };

  ResultStandard.prototype.getViewDataDefault = function() {
    return {
      variant_texts: 1,
      variant_result: 2,
      variant_format: 0,
      variant_layout: 0,
      variant_info: 0,
      variant_poolinfo: 1,
      variant_tags: 1
    };
  };

  ResultStandard.prototype.initView = function(form) {
    return this.checkOptionDependencies(form);
  };

  ResultStandard.prototype.getFillViewMode = function() {
    var mode;
    if (this.__pane.hasClass("result-standard-info-underlay")) {
      mode = "underlay";
    } else if (this.__pane.hasClass("result-standard-info-sideways")) {
      mode = "sideways";
    } else if (this.__pane.hasClass("result-standard-info-overlay")) {
      mode = "overlay";
    } else {
      CUI.error("ResultDynamic.__updateFillViewLayout", "Unable to set mode: underlay, sideways, overlay. Falling back to 'overlay'.");
      mode = "overlay";
    }
    if (this.__pane.hasClass("result-standard-format-fill")) {
      if (mode === "overlay") {
        mode = "fill";
      } else {
        CUI.error("ResultDynamic.__updateFillViewLayout", "Unable to set mode 'fill' if not in 'overlay' mode. Mode is:", mode);
      }
    }
    return mode;
  };

  ResultStandard.prototype.checkOptionDependencies = function(form) {
    var disabled_options, field, format_field, format_layout, i, idx, j, k, key, l, len, len1, len2, len3, len4, m, opt, ref, ref1, ref2, ref3, ref4;
    format_field = form.getFieldsByName("variant_format")[0];
    format_layout = form.getFieldsByName("variant_layout")[0];
    ref = [format_field, format_layout];
    for (i = 0, len = ref.length; i < len; i++) {
      field = ref[i];
      ref1 = field.getOptions();
      for (idx = j = 0, len1 = ref1.length; j < len1; idx = ++j) {
        opt = ref1[idx];
        field.enableOption(idx);
      }
    }
    ref2 = ["texts", "info", "poolinfo", "tags"];
    for (k = 0, len2 = ref2.length; k < len2; k++) {
      key = ref2[k];
      form.getFieldsByName("variant_" + key)[0].enable();
    }
    disabled_options = [];
    switch (this.view_data.variant_format) {
      case 0:
        ref3 = [1, 2];
        for (l = 0, len3 = ref3.length; l < len3; l++) {
          idx = ref3[l];
          format_layout.disableOption(idx);
        }
        format_layout.setValue(0);
        break;
      case 1:
        if (CUI.__ng__) {
          format_layout.disableOption(0);
          if (format_layout.getValue() === 0) {
            format_layout.setValue(1);
          }
        }
    }
    switch (this.view_data.variant_result) {
      case 0:
        ref4 = ["texts", "info", "poolinfo", "tags"];
        for (m = 0, len4 = ref4.length; m < len4; m++) {
          key = ref4[m];
          form.getFieldsByName("variant_" + key)[0].disable();
          form.getFieldsByName("variant_" + key)[0].setValue(false);
        }
    }
    return console.debug("view data", this, form, dump(this.view_data), disabled_options);
  };

  ResultStandard.prototype.getViewFields = function() {
    var fields;
    fields = this.cssSwitcher.getFields();
    fields.push.apply(fields, ResultStandard.__super__.getViewFields.call(this));
    return fields;
  };

  ResultStandard.prototype.getCSSSwitcher = function() {
    return this.cssSwitcher;
  };

  ResultStandard.CSSVariants = [
    {
      type: "choice",
      name: "result",
      label: "main.search.view.result",
      classes: [
        {
          label: "main.search.view.result.mini",
          "class": "result-standard-mini"
        }, {
          label: "main.search.view.result.midi",
          "class": "result-standard-midi"
        }, {
          label: "main.search.view.result.maxi",
          "class": "result-standard-maxi"
        }
      ]
    }, {
      type: "choice",
      name: "format",
      label: "main.search.view.result.format",
      classes: [
        {
          label: "main.search.view.result.fill",
          "class": "result-standard-format-fill"
        }, {
          label: "main.search.view.result.thumbnail",
          "class": "result-standard-format-square"
        }, {
          label: "main.search.view.result.blow-up",
          "class": "eas-image-blow-up"
        }
      ]
    }, {
      type: "choice",
      name: "layout",
      label: "main.search.view.result.info.layout",
      classes: [
        {
          label: "main.search.view.result.info.layout.overlay",
          "class": "result-standard-info-overlay"
        }, {
          label: "main.search.view.result.info.layout.underlay",
          "class": "result-standard-info-underlay"
        }, {
          label: "main.search.view.result.info.layout.sideways",
          "class": "result-standard-info-sideways"
        }
      ]
    }, {
      type: "switch",
      name: "texts",
      label: "main.search.view.result.asset-info",
      classes: [
        {
          "class": "hide-asset-info"
        }, {
          "class": "show-asset-info"
        }
      ]
    }, {
      type: "switch",
      name: "info",
      label: "main.search.view.result.show_objecttypes",
      classes: [
        {
          "class": "hide-objecttype-info"
        }, {
          "class": "show-objecttype-info"
        }
      ]
    }, {
      type: "switch",
      name: "poolinfo",
      label: "main.search.view.result.show_poolpaths",
      classes: [
        {
          "class": "hide-poolpath-info"
        }, {
          "class": "show-poolpath-info"
        }
      ]
    }, {
      type: "switch",
      name: "tags",
      label: "main.search.view.result.show_tags",
      classes: [
        {
          "class": "ez5-result-standard-hide-tags"
        }, {
          "class": "ez5-result-standard-show-tags"
        }
      ]
    }
  ];

  return ResultStandard;

})(ResultDynamic);
// Generated by CoffeeScript 1.10.0
var ResultSimple,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ResultSimple = (function(superClass) {
  extend(ResultSimple, superClass);

  function ResultSimple() {
    return ResultSimple.__super__.constructor.apply(this, arguments);
  }

  ResultSimple.prototype.getName = function() {
    return "result-simple";
  };

  ResultSimple.prototype.getRenderType = function() {
    return "card3-no-path";
  };

  ResultSimple.prototype.init = function() {
    ResultSimple.__super__.init.call(this);
    return this.setData({});
  };

  return ResultSimple;

})(ResultDynamic);
// Generated by CoffeeScript 1.10.0
var ResultText,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ResultText = (function(superClass) {
  extend(ResultText, superClass);

  function ResultText() {
    return ResultText.__super__.constructor.apply(this, arguments);
  }

  ResultText.prototype.getName = function() {
    return "result-text";
  };

  ResultText.prototype.__page_size = 10;

  ResultText.prototype.getPageSizes = function() {
    return [10, 25, 50, 100];
  };

  ResultText.prototype.getViewDataDefault = function() {
    return {};
  };

  ResultText.prototype.getRenderType = function() {
    return "text";
  };

  ResultText.prototype.getFillViewMode = function() {
    return "dynamic";
  };

  ResultText.prototype.addToResultDiv = function(request, result_object, div) {
    return CUI.DOM.addClass(div, "ez5-lassoable");
  };

  ResultText.prototype.getViewFields = function() {
    var fields;
    fields = this.cssSwitcher.getFields();
    fields.push.apply(fields, ResultDynamic.prototype.getViewFields.call(this));
    return fields;
  };

  ResultText.prototype.checkOptionDependencies = function(form) {};

  ResultText.prototype.__updateFillViewLayout = function() {};

  ResultText.CSSVariants = [];

  ResultText.WEGCSSVariants = [
    {
      type: "choice",
      name: "width",
      label: "main.search.view.result-text.width",
      classes: [
        {
          label: "main.search.view.result.full-width",
          "class": "result-text-width-full"
        }, {
          label: "main.search.view.result.mini",
          "class": "result-text-width-mini"
        }
      ]
    }, {
      type: "choice",
      name: "height",
      label: "main.search.view.result-text.height",
      classes: [
        {
          label: "main.search.view.result.full-height",
          "class": "result-text-height-full"
        }, {
          label: "main.search.view.result.mini",
          "class": "result-text-height-mini"
        }, {
          label: "main.search.view.result.midi",
          "class": "result-text-height-midi"
        }, {
          label: "main.search.view.result.maxi",
          "class": "result-text-height-maxi"
        }
      ]
    }
  ];

  return ResultText;

})(ResultStandard);
// Generated by CoffeeScript 1.10.0
var ResultTable,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

ResultTable = (function(superClass) {
  extend(ResultTable, superClass);

  function ResultTable() {
    return ResultTable.__super__.constructor.apply(this, arguments);
  }

  ResultTable.prototype.__page_size = 10;

  ResultTable.prototype.__page_sizes = [10, 25, 50, 100];

  ResultTable.prototype.initOpts = function() {
    ResultTable.__super__.initOpts.call(this);
    return this.addOpts({
      open_nodes: {
        "default": false,
        mandatory: true,
        check: Boolean
      },
      show_navigation: {
        "default": true,
        mandatory: true,
        check: Boolean
      }
    });
  };

  ResultTable.prototype.readOpts = function() {
    ResultTable.__super__.readOpts.call(this);
    return;
    if (this._selectable_opts && !this.opts.selectable_opts.onDraggableCreate) {
      this._selectable_opts.onDraggableCreate = (function(_this) {
        return function(ev) {
          console.error("create? YO!", ev);
          if (ev.hasModifierKey()) {
            return false;
          }
          if (!CUI.DOM.closest(ev.getTarget(), ".ez5-lassoable")) {
            return false;
          }
          return true;
        };
      })(this);
    }
  };

  ResultTable.prototype.getName = function() {
    return "result-table";
  };

  ResultTable.prototype.init = function() {
    ResultTable.__super__.init.call(this);
    if (this._show_navigation) {
      this.__navi = new ResultNavigationToolbar({
        "class": "ez5-result-dynamic-navigation-toolbar",
        search: this.getSearch(),
        navigation_buttons_left: this._navigation_buttons_left,
        getPageSize: (function(_this) {
          return function() {
            return _this.getPageSize();
          };
        })(this)
      });
    }
    this.__pane = new Pane({
      "class": "ez5-result-table-pane",
      absolute: this._pane_absolute,
      bottom: {
        content: this.__navi
      }
    });
    this.__cssSwitcher = new CSSSwitcher({
      element: this.__pane.DOM,
      variants: this.getCSSVariants(),
      data: this.view_data
    });
    return this.getResultContainer().empty().append(this.__pane.DOM);
  };

  ResultTable.prototype.getCSSVariants = function() {
    var key;
    return [
      {
        type: "choice",
        name: "card_size",
        label: "result.table.view.card_size",
        classes: (function() {
          var i, len, ref, results;
          ref = ['mini', 'midi', 'maxi'];
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            key = ref[i];
            results.push({
              label: "result.table.view.card_size." + key,
              "class": "result-table-card-" + key
            });
          }
          return results;
        })()
      }
    ];
  };

  ResultTable.prototype.setSearch = function(_search) {
    this._search = _search;
    ResultTable.__super__.setSearch.call(this, this._search);
    this.__poll_listener = EventPoller.listen({
      filter: {
        type: ["OBJECT_DELETE", "OBJECT_INDEX"]
      },
      instance: this,
      call: (function(_this) {
        return function(events) {
          var container, el, event, gid, i, j, len, len1, node, ref, resultTableNode, update_nodes;
          container = _this.getResultContainer();
          update_nodes = [];
          for (i = 0, len = events.length; i < len; i++) {
            event = events[i];
            gid = event.global_object_id;
            ref = CUI.DOM.matchSelector(container, "[global-object-id=\"" + gid + "\"]");
            for (j = 0, len1 = ref.length; j < len1; j++) {
              el = ref[j];
              resultTableNode = CUI.DOM.data(el, "listViewRow");
              if (event.type === "OBJECT_DELETE") {
                node = new ResultTableNodeDeleted();
                resultTableNode.prependSibling(node);
                resultTableNode.remove();
              } else {
                update_nodes.push(resultTableNode);
              }
            }
          }
          if (update_nodes.length) {
            _this.__updateDataInNodes(update_nodes).done(function() {
              var l, len2, results;
              results = [];
              for (l = 0, len2 = update_nodes.length; l < len2; l++) {
                node = update_nodes[l];
                results.push(node.update());
              }
              return results;
            });
          }
        };
      })(this)
    });
    return this;
  };

  ResultTable.prototype.unsetSearch = function() {
    ResultTable.__super__.unsetSearch.call(this);
    if (this.__poll_listener) {
      Events.ignore(this.__poll_listener);
      this.__poll_listener = null;
    }
    return this;
  };

  ResultTable.prototype.getNavigation = function() {
    return this.__navi;
  };

  ResultTable.prototype.getPageSize = function() {
    return this.view_data.page_size;
  };

  ResultTable.prototype.getExcludeFields = function() {
    var ref;
    if ((ref = this.__exclude_fields) != null ? ref.length : void 0) {
      return this.__exclude_fields;
    } else {
      return void 0;
    }
  };

  ResultTable.prototype.addToRequest = function(request) {
    var i, j, len, len1, mask, mask_name, ref, ref1, sm, visible_fields;
    request.limit = this.view_data.page_size;
    request.format = this.getObjectFormatNeededInternal();
    request.highlight = {};
    request.generate_rights = false;
    ref = this.getSearch().getSearchManagers();
    for (i = 0, len = ref.length; i < len; i++) {
      sm = ref[i];
      if (sm instanceof SearchHierarchyManager) {
        sm.emptyRequest();
      }
    }
    if (request.format === "long") {
      this.__exclude_fields = [];
      visible_fields = {};
      ref1 = this.getSearch().getSearchBasics().getMaskNames();
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        mask_name = ref1[j];
        mask = ez5.mask.CURRENT._mask_instance_by_name[mask_name];
        mask.invokeOnFields("all", true, (function(_this) {
          return function(field, data, depth) {
            var fn;
            if (field instanceof MaskSplitter) {
              return;
            }
            switch (field.name()) {
              case "_version":
              case "_id":
              case "_pool":
              case "_id_parent":
              case "_standard":
              case "_path":
              case "_global_object_id":
              case "_system_object_id":
              case "_tags":
              case "_collections":
              case "_objecttype":
                return;
            }
            fn = field.fullName();
            if (field.isVisible("table")) {
              visible_fields[fn] = true;
              removeFromArray(fn, _this.__exclude_fields);
              return;
            }
            if (!visible_fields[fn]) {
              pushOntoArray(fn, _this.__exclude_fields);
              return false;
            }
          };
        })(this));
      }
    } else {
      this.__exclude_fields = null;
    }
    request.exclude_fields = this.getExcludeFields();
    if (!request.aggregations) {
      request.aggregations = {};
    }
    request.aggregations._result_table_masks = {
      type: "term",
      limit: 100000,
      field: "_mask"
    };
    if (request.execute && !this.__waitBlock) {
      if (request.page_request && this.__tree) {
        this.__waitBlock = new WaitBlock({
          element: this.__tree.getBottom()
        }).show();
      } else {
        this.__waitBlock = new WaitBlock({
          element: this.getResultContainer()
        }).show();
      }
    }
    return this;
  };

  ResultTable.prototype.getAdditionalViewFields = function() {
    return [
      {
        type: Options,
        form: {
          label: $$("result.table.view.first_column")
        },
        radio: true,
        horizontal: false,
        min_checked: 1,
        name: "first_column",
        options: [
          {
            value: "none",
            text: $$("result.table.view.first_column.none")
          }, {
            value: "standard",
            text: $$("result.table.view.first_column.standard")
          }, {
            value: "tags",
            text: $$("result.table.view.first_column.tags")
          }
        ]
      }, {
        type: Checkbox,
        text: $$("result.table.view.show_hierarchy"),
        name: "show_hierarchy"
      }
    ];
  };

  ResultTable.prototype.filterTopLevel = function(request) {
    if (this.view_data.show_hierarchy) {
      return false;
    } else {
      return true;
    }
  };

  ResultTable.prototype.getViewFields = function() {
    var fields, o;
    fields = this.__cssSwitcher.getFields();
    fields.push.apply(fields, this.getAdditionalViewFields());
    fields.push({
      type: Select,
      form: {
        label: $$("result.table.select.page_size")
      },
      name: "page_size",
      options: (function() {
        var i, len, ref, results;
        ref = this.__page_sizes;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          o = ref[i];
          results.push({
            text: o + "",
            value: o
          });
        }
        return results;
      }).call(this)
    });
    return fields;
  };

  ResultTable.prototype.saveViewDone = function() {
    var current, page;
    if (!this.__tree) {
      return CUI.resolvedPromise();
    }
    current = this.__navi.getCurrent();
    if (this.view_data.page_size !== current.pageSize || this.view_data.show_hierarchy !== this.__show_hierarchy) {
      if (!this.__navi) {
        return this.getSearch().execute();
      } else {
        page = Math.floor((current.offset || 0) / this.view_data.page_size);
        return this.__navi.loadPage(page);
      }
    } else if (this.__current_view_data.first_column !== this.view_data.first_column) {
      return this.getSearch().execute();
    } else {
      return CUI.resolvedPromise();
    }
  };

  ResultTable.prototype.updateView = function(form) {
    this.__cssSwitcher.setCSS();
    return ResultTable.__super__.updateView.call(this, form);
  };

  ResultTable.prototype.initView = function() {
    var k, ref, v;
    this.__current_view_data = copyObject(this.view_data, true);
    ref = this.view_data;
    for (k in ref) {
      v = ref[k];
      if (k !== 'page_size' && k !== 'first_column' && k !== 'show_hierarchy' && k !== 'variant_card_size') {
        console.debug("deleting key:", k);
        delete this.view_data[k];
      }
    }
    return this;
  };

  ResultTable.prototype.setData = function(view_data) {
    var i, k, len, ref, ref1;
    this.view_data = view_data;
    ref = ["page_size"];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      if (isUndef(this.view_data[k])) {
        this.view_data[k] = this["__" + k];
      }
    }
    if (ref1 = this.view_data.page_size, indexOf.call(this.__page_sizes, ref1) < 0) {
      this.view_data.page_size = this.__page_size;
    }
    if (!this.view_data.first_column) {
      this.view_data.first_column = "standard";
    }
    this.__current_view_data = copyObject(this.view_data, true);
    return this;
  };

  ResultTable.prototype.getNodesFromData = function(data) {
    if (this.__show_hierarchy) {
      return this.getNodesFromDataTree(data);
    } else {
      return this.getNodesFromDataFlat(data);
    }
  };

  ResultTable.prototype.getNodesFromDataTree = function(data) {
    var i, idx, len, nodes, obj, ref;
    ref = data.objects;
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      obj = ref[idx];
      obj.__offset = data.offset + idx;
    }
    nodes = ez5.buildObjectTree({
      objects: data.objects,
      objectKey: (function(_this) {
        return function(obj) {
          return obj._objecttype;
        };
      })(this),
      objectKeyId: "_id",
      doOpen: true,
      newInstanceFunc: (function(_this) {
        return function(obj) {
          return new ResultTableNode({
            resultTable: _this,
            object: obj,
            open: _this._open_nodes,
            offset: obj.__offset,
            path: "" + obj.__offset,
            cols: _this.__info.cols,
            field_per_column: _this.__info.field_per_column
          });
        };
      })(this)
    });
    return nodes;
  };

  ResultTable.prototype.getNodesFromDataFlat = function(data) {
    var i, idx, len, node, nodes, obj, offset, ref;
    nodes = [];
    ref = data.objects;
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      obj = ref[idx];
      offset = data.offset + idx;
      node = new ResultTableNode({
        resultTable: this,
        object: obj,
        open: this._open_nodes && obj._has_children,
        path: data.__path + "." + offset,
        offset: data.offset + idx,
        cols: this.__info.cols,
        field_per_column: this.__info.field_per_column
      });
      nodes.push(node);
    }
    return nodes;
  };

  ResultTable.prototype.destroy = function() {
    ResultTable.__super__.destroy.call(this);
    if (this.__navi) {
      this.__navi.destroy();
      this.__navi = null;
    }
    if (this.__tree) {
      this.__tree.destroy();
      this.__tree = null;
    }
    if (this.__waitBlock) {
      this.__waitBlock.destroy();
      this.__waitBlock = null;
    }
    if (this.__poll_listener) {
      Events.ignore(this.__poll_listener);
      this.__poll_listener = null;
    }
    Events.ignore({
      instance: this
    });
    return this;
  };

  ResultTable.prototype.renderStandard = function(result_object) {
    switch (this.view_data.first_column) {
      case "standard":
        return result_object.renderCard1(false, true, true);
      case "tags":
        return result_object.renderTags("text");
    }
  };

  ResultTable.prototype.getObjectFormatNeededInternal = function() {
    var format, search_format;
    format = this.getObjectFormatNeeded();
    search_format = this.getSearch().getRequestFormat();
    if (ResultObject.compareFormats(format, search_format) < 0) {
      return search_format;
    }
    return format;
  };

  ResultTable.prototype.getObjectFormatNeeded = function() {
    return "long";
  };

  ResultTable.prototype.showResult = function(request, data) {
    var all_nodes, dfr, i, len, n, nodes, ref, show_result, txt;
    if ((ref = this.__navi) != null) {
      ref.update(data);
    }
    this.__show_hierarchy = this.view_data.show_hierarchy;
    if (this.__tree) {
      this.__tree.root.removeFromDOM(false);
    }
    if (!request.page_request) {
      txt = "ResultTable.showResult[colsAndHeaders]";
      this.__info = this.__getColsAndHeaders(data);
      if (this.__tree) {
        this.__tree.destroy();
      }
      this.__tree = null;
    }
    if (data.count === 0) {
      if (this.__waitBlock) {
        this.__waitBlock.destroy();
        this.__waitBlock = null;
      }
      this.__pane.replace(this.getSearch().getEmptyResultDiv(request), "center");
      return;
    }
    dfr = new CUI.Deferred();
    if (!this.getSearch()) {
      return dfr.reject().promise();
    }
    show_result = (function(_this) {
      return function() {
        var _header, cols, fixedCols, i, j, len, node, ref1;
        if (!_this.getSearch()) {
          return dfr.reject().promise();
        }
        if (!_this.__tree) {
          if (CUI.__ng__) {
            cols = _this.__info.cols.slice(0);
            fixedCols = 0;
            if (cols.length === 1) {
              cols[0] = "maximize";
            }
          } else {
            cols = _this.__info.cols;
            fixedCols = 0;
          }
          _this.__tree = new ListViewTree({
            "class": "ez5-result-table",
            maximize: true,
            absolute: false,
            no_hierarchy: _this.__info.no_hierarchy,
            fixedRows: CUI.__ng__ ? _this.__info.headers.length : 0,
            fixedCols: fixedCols,
            cols: cols,
            colClasses: _this.__info.colClasses,
            children: nodes
          });
          _this.__pane.replace(_this.__tree.render(false), "center");
          _this.__tree.root.open().done(dfr.resolve).fail(dfr.reject);
          ref1 = _this.__info.headers;
          for (i = ref1.length - 1; i >= 0; i += -1) {
            _header = ref1[i];
            _this.__tree.prependRow(_header);
          }
        } else {
          for (j = 0, len = nodes.length; j < len; j++) {
            node = nodes[j];
            node.setFather(_this.__tree.root);
          }
          _this.__tree.root.children = nodes;
          _this.__tree.root.open().done(dfr.resolve).fail(dfr.reject);
        }
        if (_this.__waitBlock) {
          _this.__waitBlock.destroy();
          _this.__waitBlock = null;
        }
        return dfr.done(function() {
          _this.initSelectable(".result-table-node:not(.ez5-deleted)", jQuery(_this.__tree.getScrollingContainer()));
          return _this.initSelectableCollection();
        });
      };
    })(this);
    nodes = this.getNodesFromData(data);
    all_nodes = [];
    for (i = 0, len = nodes.length; i < len; i++) {
      n = nodes[i];
      all_nodes.push.apply(all_nodes, n.find((function(_this) {
        return function(n) {
          var top_level_data;
          top_level_data = n.getTopLevelData();
          if (_this.getExcludeFields()) {
            top_level_data._format_incomplete = true;
          }
          return ResultObject.compareFormats(top_level_data._format, _this.getObjectFormatNeededInternal()) < 0;
        };
      })(this)));
    }
    if (all_nodes.length > 0) {
      this.__updateDataInNodes(all_nodes).done(show_result).fail(dfr.reject);
    } else {
      show_result();
    }
    return dfr.promise();
  };

  ResultTable.prototype.__updateDataInNodes = function(nodes) {
    var i, len, n, nodes_by_system_object_id, req_data, sid, system_object_ids;
    nodes_by_system_object_id = {};
    system_object_ids = [];
    for (i = 0, len = nodes.length; i < len; i++) {
      n = nodes[i];
      sid = n.getTopLevelData()._system_object_id;
      nodes_by_system_object_id[sid] = n;
      system_object_ids.push(sid);
    }
    req_data = {
      offset: 0,
      limit: system_object_ids.length,
      format: this.getObjectFormatNeededInternal(),
      exclude_fields: this.getExcludeFields(),
      search: [
        {
          type: "in",
          bool: "must",
          fields: ["_system_object_id"],
          "in": system_object_ids
        }
      ]
    };
    return ez5.api.search({
      json_data: req_data
    }).done((function(_this) {
      return function(data) {
        var j, len1, obj, ref;
        ref = data.objects;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          obj = ref[j];
          if (_this.getExcludeFields()) {
            obj._format_incomplete = true;
          }
          nodes_by_system_object_id[obj._system_object_id].setData(obj);
        }
      };
    })(this));
  };

  ResultTable.prototype.getMode = function() {
    return "table";
  };

  ResultTable.prototype.__getColsAndHeaders = function(data, standard_only) {
    var _col, _header, add_extra_header_colspan, add_field, all_colspan, c_common, c_unique, c_unique_per_mask, cf, cfs, colClasses, cols, commonFieldsByLocaName, extra_header_colspan, extra_header_colspan_for_ot, extra_headers, field_per_column, fn, has_first_column, header, header2_columns, headers, hierarchy, i, j, l, len, len1, len2, len3, len4, len5, len6, loca_key, m, mask, ot, ot_idx, otm, p, q, r, ref, ref1, ref2, ref3, ref4, term, top_header, top_header2, top_header2_use, uf;
    if (standard_only == null) {
      standard_only = false;
    }
    hierarchy = false;
    top_header = new ListViewHeaderRow();
    top_header2 = new ListViewHeaderRow();
    top_header2_use = false;
    extra_headers = [];
    header = new ListViewHeaderRow();
    cols = [];
    colClasses = [];
    all_colspan = 0;
    field_per_column = [];
    headers = [];
    has_first_column = false;
    if (standard_only || this.view_data.first_column !== "none") {
      if (this.view_data.first_column === "tags") {
        loca_key = "result.table.column.tags";
      } else {
        loca_key = "result.table.column.standard";
      }
      header.addColumn(new ListViewHeaderColumn({
        label: {
          text: $$(loca_key)
        }
      }));
      field_per_column[0] = {
        group: "STANDARD"
      };
      cols.push("auto");
      colClasses.push("ez5-result-table-standard");
      all_colspan++;
      has_first_column = true;
    }
    if (standard_only) {
      otm = null;
    } else {
      otm = new ObjecttypeManager();
    }
    if (data.aggregations._result_table_masks) {
      ref = data.aggregations._result_table_masks.terms;
      for (i = 0, len = ref.length; i < len; i++) {
        term = ref[i];
        mask = Mask.getMaskByMaskName(term.term);
        if (otm != null) {
          otm.addMask(mask);
        }
        if (mask.isHierarchy()) {
          hierarchy = true;
        }
      }
    }
    if (standard_only) {
      return {
        cols: cols,
        colClasses: colClasses,
        no_hierarchy: !hierarchy,
        headers: headers,
        field_per_column: field_per_column
      };
    }
    otm.initCommonFields(this.getMode(), false);
    commonFieldsByLocaName = otm.getCommonFieldsByLocaName(function(ot, field) {
      return !(field instanceof NestedTable);
    });
    for (fn in commonFieldsByLocaName) {
      cfs = commonFieldsByLocaName[fn];
      header.addColumn(new ListViewHeaderColumn({
        label: {
          text: fn
        }
      }));
      field_per_column[cols.length] = {
        group: "COMMONS",
        fields: cfs
      };
      cols.push("auto");
      colClasses.push(cfs[0].getClass());
      all_colspan++;
    }
    if (all_colspan > 0) {
      headers.push(top_header);
      top_header.addColumn(new ListViewColumn({
        text: $$("result.table.header.all_objecttypes"),
        colspan: all_colspan
      }));
      top_header2.addColumn(new ListViewColumnEmpty({
        colspan: all_colspan
      }));
    }
    extra_header_colspan = [all_colspan];
    extra_header_colspan_for_ot = 0;
    add_extra_header_colspan = (function(_this) {
      return function() {
        var extra_header, j, len1;
        if (extra_header_colspan_for_ot > 0) {
          for (j = 0, len1 = extra_headers.length; j < len1; j++) {
            extra_header = extra_headers[j];
            extra_header.addColumn(new ListViewColumnEmpty({
              colspan: extra_header_colspan_for_ot
            }));
          }
        }
        return extra_header_colspan_for_ot = 0;
      };
    })(this);
    ref1 = otm.objecttypes;
    for (ot_idx = j = 0, len1 = ref1.length; j < len1; ot_idx = ++j) {
      ot = ref1[ot_idx];
      add_field = (function(_this) {
        return function(field) {
          var __col, _col, _col_idx, _columns, _extra_header_colspan, _extra_headers, _header, _headers, attrs, cls, col, colspan, colspan_idx, extra_header, idx, l, last_row_cols, len2, len3, len4, len5, len6, len7, len8, m, nested_columns, p, q, r, ref2, ref3, ref4, ref5, reported_colspan, s, start_idx, t, u;
          colspan = 0;
          if (field instanceof NestedTable) {
            _columns = field.getColumnsFlat(_this.getMode());
            _headers = field.getHeadersFromColumns(_this.getMode(), _columns);
            nested_columns = _headers[0].getColumns();
            for (idx = l = 0, len2 = _columns.length; l < len2; idx = ++l) {
              col = _columns[idx];
              header.addColumn(nested_columns[idx]);
              cols.push("auto");
              colClasses.push(col.field.getClass());
              colspan++;
            }
            last_row_cols = [];
            _extra_headers = _headers.slice(1);
            for (idx = m = 0, len3 = _extra_headers.length; m < len3; idx = ++m) {
              _header = _extra_headers[idx];
              extra_header = extra_headers[idx];
              if (extra_header) {
                continue;
              }
              extra_header = extra_headers[idx] = new ListViewHeaderRow();
              if (idx === 0) {
                for (colspan_idx = p = 0, len4 = extra_header_colspan.length; p < len4; colspan_idx = ++p) {
                  _extra_header_colspan = extra_header_colspan[colspan_idx];
                  if (!_extra_header_colspan) {
                    continue;
                  }
                  extra_header.addColumn(new ListViewColumnEmpty({
                    colspan: _extra_header_colspan
                  }));
                }
              } else {
                ref2 = extra_headers[idx - 1].getColumns();
                for (q = 0, len5 = ref2.length; q < len5; q++) {
                  __col = ref2[q];
                  attrs = __col.getAttrs();
                  if (attrs.hasOwnProperty("depth")) {
                    cls = "ez5-nested-table-header-depth-" + attrs.depth + " ez5-nested-table-horizontal-empty-cell";
                  } else {
                    cls = "ez5-nested-table-horizontal-empty-cell";
                  }
                  extra_header.addColumn(new ListViewColumnEmpty({
                    attrs: attrs,
                    "class": cls,
                    colspan: __col.getColspan()
                  }));
                }
              }
            }
            for (idx = r = 0, len6 = _extra_headers.length; r < len6; idx = ++r) {
              _header = _extra_headers[idx];
              extra_header = extra_headers[idx];
              if (extra_header_colspan_for_ot > 0) {
                extra_header.addColumn(new ListViewColumnEmpty({
                  colspan: extra_header_colspan_for_ot
                }));
              }
              last_row_cols = [];
              reported_colspan = 0;
              ref3 = _header.getColumns();
              for (_col_idx = s = 0, len7 = ref3.length; s < len7; _col_idx = ++s) {
                _col = ref3[_col_idx];
                reported_colspan += _col.getColspan();
                extra_header.addColumn(_col);
                last_row_cols.push(_col);
              }
              assert(reported_colspan === nested_columns.length, "ResultTable[NestedTable]", "Reported colspan for extra header " + idx + " is " + reported_colspan + ". Expected is the number of columns: " + nested_columns.length);
            }
            start_idx = _extra_headers.length;
            for (idx = t = ref4 = start_idx, ref5 = extra_headers.length; t < ref5; idx = t += 1) {
              if (extra_header_colspan_for_ot > 0) {
                extra_headers[idx].addColumn(new ListViewColumnEmpty({
                  colspan: extra_header_colspan_for_ot
                }));
              }
              for (u = 0, len8 = last_row_cols.length; u < len8; u++) {
                __col = last_row_cols[u];
                extra_headers[idx].addColumn(new ListViewColumnEmpty({
                  colspan: __col.getColspan()
                }));
              }
            }
            extra_header_colspan_for_ot = 0;
          } else {
            header.addColumn(new ListViewHeaderColumn({
              label: {
                text: field.nameLocalized()
              }
            }));
            cols.push("auto");
            colClasses.push(field.getClass());
            extra_header_colspan_for_ot++;
            colspan++;
          }
          field_per_column[cols.length - colspan] = {
            field: field,
            colspan: colspan
          };
          return colspan;
        };
      })(this);
      c_common = 0;
      c_unique = 0;
      ref2 = ot.commonFields;
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        cf = ref2[l];
        if (commonFieldsByLocaName[cf.nameLocalized()]) {
          continue;
        }
        c_common += add_field(cf);
      }
      header2_columns = [];
      if (c_common > 0) {
        header2_columns.push(new ListViewColumn({
          text: $$("result.table.common_fields"),
          colspan: c_common
        }));
      }
      add_extra_header_colspan();
      ref3 = ot.masks;
      for (m = 0, len3 = ref3.length; m < len3; m++) {
        mask = ref3[m];
        if (mask.uniqueFields.length > 0) {
          c_unique_per_mask = 0;
          ref4 = mask.uniqueFields;
          for (p = 0, len4 = ref4.length; p < len4; p++) {
            uf = ref4[p];
            c_unique_per_mask += add_field(uf);
          }
          if (c_unique_per_mask > 0) {
            header2_columns.push(new ListViewColumn({
              text: mask.nameLocalized(),
              colspan: c_unique_per_mask
            }));
            c_unique += c_unique_per_mask;
          }
        }
      }
      if (c_common + c_unique === 0) {
        continue;
      }
      extra_header_colspan[ot_idx + 1] = c_common + c_unique;
      add_extra_header_colspan();
      top_header.addColumn(new ListViewColumn({
        text: ot.nameLocalized(),
        colspan: c_common + c_unique
      }));
      if (header2_columns.length > 1) {
        for (q = 0, len5 = header2_columns.length; q < len5; q++) {
          _col = header2_columns[q];
          top_header2.addColumn(_col);
          top_header2_use = true;
        }
      } else {
        top_header2.addColumn(new ListViewColumnEmpty({
          colspan: c_common + c_unique
        }));
      }
    }
    if (top_header2_use) {
      headers.push(top_header2);
    }
    for (r = 0, len6 = extra_headers.length; r < len6; r++) {
      _header = extra_headers[r];
      headers.push(_header);
    }
    headers.push(header);
    return {
      cols: cols,
      colClasses: colClasses,
      headers: headers,
      has_first_column: has_first_column,
      no_hierarchy: !hierarchy,
      field_per_column: field_per_column
    };
  };

  return ResultTable;

})(ResultManagerResult);
// Generated by CoffeeScript 1.10.0
var ResultTableNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ResultTableNode = (function(superClass) {
  extend(ResultTableNode, superClass);

  function ResultTableNode() {
    return ResultTableNode.__super__.constructor.apply(this, arguments);
  }

  ResultTableNode.prototype.initOpts = function() {
    ResultTableNode.__super__.initOpts.call(this);
    return this.addOpts({
      field_per_column: {
        mandatory: true,
        check: Array
      },
      object: {
        mandatory: true,
        check: "PlainObject"
      },
      resultTable: {
        mandatory: true,
        check: ResultTable
      },
      cols: {
        mandatory: true,
        check: Array
      },
      offset: {
        check: "Integer"
      },
      path: {
        check: String
      }
    });
  };

  ResultTableNode.prototype.readOpts = function() {
    ResultTableNode.__super__.readOpts.call(this);
    this.__field_per_column = this.opts.field_per_column;
    this.__resultObject = new ResultObject();
    this.__offset = this._offset;
    this.__class = this.__class + "ez5-lassoable";
    return this.setData(this._object);
  };

  ResultTableNode.prototype.setData = function(__object) {
    this.__object = __object;
    if (this.__object.hasOwnProperty("__offset")) {
      this.__offset = this.__object.__offset;
    }
    this.__objecttype = this.__object._objecttype;
    this.__resultObject.setData(this.__object);
    return this.__collectionObject = new CollectionObject(this.__object);
  };

  ResultTableNode.prototype.getResultObject = function() {
    return this.__resultObject;
  };

  ResultTableNode.prototype.getData = function() {
    return this.__object[this.__objecttype];
  };

  ResultTableNode.prototype.getTopLevelData = function() {
    return this.__object;
  };

  ResultTableNode.prototype.close = function() {
    return ResultTableNode.__super__.close.call(this).done((function(_this) {
      return function() {
        return _this.children = null;
      };
    })(this));
  };

  ResultTableNode.prototype.replaceSelf = function() {
    var ret;
    ret = ResultTableNode.__super__.replaceSelf.call(this);
    return ret.done((function(_this) {
      return function() {
        return Events.trigger({
          type: "search",
          node: _this.getDOMNodes()[0]
        });
      };
    })(this));
  };

  ResultTableNode.prototype.renderContent = function() {
    var column, i, idx, ref;
    idx = 1;
    for (idx = i = 1, ref = this._cols.length; i < ref; idx = i += 1) {
      column = this.__getContentByIdx(idx);
      if (column) {
        this.addColumn(column);
      }
    }
    return this.__getContentByIdx(0);
  };

  ResultTableNode.prototype.addedToListView = function() {
    var nodes;
    nodes = this.getDOMNodes().attr({
      "global-object-id": this.__resultObject.getGlobalObjectId(),
      offset: this.__offset,
      path: this._path
    });
    if (this._resultTable.getCollectionSelection().objectIdx(this.__collectionObject) > -1) {
      CUI.DOM.addClass(nodes[0], "cui-selected");
    }
    return DOM.data(nodes[0], "object", this.__object);
  };

  ResultTableNode.prototype.isLeaf = function() {
    if (this.__object._has_children) {
      return false;
    } else {
      return true;
    }
  };

  ResultTableNode.prototype.getChildren = function() {
    return this.loadChildren();
  };

  ResultTableNode.prototype.loadChildren = function(offset) {
    var cb, dfr, i, len, ref, req, sm;
    if (offset == null) {
      offset = 0;
    }
    req = new Request({
      objecttypes: [this.__objecttype],
      offset: offset,
      generate_rights: false,
      limit: this._resultTable.getPageSize(),
      exclude_fields: this._resultTable.getExcludeFields(),
      format: this._resultTable.getObjectFormatNeededInternal(),
      search: [
        {
          type: "in",
          bool: "must",
          fields: [this.__objecttype + "._id_parent"],
          "in": [this.__object[this.__objecttype]._id]
        }
      ]
    });
    ref = this._resultTable.getSearch().getSearchManagers();
    for (i = 0, len = ref.length; i < len; i++) {
      sm = ref[i];
      if (sm instanceof SortManager) {
        sm.addToRequest(req);
      }
    }
    cb = this._resultTable.getSearch().getOpt("onAddToRequest");
    if (cb) {
      cb(req);
    }
    dfr = new CUI.Deferred();
    ez5.api.search({
      json_data: req.copy().cleanRequestForSearch()
    }).done((function(_this) {
      return function(data) {
        var children;
        data.__path = _this._path;
        children = _this._resultTable.getNodesFromDataFlat(data);
        if (data.offset + data.limit < data.count) {
          children.push(new ResultTableLoadMoreNode({
            offset: data.offset,
            limit: data.limit,
            count: data.count
          }));
        }
        return dfr.resolve(children);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  ResultTableNode.prototype.__getContentByIdx = function(idx) {
    var cls, colspan, content, f, i, info, len, ref, txt;
    info = this.__field_per_column[idx];
    if (!info) {
      return void 0;
    }
    txt = null;
    content = null;
    colspan = 1;
    switch (info.group) {
      case "STANDARD":
        content = this._resultTable.renderStandard(this.__resultObject);
        cls = "ez5-result-table-standard-cell";
        break;
      case "COMMONS":
        ref = info.fields;
        for (i = 0, len = ref.length; i < len; i++) {
          f = ref[i];
          if (f.table.name() === this.__objecttype) {
            txt = getObjectClass(f);
            cls = f.getClass();
            break;
          }
        }
        break;
      default:
        cls = info.field.getClass();
        if (info.field.getMainMask().table.name() === this.__objecttype) {
          content = info.field.renderDetailOutput(this.__object[this.__objecttype], this.__object, {
            mode: "table"
          });
        } else {
          txt = null;
        }
        colspan = info.colspan;
    }
    if (idx > 0) {
      if (content instanceof ListViewColumn) {
        content.addClass(cls);
        return content;
      } else if (content !== null) {
        return new ListViewColumn({
          colspan: colspan,
          element: content,
          "class": cls
        });
      } else if (txt === null) {
        return new ListViewColumnEmpty({
          colspan: colspan,
          "class": cls
        });
      } else {
        return new ListViewColumn({
          colspan: colspan,
          text: txt,
          "class": cls
        });
      }
    } else {
      if (content) {
        if (content instanceof ListViewColumn) {
          return content.render();
        } else {
          return content;
        }
      } else {
        return new Label({
          text: txt
        });
      }
    }
  };

  return ResultTableNode;

})(ListViewTreeNode);
// Generated by CoffeeScript 1.10.0
var ResultTableNodeDeleted,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ResultTableNodeDeleted = (function(superClass) {
  extend(ResultTableNodeDeleted, superClass);

  function ResultTableNodeDeleted() {
    return ResultTableNodeDeleted.__super__.constructor.apply(this, arguments);
  }

  ResultTableNodeDeleted.prototype.readOpts = function() {
    ResultTableNodeDeleted.__super__.readOpts.call(this);
    return this.__class = "deleted ez5-deleted";
  };

  ResultTableNodeDeleted.prototype.renderContent = function() {
    return new LocaLabel({
      "class": "ez5-object-deleted",
      loca_key: "ez5.object.deleted"
    });
  };

  return ResultTableNodeDeleted;

})(ListViewTreeNode);
// Generated by CoffeeScript 1.10.0
var ResultTableLoadMoreNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ResultTableLoadMoreNode = (function(superClass) {
  extend(ResultTableLoadMoreNode, superClass);

  function ResultTableLoadMoreNode() {
    return ResultTableLoadMoreNode.__super__.constructor.apply(this, arguments);
  }

  ResultTableLoadMoreNode.prototype.initOpts = function() {
    ResultTableLoadMoreNode.__super__.initOpts.call(this);
    return this.addOpts({
      offset: {
        mandatory: true,
        check: function(v) {
          return v >= 0;
        }
      },
      limit: {
        mandatory: true,
        check: function(v) {
          return v > 0;
        }
      },
      count: {
        mandatory: true,
        check: function(v) {
          return v >= 0;
        }
      }
    });
  };

  ResultTableLoadMoreNode.prototype.renderContent = function() {
    var btn;
    return btn = new LocaButton({
      left: true,
      loca_key: "result.table.load.more.node.button",
      loca_key_attrs: {
        more: Math.min(this._count - this._offset - this._limit, this._limit),
        offset: this._offset,
        limit: this._limit,
        count: this._count
      },
      onClick: (function(_this) {
        return function() {
          var node;
          btn.startSpinner();
          node = _this.getFather();
          return node.loadChildren(_this._offset + _this._limit).done(function(children) {
            var c, i, len, results;
            btn.stopSpinner();
            _this.remove();
            results = [];
            for (i = 0, len = children.length; i < len; i++) {
              c = children[i];
              results.push(node.addChild(c));
            }
            return results;
          });
        };
      })(this)
    });
  };

  return ResultTableLoadMoreNode;

})(ListViewTreeNode);
// Generated by CoffeeScript 1.10.0
var TemplateObject,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TemplateObject = (function(superClass) {
  extend(TemplateObject, superClass);

  function TemplateObject() {
    return TemplateObject.__super__.constructor.apply(this, arguments);
  }

  TemplateObject.prototype.renderStandard = function() {
    return this.renderCard3(false);
  };

  TemplateObject.prototype.renderCard3 = function(hierarchy, tags, highlight, data) {
    var label, tmpl;
    if (hierarchy == null) {
      hierarchy = this.mask.isHierarchy();
    }
    if (tags == null) {
      tags = true;
    }
    if (highlight == null) {
      highlight = false;
    }
    if (data == null) {
      data = this.data;
    }
    if (CUI.__ng__) {
      label = new LocaLabel({
        loca_key: "main.editor.template",
        icon: "fa-files-o",
        "class": "ez5-result-object-no-asset-browser",
        centered: true
      });
      tmpl = new Template({
        name: "result-object-standard",
        map: {
          asset: ".ez5-browser",
          standard_1: ".ez5-standard-1"
        }
      });
      tmpl.append(label, "asset");
      tmpl.append(ez5.loca.str("main.editor.template"), "standard_1");
      return $div("ez5-object-list-template").append(tmpl.DOM);
    } else {
      return $div("object-list-template").append(new LocaLabel({
        loca_key: "main.editor.template",
        centered: true
      }).DOM);
    }
  };

  return TemplateObject;

})(ResultObject);
// Generated by CoffeeScript 1.10.0
var EAS,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

EAS = (function(superClass) {
  extend(EAS, superClass);

  function EAS() {
    return EAS.__super__.constructor.apply(this, arguments);
  }

  EAS.prototype.readOpts = function() {
    EAS.__super__.readOpts.call(this);
    this.polling = false;
    this.__pollableIds = [];
    return EventPoller.listen({
      instance: this,
      filter: {
        type: "OBJECT_INDEX",
        basetype: "asset"
      },
      call: (function(_this) {
        return function(events) {
          var ev, i, len1;
          for (i = 0, len1 = events.length; i < len1; i++) {
            ev = events[i];
            pushOntoArray(ev.object_id, _this.__pollableIds);
          }
        };
      })(this)
    });
  };

  EAS.prototype.pollQueue = [];

  EAS.prototype.replaceImgElement = function(oldImgElement, newImgElement) {
    var asset;
    assert(isElement(oldImgElement), "EAS.replaceImgElement", "oldImgElement needs to be Element", {
      oldImgElement: oldImgElement
    });
    assert(isElement(newImgElement), "EAS.replaceImgElement", "newImgElement needs to be Element", {
      newImgElement: newImgElement
    });
    asset = DOM.data(oldImgElement, "asset");
    assert(asset instanceof Asset, "EAS.replaceImgElement", "No Asset found in key 'asset' in data of img element", {
      element: oldImgElement,
      asset: asset
    });
    DOM.data(newImgElement, "asset", asset);
    CUI.DOM.replaceWith(oldImgElement, newImgElement);
    Events.trigger({
      node: newImgElement,
      type: "eas_update",
      info: {
        asset: asset
      }
    });
    return newImgElement;
  };

  EAS.prototype.getFileUploadMeter = function(file) {
    var pm, pm_active, update;
    pm = new ProgressMeter({
      "class": "ez5-file-upload-progress"
    });
    pm_active = false;
    update = (function(_this) {
      return function() {
        switch (file.getStatus()) {
          case "CREATED":
          case "QUEUED":
            return pm.setState("waiting");
          case "COMPLETED":
          case "DONE":
            return pm.setState("spinning");
          case "STARTED":
          case "PROGRESS":
            return pm.setState(file.getPercent());
          default:
            return pm.setState("waiting");
        }
      };
    })(this);
    file.getPromise().progress(function() {
      if (pm.isDestroyed()) {
        return;
      }
      return update();
    }).always(function() {
      if (pm.isDestroyed()) {
        return;
      }
      return update();
    });
    CUI.DOM.data(pm.DOM, "file-upload", file);
    return pm.DOM;
  };

  EAS.prototype.getPollingPlaceholder = function(eas_field, value, version) {
    var div, pm;
    if (version == null) {
      version = null;
    }
    pm = new ProgressMeter({
      state: "spinning"
    });
    this.addToQueue({
      value: value,
      version: version,
      dequeue: (function(_this) {
        return function() {
          return !CUI.DOM.isInDOM(div);
        };
      })(this),
      done: (function(_this) {
        return function(eas_obj) {
          if (CUI.DOM.isInDOM(div)) {
            if (!version) {
              version = Asset.getStandardVersionName(value);
            }
            return _this.replaceImgElement(div, eas_field.getImgElementForValue(value, version));
          }
        };
      })(this),
      processing: function(poll_count) {},
      failed: function(eas_obj) {
        if (value._error) {
          return div.empty().append(EAS.getErrorPlaceholder(value._error).DOM);
        } else {
          return div.empty().append(EAS.getFailedPlaceholder().DOM);
        }
      }
    });
    div = $div("ez5-polling-placeholder");
    div.append(pm.DOM);
    return div;
  };

  EAS.getFailedPlaceholder = function() {
    return new LocaLabel({
      "class": "ez5-eas-column-version-failed",
      multiline: true,
      loca_key: "eas.failed.placeholder",
      centered: true
    });
  };

  EAS.getErrorPlaceholder = function(error) {
    return new Label({
      icon: "failed",
      "class": "ez5-eas-column-version-error",
      multiline: true,
      centered: true,
      text: $$(error.code, error.parameters)
    });
  };

  EAS.getNoRightPlaceholder = function() {
    return new LocaLabel({
      "class": "ez5-eas-column-version-no-right",
      multiline: true,
      loca_key: "eas.no_right.placeholder",
      centered: true
    });
  };

  EAS.getNoThumbPlaceholder = function(value) {
    var i, key, len1, loca_key, ref;
    loca_key = "eas.no_thumb.placeholder";
    ref = ["class_extension", "extension", "class"];
    for (i = 0, len1 = ref.length; i < len1; i++) {
      key = ref[i];
      if (ez5.loca.has("eas.no_thumb.placeholder." + value[key] + "|icon")) {
        loca_key = "eas.no_thumb.placeholder." + value[key];
        break;
      }
    }
    return new LocaLabel({
      "class": "ez5-eas-column-version-no-thumb",
      multiline: true,
      loca_key: loca_key,
      centered: true,
      text: value.extension
    });
  };

  EAS.prototype.pollInterval = 2000;

  EAS.prototype.__pollId = 0;

  EAS.prototype.addToQueue = function(poll) {
    var eas_id, ref;
    eas_id = poll != null ? (ref = poll.value) != null ? ref._id : void 0 : void 0;
    assert(eas_id, "ez5.eas.addToQueue", "value._id needs to be set", {
      poll: poll
    });
    pushOntoArray(eas_id, this.__pollableIds);
    poll.poll_count = 0;
    poll.__poll_id = this.__pollId;
    this.__pollId = this.__pollId + 1;
    this.pollQueue.push(poll);
    if (!this.polling) {
      this.doPoll();
    }
    return poll.__poll_id;
  };

  EAS.prototype.removeFromQueue = function(poll_id) {
    return removeFromArray(null, this.pollQueue, (function(_this) {
      return function(v) {
        return v.__poll_id === poll_id;
      };
    })(this));
  };

  EAS.prototype.doPoll = function() {
    var eas_ids, q;
    this.polling = true;
    eas_ids = arrayUnique((function() {
      var i, len1, ref, results;
      ref = this.pollQueue;
      results = [];
      for (i = 0, len1 = ref.length; i < len1; i++) {
        q = ref[i];
        results.push(q.value._id);
      }
      return results;
    }).call(this));
    if (eas_ids.length === 0) {
      CUI.setTimeout((function(_this) {
        return function() {
          return _this.doPoll();
        };
      })(this), this.pollInterval);
      return;
    }
    return ez5.api.eas({
      data: {
        ids: JSON.stringify(eas_ids),
        format: "short"
      },
      handle_error: (function(_this) {
        return function(xhr) {
          var error, i, idx, len1, ref;
          ref = _this.pollQueue;
          for (idx = i = 0, len1 = ref.length; i < len1; idx = ++i) {
            q = ref[idx];
            CUI.debug("queue:", q, idx, q.failed);
            if (xhr.responseJSON && false) {
              error = $$(xhr.responseJSON.code, xhr.responseJSON.parameters);
            } else {
              error = $$("eas.unknown_error");
            }
            if (typeof q.failed === "function") {
              q.failed(error);
            }
          }
          _this.pollQueue = [];
          _this.polling = false;
          return true;
        };
      })(this)
    }).done((function(_this) {
      return function(data) {
        var eas_obj, idx, k, len, ref, remove, status, v, version, vname;
        idx = 0;
        len = _this.pollQueue.length;
        while (idx < len) {
          q = _this.pollQueue[idx];
          eas_obj = data[q.value._id];
          if (!eas_obj) {
            idx++;
            continue;
          }
          q.poll_count++;
          remove = false;
          if (eas_obj.error) {
            if (typeof q.failed === "function") {
              q.failed(eas_obj.error);
            }
            q.value._error = eas_obj.error;
            remove = true;
          } else if (typeof q.dequeue === "function" ? q.dequeue(eas_obj) : void 0) {
            remove = true;
          } else {
            if (eas_obj.status === "failed") {
              status = "failed";
            } else {
              if (q.version) {
                vname = q.version;
              } else {
                vname = Asset.getStandardVersionName(eas_obj);
              }
              version = (ref = eas_obj.versions) != null ? ref[vname] : void 0;
              if (!version) {
                status = eas_obj.status;
              } else if (version._not_allowed) {
                status = "failed";
              } else {
                status = version.status;
              }
            }
            for (k in eas_obj) {
              v = eas_obj[k];
              q.value[k] = v;
            }
            switch (status) {
              case "done":
                if (typeof q.done === "function") {
                  q.done(q.value);
                }
                remove = true;
                break;
              case "failed":
                if (typeof q.failed === "function") {
                  q.failed(eas_obj);
                }
                remove = true;
                break;
              default:
                if (typeof q.processing === "function") {
                  q.processing(q.poll_count);
                }
            }
          }
          if (remove) {
            _this.pollQueue.splice(idx, 1);
            len--;
          } else {
            idx++;
          }
        }
        if (_this.pollQueue.length > 0) {
          return CUI.setTimeout(function() {
            return _this.doPoll();
          }, _this.pollInterval);
        } else {
          return _this.polling = false;
        }
      };
    })(this));
  };

  EAS.prototype.getUploadUrl = function(parms) {
    if (parms == null) {
      parms = {};
    }
    parms.token = ez5.session.token;
    if (!parms.hasOwnProperty("check_for_duplicates")) {
      parms.check_for_duplicates = "1";
    }
    return ez5.api.getFullBase() + "/eas/put?" + CUI.encodeUrlData(parms);
  };

  EAS.getRotateMapFromTransform = function(transform) {
    var i, j, k, len1, len2, r, ref, t, v;
    r = {
      x: 0,
      y: 0,
      z: 0
    };
    if (!(transform != null ? transform.length : void 0)) {
      return r;
    }
    for (i = 0, len1 = transform.length; i < len1; i++) {
      t = transform[i];
      for (k in t) {
        v = t[k];
        switch (k) {
          case "rotate-x":
            r.x += v;
            break;
          case "rotate-y":
            r.y += v;
            break;
          case "rotate-z":
            r.z += v;
        }
      }
    }
    ref = ["x", "y", "z"];
    for (j = 0, len2 = ref.length; j < len2; j++) {
      k = ref[j];
      while (r[k] < 0) {
        r[k] += 360;
      }
      r[k] = r[k] % 360;
    }
    return r;
  };

  EAS.setTransformStyle = function(node, transform, do_scale) {
    var i, k, len1, scale_node, t, ts, v, z;
    if (do_scale == null) {
      do_scale = true;
    }
    ts = [];
    z = 0;
    Events.ignore({
      node: node,
      type: "viewport-resize"
    });
    if (!(transform != null ? transform.length : void 0)) {
      node.css({
        transform: "",
        "transform-origin": ""
      });
      if (CUI.__ng__ && do_scale) {
        node.firstElementChild.firstElementChild.removeAttribute("scale");
        node.firstElementChild.firstElementChild.removeAttribute("turned90");
      }
      return;
    }
    for (i = 0, len1 = transform.length; i < len1; i++) {
      t = transform[i];
      for (k in t) {
        v = t[k];
        switch (k) {
          case "rotate-x":
            ts.push("rotateX(" + v + "deg)");
            break;
          case "rotate-y":
            ts.push("rotateY(" + v + "deg)");
            break;
          case "rotate-z":
            ts.push("rotateZ(" + v + "deg)");
            z += v;
            break;
          default:
            assert(false, "EAS.setTransformStyle", "Unknown transform " + k + ".", {
              transform: transform,
              node: node
            });
        }
      }
    }
    if (z % 180 !== 0 && do_scale) {
      if (CUI.__ng__ && do_scale) {
        node.firstElementChild.firstElementChild.setAttribute("turned90", "turned90");
      }
      scale_node = function() {
        var dest_height, dest_width, dim_viewport, pic, pic_div, ref, scale, scale_css, viewport;
        dim_viewport = CUI.DOM.getDimensions(node.parentNode);
        viewport = {
          width: dim_viewport.contentBoxWidth,
          height: dim_viewport.contentBoxHeight
        };
        if (viewport.width === 0 || viewport.height === 0) {
          dim_viewport = CUI.DOM.getDimensions(CUI.DOM.closest(node, ".ez-asset"));
          viewport = {
            width: dim_viewport.contentBoxWidth,
            height: dim_viewport.contentBoxHeight
          };
        }
        viewport.aspect = viewport.width / viewport.height;
        if (viewport.aspect !== 1) {
          pic_div = CUI.jQueryCompat(node.firstElementChild);
          pic = {
            width: getFloat(pic_div.attr("real-width")),
            height: getFloat(pic_div.attr("real-height"))
          };
          pic.aspect = 1 / (pic.width / pic.height);
          assert(!isNaN(pic.aspect) && !isNaN(viewport.aspect), "EAS.setTransformStyle", "pic aspect or viewport aspect NaN, you need real-width and real-height attributes set at DIV", {
            node: node,
            transform: transform
          });
          if (viewport.aspect < pic.aspect) {
            scale = viewport.width / pic.height;
          } else {
            scale = viewport.height / pic.width;
          }
          ref = ez5.fitRectangle(pic.width, pic.height, viewport.width, viewport.height), dest_width = ref[0], dest_height = ref[1];
          scale = scale * (pic.width / dest_width);
          scale_css = " scale(" + scale + ")";
          if (CUI.__ng__) {
            node.firstElementChild.firstElementChild.setAttribute("scale", scale);
          }
        } else {
          scale_css = " scale(1)";
          if (CUI.__ng__) {
            node.firstElementChild.firstElementChild.removeAttribute("scale");
          }
        }
        return node.css({
          transform: ts.join(" ") + scale_css,
          "transform-origin": "center center"
        });
      };
      DOM.waitForDOMInsert({
        node: node
      }).done(function() {
        return scale_node();
      });
      Events.listen({
        node: node,
        type: "viewport-resize",
        call: function(ev) {
          return scale_node();
        }
      });
    } else {
      node.css({
        transform: ts.join(" ") + " scale(1)",
        "transform-origin": "center center"
      });
      if (CUI.__ng__ && do_scale) {
        node.firstElementChild.firstElementChild.removeAttribute("scale");
        node.firstElementChild.firstElementChild.removeAttribute("turned90");
      }
    }
    return this;
  };

  EAS.presentUploadError = function(file) {
    var ref;
    if ((ref = file.getErrorXHR()) != null ? ref.responseJSON : void 0) {
      return ez5.error_handler(file.getErrorXHR());
    } else {
      return CUI.problem({
        text: $$("file.upload.upload_error", {
          name: file.getName()
        }),
        markdown: true
      });
    }
  };

  EAS.mapMetadata = function(_opts) {
    var dfr, eas_id, new_data, opts, ot, tn;
    opts = CUI.Element.readOpts(_opts, "EditorModalNew.mapMetadata", {
      data: {
        mandatory: true,
        check: "PlainObject"
      },
      eas_id: {
        mandatory: true,
        check: function(v) {
          return v > 0;
        }
      },
      pool_id: {
        check: function(v) {
          return v > 0;
        }
      },
      mask_name: {
        mandatory: true,
        check: String
      },
      objecttype: {
        mandatory: true,
        check: String
      },
      mapping: {
        check: function(v) {
          return v > 0 || v === 'standard';
        }
      }
    });
    tn = opts.objecttype;
    ot = ez5.schema.CURRENT._objecttype_by_name[tn];
    assert(ot, "EAS.mapMetadata", "opts.objecttype not found.", {
      objecttype: tn
    });
    if (opts.mapping === "standard" && !opts.pool_id) {
      assert(!ot.pool_link, "EAS.mapMetadata", "Mapping \"standard\" for objecttype " + tn + " requires opts.pool_id to be set.");
    }
    eas_id = opts.eas_id;
    new_data = opts.data;
    console.debug("running mapMetadata", new_data, tn, eas_id, opts);
    dfr = new CUI.Deferred();
    ez5.api.eas({
      data: {
        ids: JSON.stringify([eas_id]),
        mask: opts.mask_name,
        mapping: opts.mapping,
        objecttype: opts.objecttype,
        pool_id: opts.pool_id,
        format: "short"
      },
      handle_error: function() {
        return true;
      }
    }).done(function(data) {
      var i, item, k, map_data, ref, v;
      map_data = data[eas_id]._mapped_metadata;
      console.debug("EditorModalNew.mapMetadata", new_data, map_data != null ? map_data[tn] : void 0);
      if (map_data != null ? map_data[tn] : void 0) {
        ref = map_data[tn];
        for (k in ref) {
          v = ref[k];
          if (CUI.isArray(v)) {
            if (!CUI.isArray(new_data[k])) {
              new_data[k] = [];
            }
            for (i = v.length - 1; i >= 0; i += -1) {
              item = v[i];
              new_data[k].splice(0, 0, item);
            }
          } else {
            new_data[k] = v;
          }
        }
      }
      return dfr.resolve();
    }).fail(function(xhr) {
      return ez5.error_handler(xhr).done(function() {
        return dfr.resolve();
      });
    });
    return dfr.promise();
  };

  return EAS;

})(CUI.Element);

CUI.defaults.FileUpload.name = "file";

CUI.ready(function() {
  ez5.eas = new EAS();
  Events.registerEvent({
    type: "eas_update",
    bubble: true
  });
  return Events.registerEvent({
    type: "asset-browser-show-asset",
    bubble: true
  });
});
// Generated by CoffeeScript 1.10.0
var AclRights,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AclRights = (function(superClass) {
  extend(AclRights, superClass);

  function AclRights() {
    return AclRights.__super__.constructor.apply(this, arguments);
  }

  AclRights.prototype.load = function() {
    return ez5.api.right().done((function(_this) {
      return function(__contexts) {
        _this.__contexts = __contexts;
      };
    })(this));
  };

  AclRights.prototype.getContexts = function() {
    return this.__contexts;
  };

  AclRights.prototype.getContext = function(context) {
    var server_context;
    server_context = AclRights.getServerContextByFrontendContext(context);
    context = this.__contexts[server_context];
    assert(context, "AclRights.getContext", "Could not find server context \"" + server_context + "\".", {
      context: context
    });
    return context;
  };

  AclRights.prototype.byContext = function(context) {
    var aclRights, right, rights;
    rights = this.getContext(context).rights;
    aclRights = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = rights.length; i < len; i++) {
        right = rights[i];
        results.push(AclRight.newInstance(right, context));
      }
      return results;
    })();
    assert(aclRights.length > 0, "AclRights.byContext", "no rights found for context: " + (getObjectClass(context)), {
      byContext: context,
      contexts: this.__contexts
    });
    return aclRights;
  };

  AclRights.prototype.byName = function(context, name) {
    var aclRights, i, len, ref;
    ref = this.byContext(context);
    for (i = 0, len = ref.length; i < len; i++) {
      aclRights = ref[i];
      if (alRight.getName() === name) {
        return aclRight;
      }
    }
    return assert(false, "AclRight.byName", "Unknown right " + name + " in context " + (getObjectClass(context)), {
      context: context,
      name: name
    });
  };

  AclRights.prototype.hasCapByContext = function(cap, context) {
    if (this.getContext(context).capabilities[cap]) {
      return true;
    } else {
      return false;
    }
  };

  AclRights.contextMap = function() {
    return {
      "user": window.User,
      "group": window.Group,
      "pool": window.Pool,
      "object": window.AclField,
      "tag": window.Tag,
      "collection": window.CollectionStorable,
      "objecttype-without-pool": window.ObjecttypeWithoutPoolListViewItem,
      "system": "SystemAclRight"
    };
  };

  AclRights.getServerContextByFrontendContext = function(context, do_assert) {
    var frontend_context, ref, server_context;
    if (do_assert == null) {
      do_assert = true;
    }
    ref = this.contextMap();
    for (server_context in ref) {
      frontend_context = ref[server_context];
      if (CUI.isFunction(frontend_context)) {
        if (context instanceof frontend_context || context === frontend_context) {
          return server_context;
        }
      } else {
        if (context === frontend_context) {
          return server_context;
        }
      }
    }
    if (do_assert) {
      return assert(false, "AclRights.getServerContextByFrontendContext", "Unknown context " + (getObjectClass(context)), {
        context: context
      });
    } else {
      return null;
    }
  };

  AclRights.getFrontendContextByServerContext = function(server_context) {
    return this.contextMap()[server_context] || null;
  };

  AclRights.getDisplaynameByServerContext = function(server_context) {
    return $$("acl.rights.context." + server_context);
  };

  return AclRights;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var AclRightManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AclRightManager = (function(superClass) {
  extend(AclRightManager, superClass);

  function AclRightManager() {
    return AclRightManager.__super__.constructor.apply(this, arguments);
  }

  AclRightManager.prototype.initOpts = function() {
    AclRightManager.__super__.initOpts.call(this);
    return this.addOpts({
      context: {
        mandatory: true
      },
      data: {
        mandatory: true,
        check: "PlainObject"
      },
      name: {
        mandatory: true,
        check: String
      }
    });
  };

  AclRightManager.prototype.readOpts = function() {
    AclRightManager.__super__.readOpts.call(this);
    if (!this._data[this._name]) {
      this._data[this._name] = {};
    }
    return assert($.isPlainObject(this.getData()), "new AclRightManager", "opts.data[opts.name] needs to be PlainObject", {
      opts: this.opts
    });
  };

  AclRightManager.prototype.getData = function() {
    return this._data[this._name];
  };

  AclRightManager.prototype.getField = function(_opts) {
    var opts;
    if (_opts == null) {
      _opts = {};
    }
    opts = CUI.Element.readOpts(_opts, "AclRightManager.getField", {
      onDataChanged: {
        check: Function
      }
    });
    return {
      type: FormModal,
      modal: {
        pane: {
          header_left: new Label({
            text: $$("acl.right.manager.modal.title")
          }),
          padded: true
        },
        "class": "ez5-acl-right-manager-popover",
        cancel: true,
        onCancel: function(ev, modal, has_changes) {
          if (has_changes) {
            return CUI.confirm({
              text: $$("acl.right.manager.modal.confirm_cancel")
            });
          }
        },
        apply_button: {
          loca_key: "acl.right.manager.modal.button_apply",
          onClick: (function(_this) {
            return function(ev, btn) {
              console.debug("click on ", btn, ev);
              if (ev.hasModifierKey()) {
                console.debug("AclRightManager[data]:", _this.getData());
                return false;
              }
            };
          })(this)
        }
      },
      fields: (function(_this) {
        return function() {
          return _this.getFormFields();
        };
      })(this),
      "class": "ez5-right-manager-form-top-level",
      class_table: "ez5-right-manager-form",
      onDataChanged: (function(_this) {
        return function(data, df) {
          return typeof opts.onDataChanged === "function" ? opts.onDataChanged(data, df) : void 0;
        };
      })(this),
      name: this._name,
      data: this._data,
      button: {
        text: $$("acl.right.manager.button")
      },
      renderDisplayContent: (function(_this) {
        return function(df) {
          var aclRight, c, content, div, i, j, lb, len, len1, ref;
          content = [];
          ref = ez5.aclRights.byContext(_this._context);
          for (i = 0, len = ref.length; i < len; i++) {
            aclRight = ref[i];
            lb = aclRight.getDisplayLabel(_this.getData());
            if (lb) {
              content.push(lb);
            }
          }
          div = $div(CUI.__ng__ ? "ez5-tag-holder" : "ez5-acl-right-manager-rights");
          if (content.length) {
            for (j = 0, len1 = content.length; j < len1; j++) {
              c = content[j];
              div.append(c.DOM);
            }
          } else {
            div.append(new EmptyLabel({
              text: $$("acl.right.manager.no_rights_defined")
            }).DOM);
          }
          return div;
        };
      })(this)
    };
  };

  AclRightManager.prototype.getFormFields = function() {
    var aclRight, field, fields, group, group_by_name, groups, i, j, k, len, len1, len2, ref, ref1;
    groups = [];
    group_by_name = {};
    ref = ez5.aclRights.byContext(this._context);
    for (i = 0, len = ref.length; i < len; i++) {
      aclRight = ref[i];
      group = aclRight.group();
      if (!group_by_name[group]) {
        group_by_name[group] = [];
        groups.push(group);
      }
      ref1 = aclRight.getFields();
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        field = ref1[j];
        group_by_name[group].push(field);
      }
    }
    if (groups.length === 1 && group_by_name.zzz) {
      return group_by_name.zzz;
    }
    fields = [];
    for (k = 0, len2 = groups.length; k < len2; k++) {
      group = groups[k];
      fields.push({
        type: Form,
        render_as_block: true,
        form: {
          label: $$("acl.right.manager.group." + AclRights.getServerContextByFrontendContext(this._context) + '.' + group)
        },
        fields: group_by_name[group]
      });
    }
    return fields;
  };

  AclRightManager.prototype.getForm = function(_opts) {
    var opts;
    if (_opts == null) {
      _opts = {};
    }
    opts = CUI.Element.readOpts(_opts, "AclRightManager.getForm", {
      onDataChanged: {
        check: Function
      }
    });
    return new Form({
      "class": "ez5-right-manager-form-top-level",
      class_table: "ez5-right-manager-form",
      data: this.getData(),
      onDataChanged: (function(_this) {
        return function(data, df) {
          return typeof opts.onDataChanged === "function" ? opts.onDataChanged(data, df) : void 0;
        };
      })(this),
      appearance: "separators",
      fields: this.getFormFields()
    });
  };

  AclRightManager.prototype.getSaveData = function() {
    return this.getData();
  };

  return AclRightManager;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var AclRight,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

AclRight = (function(superClass) {
  extend(AclRight, superClass);

  function AclRight(opts1) {
    this.opts = opts1 != null ? opts1 : {};
    this.remove = bind(this.remove, this);
    this.equals = bind(this.equals, this);
    this.getDisplayName = bind(this.getDisplayName, this);
    this.setAclRightManager = bind(this.setAclRightManager, this);
    if (this.opts instanceof AclRight) {
      this.opts = this.opts.opts;
    }
    AclRight.__super__.constructor.call(this, this.opts);
  }

  AclRight.prototype.initOpts = function() {
    AclRight.__super__.initOpts.call(this);
    return this.addOpts({
      right: {
        check: "PlainObject"
      },
      context: {}
    });
  };

  AclRight.prototype.readOpts = function() {
    AclRight.__super__.readOpts.call(this);
    this.__right = this._right;
    this.__context = this._context;
    this.__serverContext = AclRights.getServerContextByFrontendContext(this.__context);
    this.state = {};
    return this.setActive(true);
  };

  AclRight.prototype.name = function() {
    return this.__right.name;
  };

  AclRight.prototype.group = function() {
    return this.__right.group || 'zzz';
  };

  AclRight.prototype.getLocaKey = function() {
    return "server.right." + this.__serverContext + "." + this.__right.name;
  };

  AclRight.prototype.getParameterLocaKey = function(rparm) {
    return this.getLocaKey() + (".parm." + rparm.name);
  };

  AclRight.prototype.nameLocalized = function() {
    return $$(this.getLocaKey());
  };

  AclRight.prototype.getLabelForParameter = function(rparm) {
    return $$(this.getParameterLocaKey(rparm));
  };

  AclRight.prototype.setAclRightManager = function(aclRightManager) {
    this.aclRightManager = aclRightManager;
  };

  AclRight.prototype.getDisplayName = function() {
    return this.__right.name;
  };

  AclRight.prototype.getField = function(context) {
    var c, fields, i, j, len, len1, options, ref, ref1, regexp, rparm, txt;
    assert(!context, "AclRight.getField", "context is obsolete");
    fields = [];
    if (this.__right.has_grantable) {
      fields.push({
        name: "_grantable",
        type: Checkbox,
        undo_support: false,
        text: $$("acl.right.grantable")
      });
    }
    if (this.__right.parameters) {
      ref = this.__right.parameters;
      for (i = 0, len = ref.length; i < len; i++) {
        rparm = ref[i];
        switch (rparm.type) {
          case "int":
            fields.push({
              form: {
                label: this.getLabelForParameter(rparm)
              },
              type: NumberInput,
              undo_and_changed_support: false,
              name: rparm.name
            });
            break;
          case "text":
            if (!isEmpty(rparm.regex)) {
              regexp = rparm.regex;
            } else {
              regexp = null;
            }
            fields.push({
              form: {
                label: this.getLabelForParameter(rparm)
              },
              type: Input,
              regexp: regexp,
              placeholder: regexp,
              undo_and_changed_support: false,
              name: rparm.name
            });
            break;
          case "bool":
            fields.push({
              type: Checkbox,
              undo_and_changed_support: false,
              text: this.getLabelForParameter(rparm),
              name: rparm.name
            });
            break;
          case "string-list":
          case "string-list-one":
          case "string-list-one-or-zero":
            options = [];
            ref1 = rparm.choices;
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              c = ref1[j];
              if (rparm.localization === false) {
                txt = c;
              } else {
                txt = $$(this.getParameterLocaKey(rparm) + ".option." + c);
              }
              options.push({
                text: txt,
                value: c
              });
            }
            if (rparm.sort_choices) {
              options.sort(function(a, b) {
                return compareIndex(a.text.toLocaleLowerCase(), b.text.toLocaleLowerCase());
              });
            }
            (function(_this) {
              return (function(rparm) {
                var k, len2, min_checked, opt, radio, radio_unchecked_value;
                switch (rparm.type) {
                  case "string-list-one-or-zero":
                    radio = true;
                    min_checked = 0;
                    for (k = 0, len2 = options.length; k < len2; k++) {
                      opt = options[k];
                      opt.value_unchecked = null;
                    }
                    radio_unchecked_value = null;
                    break;
                  case "string-list-one":
                    radio = true;
                    min_checked = 1;
                    break;
                  case "string-list":
                    radio = false;
                    min_checked = void 0;
                }
                return fields.push({
                  type: Options,
                  horizontal: CUI.__ng__,
                  form: {
                    label: _this.getLabelForParameter(rparm)
                  },
                  horizontal: Math.ceil(options.length / 5),
                  undo_and_changed_support: false,
                  radio_unchecked_value: radio_unchecked_value,
                  data: function(data) {
                    if (!data.hasOwnProperty(rparm.name) && min_checked === 1) {
                      data[rparm.name] = rparm.choices[0];
                    }
                    return data;
                  },
                  name: rparm.name,
                  radio: radio,
                  min_checked: min_checked,
                  options: options
                });
              });
            })(this)(rparm);
            break;
          case "mask-select":
            fields.push(this.getFieldForMaskSelectParameter(rparm));
            break;
          case "objecttype-select":
            fields.push(this.getFieldForObjecttypeSelectParameter(rparm));
            break;
          case "eas-column-select":
            fields.push(this.getFieldForEasColumnsSelectParameter(rparm));
            break;
          case "pool-select":
            fields.push(this.getFieldForPoolSelectParameter(rparm));
            break;
          case "preview-versions":
            fields.push(this.getFieldForPreviewVersionsParameter(rparm));
            break;
          default:
            fields.push({
              type: DataFieldProxy,
              element: $textEmpty(rparm.name + (": type \"" + rparm.type + "\" unsupported."))
            });
        }
      }
    }
    return {
      type: Form,
      "class": "acl-right-parameter-form",
      fields: fields,
      undo_and_changed_support: false,
      data: this.data,
      name: this.name(),
      form: {
        checkbox: {
          text: this.nameLocalized()
        }
      }
    };
  };

  AclRight.prototype.getFields = function(context) {
    return [this.getField(context)];
  };

  AclRight.prototype.getFieldForMaskSelectParameter = function(rparm) {
    var f, fields, i, len;
    if (this.__context instanceof ObjecttypeListViewItem) {
      fields = Pool.prototype.standard_mask_fields({
        forObjecttype: this.__context.objecttype
      });
    } else if (this.__context === ObjecttypeListViewItem) {
      fields = Pool.prototype.standard_mask_fields({
        forObjecttype: true
      });
    } else if (this.__context instanceof Pool || this.__context === Pool) {
      fields = Pool.prototype.standard_mask_fields({
        forPoolAcl: true
      });
    }
    for (i = 0, len = fields.length; i < len; i++) {
      f = fields[i];
      f.undo_and_changed_support = false;
      f.name = f.name.split("_")[1];
      f.data = function(data, df) {
        var parm_data;
        parm_data = df.getForm().getData();
        if (!parm_data[rparm.name]) {
          parm_data[rparm.name] = {};
        }
        return parm_data[rparm.name];
      };
    }
    return {
      type: Form,
      fields: fields
    };
  };

  AclRight.prototype.getFieldForObjecttypeSelectParameter = function(rparm, filter_pool_only) {
    var i, len, opts, ot, ref;
    if (filter_pool_only == null) {
      filter_pool_only = true;
    }
    opts = [];
    ref = ez5.schema.CURRENT._objecttypes;
    for (i = 0, len = ref.length; i < len; i++) {
      ot = ref[i];
      if (!ot.pool_link && filter_pool_only) {
        continue;
      }
      opts.push({
        text: ot._name_localized,
        value: ot.table_id
      });
    }
    return {
      type: Options,
      undo_and_changed_support: false,
      horizontal: 5,
      form: {
        label: $$("acl.right.objecttypes.label")
      },
      name: rparm.name,
      options: opts
    };
  };

  AclRight.prototype.getFieldForPoolSelectParameter = function(rparm) {
    var pf, pool_field_data, psel;
    pool_field_data = {};
    pf = new PoolFieldForEditor();
    psel = pf.renderEditorInput(pool_field_data, null, {
      editor: this
    });
    Events.listen({
      type: "pool-field-changed",
      node: psel,
      call: (function(_this) {
        return function(ev, info) {
          return Events.trigger({
            node: psel,
            type: "data-changed",
            info: info
          });
        };
      })(this)
    });
    return {
      type: Form,
      form: {
        label: $$("acl.right.pools")
      },
      fields: [
        {
          type: Options,
          undo_and_changed_support: false,
          placeholder: $$("acl.right.pools.placeholder"),
          name: rparm.name,
          onDataChanged: (function(_this) {
            return function(data, df, ev) {
              return df.reload();
            };
          })(this),
          options: function(df) {
            var data, i, len, pool_id, ref, results;
            data = df.getData();
            ref = data[rparm.name];
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              pool_id = ref[i];
              results.push({
                text: ez5.pools.findPoolById(pool_id).getDisplayText(),
                value: pool_id
              });
            }
            return results;
          }
        }, {
          type: DataFieldProxy,
          undo_and_changed_support: false,
          element: psel,
          onDataChanged: function(data, df, ev, info) {
            var opt_df, pool_id, ref;
            opt_df = df.getOtherField(rparm.name);
            pool_id = (ref = info.new_pool.pool) != null ? ref._id : void 0;
            if (pool_id && indexOf.call(data[rparm.name], pool_id) < 0) {
              data[rparm.name].push(pool_id);
              opt_df.reload();
            }
            pf.setCurrentPool(null);
            return pf.setDataToCurrentPool(pool_field_data, false);
          }
        }
      ]
    };
  };

  AclRight.prototype.getFieldForEasColumnsSelectParameter = function(rparm) {
    var eas_fields, otm;
    otm = new ObjecttypeManager().addObjecttypes();
    eas_fields = otm.getEASFields('all', (function(_this) {
      return function(ot) {
        if (_this.__context instanceof ObjecttypeListViewItem && _this.__context.getObjecttype().id() !== ot.id()) {
          return false;
        } else {
          return true;
        }
      };
    })(this));
    return AclRight.getFieldColumnSelector({
      name: rparm.name,
      label: this.getLabelForParameter(rparm),
      fields: eas_fields
    });
  };

  AclRight.getFieldColumnSelector = function(_opts) {
    var f, fieldById, fieldsByObjecttype, get_col_opts, i, inkl_tn, len, objecttypes, opts, ot, ot_fields, ref, sort_by_name;
    if (_opts == null) {
      _opts = {};
    }
    opts = CUI.Element.readOpts(_opts, 'AclRight.getFieldColumnSelector', {
      name: {
        mandatory: true,
        check: String
      },
      label: {
        check: String
      },
      fields: {
        mandatory: true,
        check: function(v) {
          var f, i, len;
          if (!CUI.isArray(v) && v.length > 0) {
            return false;
          }
          for (i = 0, len = v.length; i < len; i++) {
            f = v[i];
            if (!(f instanceof Field)) {
              return false;
            }
          }
          return true;
        }
      }
    });
    objecttypes = [];
    fieldById = {};
    fieldsByObjecttype = {};
    ref = opts.fields;
    for (i = 0, len = ref.length; i < len; i++) {
      f = ref[i];
      ot = new Objecttype(f.getMainMask().table);
      ot_fields = fieldsByObjecttype[ot.id()];
      if (!ot_fields) {
        fieldsByObjecttype[ot.id()] = ot_fields = [];
        objecttypes.push(ot);
      }
      ot_fields.push(f);
      fieldById[f.id()] = f;
    }
    sort_by_name = function(func) {
      return function(a, b) {
        return a[func]().localeCompare(b[func]());
      };
    };
    objecttypes.sort(sort_by_name('nameLocalized'));
    get_col_opts = (function(_this) {
      return function(data) {
        var col_opts, disable_all, disabled, fields, j, k, len1, len2, ref1, ref2;
        col_opts = [
          {
            text: $$("acl.right.select.choose"),
            disabled: true,
            value: null
          }, {
            text: $$("acl.right.select.add_all"),
            value: true
          }
        ];
        disable_all = true;
        for (j = 0, len1 = objecttypes.length; j < len1; j++) {
          ot = objecttypes[j];
          fields = fieldsByObjecttype[ot.id()];
          if (fields.length === 0) {
            continue;
          }
          if (objecttypes.length > 1) {
            col_opts.push({
              label: ot.nameLocalized()
            });
          }
          ref1 = fields.sort(sort_by_name('fullNameLocalized'));
          for (k = 0, len2 = ref1.length; k < len2; k++) {
            f = ref1[k];
            disabled = data && (ref2 = f.id(), indexOf.call(data[opts.name], ref2) >= 0);
            if (!disabled) {
              disable_all = false;
            }
            col_opts.push({
              text: f.fullNameLocalized(),
              value: f,
              disabled: disabled
            });
          }
        }
        col_opts[1].disabled = disable_all;
        return col_opts;
      };
    })(this);
    inkl_tn = objecttypes.length > 1;
    return {
      type: Form,
      form: {
        label: opts.label
      },
      fields: [
        {
          type: Options,
          undo_and_changed_support: false,
          name: opts.name,
          placeholder: $$("acl.right.column_select.placeholder.all_columns"),
          onDataChanged: (function(_this) {
            return function(data, df, ev) {
              return df.reload();
            };
          })(this),
          onDataInit: (function(_this) {
            return function(df, data) {
              if (CUI.isArray(data[opts.name])) {
                removeFromArray(null, data[opts.name], function(col_id) {
                  return !fieldById[col_id];
                });
              }
            };
          })(this),
          options: function(df) {
            var col_id, data, j, len1, ref1, results;
            data = df.getData();
            ref1 = data[opts.name];
            results = [];
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              col_id = ref1[j];
              results.push({
                text: fieldById[col_id].fullNameLocalized(inkl_tn, inkl_tn),
                value: col_id
              });
            }
            return results;
          }
        }, {
          type: Select,
          undo_and_changed_support: false,
          check_changed: false,
          options: function(df) {
            var data, ref1;
            data = (ref1 = df.getOtherField(opts.name)) != null ? ref1.getData() : void 0;
            return get_col_opts(data);
          },
          onDataChanged: (function(_this) {
            return function(data, df) {
              var col_arr, col_id, col_opts, field, j, len1, ref1;
              col_opts = df.getOtherField(opts.name);
              col_arr = col_opts.getValue();
              if (data.col === true) {
                ref1 = opts.fields;
                for (j = 0, len1 = ref1.length; j < len1; j++) {
                  field = ref1[j];
                  pushOntoArray(field.id(), col_arr);
                }
              } else {
                col_id = data.col.id();
                pushOntoArray(col_id, col_arr);
              }
              col_arr.sort(function(a, b) {
                return fieldById[a].fullNameLocalized().localeCompare(fieldById[b].fullNameLocalized());
              });
              col_opts.reload();
              return df.setValue(null);
            };
          })(this),
          name: 'col',
          data: {}
        }
      ]
    };
  };

  AclRight.prototype.getFieldForPreviewVersionsParameter = function(rparm) {
    var cls, config, def, fields, i, j, len, len1, opts, ref, ref1;
    config = ez5.session.getEASConfig();
    fields = [];
    ref = Asset.fileclasses();
    for (i = 0, len = ref.length; i < len; i++) {
      cls = ref[i];
      opts = [
        {
          text: $$("acl.right.version.original"),
          value: cls + ".original"
        }
      ];
      if (config[cls]) {
        ref1 = config[cls].versions;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          def = ref1[j];
          if (!def.rightsmanagement) {
            continue;
          }
          opts.push({
            text: def.size_print || def.version,
            value: cls + "." + def.version
          });
        }
      }
      fields.push({
        type: Options,
        undo_and_changed_support: false,
        horizontal: CUI.__ng__,
        form: {
          label: $$("server.eas.fileclass." + cls)
        },
        name: rparm.name,
        options: opts,
        horizontal: true
      });
    }
    return {
      type: Form,
      undo_and_changed_support: false,
      onDataChanged: function(data) {
        return CUI.debug("data", dump(data.versions));
      },
      fields: fields
    };
  };

  AclRight.prototype.getDisplayLabel = function(data) {
    var d;
    d = data[this.name()];
    if (!d) {
      return null;
    }
    return new Label({
      "class": CUI.__ng__ ? "ez5-acl-right-label ez5-tag" : "ez5-acl-right-label",
      text: this.nameLocalized()
    });
  };

  AclRight.prototype.getName = function() {
    return this.__right.name;
  };

  AclRight.prototype.setActive = function(aclRights, on_off) {
    if (on_off == null) {
      on_off = null;
    }
    if (on_off === null) {
      on_off = this.isInList(aclRights);
    }
    this.state[this.getName()] = on_off;
    if (on_off) {
      if (!this.isInList(aclRights)) {
        aclRights.push(this);
      }
    } else {
      if (this.isInList(aclRights)) {
        removeFromArray(this, aclRights, "equals");
      }
    }
    return this;
  };

  AclRight.prototype.isInList = function(aclRights) {
    var aclRight, i, len;
    for (i = 0, len = aclRights.length; i < len; i++) {
      aclRight = aclRights[i];
      if (aclRight.equals(this)) {
        return true;
      }
    }
    return false;
  };

  AclRight.prototype.equals = function(aclRightComp) {
    if (!aclRightComp) {
      return false;
    }
    assert(aclRightComp instanceof AclRight, "AclRight.equals", "Unable to compare aclRight", {
      aclRight: this,
      aclRightComp: aclRightComp
    });
    return aclRightComp.opts.right.name === this.__right.name;
  };

  AclRight.prototype.remove = function() {
    return this.aclRightManager.removeAclRight(this);
  };

  AclRight.newInstance = function(right, context) {
    var func;
    assert($.isPlainObject(right), "AclRight.newInstance", "right needs to be plain object");
    if (right.type && right.type !== "right") {
      func = "AclRight" + toCamel(right.type, true);
    } else {
      func = "AclRight";
    }
    assert($.isFunction(window[func]), "AclRight.newInstance", "Received unknown type for right: " + right.type, {
      right: right
    });
    return new window[func]({
      right: right,
      context: context
    });
  };

  return AclRight;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var AclRightChoice,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AclRightChoice = (function(superClass) {
  extend(AclRightChoice, superClass);

  function AclRightChoice(opts) {
    var i, len, ref, right;
    this.opts = opts;
    AclRightChoice.__super__.constructor.call(this, this.opts);
    this.rights = [];
    ref = this.__right.rights;
    for (i = 0, len = ref.length; i < len; i++) {
      right = ref[i];
      this.rights.push(AclRight.newInstance(right, this.__context));
    }
    this;
  }

  AclRightChoice.prototype.getDisplayText = function(data) {
    var i, len, r, ref;
    ref = this.rights;
    for (i = 0, len = ref.length; i < len; i++) {
      r = ref[i];
      if (data[r.name()]) {
        return r.getDisplayText(data);
      }
    }
  };

  AclRightChoice.prototype.getDisplayLabel = function(data) {
    var i, len, r, ref;
    ref = this.rights;
    for (i = 0, len = ref.length; i < len; i++) {
      r = ref[i];
      if (data[r.name()]) {
        return r.getDisplayLabel(data);
      }
    }
    return null;
  };

  AclRightChoice.prototype.getFields = function(context) {
    var field, fields, i, len, r, ref;
    fields = [];
    ref = this.rights;
    for (i = 0, len = ref.length; i < len; i++) {
      r = ref[i];
      field = r.getField(context);
      field.form.checkbox.radio = this.name();
      field.form.checkbox.radio_allow_null = true;
      fields.push(field);
    }
    return fields;
  };

  return AclRightChoice;

})(AclRight);
// Generated by CoffeeScript 1.10.0
var AssetDetail,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AssetDetail = (function(superClass) {
  extend(AssetDetail, superClass);

  function AssetDetail(opts) {
    this.opts = opts != null ? opts : {};
    AssetDetail.__super__.constructor.call(this, this.opts);
    this.registeredPlugins = [];
    this.clsName = getObjectClass(this).toLowerCase();
  }

  AssetDetail.prototype.initOpts = function() {
    AssetDetail.__super__.initOpts.call(this);
    return this.addOpts({
      element: {
        mandatory: true,
        check: function(v) {
          return isElement(v);
        }
      }
    });
  };

  AssetDetail.prototype.getButtonLocaKey = function(asset) {
    return this.clsName;
  };

  AssetDetail.prototype.getLabelLocaKey = function(asset) {
    return this.getButtonLocaKey(asset);
  };

  AssetDetail.prototype.startOnMousewheel = function() {
    return false;
  };

  AssetDetail.prototype.getAsset = function() {
    return this.asset;
  };

  AssetDetail.prototype.getLabel = function() {
    return this.__label;
  };

  AssetDetail.prototype.start = function(asset1, mouseWheelstart) {
    var closeBtn, fullscreenBtn, loca_key;
    this.asset = asset1;
    this.mouseWheelstart = mouseWheelstart != null ? mouseWheelstart : false;
    assert($elementIsInDOM(this._element), "AssetDetail.start", "Element is not in DOM anymore.", {
      element: this._element
    });
    this._element.addClass("asset-detail asset-detail-" + this.clsName);
    loca_key = this.getLabelLocaKey(this.asset);
    if (loca_key) {
      if (CUI.isArray(loca_key)) {
        this.__label = new LocaLabel({
          loca_key: loca_key[0],
          loca_key_attrs: loca_key[1]
        });
      } else {
        this.__label = new LocaLabel({
          loca_key: loca_key
        });
      }
    } else {
      this.__label = null;
    }
    DOM.exitFullscreen();
    this.createMarkup();
    fullscreenBtn = this.getFullscreenButton();
    closeBtn = new LocaButton({
      group: "a",
      loca_key: "asset.detail.button.close",
      icon: "close",
      onClick: (function(_this) {
        return function() {
          return _this.destroy();
        };
      })(this)
    });
    this.outerDiv.append(new Buttonbar({
      buttons: [this.__label, fullscreenBtn, closeBtn],
      "class": "ez5-asset-detail-buttonbar"
    }).DOM);
    this.callbackPlugins("start");
    return this;
  };

  AssetDetail.prototype.getFullscreenButton = function() {
    if (!CUI.DOM.fullscreenEnabled()) {
      return;
    }
    return new LocaButton({
      group: "a",
      "switch": true,
      loca_key: "asset.detail.button.fullscreen",
      icon_inactive: "resize_full",
      icon_active: "resize_small",
      activate_initial: false,
      onActivate: (function(_this) {
        return function(btn, flags, ev) {
          _this.outerDiv.addClass("ez5-asset-detail-fullscreen");
          DOM.requestFullscreen(_this.outerDiv[0]).progress(function() {
            _this.positionOuterDiv();
            return _this.resize();
          }).done(function() {
            return btn.deactivate({
              position_only: true
            });
          });
        };
      })(this),
      onDeactivate: (function(_this) {
        return function(btn, flags, ev) {
          if (!flags.position_only) {
            DOM.exitFullscreen();
          }
          if (!_this.outerDiv) {
            return;
          }
          _this.outerDiv.removeClass("ez5-asset-detail-fullscreen");
          _this.positionOuterDiv();
          _this.resize();
        };
      })(this)
    });
  };

  AssetDetail.prototype.destroy = function() {
    this.callbackPlugins("destroy");
    this._element.removeClass("asset-detail asset-detail-" + this.clsName);
    if (this.outerDiv) {
      Events.ignore({
        instance: this
      });
      this.outerDiv.remove();
      this.outerDiv = null;
    }
  };

  AssetDetail.prototype.isActive = function() {
    return !!this.outerDiv;
  };

  AssetDetail.prototype.isDestroyed = function() {
    return this.outerDiv === null;
  };

  AssetDetail.prototype.plugins = function() {
    return [];
  };

  AssetDetail.prototype.getPlugins = function() {
    var i, j, k, len, len1, len2, p, plugins, ref, ref1;
    plugins = [];
    ref = this.plugins();
    for (i = 0, len = ref.length; i < len; i++) {
      p = ref[i];
      plugins.push(p);
    }
    ref1 = this.registeredPlugins;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      p = ref1[j];
      plugins.push(p);
    }
    for (k = 0, len2 = plugins.length; k < len2; k++) {
      p = plugins[k];
      assert(p instanceof AssetDetailPlugin, "AssetDetail.registerPlugin", "Plugin needs to be an instance of AssetDetailPlugin", {
        plugin: p
      });
    }
    return plugins;
  };

  AssetDetail.prototype.registerPlugin = function(p) {
    if (p._asset_detail) {
      p.deregister();
    }
    p._asset_detail = this;
    this.registeredPlugins.push(p);
    p.register(this, this.registeredPlugins.length - 1);
    return this;
  };

  AssetDetail.prototype.deregisterPlugin = function(p) {
    var _p, i, idx, len, ref;
    ref = this.registeredPlugins;
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      _p = ref[idx];
      if (_p === p) {
        this.registeredPlugins.splice(idx, 1);
        return this;
      }
    }
    return this;
  };

  AssetDetail.prototype.scroll = function() {};

  AssetDetail.prototype.resize = function() {};

  AssetDetail.prototype.reload = function() {};

  AssetDetail.prototype.callbackPlugins = function(ev_type, info) {
    var i, len, p, ref;
    if (info == null) {
      info = {};
    }
    ref = this.getPlugins();
    for (i = 0, len = ref.length; i < len; i++) {
      p = ref[i];
      if (p[ev_type]) {
        p[ev_type](this, info);
      }
    }
    info.type = ev_type;
    info.tool = this;
    return Events.trigger({
      node: this._element,
      type: "asset-detail",
      info: info
    });
  };

  AssetDetail.prototype.getViewport = function() {
    return this.viewport;
  };

  AssetDetail.prototype.positionOuterDiv = function() {
    var dim, offset, rect;
    if (CUI.__ng__) {
      if (this.outerDiv.hasClass("ez5-asset-detail-fullscreen")) {
        this.viewport = {
          width: window.innerWidth,
          height: window.innerHeight
        };
      } else {
        rect = this._element.rect();
        this.viewport = {
          width: rect.width,
          height: rect.height
        };
      }
      return;
    }
    if (this.outerDiv.hasClass("ez5-asset-detail-fullscreen")) {
      dim = DOM.getDimensions(document.body);
      this.viewport = {
        width: window.innerWidth,
        height: window.innerHeight
      };
      DOM.setStylePx(this.outerDiv[0], {
        top: 0,
        left: 0,
        width: this.viewport.width,
        height: this.viewport.height
      });
    } else {
      rect = this._element.rect();
      this.viewport = {
        width: rect.width,
        height: rect.height
      };
      offset = {
        top: rect.top,
        left: rect.left
      };
      DOM.setAbsolutePosition(this.outerDiv, offset);
      this.outerDiv.css({
        width: this.viewport.width,
        height: this.viewport.height
      });
    }
    return this;
  };

  AssetDetail.prototype.fadeIn = function(doneCallback) {
    this.outerDiv.fadeIn(350, (function(_this) {
      return function() {
        _this.callbackPlugins("fade-in");
        return typeof doneCallback === "function" ? doneCallback() : void 0;
      };
    })(this));
    return this;
  };

  AssetDetail.prototype.fadeOut = function(doneCallback) {
    this.outerDiv.fadeOut(350, (function(_this) {
      return function() {
        _this.callbackPlugins("fade-out");
        return typeof doneCallback === "function" ? doneCallback() : void 0;
      };
    })(this));
    return this;
  };

  AssetDetail.prototype.createMarkup = function() {
    var bb, btn_opts, buttons, el, i, idx, len, p, plug_btn, ref;
    this.outerDiv = $div("asset-detail-outer-div asset-detail-" + this.clsName);
    if (CUI.__ng__) {
      this.asset._tmpl.replace(this.outerDiv, "tool");
    } else {
      document.body.appendChild(this.outerDiv);
    }
    Events.listen({
      type: "viewport-resize",
      instance: this,
      node: this._element,
      call: (function(_this) {
        return function() {
          _this.positionOuterDiv();
          _this.resize();
        };
      })(this)
    });
    DOM.setClassOnMousemove({
      element: this.outerDiv[0],
      ms: CUI.__ng__ ? 3000 : 5000,
      "class": "ez5-asset-detail-show-controls"
    });
    this.controls = $div("asset-detail-controls");
    this.outerDiv.append(this.controls);
    buttons = [];
    ref = this.getPlugins();
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      p = ref[idx];
      if (p.render) {
        el = p.render();
        if (!el) {
          continue;
        }
        if (el.DOM) {
          this.controls.append(el.DOM);
        } else {
          this.controls.append(el);
        }
        if (CUI.__ng__) {
          this.controls.append(CUI.DOM.space());
        }
      } else if (p.btn || p.button) {
        if (p.btn) {
          btn_opts = {
            "class": "asset-detail-plugin-" + p.btn,
            value: {
              plugin: idx
            }
          };
          if (p.icon) {
            btn_opts.icon = new Icon({
              icon: p.icon
            });
          } else if (p.label) {
            btn_opts.text = $$(p.label);
          } else {
            btn_opts.text = p.btn;
          }
        } else {
          btn_opts = copyObject(p.button);
          if (!btn_opts["class"]) {
            btn_opts["class"] = "";
          }
        }
        btn_opts["class"] += " asset-detail-plugin";
        if (this.opts.smallControls) {
          btn_opts["class"] += " btn-mini";
        }
        (function(p) {
          return btn_opts.onClick = function(ev, btn) {
            ev.stopPropagation();
            p.run(ev, btn);
          };
        })(p);
        btn_opts.group = "plugin";
        plug_btn = new CUI.defaults["class"].Button(btn_opts);
        buttons.push(plug_btn);
      }
    }
    if (buttons.length > 0) {
      bb = new Buttonbar({
        buttons: buttons,
        "class": "ez5-asset-detail-plugin-buttons"
      });
      this.controls.append(bb.DOM);
    }
    this.positionOuterDiv();
    return this;
  };

  AssetDetail.prototype.getOuterDiv = function() {
    return this.outerDiv;
  };

  return AssetDetail;

})(CUI.Element);

CUI.ready(function() {
  return Events.registerEvent({
    type: "asset-detail",
    bubble: true
  });
});
// Generated by CoffeeScript 1.10.0
var AssetDetailPlugin,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AssetDetailPlugin = (function(superClass) {
  extend(AssetDetailPlugin, superClass);

  function AssetDetailPlugin() {
    return AssetDetailPlugin.__super__.constructor.apply(this, arguments);
  }

  AssetDetailPlugin.prototype.initOpts = function() {
    AssetDetailPlugin.__super__.initOpts.call(this);
    return this.addOpts(this.____opts);
  };

  AssetDetailPlugin.prototype.readOpts = function() {
    var i, key, len, ref, results;
    AssetDetailPlugin.__super__.readOpts.call(this);
    ref = Object.keys(this.____opts);
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      results.push(this[key] = this["_" + key]);
    }
    return results;
  };

  AssetDetailPlugin.prototype.deregister = function() {
    assert(this.__assetDetail, (getObjectClass(this)) + ".deregister", "Plugin is not registered with any AssetDetail.", {
      plugin: this
    });
    this.__assetDetail.deregisterPlugin(this);
    this.__assetDetail = null;
    return this.__assetDetailIdx = null;
  };

  AssetDetailPlugin.prototype.register = function(assetDetail, idx) {
    assert(!this.__assetDetail && assetDetail instanceof AssetDetail, (getObjectClass(this)) + ".register", "Plugin cannot be registered for more than one AssetDetail. Also, assetDetail must be instanceof AssetDetail", {
      plugin: this,
      assetDetail: this.__assetDetail
    });
    this.__assetDetail = assetDetail;
    this.__assetDetailIdx = idx;
    return this;
  };

  AssetDetailPlugin.prototype.____opts = {
    btn: {
      check: String
    },
    button: {
      check: "PlainObject"
    },
    name: {
      check: String
    },
    run: {
      check: Function
    },
    icon: {
      check: String
    },
    label: {
      check: String
    },
    render: {
      check: Function
    },
    update: {
      check: Function
    },
    start: {
      check: Function
    },
    destroy: {
      check: Function
    }
  };

  return AssetDetailPlugin;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var Zoomer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Zoomer = (function(superClass) {
  extend(Zoomer, superClass);

  function Zoomer() {
    return Zoomer.__super__.constructor.apply(this, arguments);
  }

  Zoomer.prototype.readOpts = function() {
    Zoomer.__super__.readOpts.call(this);
    return this._debug = 0;
  };

  Zoomer.prototype.tileSize = 320;

  Zoomer.prototype.maxZoom = 8;

  Zoomer.prototype.getButtonLocaKey = function(asset) {
    if (this.getZoomerVersion(asset)) {
      return "zoomer.button.title";
    } else {
      return null;
    }
  };

  Zoomer.prototype.getLabelLocaKey = function() {
    return "zoomer.button.title";
  };

  Zoomer.prototype.getZoomerVersion = function(asset) {
    var version;
    if (asset.value["class"] !== "image") {
      return;
    }
    version = Asset.getBestImageForViewport(asset, 1000000, 1000000, (function(_this) {
      return function(version) {
        if (version.zoom_url) {
          return true;
        } else {
          return false;
        }
      };
    })(this));
    return version;
  };

  Zoomer.prototype.start = function(asset1, mouseWheelstart) {
    var loc;
    this.asset = asset1;
    this.mouseWheelstart = mouseWheelstart != null ? mouseWheelstart : false;
    this.__zoomerVersion = this.getZoomerVersion(this.asset);
    this.__thumbnailUrl = ez5.getAbsoluteURL(Asset.getStandardVersion(this.asset.value).url);
    this.__width = this.asset.getWidth();
    this.__height = this.asset.getHeight();
    this.__zoomScale = this.__width / this.__zoomerVersion.width;
    loc = CUI.parseLocation(this.__zoomerVersion.zoom_url);
    this.__url = loc.origin + loc.pathname;
    this.__url_search = loc.search + loc.hash;
    Zoomer.__super__.start.call(this, this.asset, this.mouseWheelstart);
    this.init();
    this.zoomIn();
    return this;
  };

  Zoomer.prototype.init = function() {
    this.zoom = null;
    this.innerDivTiles = {};
    this.innerDivPos = {};
    this.createMap();
    this.__setRotate();
    this.positionAndSizeZoomer();
    this.fitZoom();
    return this.callbackPlugins("init");
  };

  Zoomer.prototype.__setRotate = function() {
    var ref, ref1;
    this.__transform = this.asset.value.transform || [];
    this.rotate = EAS.getRotateMapFromTransform(this.__transform);
    this.width = this.__width;
    this.height = this.__height;
    if ((ref = this.rotate.z) === 90 || ref === 270) {
      ref1 = [this.height, this.width], this.width = ref1[0], this.height = ref1[1];
    }
    return this;
  };

  Zoomer.prototype.getZoom = function() {
    return this.zoom;
  };

  Zoomer.prototype.getMapZoom = function() {
    return this.map.zoom;
  };

  Zoomer.prototype.fitZoom = function() {
    return this.setZoomAndMove(this.fit.minimumZoom, this.fit.left, this.fit.top);
  };

  Zoomer.prototype.startOnMousewheel = function() {
    return true;
  };

  Zoomer.prototype.limitZoom = function(new_zoom) {
    if (new_zoom > 1) {
      if (new_zoom < this.maxZoom) {
        return Math.floor(new_zoom);
      } else {
        return this.maxZoom;
      }
    } else {
      return Math.max(this.fit.minimumZoom, new_zoom);
    }
  };

  Zoomer.prototype.deltaZoom = function(delta) {
    var set_zoom;
    if (delta > 0 && this.zoom < 1 && this.zoom + delta > 1) {
      set_zoom = 1;
    } else if (delta > 0 && this.zoom >= 1) {
      if (this.zoom < this.maxZoom) {
        set_zoom = Math.floor(this.zoom + 1);
      } else {
        set_zoom = this.zoom;
      }
    } else if (delta < 0 && this.zoom > 1 && this.zoom + delta < 1) {
      set_zoom = 1;
    } else if (delta < 0 && this.zoom > 1) {
      if (this.zoom <= this.maxZoom) {
        set_zoom = Math.floor(this.zoom - 1);
      } else {
        set_zoom = this.zoom;
      }
    } else {
      set_zoom = this.zoom + delta;
    }
    return set_zoom;
  };

  Zoomer.prototype.zoomIn = function() {
    return this.setZoomAndPosition(this.deltaZoom(0.05), this.getViewportMiddle());
  };

  Zoomer.prototype.zoomOut = function() {
    return this.setZoomAndPosition(this.deltaZoom(-0.05), this.getViewportMiddle());
  };

  Zoomer.prototype.plugins = function() {
    return [
      new AssetDetailPlugin({
        button: {
          loca_key: "zoomer.button.zoom_in"
        },
        run: (function(_this) {
          return function() {
            return _this.zoomIn();
          };
        })(this)
      }), new AssetDetailPlugin({
        button: {
          loca_key: "zoomer.button.zoom_out"
        },
        run: (function(_this) {
          return function() {
            return _this.zoomOut();
          };
        })(this)
      })
    ];
  };

  Zoomer.prototype.fitScreen = function() {
    var zoom;
    this.fitZoom();
    if (this.fit.left > 0) {
      zoom = this.viewport.width / this.width;
    } else if (this.fit.top > 0) {
      zoom = this.viewport.height / this.height;
    }
    if (zoom > 1) {
      zoom = Math.min(this.maxZoom, Math.ceil(zoom));
    }
    this.setZoomAndPosition(zoom, this.getViewportMiddle());
    return this;
  };

  Zoomer.prototype.createMarkup = function() {
    Zoomer.__super__.createMarkup.call(this);
    Events.listen({
      type: "dragover-scroll",
      node: this.outerDiv,
      call: (function(_this) {
        return function(ev) {
          return ev.stopPropagation();
        };
      })(this)
    });
    this.innerDiv = $div("zoomer-inner-div");
    this.innerDiv.appendTo(this.outerDiv);
    this.innerDivTransform = $div("zoomer-inner-div-transform").appendTo(this.innerDiv);
    if (this._debug < 2) {
      this.innerDivTransform.css({
        backgroundImage: "url(" + this.__thumbnailUrl + ")"
      });
    }
    Events.listen({
      type: ["wheel", "dblclick", "gesturechange"],
      node: this.outerDiv,
      call: (function(_this) {
        return function(ev) {
          var new_zoom, pos, zoom_delta;
          if ($(ev.getTarget()).closest(".zoomer-controls,.zoomer-map").length) {
            return;
          }
          ev.stopPropagation();
          ev.preventDefault();
          if (ev.getType() === "gesturechange") {
            console.debug("event", ev.getType());
            new_zoom = _this.limitZoom(_this.zoom * ev.getNativeEvent().scale);
            console.debug("zoom", _this.zoom, "scale", ev.getNativeEvent().scale, "new zoom", new_zoom);
            pos = elementGetPosition(getCoordinatesFromEvent(ev), _this.innerDiv);
            _this.setZoomAndPosition(new_zoom, pos);
            return;
          }
          zoom_delta = null;
          switch (ev.getType()) {
            case "dblclick":
              zoom_delta = 0.15;
              if (ev.hasModifierKey()) {
                zoom_delta *= -1;
              }
              break;
            case "wheel":
              if (ev.wheelDeltaY()) {
                if (ev.wheelDeltaY() < 0) {
                  zoom_delta = 0.02;
                } else {
                  zoom_delta = -0.02;
                }
                if (ev.hasModifierKey()) {
                  zoom_delta = zoom_delta * 0.5;
                }
              }
          }
          if (zoom_delta !== null && (zoom_delta > 0 || _this.zoom !== _this.fit.minimumZoom)) {
            pos = elementGetPosition(getCoordinatesFromEvent(ev), _this.innerDiv);
            _this.setZoomAndPosition(_this.deltaZoom(zoom_delta), pos);
          }
        };
      })(this)
    });
    new Movable({
      element: this.innerDiv,
      selector: ".zoomer-tile",
      dragging: (function(_this) {
        return function() {
          _this.innerDivPos.top = _this.innerDiv.cssInt("top");
          _this.innerDivPos.left = _this.innerDiv.cssInt("left");
          _this.updateZoomOrPosition();
          return _this.fillInnerDivWithTiles();
        };
      })(this),
      create: (function(_this) {
        return function(ev, options) {
          return !ev.hasModifierKey();
        };
      })(this),
      onPosition: (function(_this) {
        return function(x, y) {
          return _this.getInnerDivPosPosition(x, y);
        };
      })(this)
    });
    Events.listen({
      node: this.innerDiv,
      type: "dragover-scroll",
      call: (function(_this) {
        return function(ev, info) {
          var d, diff, oldInnerDivPos, position, scrollSpeed, t;
          if (window.globalDrag.isFlexHandleDrag || window.globalDrag.isMapCursor) {
            return;
          }
          scrollSpeed = ev.getCount() * 0.01 + 0.9;
          position = elementGetPosition(getCoordinatesFromEvent(ev.getOriginalEvent()), _this.outerDiv);
          diff = {
            x: 0,
            y: 0
          };
          t = 30;
          if ((d = position.left - t) < 0) {
            diff.x = -Math.max(-20, d) * scrollSpeed;
          }
          if ((d = position.top - t) < 0) {
            diff.y = -Math.max(-20, d) * scrollSpeed;
          }
          if ((d = _this.viewport.width - position.left) < t) {
            diff.x = -Math.max(-20, d) * scrollSpeed;
          }
          if ((d = _this.viewport.height - position.top) < t) {
            diff.y = -Math.max(-20, d) * scrollSpeed;
          }
          if (diff.x !== 0 || diff.y !== 0) {
            oldInnerDivPos = {
              left: _this.innerDivPos.left,
              top: _this.innerDivPos.top
            };
            _this.innerDivPos.left += diff.x;
            _this.innerDivPos.top += diff.y;
            _this.setInnerDiv();
            _this.updateZoomOrPosition();
            _this.fillInnerDivWithTiles();
            Events.trigger({
              type: "zoomer-scroll",
              node: _this.innerDiv,
              info: {
                x: _this.innerDivPos.left - oldInnerDivPos.left,
                y: _this.innerDivPos.top - oldInnerDivPos.top
              }
            });
          }
          return ev.stopPropagation();
        };
      })(this)
    });
    return new Lasso({
      element: this.outerDiv,
      filter: null,
      create: (function(_this) {
        return function(ev, options) {
          return ev.hasModifierKey();
        };
      })(this),
      selected: (function(_this) {
        return function(ev, info) {
          var cornerCoord, cornerPix, newZoom;
          cornerCoord = {
            left: (info.start.left - _this.innerDivPos.left) / _this.zoom,
            top: (info.start.top - _this.innerDivPos.top) / _this.zoom
          };
          newZoom = _this.viewport.width / (info.lasso_dim.width / _this.zoom);
          cornerPix = {
            left: -cornerCoord.left * newZoom,
            top: -cornerCoord.top * newZoom
          };
          if (newZoom >= 1) {
            newZoom = Math.min(_this.maxZoom, Math.floor(newZoom));
          }
          return _this.setZoomAndMove(newZoom, cornerPix.left, cornerPix.top);
        };
      })(this)
    });
  };

  Zoomer.prototype.getViewportMiddle = function() {
    return {
      left: -this.innerDivPos.left + this.viewport.width / 2,
      top: -this.innerDivPos.top + this.viewport.height / 2
    };
  };

  Zoomer.prototype.resize = function() {
    this.positionAndSizeZoomer();
    this.updateZoomOrPosition();
    this.fillInnerDivWithTiles();
    this.setZoomAndPosition(this.zoom, this.getViewportMiddle());
    return this;
  };

  Zoomer.prototype.getInnerDivPosPosition = function(x, y) {
    if (this.innerDivPos.width >= this.viewport.width) {
      if (x > 0) {
        x = 0;
      } else {
        x = Math.max(x, this.viewport.width - this.innerDivPos.width);
      }
    } else {
      x = (this.viewport.width - this.innerDivPos.width) / 2;
    }
    if (this.innerDivPos.height >= this.viewport.height) {
      if (y > 0) {
        y = 0;
      } else {
        y = Math.max(y, this.viewport.height - this.innerDivPos.height);
      }
    } else {
      y = (this.viewport.height - this.innerDivPos.height) / 2;
    }
    assert(!isNaN(x) && !isNaN(y), "Zoomer.getInnerDivPosition", "x or y is NaN", {
      viewport: this.viewport,
      innerDivPos: this.innerDivPos
    });
    return [x, y];
  };

  Zoomer.prototype.positionAndSizeZoomer = function() {
    var ref;
    this.fit = {};
    ref = ez5.fitRectangle(this.width, this.height, this.viewport.width, this.viewport.height), this.fit.width = ref[0], this.fit.height = ref[1], this.fit.top = ref[2], this.fit.left = ref[3];
    this.fit.minimumZoom = Math.min(1, this.fit.width / this.width);
    return this.sizeMap();
  };

  Zoomer.prototype.createMap = function() {
    this.mapDiv = $div("zoomer-map");
    this.mapDivInner = $div("zoomer-map-inner").appendTo(this.mapDiv);
    this.mapDivInner.css({
      backgroundImage: "url(" + this.__thumbnailUrl + ")"
    });
    this.mapDivCursor = $div("zoomer-map-cursor");
    this.mapDivCursor.appendChild($div("zoomer-map-cursor-inner"));
    this.mapDiv.appendChild(this.mapDivCursor);
    new Movable({
      element: this.mapDivCursor,
      dragstart: (function(_this) {
        return function(ev, gd) {
          return gd.isMapCursor = true;
        };
      })(this),
      dragend: (function(_this) {
        return function(ev, info) {
          var pos;
          pos = CUI.DOM.getRelativePosition(_this.mapDivCursor);
          _this.innerDiv.addClass("zoomer-map-drag");
          _this.innerDivPos.top = pos.top / _this.map.zoom * -_this.zoom;
          _this.innerDivPos.left = pos.left / _this.map.zoom * -_this.zoom;
          _this.setInnerDiv();
          _this.fillInnerDivWithTiles();
          return CUI.setTimeout(function() {
            return _this.innerDiv.removeClass("zoomer-map-drag");
          }, 1000);
        };
      })(this),
      onPosition: (function(_this) {
        return function(x, y) {
          if (x < 0) {
            x = 0;
          }
          if (y < 0) {
            y = 0;
          }
          x = Math.min(x, _this.map.width - _this.mapCursor.width);
          y = Math.min(y, _this.map.height - _this.mapCursor.height);
          return [x, y];
        };
      })(this)
    });
    return this.outerDiv.append(this.mapDiv);
  };

  Zoomer.prototype.sizeMap = function() {
    var ref;
    this.map = {
      size: 0.2
    };
    ref = ez5.fitRectangle(this.width, this.height, this.viewport.width * this.map.size, this.viewport.height * this.map.size), this.map.width = ref[0], this.map.height = ref[1];
    this.map.zoom = this.map.width / this.width;
    this.mapDiv.css({
      width: this.map.width,
      height: this.map.height,
      right: 10,
      bottom: 10
    });
    this.__setInnerDivStyle(this.mapDivInner, this.map);
    return this;
  };

  Zoomer.prototype.positionMapCursor = function() {
    this.mapCursor = {
      top: -this.innerDivPos.top / this.zoom * this.map.zoom,
      left: -this.innerDivPos.left / this.zoom * this.map.zoom,
      width: this.viewport.width / this.zoom * this.map.zoom,
      height: this.viewport.height / this.zoom * this.map.zoom
    };
    return this.mapDivCursor.css(this.mapCursor);
  };

  Zoomer.prototype.getDiff = function(x, y, oldZoom, newZoom) {
    var _new, _old, coord;
    coord = (function(_this) {
      return function(x, y, zoom) {
        return {
          x: x / zoom,
          y: y / zoom
        };
      };
    })(this);
    _old = coord(x, y, oldZoom);
    _new = coord(x, y, newZoom);
    return {
      x: (_new.x - _old.x) * newZoom,
      y: (_new.y - _old.y) * newZoom
    };
  };

  Zoomer.prototype.reload = function(asset) {
    this.destroy();
    this.start(asset);
    return this;
  };

  Zoomer.prototype.update = function(asset) {
    var zoom;
    zoom = this.zoom;
    delete this.zoom;
    this.reload(asset);
    this.setZoomAndPosition(zoom, this.getViewportMiddle());
    return this;
  };

  Zoomer.prototype.setZoomAndPosition = function(zoom, pos) {
    var diff;
    zoom = Math.max(zoom, this.fit.minimumZoom);
    diff = this.getDiff(pos.left, pos.top, this.zoom, zoom);
    return this.setZoomAndMove(zoom, this.innerDivPos.left + diff.x, this.innerDivPos.top + diff.y);
  };

  Zoomer.prototype.setZoomAndMove = function(zoom, left, top) {
    if (left == null) {
      left = null;
    }
    if (top == null) {
      top = null;
    }
    assert(!isNaN(zoom), "Zoomer.setZoom(zoom)", "zoom cannot be NaN", {
      zoom: zoom
    });
    if (zoom !== this.zoom) {
      this.zoom = Math.max(zoom, this.fit.minimumZoom);
      this.zoom_print = (Math.round(this.getZoom() * 100)) + "%";
      this.innerDivPos.width = this.width * this.zoom;
      this.innerDivPos.height = this.height * this.zoom;
    }
    if (top !== null) {
      this.innerDivPos.top = top;
    }
    if (left !== null) {
      this.innerDivPos.left = left;
    }
    this.setInnerDiv();
    this.updateZoomOrPosition();
    this.fillInnerDivWithTiles();
    return this;
  };

  Zoomer.prototype.setInnerDiv = function() {
    var k, ref, ref1, set, v;
    ref = this.getInnerDivPosPosition(this.innerDivPos.left, this.innerDivPos.top), this.innerDivPos.left = ref[0], this.innerDivPos.top = ref[1];
    set = {};
    ref1 = this.innerDivPos;
    for (k in ref1) {
      v = ref1[k];
      set[k] = v;
    }
    this.innerDiv.css(set);
    this.__setInnerDivStyle(this.innerDivTransform, set);
    return this;
  };

  Zoomer.prototype.__setInnerDivStyle = function(div, set) {
    var inner, ref, ref1, ref2;
    inner = {};
    if ((ref = this.rotate.z) === 90 || ref === 270) {
      ref1 = [set.height, set.width], inner.width = ref1[0], inner.height = ref1[1];
      inner.left = -(inner.width / 2) + (set.width / 2);
      inner.top = -(inner.height / 2) + (set.height / 2);
    } else {
      ref2 = [set.width, set.height], inner.width = ref2[0], inner.height = ref2[1];
      inner.left = 0;
      inner.top = 0;
    }
    div.css(inner);
    EAS.setTransformStyle(div, this.__transform, false);
    return this;
  };

  Zoomer.prototype.updateZoomOrPosition = function() {
    this.positionMapCursor();
    this.getLabel().setText($$("zoomer.label", {
      zoom: this.zoom_print
    }));
    return this.callbackPlugins("update");
  };

  Zoomer.prototype.fillInnerDivWithTiles = function() {
    var $t, $tile, cut_x, cut_y, first_tile_x, first_tile_y, i, j, last_tile_x, last_tile_y, left, m, parts, rect, ref, ref1, ref10, ref11, ref12, ref13, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, results, tile, tileId, tileSize, tile_x, tile_y, top, total_height, total_width, url, vr;
    rect = this.calcVisibleRectangle();
    if (this._debug >= 2) {
      this.innerDiv.find(".zoomer-visible-rectangle").remove();
      vr = $div("zoomer-visible-rectangle");
      this.innerDiv.append(vr);
      vr.css(rect);
      vr.append("<span>" + (Math.round(rect.left)) + "/" + (Math.round(rect.top)) + "  " + (Math.round(rect.width)) + "x" + (Math.round(rect.height)) + " " + (Math.round(this.innerDivPos.width)) + "x" + (Math.round(this.innerDivPos.height)) + "</span>");
    }
    ref = this.innerDivTiles;
    for (tileId in ref) {
      tile = ref[tileId];
      tile.needed = false;
    }
    if (rect) {
      total_width = this.innerDivPos.width;
      total_height = this.innerDivPos.height;
      if ((ref1 = this.rotate.z) === 90 || ref1 === 270) {
        ref2 = [rect.width, rect.height], rect.height = ref2[0], rect.width = ref2[1];
        ref3 = [total_height, total_width], total_width = ref3[0], total_height = ref3[1];
      }
      if ((ref4 = this.rotate.z) === 90 || ref4 === 270) {
        if ((ref5 = this.rotate.z) === 90) {
          top = rect.top;
          left = rect.left;
          rect.top = total_height - rect.height - left;
          rect.left = top;
        }
        if ((ref6 = this.rotate.z) === 270) {
          top = rect.top;
          left = rect.left;
          rect.top = rect.left;
          rect.left = total_width - rect.width - top;
        }
      }
      if ((ref7 = this.rotate.x) === 180) {
        rect.top = total_height - rect.height - rect.top;
      }
      if ((ref8 = this.rotate.y) === 180) {
        rect.left = total_width - rect.width - rect.left;
      }
      first_tile_x = Math.floor(rect.left / this.tileSize);
      first_tile_y = Math.floor(rect.top / this.tileSize);
      last_tile_x = Math.ceil((rect.left + rect.width) / this.tileSize);
      last_tile_y = Math.ceil((rect.top + rect.height) / this.tileSize);
      for (tile_y = i = ref9 = first_tile_y, ref10 = last_tile_y; ref9 <= ref10 ? i < ref10 : i > ref10; tile_y = ref9 <= ref10 ? ++i : --i) {
        for (tile_x = j = ref11 = first_tile_x, ref12 = last_tile_x; ref11 <= ref12 ? j < ref12 : j > ref12; tile_x = ref11 <= ref12 ? ++j : --j) {
          tileId = tile_x + "x" + tile_y + "@" + this.zoom;
          if (this.innerDivTiles[tileId]) {
            this.innerDivTiles[tileId].needed = true;
          } else {
            $tile = $div("zoomer-tile", {
              "data-tile-id": tileId
            });
            this.innerDivTiles[tileId] = {
              $tile: $tile,
              needed: true
            };
            m = {
              top: this.tileSize * tile_y,
              left: this.tileSize * tile_x
            };
            cut_x = total_width - m.left - this.tileSize;
            if (cut_x < 0) {
              m.width = Math.round(this.tileSize + cut_x);
            } else {
              m.width = this.tileSize;
            }
            cut_y = total_height - m.top - this.tileSize;
            if (cut_y < 0) {
              m.height = Math.round(this.tileSize + cut_y);
            } else {
              m.height = this.tileSize;
            }
            if (this.zoom > 1) {
              parts = ["zoom" + (Math.round(this.zoom * this.__zoomerVersion.width))];
              tileSize = Math.round(this.tileSize / this.__zoomScale);
            } else {
              parts = ["zoom" + (Math.round(total_width))];
              tileSize = this.tileSize;
            }
            if (tileSize !== 320) {
              parts.push("size" + tileSize);
            }
            if (this.zoom > 1) {
              parts.push("avoid_interpolation");
            }
            parts.push("part" + tile_x + "x" + tile_y + ".jpg");
            url = this.__url + "/" + parts.join("/") + this.__url_search;
            $tile.css(m);
            if (this._debug) {
              $tile.html(tile_x + "/" + tile_y + "<br><br>" + m.width + "x" + m.height + "<br>" + m.left + "/" + m.top);
            } else {
              $tile.css({
                backgroundImage: "url(" + url + ")",
                backgroundSize: "cover"
              });
            }
            this.innerDivTransform.append($tile);
          }
        }
      }
    }
    ref13 = this.innerDivTiles;
    results = [];
    for (tileId in ref13) {
      tile = ref13[tileId];
      if (!tile.needed) {
        $t = tile.$tile;
        delete this.innerDivTiles[tileId];
        results.push($t.remove());
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  Zoomer.prototype.calcVisibleRectangle = function() {
    var availableHeight, availableWidth, r;
    r = {};
    if (this.innerDivPos.top > 0) {
      if (this.innerDivPos.top > this.viewport.height) {
        return null;
      }
      r.top = 0;
      availableHeight = this.viewport.height - this.innerDivPos.top;
    } else {
      r.top = -this.innerDivPos.top;
      availableHeight = this.viewport.height;
    }
    if (this.innerDivPos.left > 0) {
      if (this.innerDivPos.left > this.viewport.width) {
        return null;
      }
      r.left = 0;
      availableWidth = this.viewport.width - this.innerDivPos.left;
    } else {
      r.left = -this.innerDivPos.left;
      availableWidth = this.viewport.width;
    }
    r.height = Math.min(this.innerDivPos.height - r.top, availableHeight);
    r.width = Math.min(this.innerDivPos.width - r.left, availableWidth);
    return r;
  };

  return Zoomer;

})(AssetDetail);

CUI.ready(function() {
  return Events.registerEvent({
    type: "zoomer-scroll",
    bubble: true
  });
});
// Generated by CoffeeScript 1.10.0
var VideoPlayer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

VideoPlayer = (function(superClass) {
  extend(VideoPlayer, superClass);

  function VideoPlayer() {
    return VideoPlayer.__super__.constructor.apply(this, arguments);
  }

  VideoPlayer.prototype.cls = "video";

  VideoPlayer.prototype.getVersions = function(asset) {
    return Asset.getVideoVersions(asset.value);
  };

  VideoPlayer.prototype.initPlugins = function() {
    var data, i, len, opts, ref, txt, version;
    opts = [];
    data = {
      version: null
    };
    ref = this.getVersions(this.asset);
    for (i = 0, len = ref.length; i < len; i++) {
      version = ref[i];
      if (version.version === "original") {
        txt = version.height + "p";
      } else {
        txt = version.version;
      }
      opts.push({
        text: txt,
        value: version
      });
    }
    opts.sort(function(a, b) {
      if (a.value.height > b.value.height) {
        return -1;
      } else if (a.value.height < b.value.height) {
        return 1;
      } else {
        return 0;
      }
    });
    data.version = opts[0].value;
    CUI.debug("get plugins for asset", this.asset, data, opts);
    return this.__plugins = [
      new AssetDetailPlugin({
        start: (function(_this) {
          return function() {
            return _this.initPlayer(data.version);
          };
        })(this),
        render: (function(_this) {
          return function() {
            if (opts.length === 1) {
              return;
            }
            return new Select({
              data: data,
              mark_changed: false,
              name: "version",
              options: opts,
              onDataChanged: function() {
                return _this.initPlayer(data.version);
              }
            }).start().DOM;
          };
        })(this)
      })
    ];
  };

  VideoPlayer.prototype.getFullscreenButton = function() {};

  VideoPlayer.prototype.initPlayer = function(version) {
    var source;
    source = $source("", {
      src: ez5.getAbsoluteURL(version.download_url || version.url)
    });
    this.__mediaElement = $element(this.cls, "", {
      controls: true,
      autoplay: true,
      controlsList: 'nodownload'
    }).css({
      width: "100%",
      height: "100%"
    });
    this.__mediaElement.append(source);
    this.outerDiv.find(this.cls).remove();
    return this.outerDiv.prepend(this.__mediaElement);
  };

  VideoPlayer.prototype.getButtonLocaKey = function(asset) {
    if (asset.value["class"] !== this.cls) {
      return;
    }
    if (this.getVersions(asset).length === 0) {
      return;
    }
    return "asset_detail.player." + this.cls;
  };

  VideoPlayer.prototype.startOnMousewheel = function() {
    return false;
  };

  VideoPlayer.prototype.start = function(asset1, mouseWheelstart) {
    this.asset = asset1;
    this.mouseWheelstart = mouseWheelstart;
    this.initPlugins();
    VideoPlayer.__super__.start.call(this, this.asset, this.mouseWheelstart);
    this.__mediaElement[0].play();
  };

  VideoPlayer.prototype.createMarkup = function() {
    VideoPlayer.__super__.createMarkup.call(this);
  };

  VideoPlayer.prototype.plugins = function() {
    return this.__plugins || [];
  };

  return VideoPlayer;

})(AssetDetail);
// Generated by CoffeeScript 1.10.0
var WebDVDPlayer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

WebDVDPlayer = (function(superClass) {
  extend(WebDVDPlayer, superClass);

  function WebDVDPlayer() {
    return WebDVDPlayer.__super__.constructor.apply(this, arguments);
  }

  WebDVDPlayer.prototype.start = function(asset, mouseWheelStart, btn) {
    btn.startSpinner();
    btn.disable();
    return ez5.api.eas({
      type: "GET",
      data: {
        ids: JSON.stringify([asset.value._id]),
        format: "long"
      }
    }).always((function(_this) {
      return function() {
        return btn.stopSpinner();
      };
    })(this)).done((function(_this) {
      return function(data) {
        btn.enable();
        _this.__eas = data[asset.value._id];
        _this.__htmlFiles = _this.getTopLevelHtmlFiles();
        console.error("web dvd started", _this.__htmlFiles);
        _this.__data = {
          idx: 0,
          screen: "1024x768"
        };
        return AssetDetail.prototype.start.call(_this, asset);
      };
    })(this));
  };

  WebDVDPlayer.prototype.getButtonLocaKey = function(asset) {
    if (!this.getWebDVDVersion(asset.value)) {
      return;
    }
    return "web.dvd.player.button.title";
  };

  WebDVDPlayer.prototype.getLabelLocaKey = function() {
    return "web.dvd.player.button.title";
  };

  WebDVDPlayer.prototype.startOnMousewheel = function() {
    return true;
  };

  WebDVDPlayer.prototype.getWebDVDVersion = function(value) {
    var i, len, version, vname, vnames;
    if (value["class"] !== "archive") {
      return;
    }
    vnames = Asset.getVersionNamesForClass(value["class"], false);
    if (!(vnames != null ? vnames.length : void 0) > 0) {
      return;
    }
    for (i = 0, len = vnames.length; i < len; i++) {
      vname = vnames[i];
      version = value.versions[vname];
      if (!version || version._not_allowed) {
        continue;
      }
      if (version["class"] === "directory" && version.status === "done" && version.webdvd_url) {
        return version;
      }
    }
  };

  WebDVDPlayer.prototype.plugins = function() {
    var html_file, i, idx, len, opts, opts2, plugins, ref, ref1;
    plugins = [
      new AssetDetailPlugin({
        button: {
          loca_key: "web.dvd.player.button.fullscreen"
        },
        run: (function(_this) {
          return function() {
            return window.open(_this.getStartUrl(), "_blank", ez5.session.getClientDefault("webdvd_player_open_window_parameter") || "");
          };
        })(this)
      })
    ];
    if (!((ref = this.__htmlFiles) != null ? ref.length : void 0)) {
      return plugins;
    }
    opts = [];
    ref1 = this.__htmlFiles;
    for (idx = i = 0, len = ref1.length; i < len; idx = ++i) {
      html_file = ref1[idx];
      opts.push({
        value: idx,
        text: html_file.path
      });
    }
    if (this.__htmlFiles.length > 1) {
      plugins.push(new AssetDetailPlugin({
        render: (function(_this) {
          return function() {
            return new Select({
              data: _this.__data,
              tooltip: {
                text: $$("web.dvd.player.button.start_file.tooltip")
              },
              name: "idx",
              onDataChanged: function() {
                return _this.showStartUrl();
              },
              options: opts
            }).start();
          };
        })(this)
      }));
    }
    opts2 = [
      {
        value: "1024x768",
        text: "1024x768"
      }, {
        value: "800x600",
        text: "800x600"
      }
    ];
    plugins.push(new AssetDetailPlugin({
      render: (function(_this) {
        return function() {
          return new Select({
            data: _this.__data,
            name: "screen",
            tooltip: {
              text: $$("web.dvd.player.button.screen.tooltip")
            },
            onDataChanged: function() {
              return _this.showStartUrl();
            },
            options: opts2
          }).start();
        };
      })(this)
    }));
    return plugins;
  };

  WebDVDPlayer.prototype.createMarkup = function() {
    WebDVDPlayer.__super__.createMarkup.call(this);
    this.showStartUrl();
    return this;
  };

  WebDVDPlayer.prototype.getTopLevelHtmlFiles = function() {
    var file, files, html_files, i, j, len, len1, min_depth;
    files = this.__eas.files;
    min_depth = null;
    for (i = 0, len = files.length; i < len; i++) {
      file = files[i];
      file.depth = file.path.split("/").length - 1;
      if ((min_depth === null || file.depth < min_depth) && file.path.endsWith(".html")) {
        min_depth = file.depth;
      }
    }
    html_files = [];
    if (min_depth !== null) {
      for (j = 0, len1 = files.length; j < len1; j++) {
        file = files[j];
        if (file.depth === min_depth && file.path.endsWith(".html")) {
          html_files.push(file);
        }
      }
    }
    CUI.debug("top level html files found", html_files);
    return html_files;
  };

  WebDVDPlayer.prototype.getStartUrl = function(append) {
    var p, version;
    if (append == null) {
      append = "";
    }
    console.debug("getStartUrl for webdvd", this.__eas);
    version = this.getWebDVDVersion(this.__eas);
    p = ez5.getAbsoluteURL(version.webdvd_url) + "/" + this.__htmlFiles[this.__data.idx].path;
    if (p.match(/\?/)) {
      return p = p + "&" + append;
    } else {
      return p = p + "?" + append;
    }
  };

  WebDVDPlayer.prototype.showStartUrl = function() {
    if (this.__iframe) {
      this.__iframe.remove();
    }
    this.__iframe = $element("iframe", "ez5-webdvd-player", {
      name: "webdvd-player",
      src: this.getStartUrl()
    });
    this.getOuterDiv().append(this.__iframe);
    this.resize();
    return this;
  };

  WebDVDPlayer.prototype.resize = function() {
    var dim, h, margin_left, margin_top, ref, screen, transform, w, zoom;
    screen = this.__data.screen.split("x");
    dim = this.getViewport();
    ref = ez5.fitRectangle(screen[0], screen[1], dim.width, dim.height), w = ref[0], h = ref[1], margin_top = ref[2], margin_left = ref[3];
    zoom = w / screen[0];
    transform = "scale(" + zoom + ") translateX(" + (margin_left / zoom) + "px) translateY(" + (margin_top / zoom) + "px)";
    this.__iframe.css({
      width: screen[0],
      height: screen[1],
      transform: transform,
      transformOrigin: "0 0"
    });
    return this;
  };

  WebDVDPlayer.prototype.destroy = function() {
    this.__iframe = null;
    return WebDVDPlayer.__super__.destroy.call(this);
  };

  return WebDVDPlayer;

})(AssetDetail);
// Generated by CoffeeScript 1.10.0
var AudioPlayer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AudioPlayer = (function(superClass) {
  extend(AudioPlayer, superClass);

  function AudioPlayer() {
    return AudioPlayer.__super__.constructor.apply(this, arguments);
  }

  AudioPlayer.prototype.cls = "audio";

  AudioPlayer.prototype.getFullscreenButton = function() {};

  AudioPlayer.prototype.initPlayer = function() {
    AudioPlayer.__super__.initPlayer.apply(this, arguments);
    if (CUI.__ng__) {
      return this.__mediaElement.css({
        height: ""
      });
    }
  };

  AudioPlayer.prototype.getVersions = function(asset) {
    return Asset.getAudioVersions(asset.value);
  };

  return AudioPlayer;

})(VideoPlayer);
// Generated by CoffeeScript 1.10.0
var MetadataBrowser,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

MetadataBrowser = (function(superClass) {
  extend(MetadataBrowser, superClass);

  function MetadataBrowser() {
    return MetadataBrowser.__super__.constructor.apply(this, arguments);
  }

  MetadataBrowser.prototype.start = function(asset, mousewheelStart, btn) {
    CUI.debug("MetadataBrowser.start", asset, mousewheelStart, btn);
    btn.disable();
    btn.startSpinner();
    return this.load(asset.value._id).always((function(_this) {
      return function() {
        btn.enable();
        return btn.stopSpinner();
      };
    })(this)).done((function(_this) {
      return function(data) {
        return AssetDetail.prototype.start.call(_this, asset);
      };
    })(this));
  };

  MetadataBrowser.prototype.load = function(eas_id) {
    var dfr;
    dfr = new CUI.Deferred();
    dfr.fail((function(_this) {
      return function() {
        return CUI.problem({
          text: $$("metadata.browser.eas_not_found")
        });
      };
    })(this));
    ez5.api.eas({
      type: "GET",
      data: {
        ids: JSON.stringify([eas_id]),
        format: "long"
      }
    }).done((function(_this) {
      return function(data) {
        _this.__eas = data[eas_id];
        if (_this.__eas.error) {
          return dfr.reject();
        } else {
          return dfr.resolve();
        }
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  MetadataBrowser.prototype.getButtonLocaKey = function(asset) {
    if (!asset.value.class_extension) {
      return;
    }
    if (!ez5.session.hasSystemRight("root", "frontend_features[asset_browser_metadata_tool]")) {
      return;
    }
    return "metadata.browser.title";
  };

  MetadataBrowser.prototype.getLabelLocaKey = function() {
    return "metadata.browser.title";
  };

  MetadataBrowser.prototype.createMarkup = function() {
    var lay;
    MetadataBrowser.__super__.createMarkup.call(this);
    lay = new SimplePane({
      "class": "ez5-metadata-browser",
      header_left: new Label({
        text: this.asset.value.compiled
      })
    });
    this.appendMarkup(lay.center());
    return lay.DOM.appendTo(this.outerDiv);
  };

  MetadataBrowser.prototype.appendMarkup = function(markup_div) {
    var append_group, dpi, featured_groups, i, j, k, len, len1, len2, name_of_group, print_sizes, ref, ref1, results, shc, size_h, size_w, tm;
    shc = new StickyHeaderControl({
      element: markup_div
    });
    append_group = (function(_this) {
      return function(name_of_group) {
        var i, info, len, ref, sh, table;
        sh = new StickyHeader({
          control: shc,
          "class": "group-header",
          text: name_of_group
        });
        markup_div.appendChild(sh.DOM);
        table = new CUI.Table({
          "class": "ez5-metadata-browser-group",
          flex: true,
          key_value: true
        });
        ref = _this.__eas.metadata.groups[name_of_group];
        for (i = 0, len = ref.length; i < len; i++) {
          info = ref[i];
          if (isEmpty(info.print)) {
            continue;
          }
          table.addRow({
            key: info.name,
            value: info.print
          });
        }
        return markup_div.appendChild(table.DOM);
      };
    })(this);
    CUI.debug("showing", this.__eas.metadata);
    tm = this.__eas.technical_metadata;
    if (this.__eas.metadata.groups["EAS::PrintSizes"]) {
      print_sizes = this.__eas.metadata.groups["EAS::PrintSizes"] = [];
      ref = [72, 150, 300, 600];
      for (i = 0, len = ref.length; i < len; i++) {
        dpi = ref[i];
        size_w = Math.round((tm.width / dpi) * 254) / 100;
        size_h = Math.round((tm.height / dpi) * 254) / 100;
        print_sizes.push({
          group: "EAS::PrintSizes",
          name: "print_size@" + dpi + "DPI",
          print: size_w + "cm x " + size_h + "cm"
        });
      }
      featured_groups = ["EAS::PrintSizes", "EAS::TypeInfo"];
    } else {
      featured_groups = ["EAS::TypeInfo"];
    }
    for (j = 0, len1 = featured_groups.length; j < len1; j++) {
      name_of_group = featured_groups[j];
      append_group(name_of_group);
    }
    ref1 = this.__eas.metadata.groupnames;
    results = [];
    for (k = 0, len2 = ref1.length; k < len2; k++) {
      name_of_group = ref1[k];
      if (indexOf.call(featured_groups, name_of_group) >= 0) {
        continue;
      }
      results.push(append_group(name_of_group));
    }
    return results;
  };

  return MetadataBrowser;

})(AssetDetail);
// Generated by CoffeeScript 1.10.0
var DetailInfo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DetailInfo = (function(superClass) {
  extend(DetailInfo, superClass);

  function DetailInfo() {
    return DetailInfo.__super__.constructor.apply(this, arguments);
  }

  DetailInfo.prototype.initOpts = function() {
    DetailInfo.__super__.initOpts.call(this);
    return this.addOpts({
      resultObject: {
        mandatory: true,
        check: ResultObject
      }
    });
  };

  DetailInfo.prototype.start = function(asset, mousewheelStart, btn) {
    CUI.debug("DetailInfo.start", asset, mousewheelStart, btn);
    btn.setIcon("spinner");
    return ResultObject.loadFromData(this._resultObject.getData()).always((function(_this) {
      return function() {
        return btn.setIcon();
      };
    })(this)).done((function(_this) {
      return function(current_result_object) {
        _this.current_result_object = current_result_object;
        return DetailInfo.__super__.start.call(_this, asset, mousewheelStart, btn);
      };
    })(this));
  };

  DetailInfo.prototype.getButtonLocaKey = function(asset) {
    return "detail.info.button";
  };

  DetailInfo.prototype.getLabelLocaKey = function() {
    return "detail.info.button";
  };

  DetailInfo.prototype.getFullscreenButton = function() {};

  DetailInfo.prototype.createMarkup = function() {
    var lay;
    DetailInfo.__super__.createMarkup.call(this);
    lay = new SimplePane({
      "class": "ez5-detail-info"
    });
    lay.append(this.current_result_object.renderDetail("detail", "detail-header", {
      detail: this
    }), "center");
    this.current_result_object.setCSSClasses(lay);
    return lay.DOM.appendTo(this.outerDiv);
  };

  return DetailInfo;

})(AssetDetail);
// Generated by CoffeeScript 1.10.0
var PagedViewer,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PagedViewer = (function(superClass) {
  extend(PagedViewer, superClass);

  function PagedViewer(opts) {
    this.opts = opts != null ? opts : {};
    this.setLastPage = bind(this.setLastPage, this);
    PagedViewer.__super__.constructor.call(this, this.opts);
    this.minimumZoom = 0.05;
    this.zoom = null;
  }

  PagedViewer.prototype.startOnMousewheel = function() {
    return true;
  };

  PagedViewer.prototype.createMarkup = function() {
    var scroll;
    PagedViewer.__super__.createMarkup.call(this);
    this.outerDiv2 = $div("paged-viewer-outer-div-2").appendTo(this.outerDiv);
    Events.listen({
      type: "click",
      node: this.outerDiv2,
      call: (function(_this) {
        return function(ev) {
          var $page;
          $page = $(ev.getTarget()).closest(".paged-viewer-page");
          if (!$page.length) {
            return;
          }
          ev.stopPropagation();
          ev.preventDefault();
          _this.setLastPage($page);
          _this.fitZoom("fit");
        };
      })(this)
    });
    new CUI.Dragscroll({
      element: this.outerDiv2
    });
    scroll = (function(_this) {
      return function() {
        return _this.scroll();
      };
    })(this);
    Events.listen({
      type: "scroll",
      node: this.outerDiv2,
      call: (function(_this) {
        return function() {
          CUI.scheduleCallback({
            ms: 200,
            call: scroll
          });
        };
      })(this)
    });
    this.innerDiv = $div("paged-viewer-inner-div").appendTo(this.outerDiv2);
    this.initPages();
    this.fillPages();
    this.setFitDim();
    this.setZoom(0.1);
    return this;
  };

  PagedViewer.prototype.getButtonLocaKey = function(asset) {
    var cls;
    if (!asset.value.class_extension) {
      return;
    }
    cls = asset.value.class_extension.split(".");
    if (cls[0] !== "office") {
      return;
    }
    if (!asset.value.pages_allowed) {
      return;
    }
    return "paged.viewer.title";
  };

  PagedViewer.prototype.getLabelLocaKey = function() {
    return [
      "paged.viewer.label", {
        extension: this.extension
      }
    ];
  };

  PagedViewer.prototype.start = function(asset, mouseWheelstart, btn) {
    this.mouseWheelstart = mouseWheelstart != null ? mouseWheelstart : false;
    this.extension = asset.value.class_extension.split(".")[1].toUpperCase();
    this.__pagedViewerDestroyed = false;
    btn.setIcon("spinner");
    btn.disable();
    return ez5.api.eas({
      type: "GET",
      data: {
        ids: JSON.stringify([asset.value._id]),
        format: "short"
      }
    }).done((function(_this) {
      return function(data) {
        btn.setIcon();
        btn.enable();
        if (_this.__pagedViewerDestroyed) {
          return;
        }
        _this.__easData = data;
        _this.__easId = asset.value._id;
        AssetDetail.prototype.start.call(_this, asset, _this.mouseWheelstart, btn);
        return _this.fitScreen();
      };
    })(this));
  };

  PagedViewer.prototype.destroy = function() {
    this.lastPage = null;
    this.__pagedViewerDestroyed = true;
    return PagedViewer.__super__.destroy.call(this);
  };

  PagedViewer.prototype.resize = function() {
    return this.setFitDim();
  };

  PagedViewer.prototype.initPages = function() {
    var c, i, idx, j, k, l, last, len, len1, len2, name, p, ref, ref1, ref2, ref3, version;
    this.maxPageDim = {
      width: null,
      height: null
    };
    last = {
      width: null,
      height: null
    };
    this.asset_data = this.__easData[this.__easId];
    this.asset_data.pages = [];
    ref = this.asset_data.children;
    for (i = 0, len = ref.length; i < len; i++) {
      c = ref[i];
      this.asset_data.pages.push(this.__easData[c]);
    }
    ref1 = this.asset_data.pages;
    for (idx = j = 0, len1 = ref1.length; j < len1; idx = ++j) {
      p = ref1[idx];
      p.current_version = null;
      p.idx = idx;
      ref2 = ["width", "height"];
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        k = ref2[l];
        if (!p.technical_metadata[k]) {
          p.technical_metadata[k] = last[k] || 1000;
        } else {
          last[k] = p.technical_metadata[k];
        }
      }
      this.maxPageDim.width = Math.max(this.maxPageDim.width, p.technical_metadata.width);
      this.maxPageDim.height = Math.max(this.maxPageDim.height, p.technical_metadata.height);
      p.versions_sorted_by_size = [];
      ref3 = p.versions;
      for (name in ref3) {
        version = ref3[name];
        if (version._not_allowed || version.status !== "done") {
          continue;
        }
        version.name = name;
        p.versions_sorted_by_size.push(version);
      }
      p.versions_sorted_by_size.sort((function(_this) {
        return function(a, b) {
          if (a.width < b.width || a.height < b.height) {
            return -1;
          } else if (a.width > b.width || a.height > b.height) {
            return 1;
          } else {
            return 0;
          }
        };
      })(this));
    }
  };

  PagedViewer.prototype.fillPages = function() {
    var i, idx, len, p, ref;
    ref = this.asset_data.pages;
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      p = ref[idx];
      p.$page = $div("paged-viewer-page");
      p.$page.append($div("page-number").text(idx + 1));
      DOM.data(p.$page[0], "page", p);
      Events.listen({
        node: p.$page,
        type: "click",
        call: (function(_this) {
          return function(ev) {
            var page;
            if (!ev.shiftKey()) {
              return;
            }
            page = ev.getTarget();
            ev.preventDefault();
            ev.stopImmediatePropagation();
            return p = DOM.data(page);
          };
        })(this)
      });
      this.innerDiv.append(p.$page);
    }
    return this;
  };

  PagedViewer.prototype.setFitDim = function() {
    var ref;
    this.fit = {};
    return ref = ez5.fitRectangle(this.maxPageDim.width, this.maxPageDim.height, this.viewport.width || 1000, this.viewport.height || 1000), this.fit.width = ref[0], this.fit.height = ref[1], this.fit.top = ref[2], this.fit.left = ref[3], ref;
  };

  PagedViewer.prototype.setZoom = function(zoom) {
    var i, idx, len, p, ref;
    if (zoom < this.minimumZoom) {
      zoom = this.minimumZoom;
    }
    if (this.zoom !== zoom) {
      this.zoom = zoom;
      ref = this.asset_data.pages;
      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
        p = ref[idx];
        p.size = {
          marginBoxWidth: Math.round(p.technical_metadata.width * this.zoom),
          marginBoxHeight: Math.round(p.technical_metadata.height * this.zoom)
        };
        CUI.DOM.setDimensions(p.$page, p.size);
      }
      if (this.viewport.width / (this.maxPageDim.width * this.zoom) >= 3) {
        this.outerDiv.addClass("paged-viewer-thumbnails");
      } else {
        this.outerDiv.removeClass("paged-viewer-thumbnails");
      }
      return this.setVisible();
    }
  };

  PagedViewer.prototype.setVisible = function() {
    var i, idx, j, len, len1, p, page_dim, pos, ref, ref1, ref2, ref3, results, thumbnail_version_name, v, visible;
    visible = {
      top: this.outerDiv2.scrollTop,
      bottom: this.outerDiv2.scrollTop + this.outerDiv2.clientHeight,
      height: this.outerDiv2.clientHeight
    };
    ref = this.asset_data.pages;
    results = [];
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      p = ref[idx];
      page_dim = CUI.DOM.getDimensions(p.$page);
      pos = {
        top: page_dim.offsetTop - visible.top,
        height: page_dim.borderBoxHeight
      };
      if (pos.top + pos.height < 0 || pos.top > visible.height) {
        p.$page.removeClass("visible");
        if (p.current_version) {
          CUI.DOM.removeChildren(p.$page, "img");
          results.push(p.current_version = null);
        } else {
          results.push(void 0);
        }
      } else {
        p.$page.addClass("visible");
        thumbnail_version_name = (ref1 = p.versions_sorted_by_size[0]) != null ? ref1.name : void 0;
        if (!thumbnail_version_name) {
          continue;
        }
        if (!p.current_version) {
          p.$page.css({
            backgroundImage: "url(" + (ez5.getAbsoluteURL(p.versions[thumbnail_version_name].url)) + ")"
          });
        }
        ref2 = p.versions_sorted_by_size;
        for (j = 0, len1 = ref2.length; j < len1; j++) {
          v = ref2[j];
          if (v.width >= p.size.width && v.height >= p.size.height) {
            break;
          }
        }
        if (((ref3 = p.current_version) != null ? ref3.name : void 0) !== v.name) {
          p.current_version = v;
          results.push((function(_this) {
            return function(p, v) {
              var new_img;
              new_img = new Image();
              new_img.style.width = "100%";
              new_img.style.height = "100%";
              new_img.src = ez5.getAbsoluteURL(v.url);
              Events.listen({
                node: new_img,
                type: ["error"],
                call: function(ev) {
                  return console.error("img could not be loaded", new_img.src, {
                    version: v,
                    page: p
                  });
                }
              });
              return Events.listen({
                node: new_img,
                type: ["load"],
                call: function(ev) {
                  CUI.DOM.removeChildren(p.$page, "img");
                  return p.$page.appendChild(new_img);
                }
              });
            };
          })(this)(p, v));
        } else {
          results.push(void 0);
        }
      }
    }
    return results;
  };

  PagedViewer.prototype.lastPageScrollIntoView = function() {
    var ref;
    if ((ref = this.lastPage) != null) {
      ref.scrollIntoView();
    }
    return Events.trigger({
      node: this.outerDiv2,
      type: "scroll"
    });
  };

  PagedViewer.prototype.scroll = function() {
    return this.setVisible();
  };

  PagedViewer.prototype.setLastPage = function(page) {
    if (this.lastPage) {
      this.lastPage.removeClass("last-page");
    }
    return this.lastPage = page.addClass("last-page");
  };

  PagedViewer.prototype.plugins = function() {
    return [
      new AssetDetailPlugin({
        btn: "plus",
        icon: "zoom_in",
        run: (function(_this) {
          return function() {
            return _this.setZoom(_this.zoom + 0.05);
          };
        })(this)
      }), new AssetDetailPlugin({
        btn: "minus",
        icon: "zoom_out",
        run: (function(_this) {
          return function() {
            return _this.setZoom(_this.zoom - 0.05);
          };
        })(this)
      }), new AssetDetailPlugin({
        btn: "fit",
        icon: "resize_small",
        run: (function(_this) {
          return function() {
            return _this.fitZoom("fit");
          };
        })(this)
      }), new AssetDetailPlugin({
        btn: "fit-screen",
        icon: "resize_full",
        run: (function(_this) {
          return function() {
            return _this.fitZoom("fit-screen");
          };
        })(this)
      }), new AssetDetailPlugin({
        btn: "zoom_thumbs",
        label: "asset_detail.zoom_overview",
        run: (function(_this) {
          return function() {
            _this.setZoom(150 / _this.maxPageDim.width);
            return _this.lastPageScrollIntoView();
          };
        })(this)
      })
    ];
  };

  PagedViewer.prototype.fitScreen = function() {
    return this.fitZoom("fit");
  };

  PagedViewer.prototype.fitZoom = function(mode) {
    var extraSpace, zoom;
    extraSpace = (function(_this) {
      return function(dir) {
        var dim, dir1, dir2, i, k, len, ref, space;
        switch (dir) {
          case "width":
            dir = "Width";
            dir1 = "left";
            dir2 = "right";
            break;
          case "height":
            dir = "Height";
            dir1 = "top";
            dir2 = "bottom";
        }
        dim = CUI.DOM.getDimensions(_this.outerDiv2);
        space = dim["innerBox" + dir] - dim["client" + dir];
        if (_this.lastPage) {
          ref = ["margin-" + dir1, "margin-" + dir2, "border-" + dir1 + "-width", "border-" + dir2 + "-width", "padding-" + dir1, "padding-" + dir2];
          for (i = 0, len = ref.length; i < len; i++) {
            k = ref[i];
            space += _this.lastPage.cssInt(k);
          }
        }
        return space;
      };
    })(this);
    if ((this.fit.left > 0 && mode === "fit-screen") || (this.fit.top > 0 && mode === "fit")) {
      zoom = (this.viewport.width - extraSpace("width")) / this.maxPageDim.width;
    } else {
      zoom = (this.viewport.height - extraSpace("height")) / this.maxPageDim.height;
    }
    this.setZoom(zoom);
    return this.lastPageScrollIntoView();
  };

  return PagedViewer;

})(AssetDetail);
// Generated by CoffeeScript 1.10.0
var Asset;

Asset = (function() {
  function Asset(field, value1, values1, data1) {
    this.field = field;
    this.value = value1;
    this.values = values1 != null ? values1 : null;
    this.data = data1 != null ? data1 : null;
    assert(this.field instanceof EASColumn && (this.value === null || CUI.isPlainObject(this.value)) && (this.data === null || CUI.isPlainObject(this.data)), "new Asset()", "field, value need to be of type EASColumn and PlainObject (or null), respectivly", {
      field: this.field,
      value: this.value,
      data: this.data
    });
  }

  Asset.prototype.getImgElement = function(onUpdate, version, opts) {
    var node, ref;
    if (onUpdate == null) {
      onUpdate = null;
    }
    if (version == null) {
      version = null;
    }
    if (opts == null) {
      opts = {};
    }
    if (version === null && ((ref = this.value) != null ? ref._id : void 0)) {
      version = Asset.getStandardVersionName(this.value);
    }
    node = this.field.getImgElementForValue(this.value, version, onUpdate, opts).addClass("asset-instance");
    DOM.data(node[0], "asset", this);
    return node;
  };

  Asset.prototype.getTechnicalInfo = function(keys, values) {
    var i, idx, j, key, len, len1, ref, ref1, rows, table, value;
    if (keys == null) {
      keys = [];
    }
    if (values == null) {
      values = [];
    }
    ref = ["class_extension", "filesize", "original_filename", "date_created", "date_uploaded", "name", "_id", "eas_parent_id"];
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      if (isEmpty(this.value[key])) {
        continue;
      }
      keys.push(key);
      values.push(this.value[key]);
    }
    if (this.value.technical_metadata) {
      ref1 = this.value.technical_metadata;
      for (key in ref1) {
        value = ref1[key];
        keys.push(key);
        values.push(value);
      }
    }
    rows = [];
    for (idx = j = 0, len1 = keys.length; j < len1; idx = ++j) {
      key = keys[idx];
      rows.push({
        key: key,
        value: values[idx]
      });
    }
    table = new CUI.Table({
      "class": "ez5-asset-technical-info",
      key_value: true,
      rows: rows
    });
    return table;
  };

  Asset.prototype.getInfoTabs = function(include_flyout) {
    var cs, tabs;
    if (include_flyout == null) {
      include_flyout = false;
    }
    cs = new AssetCloudsight({
      asset: this
    });
    tabs = new Tabs({
      appearance: "mini",
      header_right: (function(_this) {
        return function() {
          var tools;
          if (!include_flyout) {
            return;
          }
          tools = _this.getCurrentTools();
          return Toolbox.getFlyoutButtonbar(tools);
        };
      })(this),
      tabs: [
        {
          text: $$("asset.info.tab.general"),
          content: (function(_this) {
            return function() {
              return _this.getTechnicalInfo();
            };
          })(this)
        }, {
          text: $$("asset.info.tab.extended"),
          load_on_show: true,
          "class": 'ez5-asset-metadata-browser',
          content: (function(_this) {
            return function(tab) {
              var browser;
              browser = new MetadataBrowser({
                element: $div()
              });
              browser.load(_this.getId()).done(function() {
                return browser.appendMarkup(tab.DOM);
              }).fail(function() {
                return tab.append(new EmptyLabel({
                  text: $$("metadata.browser.eas_not_found")
                }));
              });
              return false;
            };
          })(this)
        }, cs.getTab()
      ]
    });
    return tabs;
  };

  Asset.getVideoVersions = function(asset) {
    var i, len, ref, ref1, ref2, version, versions;
    versions = [];
    ref = Asset.getDoneVersions(asset);
    for (i = 0, len = ref.length; i < len; i++) {
      version = ref[i];
      if ((ref1 = version["class"]) !== "video") {
        continue;
      }
      if ((ref2 = version.extension) !== "mp4") {
        continue;
      }
      if (version.version === "original" && !isTrue(ez5.session.getClientDefault("video_player_use_original"))) {
        continue;
      }
      versions.push(version);
    }
    return versions;
  };

  Asset.getAudioVersions = function(asset) {
    var i, len, ref, ref1, ref2, version, versions;
    versions = [];
    ref = Asset.getDoneVersions(asset);
    for (i = 0, len = ref.length; i < len; i++) {
      version = ref[i];
      if ((ref1 = version["class"]) !== "audio" && ref1 !== "video") {
        continue;
      }
      if ((ref2 = version.extension) !== "mp4" && ref2 !== "mp3" && ref2 !== "m4a") {
        continue;
      }
      if (version.version === "original" && !isTrue(ez5.session.getClientDefault("audio_player_use_original"))) {
        continue;
      }
      versions.push(version);
    }
    return versions;
  };

  Asset.prototype.getButtonDownloadOriginal = function(loca_key, force) {
    var original, original_download_url, ref, ref1;
    if (loca_key == null) {
      loca_key = "asset.download_original";
    }
    if (force == null) {
      force = false;
    }
    original = (ref = this.value) != null ? (ref1 = ref.versions) != null ? ref1.original : void 0 : void 0;
    if (!(original != null ? original._download_allowed : void 0) && !force) {
      return;
    }
    original_download_url = original.download_url;
    if (!original_download_url) {
      return;
    }
    return new LocaButtonHref({
      loca_key: loca_key,
      download: true,
      href: original_download_url
    });
  };

  Asset.prototype.getImgElementByIdx = function(idx, version) {
    if (version == null) {
      version = null;
    }
    if (version === null && this.value) {
      version = Asset.getStandardVersionName(this.value);
    }
    return DOM.data(this.field.getImgElementForValue(this.values[idx], version).addClass("asset-instance")[0], "asset", this);
  };

  Asset.prototype.getField = function() {
    return this.field;
  };

  Asset.prototype.getValue = function(value) {
    return this.value;
  };

  Asset.prototype.getId = function() {
    return this.value._id;
  };

  Asset.prototype.setValue = function(value) {
    return this.value = value;
  };

  Asset.prototype.getWidth = function() {
    return this.value.technical_metadata.width;
  };

  Asset.prototype.getHeight = function() {
    return this.value.technical_metadata.height;
  };

  Asset.prototype.getStatus = function() {
    var original, ref, ref1, ref2;
    original = (ref = this.value) != null ? (ref1 = ref.versions) != null ? ref1.original : void 0 : void 0;
    if (!original) {
      if ((ref2 = this.value) != null ? ref2.technical_metadata : void 0) {
        return "done";
      } else {
        return "original_not_found";
      }
    } else {
      return original.status;
    }
  };

  Asset.prototype.getDownloadTools = function() {
    var cls, fn, i, label, len, tools, v, version, versions;
    cls = this.value["class"];
    versions = Asset.getExportVersionNamesForClass(cls);
    tools = [];
    fn = (function(_this) {
      return function(version) {
        return tools.push(new ToolboxTool({
          name: "asset.download." + cls + "." + v,
          loca_key: "tool.asset.download." + cls + "." + v,
          loca_key_attrs: [label],
          run: function() {
            var url;
            url = version.url.replace("-inline", "");
            return document.location.href = ez5.getAbsoluteURL(url);
          }
        }));
      };
    })(this);
    for (i = 0, len = versions.length; i < len; i++) {
      v = versions[i];
      version = this.value.versions[v];
      if (!version) {
        continue;
      }
      label = Asset.getLabelForVersion(version);
      fn(version);
    }
    return tools;
  };

  Asset.prototype.getCurrentTools = function() {
    var download_btn, tools, versions_button;
    tools = [];
    tools.push(new ToolboxTool({
      name: "asset.share",
      loca_key: "asset.share_url_button",
      run: (function(_this) {
        return function() {
          return _this.showShareUrl2();
        };
      })(this)
    }));
    download_btn = this.getButtonDownloadOriginal();
    if (download_btn) {
      tools.push(new ToolboxToolButton({
        favorite: this.getButtonDownloadOriginal("asset.download.original.favorite"),
        button: download_btn
      }));
    }
    versions_button = this.getAssetVersionsButton();
    if (versions_button) {
      tools.push(new ToolboxToolButton({
        button: versions_button
      }));
    }
    return tools;
  };

  Asset.prototype.getAssetVersionsButton = function() {
    if (!this.values) {
      return;
    }
    return new LocaButton({
      loca_key: "eas.column.button.manage_versions",
      onClick: (function(_this) {
        return function() {
          var data;
          data = {};
          data[_this.field.name()] = _this.values;
          console.error("asset versions:", _this, data, _this.field, _this.values);
          return new AssetVersions({
            field: _this.field,
            mode: "detail",
            data: data
          });
        };
      })(this)
    });
  };

  Asset.prototype.getToolShareUrl = function() {
    return new ToolboxTool({
      group: "asset",
      name: "asset.share_url",
      run: (function(_this) {
        return function() {
          return _this.showShareUrl();
        };
      })(this)
    });
  };

  Asset.prototype.getButtonShareUrl = function() {
    if (!ez5.session.hasSystemRight("root", "frontend_features[deep_link_sharing]")) {
      return null;
    }
    return new LocaButton({
      loca_key: "asset.share_url_button",
      onClick: (function(_this) {
        return function() {
          return _this.showShareUrl2();
        };
      })(this)
    });
  };

  Asset.prototype.showShareUrl2 = function() {
    var add_versions_from_deeplink, add_versions_local, ref, show_modal_dialog, versions;
    versions = {};
    add_versions_from_deeplink = (function(_this) {
      return function(mask) {
        var arr, object_url;
        if (mask == null) {
          mask = null;
        }
        arr = ["", "uuid", _this.data._uuid];
        if (mask) {
          arr.push("mask");
          arr.push(mask);
        }
        object_url = arr.join("/");
        return ez5.api.objects({
          api: object_url,
          handle_error: function(xhr) {
            var ref, ref1;
            if ((ref = xhr != null ? (ref1 = xhr.responseJSON) != null ? ref1.code : void 0 : void 0) === "error.user.objects_not_allowed" || ref === "error.user.object_not_found") {
              return true;
            }
          },
          add_token: false
        }).done(function(data) {
          var asset, i, j, len, len1, ref, ref1, ro, version;
          ro = new ResultObject();
          ro.setData(data);
          console.debug("objects API returned", data, ro);
          ref = ro.getAssetsForBrowser("all");
          for (i = 0, len = ref.length; i < len; i++) {
            asset = ref[i];
            if (asset.getId() !== _this.getId()) {
              continue;
            }
            console.error("MATCH!", _this.getId());
            ref1 = Asset.getDownloadVersions(asset.getValue());
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              version = ref1[j];
              if (versions[version.version]) {
                CUI.mergeMap(versions[version.version], version);
                continue;
              }
              versions[version.version] = version;
            }
          }
        });
      };
    })(this);
    add_versions_local = (function(_this) {
      return function() {
        var i, len, ref, version;
        ref = Asset.getDownloadVersions(_this.getValue());
        for (i = 0, len = ref.length; i < len; i++) {
          version = ref[i];
          if (!versions[version.version]) {
            versions[version.version] = version;
          } else {
            CUI.mergeMap(versions[version.version], version);
          }
        }
      };
    })(this);
    show_modal_dialog = (function(_this) {
      return function() {
        var col, cols, hint, hintLabel, i, j, len, len1, mod, ref, ref1, row, rows, table, url, version, vname, vnames;
        console.error("versions found:", versions);
        vnames = Asset.getVersionNamesForClass(_this.getValue()["class"]);
        rows = [];
        for (i = 0, len = vnames.length; i < len; i++) {
          vname = vnames[i];
          version = versions[vname];
          if (!version) {
            continue;
          }
          if (version["class"] === "directory") {
            continue;
          }
          row = {
            version: vname,
            filename: _this.getValue().original_filename_basename,
            print: Asset.getPrintSizeForVersion(version["class"], vname),
            width: version.width || "",
            height: version.height || "",
            format: version.extension,
            filesize: ez5.format_filesize(version.filesize)
          };
          url = version.download_url || version.url || version.deep_link_url;
          if (version.deep_link_url) {
            row.url = new Input({
              name: "url",
              readonly: true,
              data: {
                url: ez5.getAbsoluteURL(version.deep_link_url)
              }
            }).start();
          } else {
            row.url = new EmptyLabel({
              text: $$("asset.share.url_not_available")
            });
          }
          rows.push(row);
        }
        cols = [];
        ref = ["print", "url", "format", "filesize", "width", "height"];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          col = ref[j];
          if (col === "url" && !((ref1 = _this.data) != null ? ref1._uuid : void 0)) {
            continue;
          }
          cols.push({
            name: col,
            text: $$("asset.share.column." + col)
          });
        }
        table = new CUI.Table({
          "class": "ez5-asset-share-url-form",
          columns: cols,
          rows: rows
        });
        hint = $div('cui-form-hint ez5-asset-share-hint');
        hintLabel = new Label({
          multiline: true,
          markdown: true,
          text: $$("asset.share.hint")
        });
        hint.append(hintLabel);
        CUI.debug(dump(rows));
        return mod = new Modal({
          "class": "ez5-asset-share-url-modal",
          cancel: true,
          pane: {
            header_left: new Label({
              text: $$("asset.share_url_modal.title")
            }),
            content: [table, hint],
            footer_right: {
              text: $$("base.done"),
              onClick: function() {
                return mod.destroy();
              }
            }
          }
        }).show();
      };
    })(this);
    if ((ref = this.data) != null ? ref._uuid : void 0) {
      add_versions_from_deeplink().always((function(_this) {
        return function() {
          return add_versions_from_deeplink(_this.data._mask).always(function() {
            add_versions_local();
            return show_modal_dialog();
          });
        };
      })(this));
    } else {
      add_versions_local();
      show_modal_dialog();
    }
  };

  Asset.prototype.renderDetailOutput = function(opts) {
    var hl, img_el;
    if (opts == null) {
      opts = {};
    }
    if (opts.for_print) {
      img_el = this.getImgElement(null, null, {
        for_print: true
      });
    } else {
      img_el = this.getImgElement();
    }
    return hl = new HorizontalLayout({
      maximize_horizontal: true,
      maximize_vertical: true,
      "class": "ez5-eas-column-detail-output " + (opts["class"] || ""),
      left: {
        content: img_el
      },
      center: {
        content: this.getSummary()
      },
      right: opts.right
    });
  };

  Asset.prototype.getSummary = function() {
    return Asset.getSummary(this.getValue());
  };

  Asset.prototype.showShareUrl = function() {
    return ez5.api.eas({
      type: "GET",
      data: {
        ids: JSON.stringify([this.value._id]),
        format: "short"
      }
    }).done((function(_this) {
      return function(_data) {
        var data, form, i, len, mod, rows, value, version, versions, vname;
        value = _data[_this.value._id];
        versions = Asset.getVersionNamesForClass(value["class"]);
        rows = [];
        CUI.debug("showShareUrl", value, versions);
        for (i = 0, len = versions.length; i < len; i++) {
          vname = versions[i];
          version = value.versions[vname];
          if (!version || version._not_allowed) {
            continue;
          }
          rows.push({
            version: vname,
            print: Asset.getPrintSizeForVersion(value["class"], vname),
            width: version.width,
            height: version.height,
            format: version.extension,
            filesize: version.filesize,
            url: ez5.getAbsoluteURL(version.url),
            status: version.status
          });
        }
        data = {
          urls: rows
        };
        form = new Form({
          "class": "ez5-asset-share-url-form",
          fields: [
            {
              type: DataTable,
              data: data,
              new_rows: "none",
              maximize: false,
              name: "urls",
              fields: [
                {
                  type: Output,
                  name: "print"
                }, {
                  type: Input,
                  "class": "cui-input-break-all",
                  content_size: true,
                  textarea: true,
                  readonly: true,
                  name: "url"
                }, {
                  type: Output,
                  name: "format"
                }, {
                  type: Output,
                  name: "filesize",
                  getValue: function(v) {
                    return ez5.format_filesize(v);
                  }
                }, {
                  type: Output,
                  name: "width"
                }, {
                  type: Output,
                  name: "height"
                }, {
                  type: Output,
                  name: "status"
                }
              ]
            }
          ]
        }).start();
        CUI.debug(dump(rows));
        return mod = new Modal({
          "class": "ez5-asset-share-url-modal",
          cancel: true,
          pane: {
            content: form,
            header_left: new Label({
              text: $$("asset.share_url_modal.title")
            }),
            footer_right: {
              text: $$("base.done"),
              onClick: function() {
                return mod.destroy();
              }
            }
          }
        }).show();
      };
    })(this));
  };

  Asset.getDoneVersions = function(value, for_download, ignore_rights) {
    var ref, version, versions, vname;
    if (for_download == null) {
      for_download = false;
    }
    if (ignore_rights == null) {
      ignore_rights = false;
    }
    versions = [];
    if (!(value != null ? value.versions : void 0)) {
      return versions;
    }
    ref = value.versions;
    for (vname in ref) {
      version = ref[vname];
      if ((!ignore_rights && version._not_allowed) || version.status !== "done") {
        continue;
      }
      if (for_download && !version._download_allowed && !ignore_rights) {
        continue;
      }
      version.version = vname;
      versions.push(version);
    }
    return versions;
  };

  Asset.getDownloadVersions = function(value, ignore_rights) {
    if (ignore_rights == null) {
      ignore_rights = false;
    }
    return this.getDoneVersions(value, true, ignore_rights);
  };

  Asset.getLabelForVersion = function(version) {
    switch (version["class"]) {
      case "image":
        return "[" + version.extension + ", " + version.width + "x" + version.height + ", " + (ez5.format_filesize(version.filesize)) + "]";
      default:
        return "[" + version.extension + ", " + (ez5.format_filesize(version.filesize)) + "]";
    }
  };

  Asset.getPrintSizeForVersion = function(cls, version, include_cls_name) {
    var def, i, info, len, ref, ref1;
    if (include_cls_name == null) {
      include_cls_name = false;
    }
    if (version === "original") {
      return $$("asset.original");
    }
    info = (ref = ez5.session.getEASConfig()) != null ? ref[cls] : void 0;
    if (info != null ? info.versions : void 0) {
      ref1 = info.versions;
      for (i = 0, len = ref1.length; i < len; i++) {
        def = ref1[i];
        if (def.version === version) {
          if (include_cls_name) {
            return $$("server.eas.fileclass." + cls) + " " + def.size_print;
          } else {
            return def.size_print;
          }
        }
      }
    }
    return null;
  };

  Asset.fileclasses = function() {
    var classes, cls, def, eas_config;
    eas_config = ez5.session.getEASConfig();
    assert(eas_config, "Asset.fileclasses", "ez5.session.getEASConfig: no config found.");
    classes = [];
    for (cls in eas_config) {
      def = eas_config[cls];
      classes.push(cls);
    }
    classes.sort((function(_this) {
      return function(a, b) {
        var a_txt, b_txt;
        a_txt = $$("server.eas.fileclass." + a);
        b_txt = $$("server.eas.fileclass." + b);
        return compareIndex(a_txt, b_txt);
      };
    })(this));
    return classes;
  };

  Asset.getExportVersionGroups = function() {
    var cls, def, groups, i, info, len, ref, ref1;
    groups = {};
    ref = ez5.session.getEASConfig();
    for (cls in ref) {
      info = ref[cls];
      ref1 = info.versions;
      for (i = 0, len = ref1.length; i < len; i++) {
        def = ref1[i];
        if (def["export"] && def.group) {
          def.__cls = cls;
          def.__full_version = cls + "." + def.version;
          if (!groups[def.group]) {
            groups[def.group] = [];
          }
          groups[def.group].push(def);
        }
      }
    }
    return groups;
  };

  Asset.getVersionNamesForClass = function(cls, include_original, filter) {
    var def, i, info, len, names, ref, ref1, versions;
    if (include_original == null) {
      include_original = true;
    }
    if (filter == null) {
      filter = function() {
        return true;
      };
    }
    names = [];
    if (include_original) {
      names.push("original");
    }
    info = (ref = ez5.session.getEASConfig()) != null ? ref[cls] : void 0;
    if (!info) {
      return [];
    }
    if (info.versions) {
      versions = info.versions.slice(0);
      versions.sort(function(a, b) {
        var size_a, size_b;
        size_a = a.size_limit || 1000000;
        size_b = b.size_limit || 1000000;
        return compareIndex(size_a, size_b);
      });
      ref1 = info.versions;
      for (i = 0, len = ref1.length; i < len; i++) {
        def = ref1[i];
        if (!filter(def)) {
          continue;
        }
        names.push(def.version);
      }
    }
    return names;
  };

  Asset.getStandardVersion = function(value) {
    var i, len, ref, v, version;
    if (CUI.isArray(value)) {
      for (i = 0, len = value.length; i < len; i++) {
        v = value[i];
        if (v.preferred) {
          return Asset.getStandardVersion(v);
        }
      }
      return null;
    } else {
      version = (ref = value.versions) != null ? ref[this.getStandardVersionName(value)] : void 0;
      if (!version || version._not_allowed) {
        return null;
      } else {
        return version;
      }
    }
  };

  Asset.getStandardVersionName = function(value) {
    var i, len, version, vname, vnames;
    assert((value != null ? value._id : void 0) > 0, "Asset.getStandardVersionName", "value needs to be a valid asset value containing at least ._id", {
      value: value
    });
    vnames = this.getVersionNamesForClass(value["class"], false, function(def) {
      return !!def.standard;
    });
    vnames.reverse();
    if (vnames === null || vnames.length === 0) {
      return null;
    }
    if (vnames.length > 1 && value.versions) {
      for (i = 0, len = vnames.length; i < len; i++) {
        vname = vnames[i];
        version = value.versions[vname];
        if (version && !version._not_allowed) {
          return vname;
        }
      }
    }
    return vnames[0];
  };

  Asset.getExportVersionNamesForClass = function(cls, include_original) {
    if (include_original == null) {
      include_original = true;
    }
    return this.getVersionNamesForClass(cls, include_original, function(def) {
      return !!def["export"];
    });
  };

  Asset.getBestImageForViewport = function(asset, viewport_w, viewport_h, filter_callback) {
    var all_versions, best_version, i, idx, len, max_filesize, ref, ref1, sort_by_size, v, vname;
    sort_by_size = function(a, b) {
      return compareIndex(a.width, b.width);
    };
    all_versions = [];
    max_filesize = getInt(ez5.session.getClientDefault("asset_browser_max_preview_filesize"));
    if (asset.value._error || !asset.value.versions) {
      return;
    }
    if (!filter_callback) {
      filter_callback = (function(_this) {
        return function() {
          if (v.ratio === -1) {
            return false;
          }
          if (vname === "original") {
            if (isNull(max_filesize) || max_filesize === -1) {
              return false;
            }
            if (asset.value.technical_metadata.server_auto_rotated_90 || asset.value.technical_metadata.orientation > 1) {
              return false;
            }
          }
          if (max_filesize > 0 && v.filesize > max_filesize) {
            console.info("Cannot deliver version \"" + vname + "\", filesize exceeds maximum filesize:", max_filesize, "version:", v);
            return false;
          }
        };
      })(this);
    }
    ref = asset.value.versions;
    for (vname in ref) {
      v = ref[vname];
      if (v["class"] !== "image" || v.status !== "done" || ((ref1 = v.extension) !== "jpg" && ref1 !== "png" && ref1 !== "gif")) {
        continue;
      }
      if (v._not_allowed) {
        continue;
      }
      if (filter_callback(v) === false) {
        continue;
      }
      v.version = vname;
      all_versions.push(v);
    }
    if (!all_versions.length) {
      return;
    }
    all_versions.sort(sort_by_size);
    for (idx = i = 0, len = all_versions.length; i < len; idx = ++i) {
      v = all_versions[idx];
      best_version = v;
      if (v.width > viewport_w && v.height > viewport_h) {
        break;
      }
    }
    return best_version;
  };

  Asset.getSummary = function(value) {
    var asset_info, i, j, key, len, len1, original_filename, part, ref, ref1, summary, summary_items, v;
    if (!value) {
      return;
    }
    summary = CUI.DOM.element("DIV", {
      "class": "ez5-asset-summary"
    });
    original_filename = ez5.basename(value.original_filename);
    if (!isEmpty(original_filename)) {
      CUI.DOM.append(summary, new Label({
        "class": "ez5-asset-summary-filename",
        text: original_filename.trim()
      }));
    }
    summary_items = CUI.DOM.element("DIV", {
      "class": "ez5-asset-summary-items"
    });
    if (value != null ? value.compiled : void 0) {
      asset_info = value.compiled;
    } else {
      asset_info = "";
    }
    ref = asset_info.split(",");
    for (i = 0, len = ref.length; i < len; i++) {
      part = ref[i];
      if (isEmpty(part.trim())) {
        continue;
      }
      CUI.DOM.append(summary_items, new Label({
        "class": "ez5-asset-summary-item",
        text: part.trim()
      }));
    }
    if (value.technical_metadata) {
      ref1 = ["dpi", "colorprofile", "camera_scanner"];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        key = ref1[j];
        v = value.technical_metadata[key];
        if (isEmpty(v)) {
          continue;
        }
        CUI.DOM.append(summary_items, new Label({
          "class": "ez5-asset-summary-item",
          text: $$("asset.summary." + key, {
            value: v
          })
        }));
      }
    }
    CUI.DOM.append(summary, summary_items);
    return summary;
  };

  return Asset;

})();
// Generated by CoffeeScript 1.10.0
var AssetCloudsight,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AssetCloudsight = (function(superClass) {
  extend(AssetCloudsight, superClass);

  function AssetCloudsight() {
    return AssetCloudsight.__super__.constructor.apply(this, arguments);
  }

  AssetCloudsight.prototype.initOpts = function() {
    AssetCloudsight.__super__.initOpts.call(this);
    return this.addOpts({
      asset: {
        mandatory: true,
        check: function(v) {
          return v instanceof Asset;
        }
      }
    });
  };

  AssetCloudsight.prototype.readOpts = function() {
    var base;
    AssetCloudsight.__super__.readOpts.call(this);
    this.__config = ez5.session.getBaseConfig().system.cloudsight || {};
    if ((base = this.__config).url == null) {
      base.url = "https://api.cloudsightapi.com";
    }
    this.__log = [];
    this.__version = Asset.getBestImageForViewport(this._asset, 1000, 1000, function(v) {
      var ref;
      if (((ref = v.extension) === "jpg" || ref === "png") && v.download_url) {
        return true;
      }
      return false;
    });
    if (this.__version) {
      this.__filename = ez5.session.getInstance().name + "-" + this._asset.value._id + "." + this.__version.extension;
    }
    return this;
  };

  AssetCloudsight.prototype.getTab = function() {
    if (!(this.__config.active && this.__config.api_key)) {
      return null;
    }
    return {
      text: $$("asset.cloudsight.tab.title"),
      load_on_show: true,
      content: (function(_this) {
        return function(tab) {
          return _this.getTabContent(tab);
        };
      })(this)
    };
  };

  AssetCloudsight.prototype.__logAppend = function() {
    var arg, args, i, len, time;
    args = [];
    time = ez5.format_date_and_time(moment(), true) + ": ";
    for (i = 0, len = arguments.length; i < len; i++) {
      arg = arguments[i];
      if (isEmpty(arg)) {
        continue;
      }
      args.push(time + arg);
    }
    if (args.length > 0) {
      this.__log.push(args.join(" "));
    }
    return this;
  };

  AssetCloudsight.prototype.getTabContent = function(__tab) {
    this.__tab = __tab;
    this.__startOverBtn = new LocaButton({
      loca_key: "asset.cloudsight.button.start_over",
      hidden: true,
      onClick: (function(_this) {
        return function() {
          _this.__clearStore();
          return _this.__start();
        };
      })(this)
    });
    this.__pane = new SimplePane({
      "class": "ez5-asset-cloudsight",
      footer_right: [
        {
          loca_key: "asset.cloudsight.button.show_log",
          onClick: (function(_this) {
            return function() {
              return _this.__showProtocol();
            };
          })(this)
        }
      ],
      footer_left: [this.__startOverBtn]
    });
    if (!this.__version) {
      this.__showError("asset.cloudsight.error.format_not_supported");
      this.__store({});
    } else {
      CUI.setTimeout({
        call: (function(_this) {
          return function() {
            return _this.__start();
          };
        })(this)
      });
    }
    return this.__pane;
  };

  AssetCloudsight.prototype.__showProtocol = function() {
    return CUI.alert({
      text: this.__log.join("\n")
    });
  };

  AssetCloudsight.prototype.__showError = function(loca_key, err) {
    this.__logAppend("Error:", $$(loca_key + "|text"), err);
    return this.__showLabel(loca_key);
  };

  AssetCloudsight.prototype.__showLabel = function(loca_key, loca_key_attrs) {
    var lbl;
    lbl = {
      multiline: true,
      markdown: true,
      centered: true,
      loca_key: loca_key,
      loca_key_attrs: loca_key_attrs
    };
    this.__pane.replace(new LocaLabel(lbl));
    return this;
  };

  AssetCloudsight.prototype.__getStore = function() {
    return CUI.getSessionStorage("asset-cloudsight") || {};
  };

  AssetCloudsight.prototype.__start = function() {
    var status, store;
    store = this.__getStore();
    status = store[this.__filename];
    if (status) {
      this.__log = status.log;
      this.__showStatus(status.response);
      this.__checkResponse(status.response);
      return this;
    }
    this.__get().progress((function(_this) {
      return function(type, loaded, total, percent) {
        return _this.__showLabel("asset.cloudsight.status.loading", {
          percent: percent + ""
        });
      };
    })(this)).fail((function(_this) {
      return function(err) {
        _this.__showError("asset.cloudsight.error.request_error", err);
        return _this.__store();
      };
    })(this)).done((function(_this) {
      return function(blob) {
        return _this.__post(blob);
      };
    })(this));
    return this;
  };

  AssetCloudsight.prototype.__post = function(blob) {
    var form_data, xhr2;
    this.__logAppend("Uploading:", this.__filename);
    form_data = new FormData();
    form_data.append("image_request[image]", new File([blob], this.__filename));
    form_data.append("image_request[locale]", ez5.loca.getLanguage());
    form_data.append("image_request[language]", ez5.loca.getLanguage());
    xhr2 = new CUI.XHR({
      method: "POST",
      headers: {
        Authorization: "CloudSight " + this.__config.api_key
      },
      url: this.__config.url + "/image_requests",
      body: form_data
    });
    return xhr2.start().fail((function(_this) {
      return function() {
        _this.__showError("asset.cloudsight.error.request_error", err);
        return _this.__store();
      };
    })(this)).progress((function(_this) {
      return function(type, loaded, total, percent) {
        return _this.__showLabel("asset.cloudsight.status.uploading", {
          percent: percent + ""
        });
      };
    })(this)).done((function(_this) {
      return function(data) {
        _this.__logResponse(data);
        _this.__store(data);
        _this.__showStatus(data);
        return _this.__checkResponse(data);
      };
    })(this));
  };

  AssetCloudsight.prototype.__get = function() {
    var xhr;
    this.__logAppend("Loading from Server:", this.__filename);
    xhr = new CUI.XHR({
      method: "GET",
      url: this.__version.url,
      responseType: "blob"
    });
    return xhr.start();
  };

  AssetCloudsight.prototype.__poll = function(data) {
    var xhr3;
    xhr3 = new CUI.XHR({
      method: "GET",
      headers: {
        Authorization: "CloudSight " + this.__config.api_key
      },
      url: this.__config.url + "/image_responses/" + data.token
    });
    return xhr3.start().fail((function(_this) {
      return function(err) {
        _this.__showError("asset.cloudsight.error.request_error", err);
        return _this.__store();
      };
    })(this)).done((function(_this) {
      return function(data) {
        _this.__logResponse(data);
        _this.__store(data);
        _this.__showStatus(data);
        return _this.__checkResponse(data);
      };
    })(this));
  };

  AssetCloudsight.prototype.__logResponse = function(data) {
    switch (data.status) {
      case "completed":
        this.__logAppend("token:", data.token, "name:", data.name);
        break;
      case "skipped":
        this.__logAppend("token:", data.token, "status:", data.status, "reason:", data.reason);
        break;
      default:
        this.__logAppend("token:", data.token, "status:", data.status);
    }
    return this;
  };

  AssetCloudsight.prototype.__showStatus = function(data) {
    switch (data.status) {
      case "completed":
        this.__showLabel("asset.cloudsight.status.completed", {
          name: data.name
        });
        this.__startOverBtn.show();
        break;
      case "not completed":
        this.__showLabel("asset.cloudsight.status.processing");
        this.__startOverBtn.hide();
        break;
      default:
        this.__pane.replace(new Label({
          multiline: true,
          text: this.__log.join("\n")
        }));
        this.__startOverBtn.show();
    }
    return this;
  };

  AssetCloudsight.prototype.__checkResponse = function(data) {
    switch (data.status) {
      case "not completed":
        CUI.setTimeout({
          ms: 1000,
          call: (function(_this) {
            return function() {
              return _this.__poll(data);
            };
          })(this)
        });
    }
  };

  AssetCloudsight.prototype.__clearStore = function() {
    this.__log = [];
    return this.__store(false);
  };

  AssetCloudsight.prototype.__store = function(data) {
    var store;
    if (data == null) {
      data = {};
    }
    store = this.__getStore();
    if (!data) {
      delete store[this.__filename];
    } else {
      console.debug("storing", this.__filename, data);
      store[this.__filename] = {
        response: data,
        log: this.__log
      };
    }
    CUI.setSessionStorage("asset-cloudsight", store);
    return this;
  };

  return AssetCloudsight;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var AssetPlain,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AssetPlain = (function(superClass) {
  extend(AssetPlain, superClass);

  function AssetPlain(opts) {
    var _opts;
    if (opts == null) {
      opts = {};
    }
    _opts = copyObject(opts, true);
    assert(!_opts.hasOwnProperty("default"), "new AssetPlain", "opts.default is not supported for AssetPlain.");
    delete _opts.value;
    AssetPlain.__super__.constructor.call(this, new EASField(_opts), opts.value);
  }

  AssetPlain.prototype.getImgElement = function(onUpdate, version, opts) {
    var img_el;
    if (onUpdate == null) {
      onUpdate = null;
    }
    if (version == null) {
      version = null;
    }
    if (opts == null) {
      opts = {};
    }
    img_el = AssetPlain.__super__.getImgElement.call(this, onUpdate, version, opts);
    img_el.setAttribute("data-ez5-asset-class", this.value["class"]);
    img_el.setAttribute("data-ez5-asset-extension", this.value.extension);
    return img_el;
  };

  return AssetPlain;

})(Asset);
// Generated by CoffeeScript 1.10.0
var AssetBrowser,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AssetBrowser = (function(superClass) {
  extend(AssetBrowser, superClass);

  function AssetBrowser(opts) {
    var a, el, fn, i, idx, j, len, len1, ref, ref1, start_first_tool, tool;
    this.opts = opts != null ? opts : {};
    AssetBrowser.__super__.constructor.call(this, this.opts);
    this.current_idx = null;
    this.__activeTools = [];
    if (this._hires) {
      this.browser = new Template({
        name: "asset-browser-hires",
        map: {
          assets: true,
          navi: true,
          array_label: true
        }
      });
    } else {
      this.browser = new Template({
        name: "asset-browser",
        map: {
          assets: true
        }
      });
    }
    if (this._hires) {
      this.browser.addClass("ez5-asset-browser-hires");
    }
    this.registerTemplate(this.browser);
    this.browser.DOM.attr("ez5-asset-browser-number-of-assets", this._assets.length);
    this.__pollIds = [];
    switch (this._assets.length) {
      case 0:
        this.browser.DOM.addClass("ez5-asset-browser--no-asset");
        this.browser.append(new EmptyLabel({
          centered: true,
          text: $$("asset_browser.no_assets")
        }, "assets"));
        return;
      case 1:
        this.browser.DOM.addClass("ez5-asset-browser--one-asset");
        break;
      default:
        this.browser.DOM.addClass("ez5-asset-browser--multiple-assets");
    }
    if (this._hires) {
      this.tools = [
        new AudioPlayer({
          element: this.browser.map.assets
        }), new VideoPlayer({
          element: this.browser.map.assets
        }), new Zoomer({
          element: this.browser.map.assets
        }), new ez5.defaults["class"].WebDVDPlayer({
          element: this.browser.map.assets
        }), new PagedViewer({
          element: this.browser.map.assets
        })
      ];
      if (this._resultObject) {
        this.tools.push(new DetailInfo({
          element: this.browser.map.assets,
          resultObject: this._resultObject
        }));
      }
    } else {
      this.tools = [];
    }
    this.activeTool = null;
    ref = this._assets;
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      a = ref[idx];
      assert(a instanceof Asset, "new AssetBrowser", "opts.assets[" + idx + "] is not instance of Asset.", {
        opts: this.opts
      });
      this.browser.append(el = this.getAssetContainer(a, idx), "assets");
      if (idx === 0) {
        this.firstAsset = el;
      }
    }
    if (this._assets.length > 1 && this._hires) {
      this.appendNaviButtons();
    }
    this.setIdx(this._start_idx || 0);
    if (this.tools.length) {
      ref1 = this.tools;
      fn = (function(_this) {
        return function(tool) {
          return tool.registerPlugin(new AssetDetailPlugin({
            destroy: function() {
              return _this.activeTool = null;
            },
            start: function() {
              return _this.activeTool = tool;
            }
          }));
        };
      })(this);
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        tool = ref1[j];
        fn(tool);
      }
      start_first_tool = (function(_this) {
        return function(ev) {
          var asset, k, len2, ref2, t;
          if (_this.activeTool) {
            return;
          }
          asset = _this._assets[_this.current_idx];
          ref2 = _this.getAvailableTools(asset);
          for (k = 0, len2 = ref2.length; k < len2; k++) {
            t = ref2[k];
            if (t.tool.startOnMousewheel()) {
              t.run(ev, true, t.tool._btn);
              ev.stopImmediatePropagation();
              ev.preventDefault();
              break;
            }
          }
        };
      })(this);
      Events.listen({
        node: this.browser,
        type: ["wheel", "gesturestart"],
        selector: ".ez-asset",
        call: (function(_this) {
          return function(ev) {
            if (ev.getType() === "gesturestart") {
              start_first_tool(ev);
            } else if (ev.wheelDeltaY() < 0) {
              start_first_tool(ev);
            }
          };
        })(this)
      });
      Events.listen({
        node: this.browser,
        type: "click",
        selector: ".ez-asset-class-icon",
        call: (function(_this) {
          return function(ev) {
            start_first_tool(ev);
          };
        })(this)
      });
    }
    Events.listen({
      type: "eas_update",
      node: this.browser,
      call: (function(_this) {
        return function(ev, info) {
          if (_this._hires && !_this._for_print) {
            _this.size_assets();
          }
          if (_this.getActiveTool() && info.asset === _this.getCurrentAsset()) {
            _this.getActiveTool().update(info.asset);
          }
        };
      })(this)
    });
    if (this._hires && !this._for_print) {
      DOM.setClassOnMousemove({
        element: this.DOM[0],
        ms: 1500,
        "class": "ez5-asset-browser-show-controls"
      });
      DOM.waitForDOMInsert({
        node: this.browser
      }).done((function(_this) {
        return function() {
          var ref2;
          _this.size_assets();
          Events.listen({
            type: "viewport-resize",
            node: _this.browser,
            call: function() {
              return _this.size_assets(true);
            }
          });
          if ((ref2 = _this._onInit) != null) {
            ref2.call(_this, _this);
          }
          return DOM.waitForDOMRemove({
            node: _this.browser
          }).done(function() {
            if (!_this.isDestroyed()) {
              return _this.destroy();
            }
          });
        };
      })(this));
    }
    Events.listen({
      type: "show-asset",
      node: this.browser,
      call: (function(_this) {
        return function(ev, info) {
          var k, l, len2, len3, ref2, ref3;
          if (info == null) {
            info = {};
          }
          if (info.asset) {
            ref2 = _this._assets;
            for (idx = k = 0, len2 = ref2.length; k < len2; idx = ++k) {
              a = ref2[idx];
              if (a === info.asset) {
                _this.setIdx(idx);
                return;
              }
            }
          } else if (info.value) {
            ref3 = _this._assets;
            for (idx = l = 0, len3 = ref3.length; l < len3; idx = ++l) {
              a = ref3[idx];
              if (a.value._id === info.value._id) {
                _this.setIdx(idx);
                return;
              }
            }
          }
          CUI.warn("AssetBrowser[easydbui-show-asset]: Asset not found", ev, info);
        };
      })(this)
    });
    Events.listen({
      type: ["toolbox", "toolbox-sink"],
      node: this.browser,
      call: (function(_this) {
        return function(ev, info) {
          var asset, detail_tools, k, len2, oinfo, ref2;
          if (info.__asset_browser_done) {
            return;
          }
          return;
          info.__asset_browser_done = true;
          oinfo = HashObjectInfo.getFromEvent(ev);
          CUI.debug("ev: ", _this.browser.DOM.attr("asset-browser-idx"), ev.getPhase(), ev.getTarget(), ev.getCurrentTarget(), ev, info, oinfo);
          if (oinfo.asset_browser_idx >= 0) {
            asset = _this._assets[oinfo.asset_browser_idx];
          } else if (ev.getType() === "toolbox-sink" && _this.current_idx !== null) {
            asset = _this._assets[_this.current_idx];
          } else {
            return;
          }
          assert(asset instanceof Asset, "AssetBrowser[toolbox]", "Asset not found", {
            oinfo: oinfo
          });
          detail_tools = [];
          ref2 = _this.getAvailableTools(asset);
          for (k = 0, len2 = ref2.length; k < len2; k++) {
            tool = ref2[k];
            detail_tools.push(new ToolboxTool({
              group: "asset",
              name: getObjectClass(tool.tool),
              run: tool.run,
              loca_key: tool.btn_loca_key
            }));
          }
          if (detail_tools.length > 0) {
            info.tools.push(new ToolboxTool({
              group: "asset",
              disabled: detail_tools.length === 0,
              name: "asset.tools",
              tools: detail_tools
            }));
          }
        };
      })(this)
    });
    return;
  }

  AssetBrowser.prototype.initOpts = function() {
    AssetBrowser.__super__.initOpts.call(this);
    return this.addOpts({
      assets: {
        check: function(v) {
          var a, i, len;
          if (!$.isArray(v)) {
            return false;
          }
          for (i = 0, len = v.length; i < len; i++) {
            a = v[i];
            if (!v instanceof Asset) {
              return false;
            }
          }
          return true;
        }
      },
      img_alt: {
        "default": null,
        check: String
      },
      start_idx: {
        "default": 0,
        check: function(v) {
          if (v >= 0) {
            return true;
          } else {
            return false;
          }
        }
      },
      hires: {
        "default": false,
        check: Boolean
      },
      for_print: {
        "default": false,
        check: Boolean
      },
      onInit: {
        check: Function
      },
      resultObject: {
        mandatory: false,
        check: ResultObject
      }
    });
  };

  AssetBrowser.prototype.getAssetContainer = function(asset, idx) {
    var tmpl;
    if (CUI.__ng__) {
      if (this._hires) {
        tmpl = new Template({
          name: "ng-asset-hires",
          map: {
            status: true,
            tools: true,
            element: true,
            preview_version: true,
            extension: true,
            filesize: true,
            info: true,
            tool: true,
            multiple_indicator: true
          }
        });
      } else {
        tmpl = new Template({
          name: "ng-asset",
          map: {
            element: true,
            extension: true,
            filesize: true,
            info: true,
            multiple_indicator: true
          }
        });
      }
      if (this._assets.length > 1) {
        tmpl.append(new Icon({
          icon: "svg-multiple"
        }), "multiple_indicator");
      }
    } else {
      tmpl = new Template({
        name: "asset",
        map: {
          status: true,
          tools: true,
          class_icon: true,
          element: true,
          preview_version: true,
          label: true,
          extension: true,
          filesize: true,
          info: true,
          tool: true
        }
      });
    }
    if (asset._tmpl) {
      asset._tmpl.destroy();
    }
    asset._tmpl = tmpl;
    tmpl.DOM.attr("asset-browser-idx", idx);
    this.updateImgElement(asset);
    asset.getElement = function() {
      return this._tmpl.DOM;
    };
    return tmpl.DOM;
  };

  AssetBrowser.prototype.updateImgElement = function(asset) {
    var _el, best_version, el, i, len, ref;
    if (this._for_print) {
      best_version = Asset.getBestImageForViewport(asset, 100000, 100000);
      if (!best_version) {
        el = new Label({
          text: $$("asset.browser.img_not_found")
        });
      } else {
        el = asset.getImgElement(null, best_version.version, {
          for_print: true
        });
      }
    } else {
      el = asset.getImgElement();
      if (this._img_alt) {
        ref = CUI.DOM.matchSelector(el, "img");
        for (i = 0, len = ref.length; i < len; i++) {
          _el = ref[i];
          _el.alt = this._img_alt;
        }
      }
    }
    asset._tmpl.replace(el, "element");
    return this.updateAssetInfo(asset);
  };

  AssetBrowser.prototype.updateAssetInfo = function(asset) {
    var $img_el, asset_extension_css_class, icon, icon_div, icons, more_info, pages, sec, tmpl, v;
    tmpl = asset._tmpl;
    v = asset.value;
    asset_extension_css_class = "asset-class-" + v["class"] + " asset-extension-" + v.extension;
    tmpl.addClass(asset_extension_css_class);
    if (!CUI.__ng__) {
      icons = {
        video: "play",
        audio: "audio",
        office: "file_text",
        "archive.webdvd.zip": "play",
        archive: "fa-file-archive-o",
        image: "camera"
      };
      icon = icons[v.class_extension] || icons[v["class"]];
      if (icon) {
        icon_div = new Icon({
          icon: icon
        }).DOM;
        tmpl.replace(icon_div, "class_icon");
      }
    }
    if (this._hires) {
      $img_el = $(CUI.DOM.matchSelector(tmpl.DOM, ".eas-image")[0]);
      tmpl.replace($text($img_el.attr("version")), "preview_version");
    }
    tmpl.replace($text(ez5.format_filesize(v.filesize)), "filesize");
    tmpl.replace($text(v.extension), "extension");
    if (!CUI.isEmptyObject(v.technical_metadata)) {
      switch (v["class"]) {
        case "image":
          more_info = Math.max(v.technical_metadata.width, v.technical_metadata.height) + "px";
          break;
        case "video":
        case "audio":
          if (!isUndef(sec = v.technical_metadata.duration)) {
            more_info = ez5.format_seconds(sec);
          }
          break;
        case "office":
          if (!isUndef(pages = v.technical_metadata.pages)) {
            more_info = $$("asset.browser.info.pages", {
              pages: pages
            });
            if (pages > 1) {
              CUI.DOM.addClass(tmpl.DOM, "ez5-asset-browser--multiple-pages");
            } else {
              CUI.DOM.addClass(tmpl.DOM, "ez5-asset-browser--one-page");
            }
            CUI.DOM.setAttribute(tmpl.DOM, "ez5-assert-browser-pages", pages);
          }
      }
      if (more_info) {
        tmpl.replace($text(more_info), "info");
      }
    }
    return this;
  };

  AssetBrowser.prototype.getActiveTool = function() {
    return this.activeTool;
  };

  AssetBrowser.prototype.getAssets = function() {
    return this._assets;
  };

  AssetBrowser.prototype.getCurrentAsset = function() {
    return this._assets[this.current_idx];
  };

  AssetBrowser.prototype.getCurrentIdx = function() {
    return this.current_idx;
  };

  AssetBrowser.prototype.appendNaviButtons = function() {
    this.prevBtn = new LocaButton({
      loca_key: "asset.browser.button.previous",
      appearance: "flat",
      group: "navi",
      onClick: (function(_this) {
        return function() {
          return _this.setIdx(_this.current_idx - 1);
        };
      })(this)
    });
    this.nextBtn = new LocaButton({
      loca_key: "asset.browser.button.next",
      appearance: "flat",
      group: "navi",
      onClick: (function(_this) {
        return function() {
          return _this.setIdx(_this.current_idx + 1);
        };
      })(this)
    });
    this.naviLabel = new LocaLabel({
      "class": "navi-label",
      text: ""
    });
    this.browser.append(this.prevBtn, "navi");
    this.browser.append(this.naviLabel, "array_label");
    return this.browser.append(this.nextBtn, "navi");
  };

  AssetBrowser.prototype.setNaviState = function() {
    this.browser.DOM.attr("asset-browser-current-idx", this.current_idx);
    if (!this.prevBtn) {
      return;
    }
    if (this.current_idx === 0) {
      this.prevBtn.disable();
    } else {
      this.prevBtn.enable();
    }
    this.naviLabel.setText((this.current_idx + 1) + "/" + this._assets.length);
    if (this.current_idx === this._assets.length - 1) {
      this.nextBtn.disable();
    } else {
      this.nextBtn.enable();
    }
    return this;
  };

  AssetBrowser.prototype.getAvailableTools = function(asset) {
    var btn_loca_key, fn, i, len, ref, tool, tools_av;
    assert(asset instanceof Asset, "AssetBrowser.getAvailableTools", "asset must be instance of Asset", {
      asset: asset
    });
    tools_av = [];
    ref = this.tools;
    fn = (function(_this) {
      return function(tool, btn_loca_key) {
        return tools_av.push({
          tool: tool,
          run: function(ev, mousewheelStart) {
            var ref1;
            if (mousewheelStart == null) {
              mousewheelStart = false;
            }
            if ((ref1 = _this.activeTool) != null) {
              ref1.destroy();
            }
            _this.activeTool = tool;
            return tool.start(asset, mousewheelStart, tool._btn);
          },
          btn_loca_key: btn_loca_key
        });
      };
    })(this);
    for (i = 0, len = ref.length; i < len; i++) {
      tool = ref[i];
      btn_loca_key = tool.getButtonLocaKey(asset);
      assert(isString(btn_loca_key) || isNull(btn_loca_key), "AssetBrowser.updateTools", (getObjectClass(tool)) + ".getButtonLocaKey must return null or String.", {
        ret: btn_loca_key
      });
      if (!btn_loca_key) {
        continue;
      }
      fn(tool, btn_loca_key);
    }
    return tools_av;
  };

  AssetBrowser.prototype.getActiveTools = function() {
    return this.__activeTools;
  };

  AssetBrowser.prototype.updateTools = function(asset) {
    var buttons, fn, has_wheelstart, i, len, ref, tool;
    buttons = [];
    has_wheelstart = false;
    this.__activeTools = [];
    ref = this.getAvailableTools(asset);
    fn = (function(_this) {
      return function(tool) {
        tool.tool._btn = new LocaButton({
          loca_key: tool.btn_loca_key,
          group: "btn_tools",
          left: true,
          onClick: function(ev) {
            return tool.run(ev);
          }
        });
        buttons.push(tool.tool._btn);
        return _this.__activeTools.push(tool);
      };
    })(this);
    for (i = 0, len = ref.length; i < len; i++) {
      tool = ref[i];
      if (tool.tool.startOnMousewheel()) {
        has_wheelstart = true;
      }
      fn(tool);
    }
    asset._tmpl.replace(new Buttonbar({
      buttons: buttons,
      "class": "ez5-asset-browser-tools"
    }), "tools");
    if (has_wheelstart) {
      asset._tmpl.addClass("ez5-asset-browser-has-wheelstart");
    } else {
      asset._tmpl.removeClass("ez5-asset-browser-has-wheelstart");
    }
  };

  AssetBrowser.prototype.setIdx = function(idx) {
    var ref, ref1;
    assert(isInteger(idx) && idx >= 0 && this._assets[idx] instanceof Asset, "AssetBrowser.setIdx", "Cannot set idx to " + idx + ", opts.assets contains " + this._assets.length + " elements.", {
      assets: this._assets,
      idx: idx
    });
    if ((ref = this._assets[this.current_idx]) != null) {
      ref._tmpl.removeClass("cui-selected");
    }
    if (this.current_idx === idx) {
      return;
    }
    if ((ref1 = this.activeTool) != null) {
      ref1.destroy();
    }
    this.current_idx = idx;
    Events.trigger({
      node: this.browser,
      type: "asset-browser-idx-changed",
      info: {
        current_idx: idx,
        asset: this._assets[idx]
      }
    });
    if (CUI.DOM.closest(this.DOM, ".asset-browser-disable-scroll")) {
      this.firstAsset.css("marginLeft", "");
    } else {
      this.firstAsset.css("marginLeft", "-" + (idx * 100) + "%");
    }
    this.setNaviState();
    return this;
  };

  AssetBrowser.prototype.getCurrentAssetEement = function() {
    var ref;
    return (ref = this.getCurrentAsset()) != null ? ref._tmpl.DOM : void 0;
  };

  AssetBrowser.prototype.size_assets = function(resizeEvent) {
    var asset, fn, h, i, len, poll_version, rect, ref, ref1, ref2, ref3, v, vname, w;
    if (resizeEvent == null) {
      resizeEvent = false;
    }
    rect = this.firstAsset.rect();
    if (rect.width === 0 || rect.height === 0) {
      return;
    }
    w = rect.width;
    h = rect.height;
    if (this._hires && CUI.DOM.isFullscreen()) {
      if (CUI.DOM.closest(this.DOM, CUI.DOM.fullscreenElement())) {
        w = 100000;
        h = 100000;
      }
    }
    ref = this._assets;
    fn = (function(_this) {
      return function(asset) {
        asset._poll_version = poll_version;
        return _this.__pollIds.push(ez5.eas.addToQueue({
          value: asset.value,
          version: poll_version,
          done: function(eas_obj) {
            asset._poll_version = null;
            return _this.size_assets(resizeEvent);
          },
          error: function() {
            return asset._poll_version = null;
          }
        }));
      };
    })(this);
    for (i = 0, len = ref.length; i < len; i++) {
      asset = ref[i];
      if (!resizeEvent) {
        this.updateAssetInfo(asset);
        this.updateTools(asset);
      }
      if (!asset.value.versions) {
        continue;
      }
      if (asset.value._incomplete_versions) {
        if (asset._polling) {
          continue;
        }
        (function(_this) {
          return (function(asset) {
            asset._polling = true;
            return _this.__pollIds.push(ez5.eas.addToQueue({
              value: asset.value,
              done: function(eas_obj) {
                asset._polling = null;
                asset.value._incomplete_versions = null;
                return _this.size_assets(resizeEvent);
              },
              failed: function() {
                asset._polling = null;
                return asset.value._incomplete_versions = null;
              }
            }));
          });
        })(this)(asset);
        continue;
      }
      if (((ref1 = Asset.getStandardVersion(asset.value)) != null ? ref1.status : void 0) === "done") {
        this.size_image(asset, w, h);
      }
      poll_version = null;
      ref2 = asset.value.versions;
      for (vname in ref2) {
        v = ref2[vname];
        if ((ref3 = v.status) === "processing" || ref3 === "pending") {
          poll_version = vname;
        }
      }
      if (!poll_version || asset._poll_version) {
        continue;
      }
      fn(asset);
    }
    return this;
  };

  AssetBrowser.prototype.size_image = function(asset, viewport_width, viewport_height) {
    var $img_el, asset_element, best_version, img_el, img_h, img_w, new_img, transform_element;
    asset_element = asset._tmpl.DOM;
    img_w = asset.value.technical_metadata.width;
    img_h = asset.value.technical_metadata.height;
    transform_element = CUI.DOM.matchSelector(asset_element, ".ez5-asset-element-transform")[0];
    if (transform_element) {
      EAS.setTransformStyle(transform_element, asset.value.transform);
    }
    best_version = Asset.getBestImageForViewport(asset, viewport_width, viewport_height);
    $img_el = CUI.DOM.matchSelector(asset_element, ".eas-image")[0];
    if (!$img_el) {
      return;
    }
    img_el = $img_el.firstChild;
    if (img_el) {
      EASColumn.containImage(img_el);
    }
    if (!best_version) {
      return;
    }
    asset_element.attr({
      "viewport-width": viewport_width,
      "viewport-height": viewport_height
    });
    if (viewport_width < img_w && viewport_height < img_h) {
      asset_element.addClass("ez5-asset-browser-image-smaller-than-viewport");
      asset_element.removeClass("ez5-asset-browser-viewport-smaller-than-image");
    } else {
      asset_element.addClass("ez5-asset-browser-viewport-smaller-than-image");
      asset_element.removeClass("ez5-asset-browser-image-smaller-than-viewport");
    }
    if ($img_el.attr("version") !== best_version.version) {
      asset._tmpl.replace($text(best_version.version + (" [VP " + viewport_width + "x" + viewport_height + "]")), "preview_version");
      new_img = new Image();
      new_img.src = ez5.getAbsoluteURL(best_version.url);
      return new_img.onload = function() {
        if (img_el) {
          img_el.src = new_img.src;
        } else {
          $img_el.css("backgroundImage", "url(" + new_img.src + ")");
        }
        $img_el.attr({
          "real-width": best_version.width,
          "real-height": best_version.height,
          "version": best_version.version
        });
        return new_img = null;
      };
    }
  };

  AssetBrowser.prototype.destroy = function() {
    var i, j, len, len1, poll_id, ref, ref1, t;
    if (this.isDestroyed()) {
      return;
    }
    this.__activeTools = null;
    if (this.tools) {
      ref = this.tools;
      for (i = 0, len = ref.length; i < len; i++) {
        t = ref[i];
        t.destroy();
      }
    }
    ref1 = this.__pollIds;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      poll_id = ref1[j];
      ez5.eas.removeFromQueue(poll_id);
    }
    this.__pollIds = [];
    this.tools = null;
    AssetBrowser.__super__.destroy.call(this);
    return this;
  };

  return AssetBrowser;

})(CUI.DOM);

CUI.Events.registerEvent({
  type: ["asset-browser-show-asset", "asset-browser-idx-changed"],
  bubble: true
});

CUI.Events.registerEvent({
  type: "show-asset",
  sink: true
});
// Generated by CoffeeScript 1.10.0
var AssetBrowserInfoControl,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AssetBrowserInfoControl = (function(superClass) {
  extend(AssetBrowserInfoControl, superClass);

  function AssetBrowserInfoControl(opts) {
    this.opts = opts != null ? opts : {};
    AssetBrowserInfoControl.__super__.constructor.call(this, this.opts);
    this.__tmpl = new Template({
      name: "asset-browser-info-control",
      map: {
        button: true,
        navigation: true,
        tabs: true,
        label: true,
        position_label: true
      }
    });
    Events.listen({
      node: this._assetBrowser,
      type: ["asset-browser-idx-changed", "eas_update"],
      call: (function(_this) {
        return function(ev) {
          _this.updateNavigation();
          if (_this.__info_is_on) {
            _this.renderTabs();
          }
        };
      })(this)
    });
    this.registerTemplate(this.__tmpl, false);
    this.updateNavigation();
    if (this._show_info_button) {
      this.__info_button = new LocaButton({
        loca_key: "asset.browser.info.control.info_button",
        "switch": true,
        activate_initial: false,
        size: "mini",
        disabled: this._assetBrowser.getAssets().length === 0,
        onActivate: (function(_this) {
          return function() {
            _this.setInfoMode(true);
            return typeof _this._onUpdate === "function" ? _this._onUpdate(_this) : void 0;
          };
        })(this),
        onDeactivate: (function(_this) {
          return function() {
            _this.setInfoMode(false);
            return typeof _this._onUpdate === "function" ? _this._onUpdate(_this) : void 0;
          };
        })(this)
      });
      this.append(this.__info_button, "button");
    }
    this.setInfoMode(false);
  }

  AssetBrowserInfoControl.prototype.initOpts = function() {
    AssetBrowserInfoControl.__super__.initOpts.call(this);
    return this.addOpts({
      assetBrowser: {
        mandatory: true,
        check: AssetBrowser
      },
      onUpdate: {
        check: Function
      },
      show_info_button: {
        mandatory: true,
        "default": true,
        check: Boolean
      }
    });
  };

  AssetBrowserInfoControl.prototype.setInfoMode = function(__info_is_on) {
    this.__info_is_on = __info_is_on;
    if (this.__info_is_on) {
      this.renderTabs();
    }
    return CUI.DOM.setClass(this.DOM, "ez5-asset-browser-info-control--info-mode", this.__info_is_on);
  };

  AssetBrowserInfoControl.prototype.getInfoState = function() {
    return this.__info_is_on;
  };

  AssetBrowserInfoControl.prototype.renderTabs = function() {
    var asset;
    asset = this._assetBrowser.getCurrentAsset();
    return this.replace(asset.getInfoTabs(), "tabs");
  };

  AssetBrowserInfoControl.prototype.updateNavigation = function() {
    var asset, assets, bb, counter, idx, lbl, len, nextBtn, pos, prevBtn;
    assets = this._assetBrowser.getAssets();
    len = assets.length;
    if (len <= 1) {
      return;
    }
    asset = this._assetBrowser.getCurrentAsset();
    idx = this._assetBrowser.getCurrentIdx();
    prevBtn = new LocaButton({
      icon: "left",
      loca_key: "asset.browser.info.control.button.left",
      group: "navi",
      size: "mini",
      disabled: idx === 0,
      onClick: (function(_this) {
        return function() {
          return _this._assetBrowser.setIdx(idx - 1);
        };
      })(this)
    });
    lbl = new Label({
      text: asset.getField().fullNameLocalized()
    });
    if (asset.value._idx >= 0) {
      pos = (asset.value._idx + 1) + "/" + asset.value._len;
    } else {
      pos = "";
    }
    this.__tmpl.map.label.textContent = asset.getField().fullNameLocalized();
    this.__tmpl.map.position_label.textContent = pos;
    nextBtn = new LocaButton({
      size: "mini",
      icon: "right",
      loca_key: "asset.browser.info.control.button.right",
      group: "navi",
      disabled: idx === assets.length - 1,
      onClick: (function(_this) {
        return function() {
          return _this._assetBrowser.setIdx(idx + 1);
        };
      })(this)
    });
    counter = new LocaLabel({
      text: (idx + 1) + "/" + len,
      group: "navi",
      size: "mini"
    });
    counter.setTextMaxChars((len + "/" + len).length);
    bb = new Buttonbar({
      buttons: [prevBtn, counter, nextBtn]
    });
    return this.replace(bb, "navigation");
  };

  return AssetBrowserInfoControl;

})(CUI.DOM);
// Generated by CoffeeScript 1.10.0
var ScheduleEditorNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ScheduleEditorNode = (function(superClass) {
  extend(ScheduleEditorNode, superClass);

  function ScheduleEditorNode() {
    return ScheduleEditorNode.__super__.constructor.apply(this, arguments);
  }

  return ScheduleEditorNode;

})(ListViewEditTreeNode);
// Generated by CoffeeScript 1.10.0
var ScheduleEditor,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ScheduleEditor = (function(superClass) {
  extend(ScheduleEditor, superClass);

  function ScheduleEditor() {
    return ScheduleEditor.__super__.constructor.apply(this, arguments);
  }

  ScheduleEditor.prototype.initOpts = function() {
    ScheduleEditor.__super__.initOpts.call(this);
    return this.addOpts({
      button_type: {
        mandatory: true,
        check: ["apply", "save"]
      },
      has_schedules: {
        check: Boolean
      },
      loadSchedules: {
        check: Function
      },
      show_minutes: {
        check: Boolean
      },
      onButtonClick: {
        check: Function
      }
    });
  };

  ScheduleEditor.prototype.loadSchedules = function() {
    var dfr, load_schedules, ret;
    dfr = new CUI.Deferred();
    load_schedules = (function(_this) {
      return function(schedules) {
        var j, len, s;
        _this.__schedules = [];
        for (j = 0, len = schedules.length; j < len; j++) {
          s = schedules[j];
          _this.__schedules.push(new ScheduleEditorNode({
            data: s
          }));
        }
        _this.__startData = JSON.stringify(_this.getSaveData());
        return dfr.resolve();
      };
    })(this);
    if (this._schedules) {
      load_schedules(this._schedules);
    } else {
      ret = this._loadSchedules();
      if ($.isArray(ret)) {
        load_schedules(ret);
      } else {
        assert(isPromise(ret), "ScheduleEditor.loadSchedules", "Function needs to return Array or Promise", {
          "return": ret
        });
        ret.done(function(schedules) {
          return load_schedules(schedules);
        }).fail(function(xhr) {
          return dfr.rejext(xhr);
        });
      }
    }
    dfr.done((function(_this) {
      return function() {
        return _this.setButtonState();
      };
    })(this));
    return dfr.promise();
  };

  ScheduleEditor.prototype.setButtonState = function() {
    if (this.__schedules.length > 0) {
      return this.openButton.activate();
    } else {
      return this.openButton.deactivate();
    }
  };

  ScheduleEditor.prototype.getButton = function(opts) {
    if (opts == null) {
      opts = {};
    }
    CUI.mergeMap(opts, {
      loca_key: "schedule.editor.button",
      onClick: (function(_this) {
        return function() {
          return _this.openPopover();
        };
      })(this)
    });
    this.openButton = new LocaButton(opts);
    if (this._has_schedules === true) {
      this.openButton.activate();
    } else if (this._has_schedules === false) {

    } else {
      this.loadSchedules();
    }
    return this.openButton;
  };

  ScheduleEditor.prototype.checkChanged = function() {
    if (this.tree.getSelectedNode()) {
      this.minusButton.enable();
    } else {
      this.minusButton.disable();
    }
    if (this.__startData !== JSON.stringify(this.getSaveData())) {
      return this.saveButton.enable();
    } else {
      return this.saveButton.disable();
    }
  };

  ScheduleEditor.prototype.openPopover = function() {
    this.saveButton = new LocaButton({
      loca_key: "schedule.editor.button." + this._button_type,
      onClick: (function(_this) {
        return function(ev) {
          var ret, saved, sd;
          sd = _this.getSaveData();
          if (ev.hasModifierKey()) {
            CUI.debug("schedule save", dump(sd));
            return;
          }
          saved = function() {
            _this.loadSchedules();
            return _this.modal.destroy();
          };
          ret = typeof _this._onButtonClick === "function" ? _this._onButtonClick(ev, sd) : void 0;
          if (isPromise(ret)) {
            ret.done(saved);
          } else {
            saved();
          }
        };
      })(this)
    });
    this.tree = new ListViewEditTree({
      maximize: true,
      "class": 'cui-lv--has-datafields',
      no_hierarchy: true,
      fields: [
        {
          th_label: "schedule.editor.col.schedule",
          type: Form,
          undo_support: false,
          fields: ScheduleEditor.getFields({
            show_minutes: this._show_minutes
          })
        }
      ],
      cols: ["maximize"],
      selectableRows: true,
      rowMove: false,
      footer_left: [
        {
          loca_key: "schedule.editor.plus_button",
          group: "plus-minus",
          "class": "btn-mini",
          onClick: (function(_this) {
            return function() {
              var node;
              node = new ScheduleEditorNode({
                data: {}
              });
              return _this.tree.addNode(node);
            };
          })(this)
        }, this.minusButton = new LocaButton({
          loca_key: "schedule.editor.minus_button",
          disabled: true,
          group: "plus-minus",
          "class": "btn-mini",
          onClick: (function(_this) {
            return function() {
              var ref;
              return (ref = _this.tree.getSelectedNode()) != null ? ref.remove() : void 0;
            };
          })(this)
        })
      ]
    });
    Events.listen({
      node: this.tree,
      type: ["row_added", "row_removed", "row_deselected", "row_selected", "data-changed"],
      call: (function(_this) {
        return function(ev, info) {
          return _this.checkChanged();
        };
      })(this)
    });
    this.modal = new CUI.Modal({
      "class": "ez5-schedule-editor-modal",
      cancel: true,
      onHide: (function(_this) {
        return function() {
          _this.tree.destroy();
          return _this.tree = null;
        };
      })(this),
      onCancel: (function(_this) {
        return function() {
          if (_this.saveButton.isDisabled()) {

          } else {
            return CUI.confirm({
              text: $$("schedule.editor.confirm.discard")
            });
          }
        };
      })(this),
      pane: {
        header_left: new Label({
          text: $$("schedule.editor.title")
        }),
        footer_right: (function(_this) {
          return function() {
            return new Buttonbar({
              buttons: [_this.saveButton]
            });
          };
        })(this),
        content: (function(_this) {
          return function() {
            var t;
            t = _this.tree.render();
            _this.loadSchedules().done(function() {
              _this.tree.load_data(_this.__schedules);
              return _this.checkChanged();
            });
            return t;
          };
        })(this)
      }
    });
    return this.modal.show();
  };

  ScheduleEditor.prototype.getSaveData = function() {
    var j, k, l, len, len1, ref, ref1, s, sch, sd, sdata;
    sd = [];
    ref = this.__schedules;
    for (j = 0, len = ref.length; j < len; j++) {
      s = ref[j];
      sdata = s.getData();
      sch = {};
      ref1 = ["days_of_month", "hours", "weekdays", "minutes"];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        k = ref1[l];
        if (!this._show_minutes && k === "minutes") {
          continue;
        }
        sch[k] = sdata[k] || [];
      }
      sd.push(sch);
    }
    return sd;
  };

  ScheduleEditor.getFields = function(_opts) {
    var day, days_opts, fields, get_preset_by_data, get_preset_data, hour, hours_opts, j, l, len, len1, m, n, opts, preset_names, preset_opt, preset_opts, ref, set_field_visibility, update_fields, update_fields_reset, wd, weekdays_opts;
    if (_opts == null) {
      _opts = {};
    }
    opts = CUI.Element.readOpts(_opts, "ScheduleEditor.getFields", {
      show_minutes: {
        check: Boolean
      }
    });
    preset_names = ['custom', 'weekly', 'daily', 'hourly'];
    if (opts.show_minutes) {
      preset_names.push.apply(preset_names, ['30_minutes', '15_minutes', '10_minutes', '5_minutes', '1_minute']);
    }
    get_preset_by_data = (function(_this) {
      return function(sdata) {
        var cdata, data, j, k, len, preset_name, v;
        for (j = 0, len = preset_names.length; j < len; j++) {
          preset_name = preset_names[j];
          if (preset_name === "custom") {
            continue;
          }
          cdata = {};
          data = get_preset_data(preset_name);
          for (k in data) {
            v = data[k];
            cdata[k] = sdata[k] || [];
          }
          if (JSON.stringify(data) === JSON.stringify(cdata)) {
            return preset_name;
          }
        }
        return 'custom';
      };
    })(this);
    get_preset_data = (function(_this) {
      return function(preset_name) {
        var data, days_of_month, i;
        data = {};
        switch (preset_name) {
          case 'weekly':
            days_of_month = [];
            data.weekdays = ['sunday'];
            data.hours = [];
            data.minutes = [];
            break;
          case 'daily':
            data.days_of_month = [];
            data.weekdays = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
            data.hours = [];
            data.minutes = [];
            break;
          case 'hourly':
            data.days_of_month = [];
            data.weekdays = [];
            data.hours = (function() {
              var j, results;
              results = [];
              for (i = j = 0; j <= 23; i = ++j) {
                results.push(i);
              }
              return results;
            })();
            data.minutes = [];
            break;
          case '1_minute':
            data.days_of_month = [];
            data.weekdays = [];
            data.hours = (function() {
              var j, results;
              results = [];
              for (i = j = 0; j <= 23; i = ++j) {
                results.push(i);
              }
              return results;
            })();
            data.minutes = (function() {
              var j, results;
              results = [];
              for (i = j = 0; j <= 59; i = ++j) {
                results.push(i);
              }
              return results;
            })();
            break;
          case '5_minutes':
            data.days_of_month = [];
            data.weekdays = [];
            data.hours = (function() {
              var j, results;
              results = [];
              for (i = j = 0; j <= 23; i = ++j) {
                results.push(i);
              }
              return results;
            })();
            data.minutes = (function() {
              var j, results;
              results = [];
              for (i = j = 0; j <= 59; i = j += 5) {
                results.push(i);
              }
              return results;
            })();
            break;
          case '10_minutes':
            data.days_of_month = [];
            data.weekdays = [];
            data.hours = (function() {
              var j, results;
              results = [];
              for (i = j = 0; j <= 23; i = ++j) {
                results.push(i);
              }
              return results;
            })();
            data.minutes = (function() {
              var j, results;
              results = [];
              for (i = j = 0; j <= 59; i = j += 10) {
                results.push(i);
              }
              return results;
            })();
            break;
          case '15_minutes':
            data.days_of_month = [];
            data.weekdays = [];
            data.hours = (function() {
              var j, results;
              results = [];
              for (i = j = 0; j <= 23; i = ++j) {
                results.push(i);
              }
              return results;
            })();
            data.minutes = (function() {
              var j, results;
              results = [];
              for (i = j = 0; j <= 59; i = j += 15) {
                results.push(i);
              }
              return results;
            })();
            break;
          case '30_minutes':
            data.days_of_month = [];
            data.weekdays = [];
            data.hours = (function() {
              var j, results;
              results = [];
              for (i = j = 0; j <= 23; i = ++j) {
                results.push(i);
              }
              return results;
            })();
            data.minutes = (function() {
              var j, results;
              results = [];
              for (i = j = 0; j <= 59; i = j += 30) {
                results.push(i);
              }
              return results;
            })();
        }
        if (!opts.show_minutes) {
          delete data.minutes;
        }
        return data;
      };
    })(this);
    preset_opts = [];
    for (j = 0, len = preset_names.length; j < len; j++) {
      preset_opt = preset_names[j];
      preset_opts.push({
        text: $$("schedule.editor.form.preset." + preset_opt),
        value: preset_opt
      });
    }
    update_fields_reset = (function(_this) {
      return function(data, df) {
        var fo, k, ref, v;
        if (data._preset !== "custom") {
          ref = get_preset_data(data._preset);
          for (k in ref) {
            v = ref[k];
            data[k] = v;
          }
        } else if (opts.show_minutes) {
          data.minutes = [];
        }
        fo = df.getForm();
        fo.reload();
        return set_field_visibility(data, fo);
      };
    })(this);
    set_field_visibility = (function(_this) {
      return function(data, fo) {
        var key, l, len1, ref;
        ref = ["days_of_month", "weekdays", "hours"];
        for (l = 0, len1 = ref.length; l < len1; l++) {
          key = ref[l];
          if (data._preset.match(/minute/)) {
            fo.getFieldsByName(key)[0].hide(true);
          } else {
            fo.getFieldsByName(key)[0].show(true);
          }
        }
      };
    })(this);
    update_fields = (function(_this) {
      return function(data, df) {
        var preset;
        preset = get_preset_by_data(data);
        if (preset === "custom" && opts.show_minutes) {
          data.minutes = [];
        }
        return df.getForm().getFieldsByName("_preset")[0].setValue(get_preset_by_data(data));
      };
    })(this);
    days_opts = [];
    weekdays_opts = [];
    hours_opts = [];
    for (day = l = 0; l <= 30; day = ++l) {
      days_opts.push({
        text: (day + 1) + "",
        value: day + 1
      });
    }
    ref = ez5.weekdays;
    for (m = 0, len1 = ref.length; m < len1; m++) {
      wd = ref[m];
      weekdays_opts.push({
        text: $$("base.weekday." + wd),
        value: wd
      });
    }
    for (hour = n = 0; n <= 23; hour = ++n) {
      hours_opts.push({
        text: hour + "",
        value: hour
      });
    }
    fields = [
      {
        form: {
          label: $$("schedule.editor.form.preset")
        },
        name: "_preset",
        undo_support: false,
        onDataInit: (function(_this) {
          return function(df, data) {
            if (!data._preset) {
              data._preset = get_preset_by_data(data);
              return set_field_visibility(data, df.getForm());
            }
          };
        })(this),
        onDataChanged: update_fields_reset,
        type: Select,
        options: preset_opts
      }, {
        form: {
          label: $$("schedule.editor.form.days")
        },
        type: Options,
        onDataChanged: update_fields,
        undo_support: false,
        name: "days_of_month",
        horizontal: 10,
        options: days_opts
      }, {
        form: {
          label: $$("schedule.editor.form.weekdays")
        },
        type: Options,
        onDataChanged: update_fields,
        undo_support: false,
        horizontal: true,
        name: "weekdays",
        options: weekdays_opts
      }, {
        form: {
          label: $$("schedule.editor.form.hours")
        },
        onDataChanged: update_fields,
        name: "hours",
        undo_support: false,
        type: Options,
        horizontal: 10,
        options: hours_opts
      }
    ];
    return fields;
  };

  return ScheduleEditor;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var NumberTokenizer, Tokenizer,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Tokenizer = (function(superClass) {
  extend(Tokenizer, superClass);

  function Tokenizer() {
    this.tokenize = bind(this.tokenize, this);
    this.retrieveTokens = bind(this.retrieveTokens, this);
    this.getTokens = bind(this.getTokens, this);
    return Tokenizer.__super__.constructor.apply(this, arguments);
  }

  Tokenizer.prototype.readOpts = function() {
    this.tokenClass = Tokenizer.TextToken;
    return this.phraseTokenClass = Tokenizer.PhraseToken;
  };

  Tokenizer.prototype.getTokens = function(val) {
    var c, chars, end_token, i, idx, j, phrase_state, push_char, push_token, ref, reset_chars, start_idx, tokens;
    chars = [];
    tokens = [];
    phrase_state = 0;
    start_idx = 0;
    idx = null;
    reset_chars = (function(_this) {
      return function() {
        return chars = [];
      };
    })(this);
    push_char = (function(_this) {
      return function(c) {
        if (chars.length === 0) {
          start_idx = idx;
        }
        return chars.push(c);
      };
    })(this);
    push_token = (function(_this) {
      return function(token) {
        var ptoken;
        if (token === ',') {
          return;
        }
        ptoken = {
          start: start_idx,
          end: start_idx + token.length
        };
        if (token.startsWith('"') && token.endsWith('"')) {
          if (token.length === 2) {
            return;
          }
          ptoken.token = token.substr(1, token.length - 2);
          ptoken.phrase = true;
        } else if (token === '-') {
          ptoken.range = true;
          ptoken.token = '';
        } else {
          ptoken.token = token;
        }
        tokens.push(ptoken);
      };
    })(this);
    end_token = (function(_this) {
      return function(extra_token) {
        var token;
        token = chars.join('').trim();
        push_token(token);
        if (extra_token) {
          start_idx = start_idx + token.length;
          push_token(extra_token);
        }
        reset_chars();
      };
    })(this);
    for (i = j = 0, ref = val.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      idx = i;
      c = val.substr(i, 1);
      switch (c) {
        case ',':
        case '-':
          if (phrase_state === 1) {
            push_char(c);
          } else {
            if (phrase_state === 2) {
              phrase_state = 0;
            }
            end_token(c);
          }
          break;
        case '"':
          switch (phrase_state) {
            case 0:
              if (chars.length) {
                end_token(',');
              }
              phrase_state = 1;
              push_char(c);
              break;
            case 1:
              phrase_state = 2;
              push_char(c);
              break;
            case 2:
              end_token(',');
              phrase_state = 1;
              push_char(c);
          }
          break;
        default:
          if (phrase_state === 2) {
            end_token(',');
            phrase_state = 0;
          }
          push_char(c);
      }
    }
    if (phrase_state === 1) {
      push_char('"');
      phrase_state = 2;
    }
    end_token();
    return tokens;
  };

  Tokenizer.prototype.retrieveTokens = function(tokens) {
    var _idx, end, idx, phrase, ref, ret_tokens, start, token;
    ret_tokens = [];
    idx = _idx = 0;
    while (_idx < tokens.length) {
      idx = _idx;
      token = tokens[idx].token;
      start = tokens[idx].start;
      end = tokens[idx].end;
      phrase = tokens[idx].phrase;
      if (phrase) {
        ret_tokens.push(new this.phraseTokenClass(token, start, end));
        _idx++;
        continue;
      }
      if ((ref = tokens[idx + 1]) != null ? ref.range : void 0) {
        _idx += 2;
        if (isEmpty(tokens[idx + 2].token) && isEmpty(token)) {
          _idx++;
          continue;
        }
        ret_tokens.push(new Tokenizer.RangeToken(token, tokens[idx + 2].token, start, tokens[idx + 2].end));
        _idx++;
        continue;
      }
      if (token.length) {
        ret_tokens.push(new this.tokenClass(token, start, end));
      }
      _idx++;
    }
    return ret_tokens;
  };

  Tokenizer.prototype.tokenize = function(val) {
    return this.retrieveTokens(this.getTokens(val));
  };

  Tokenizer.test = function(val) {
    var Tokens, j, len, tokenizer, tokens, values;
    tokenizer = new Tokenizer({
      debug: true
    });
    if (arguments.length > 0) {
      values = [];
      if (indexOf.call(arguments, val) >= 0) {
        values.push(val);
      }
    } else {
      values = ['12-23', '"123,23","31290-312', '12-', '"open phrase'];
    }
    for (j = 0, len = values.length; j < len; j++) {
      val = values[j];
      console.debug('tokenize:', val);
      tokens = tokenizer.getTokens(val);
      console.debug('tokens:', dump(tokens));
      Tokens = tokenizer.retrieveTokens(tokens);
      console.debug('Tokens:', Tokens);
    }
  };

  return Tokenizer;

})(CUI.Element);

Tokenizer.RangeToken = (function() {
  function RangeToken(from, to, start1, end1) {
    this.from = from;
    this.to = to;
    this.start = start1;
    this.end = end1;
  }

  RangeToken.prototype.getFilter = function(field) {
    var filter;
    filter = {
      type: "range",
      field: field.getSearchField()
    };
    if (!isEmpty(this.from)) {
      filter.from = this.from;
    }
    if (!isEmpty(this.to)) {
      filter.to = this.to;
    }
    return filter;
  };

  return RangeToken;

})();

Tokenizer.TextToken = (function() {
  function TextToken(text, start1, end1) {
    this.text = text;
    this.start = start1;
    this.end = end1;
  }

  TextToken.prototype.getFilter = function(field) {
    var filter;
    return filter = {
      type: "match",
      string: this.text,
      fields: [field.getSearchField()]
    };
  };

  return TextToken;

})();

Tokenizer.PhraseToken = (function() {
  function PhraseToken(phrase1, start1, end1) {
    this.phrase = phrase1;
    this.start = start1;
    this.end = end1;
  }

  PhraseToken.prototype.getFilter = function(field) {
    var filter;
    return filter = {
      type: "match",
      string: this.phrase,
      phrase: true,
      fields: [field.getSearchField()]
    };
  };

  return PhraseToken;

})();

Tokenizer.StringToken = (function() {
  function StringToken(value, start1, end1) {
    this.value = value;
    this.start = start1;
    this.end = end1;
  }

  StringToken.prototype.getFilter = function(field) {
    var filter;
    return filter = {
      type: "in",
      "in": [this.value],
      fields: [field.getSearchField()]
    };
  };

  return StringToken;

})();

Tokenizer.NumberToken = (function(superClass) {
  extend(NumberToken, superClass);

  function NumberToken(number, start1, end1) {
    this.start = start1;
    this.end = end1;
    this.value = parseInt(number.trim());
    if (isNaN(this.value)) {
      this.value = null;
    }
  }

  NumberToken.prototype.getFilter = function(field) {
    if (this.value === null) {
      return null;
    } else {
      return NumberToken.__super__.getFilter.call(this, field);
    }
  };

  return NumberToken;

})(Tokenizer.StringToken);

Tokenizer.NumberPhraseToken = (function(superClass) {
  extend(NumberPhraseToken, superClass);

  function NumberPhraseToken(phrase, start1, end1) {
    this.start = start1;
    this.end = end1;
    NumberPhraseToken.__super__.constructor.call(this, phrase, this.start, this.end);
  }

  return NumberPhraseToken;

})(Tokenizer.NumberToken);

NumberTokenizer = (function(superClass) {
  extend(NumberTokenizer, superClass);

  function NumberTokenizer() {
    return NumberTokenizer.__super__.constructor.apply(this, arguments);
  }

  NumberTokenizer.prototype.readOpts = function() {
    NumberTokenizer.__super__.readOpts.call(this);
    this.tokenClass = Tokenizer.NumberToken;
    return this.phraseTokenClass = Tokenizer.NumberPhraseToken;
  };

  return NumberTokenizer;

})(Tokenizer);
// Generated by CoffeeScript 1.10.0
var BaseConfig,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

BaseConfig = (function(superClass) {
  extend(BaseConfig, superClass);

  function BaseConfig() {
    return BaseConfig.__super__.constructor.apply(this, arguments);
  }

  BaseConfig.prototype.initOpts = function() {
    BaseConfig.__super__.initOpts.call(this);
    return this.addOpts({
      name: {
        mandatory: true,
        check: String
      },
      group: {
        check: String
      },
      parameters: {
        check: "PlainObject"
      }
    });
  };

  BaseConfig.prototype.readOpts = function() {
    BaseConfig.__super__.readOpts.call(this);
    if (this._parameters) {
      this.paramCount = Object.keys(this._parameters).length;
    } else {
      this.paramCount = 0;
    }
    this.__l10n_prefix = "server";
    return this.__class = "base";
  };

  BaseConfig.prototype.name = function() {
    return this._name;
  };

  BaseConfig.prototype.locaKey = function(type) {
    return this.__l10n_prefix + (".config." + type + "." + this.__class + "." + (this.name()));
  };

  BaseConfig.prototype.nameLocalized = function() {
    return $$(this.locaKey("name"));
  };

  BaseConfig.prototype.getClassForParameter = function(def) {
    var cls;
    cls = (this.__class + "-" + (this.name()) + "-" + def.type + "-" + def._parameter_name).replace(/[\._]/g, "-");
    return cls;
  };

  BaseConfig.prototype.getFieldDefFromParm = function(pname, def, parent_def) {
    var _def, _fields, c, data, eas_field, field, i, j, k, l, len, len1, len2, len3, loca_key, opt, options, opts, plugin, ref, ref1, ref2, ref3, regexp, rp, sel_opts, set_label, t, tf;
    def._parameter_name = pname;
    set_label = (function(_this) {
      return function(field) {
        var label;
        if (!field.form) {
          field.form = {};
        }
        if (def.label) {
          label = _this.__l10n_prefix + (".config.label." + _this.__class + "." + def.label);
        } else if (parent_def) {
          label = _this.locaKey("parameter") + ("." + parent_def._parameter_name + "." + pname + ".label");
        } else {
          label = _this.locaKey("parameter") + ("." + pname + ".label");
        }
        field.form.label = $$(label);
        if (ez5.loca.has(label + "|hint")) {
          field.form.hint = $$(label + "|hint");
        }
        if (ez5.loca.has(label + "|hint_icon")) {
          field.form.hint_icon = $$(label + "|hint_icon");
        }
        return field;
      };
    })(this);
    switch (def.type) {
      case "bool":
        field = {
          undo_and_changed_support: false,
          type: Checkbox,
          multiline: true,
          text: $$(this.locaKey("parameter") + ("." + pname + ".checkbox")),
          name: pname
        };
        break;
      case 'text':
        if (!isEmpty(def.regex)) {
          regexp = def.regex;
        } else {
          regexp = null;
        }
        switch (def.plugin_type) {
          case 'date':
            field = {
              type: DateTime,
              undo_and_changed_support: false,
              display_type: 'long',
              name: pname,
              input_types: ['date']
            };
            break;
          default:
            if (!def.plugin_type) {
              field = {
                type: Input,
                undo_and_changed_support: false,
                name: pname,
                regexp: regexp,
                placeholder: regexp
              };
            }
        }
        break;
      case 'int':
        switch (def.plugin_type) {
          case 'profile_mapping_select':
            opts = ez5.metadata.getMappingOpts([
              {
                text: $$('base.config.profile_mapping_select.none'),
                value: null
              }
            ], null, def.profile);
            field = {
              type: Select,
              undo_and_changed_support: false,
              options: opts,
              name: pname
            };
            break;
          case 'group_easydb_select':
            field = {
              type: DataFieldProxy,
              name: pname,
              element: (function(_this) {
                return function(df) {
                  var _data, data1;
                  data1 = df.getData();
                  _data = {};
                  if (isInteger(data1[pname])) {
                    _data[pname] = {
                      _basetype: 'group',
                      group: {
                        _id: data1[pname]
                      }
                    };
                  }
                  console.debug("init data:", dump(data1), dump(_data));
                  return new AclWhoManager({
                    name: pname,
                    who_filter: ['group'],
                    onUpdate: function() {
                      if (!_data[pname]) {
                        data1[pname] = void 0;
                      } else {
                        data1[pname] = parseInt(_data[pname].group._id);
                      }
                      return console.debug('new data:', dump(data1), dump(_data));
                    },
                    filter_groups: ['easydb'],
                    filter_groups_bool: 'must'
                  }).getWhoSelector(_data);
                };
              })(this)
            };
            break;
          case 'right_preset_collection':
            sel_opts = [
              {
                text: $$('base.config.plugin_type.right_preset_collection.option.none'),
                value: null
              }
            ];
            ref = RightPresetManager.getByServerContext('collection');
            for (i = 0, len = ref.length; i < len; i++) {
              rp = ref[i];
              sel_opts.push({
                value: rp.getId(),
                text: rp.getDisplayname()
              });
            }
            field = {
              type: Select,
              options: sel_opts,
              undo_and_changed_support: false,
              name: pname
            };
            break;
          default:
            if (!def.plugin_type) {
              field = {
                type: NumberInput,
                undo_and_changed_support: false,
                name: pname
              };
            }
        }
        break;
      case 'email':
        field = {
          type: EmailInput,
          undo_and_changed_support: false,
          name: pname
        };
        break;
      case 'text-multiline':
        field = {
          type: Input,
          undo_and_changed_support: false,
          textarea: true,
          name: pname
        };
        break;
      case 'text-l10n':
        field = {
          type: MultiInput,
          undo_and_changed_support: false,
          control: ez5.loca.getLanguageControlAdmin(),
          name: pname
        };
        break;
      case 'text-l10n-multiline':
        field = {
          type: MultiInput,
          undo_and_changed_support: false,
          textarea: true,
          control: ez5.loca.getLanguageControlAdmin(),
          name: pname
        };
        break;
      case 'string-list':
      case 'string-list-sort':
        options = [];
        ref1 = def.choices;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          c = ref1[j];
          if (this.__class === "system" && this.name() === "languages") {
            t = $$("base.culture." + c);
          } else if (def.label_choice) {
            t = $$(this.locaKey("choice") + ("." + def.label_choice + "." + c));
          } else {
            t = c;
          }
          options.push({
            text: t,
            value: c
          });
        }
        field = {
          type: Options,
          undo_and_changed_support: false,
          name: pname,
          options: options
        };
        if (def.type === 'string-list-sort') {
          field.sortable = true;
          field.sortable_hint = $$('options.order_hint');
        } else {
          if (CUI.__ng__) {
            field.horizontal = true;
          } else {
            field.horizontal = Math.ceil(options.length / 5);
          }
        }
        break;
      case "select":
        options = [];
        ref2 = def.options;
        for (k = 0, len2 = ref2.length; k < len2; k++) {
          c = ref2[k];
          loca_key = this.locaKey("option") + ("." + pname + "." + c);
          opt = LocaLabel.getStandardOpts(loca_key);
          opt.value = c;
          options.push(opt);
        }
        field = {
          type: Select,
          undo_and_changed_support: false,
          name: pname,
          options: options
        };
        break;
      case "file":
        eas_field = new EASField({
          name: pname,
          "class": this.getClassForParameter(def)
        });
        field = {
          type: DataFieldProxy,
          name: pname,
          element: (function(_this) {
            return function(df) {
              return eas_field.renderEditorInput(df.getData(), def["default"]);
            };
          })(this)
        };
        break;
      case "table":
        _fields = (function() {
          var l, len3, ref3, results;
          ref3 = def.fields;
          results = [];
          for (l = 0, len3 = ref3.length; l < len3; l++) {
            _def = ref3[l];
            results.push(this.getFieldDefFromParm(_def.name, _def, def));
          }
          return results;
        }).call(this);
        field = {
          type: DataTable,
          undo_and_changed_support: false,
          rowMove: true,
          name: pname,
          fields: _fields,
          maximize_horizontal: true
        };
        break;
      case "tag-select":
        data = {
          _tags: []
        };
        field = {
          type: DataFieldProxy,
          name: pname,
          onDataChanged: (function(_this) {
            return function(df_data) {
              var l, len3, ref3, results, tag;
              df_data[pname].splice(0);
              ref3 = data._tags;
              results = [];
              for (l = 0, len3 = ref3.length; l < len3; l++) {
                tag = ref3[l];
                results.push(df_data[pname].push(tag._id));
              }
              return results;
            };
          })(this),
          element: (function(_this) {
            return function(df) {
              var l, len3, ref3, tag_id;
              data._tags.splice(0);
              if (!df.getData()[pname]) {
                df.getData()[pname] = [];
              }
              ref3 = df.getData()[pname];
              for (l = 0, len3 = ref3.length; l < len3; l++) {
                tag_id = ref3[l];
                data._tags.push({
                  _id: tag_id
                });
              }
              return (new TagsFieldForBaseConfig({
                name: "_tags"
              })).render(data);
            };
          })(this)
        };
        break;
      case "tagfilter-select":
        tf = new TagFilter({
          tagForm: ez5.tagForm,
          name: pname
        });
        field = tf.getField();
        break;
      default:
        console.error("BaseConfig.getForm: Unknown config type " + def.type, def, this.opts);
    }
    if (!field && def.plugin_type) {
      ref3 = BaseConfig.__plugins;
      for (l = 0, len3 = ref3.length; l < len3; l++) {
        plugin = ref3[l];
        field = plugin.getFieldDefFromParm(this, pname, def, parent_def);
        if (field) {
          break;
        }
      }
      if (!field) {
        console.error("Unknown BaseConfig Plugin-Type: " + def.plugin_type, def);
        field = {
          type: Output,
          placeholder: $$("base.config.unknown_plugin_type", {
            type: def.plugin_type
          })
        };
      }
    }
    set_label(field);
    return field;
  };

  BaseConfig.prototype.getField = function(data) {
    var _field, def, field, fields, get_json, i, len, params, pname, ref, ref1;
    this.data = data[this.name()] || {};
    get_json = (function(_this) {
      return function(data, key, def, level) {
        var error, ex, field, i, j, len, len1, ref, ref1, row;
        if (level == null) {
          level = 0;
        }
        if (!data.hasOwnProperty(key)) {
          return;
        }
        if (def.store_as_json) {
          try {
            data[key] = JSON.parse(data[key]);
            if (isEmpty(data[key])) {
              data[key] = {};
            }
          } catch (error) {
            ex = error;
            console.warn("BaseConfig, invalid json received in data", data, _this.name());
            data[key] = {};
          }
        }
        if (def.type === "tagfilter-select" && isString(data[key])) {
          data[key] = JSON.parse(data[key]);
        }
        if (def.type === "table") {
          ref = def.fields;
          for (i = 0, len = ref.length; i < len; i++) {
            field = ref[i];
            if (!CUI.isArray(data[key])) {
              continue;
            }
            ref1 = data[key];
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              row = ref1[j];
              get_json(row, field.name, field, level + 1);
            }
          }
        }
      };
    })(this);
    ref = this._parameters;
    for (pname in ref) {
      def = ref[pname];
      get_json(this.data, pname, def);
    }
    fields = [];
    params = [];
    ref1 = this._parameters;
    for (pname in ref1) {
      def = ref1[pname];
      def.__name = pname;
      params.push(def);
    }
    params.sort((function(_this) {
      return function(a, b) {
        var a_pos, b_pos;
        if (a.hasOwnProperty("position")) {
          a_pos = a.position;
        } else {
          a_pos = 99;
        }
        if (b.hasOwnProperty("position")) {
          b_pos = b.position;
        } else {
          b_pos = 99;
        }
        return compareIndex(a_pos, b_pos);
      };
    })(this));
    for (i = 0, len = params.length; i < len; i++) {
      def = params[i];
      pname = def.__name;
      assert(pname !== "name", "BaseConfig.getForm", "Parameter name of a config option cannot be \"name\" as it collides when saving.", {
        config: this.opts
      });
      _field = this.getFieldDefFromParm(pname, def);
      if (_field) {
        fields.push(_field);
      }
    }
    field = {
      type: Form,
      undo_and_changed_support: false,
      fields: fields,
      data: this.data
    };
    return this.field = DataField["new"](field);
  };

  BaseConfig.prototype.getSaveData = function(save_data) {
    var def, pname, ref, sd, set_json, value;
    if (save_data == null) {
      save_data = {};
    }
    sd = save_data[this.name()] = copyObject(this.data, true);
    for (pname in sd) {
      value = sd[pname];
      if (CUI.isPlainObject(sd[pname]) && $.isEmptyObject(sd[pname])) {
        sd[pname] = null;
      }
    }
    set_json = (function(_this) {
      return function(data, key, def, level) {
        var field, i, j, len, len1, ref, ref1, row;
        if (level == null) {
          level = 0;
        }
        if (!data.hasOwnProperty(key) || data[key] === null) {
          return;
        }
        if (def.type === "table") {
          ref = def.fields;
          for (i = 0, len = ref.length; i < len; i++) {
            field = ref[i];
            if (!CUI.isArray(data[key])) {
              continue;
            }
            ref1 = data[key];
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              row = ref1[j];
              set_json(row, field.name, field, level + 1);
            }
          }
        }
        if (def.store_as_json) {
          data[key] = JSON.stringify(data[key]);
        }
      };
    })(this);
    ref = this._parameters;
    for (pname in ref) {
      def = ref[pname];
      set_json(sd, pname, def);
    }
    return save_data;
  };

  BaseConfig.renderTabs = function(_opts) {
    var bc, config, field, group, i, idx, j, k, l, len, len1, len2, len3, onDataChanged, opts, ref, ref1, ref2, ref3, ret, t, tab;
    opts = CUI.Element.readOpts(_opts, "new BaseConfig", {
      config: {
        mandatory: true,
        check: "Array"
      },
      BaseConfigClass: {
        mandatory: true,
        check: Function
      },
      data: {
        mandatory: true,
        check: "PlainObject"
      },
      l10n_prefix: {
        manatory: true,
        check: String
      }
    });
    onDataChanged = (function(_this) {
      return function(data, dataField, event) {
        var i, len, plugin, ref;
        ref = BaseConfig.__plugins;
        for (i = 0, len = ref.length; i < len; i++) {
          plugin = ref[i];
          plugin.onDataChanged(data, dataField, event);
        }
      };
    })(this);
    ret = {
      baseConfigs: [],
      tabs: []
    };
    ref = opts.config;
    for (i = 0, len = ref.length; i < len; i++) {
      config = ref[i];
      bc = new opts.BaseConfigClass(config);
      ret.baseConfigs.push(bc);
      group = config.group || "other";
      tab = null;
      ref1 = ret.tabs;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        t = ref1[j];
        if (t.name === group) {
          tab = t;
          break;
        }
      }
      if (!tab) {
        tab = {
          __intro: opts.l10n_prefix + "." + bc.__class + "." + group + ".introduction",
          __fields: [],
          __baseConfigs: [],
          name: group,
          text: $$(opts.l10n_prefix + "." + bc.__class + "." + group + ".title")
        };
        ret.tabs.push(tab);
      }
      tab.__fields.push(bc.getField(opts.data));
      tab.__baseConfigs.push(bc);
    }
    ref2 = ret.tabs;
    for (k = 0, len2 = ref2.length; k < len2; k++) {
      tab = ref2[k];
      tab.content = [
        new Block({
          text: tab.text,
          appearance: "title",
          content: [
            new MultilineLabel({
              markdown: true,
              text: $$(tab.__intro)
            })
          ]
        })
      ];
      ref3 = tab.__fields;
      for (idx = l = 0, len3 = ref3.length; l < len3; idx = ++l) {
        field = ref3[idx];
        Events.listen({
          type: "data-changed",
          node: field.DOM,
          call: (function(_this) {
            return function(ev, info) {
              return onDataChanged(info.element.getData(), info.element, ev);
            };
          })(this)
        });
        tab.content.push(new Block({
          level: 2,
          text: tab.__baseConfigs[idx].nameLocalized(),
          content: field.start()
        }));
      }
      delete tab.__intro;
      delete tab.__fields;
    }
    return ret;
  };

  BaseConfig.__plugins = [];

  BaseConfig.registerPlugin = function(plugin) {
    assert(plugin instanceof BaseConfigPlugin, "BaseConfig.registerPlugin", "Plugin needs to be instanceof BaseConfigPlugin.", {
      plugin: plugin
    });
    assert(indexOf.call(this.__plugins, plugin) < 0, "BaseConfig.registerPlugin", "Plugin can only be registered once.", {
      plugin: plugin
    });
    this.__plugins.push(plugin);
    return plugin;
  };

  return BaseConfig;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var SystemBaseConfig,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SystemBaseConfig = (function(superClass) {
  extend(SystemBaseConfig, superClass);

  function SystemBaseConfig() {
    return SystemBaseConfig.__super__.constructor.apply(this, arguments);
  }

  SystemBaseConfig.prototype.initOpts = function() {
    SystemBaseConfig.__super__.initOpts.call(this);
    return this.addOpts({
      unauthenticated_visible: {
        check: Boolean
      }
    });
  };

  SystemBaseConfig.prototype.readOpts = function() {
    SystemBaseConfig.__super__.readOpts.call(this);
    return this.__class = "system";
  };

  return SystemBaseConfig;

})(BaseConfig);
// Generated by CoffeeScript 1.10.0
var BaseConfigPlugin,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

BaseConfigPlugin = (function(superClass) {
  extend(BaseConfigPlugin, superClass);

  function BaseConfigPlugin() {
    return BaseConfigPlugin.__super__.constructor.apply(this, arguments);
  }

  BaseConfigPlugin.prototype.getFieldDefFromParm = function(baseConfig, pname, def, parent_def) {};

  BaseConfigPlugin.prototype.onDataChanged = function(data, dataField, event) {};

  return BaseConfigPlugin;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var CustomDataType,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CustomDataType = (function(superClass) {
  extend(CustomDataType, superClass);

  function CustomDataType(mask, fieldSchema) {
    if (mask == null) {
      mask = null;
    }
    if (fieldSchema == null) {
      fieldSchema = null;
    }
    if (arguments.length === 0) {
      return;
    }
    CustomDataType.__super__.constructor.call(this, mask, fieldSchema);
  }

  CustomDataType.prototype.getClassFunction = function() {
    return window[getObjectClass(this)];
  };

  CustomDataType.prototype.getCustomDataTypeName = function() {
    return assert(false, getObjectClass(this) + ".getCustomDataTypeName needs to be implemented.");
  };

  CustomDataType.prototype.getCustomDataTypeNameLocalized = function() {
    return $$(this.getL10NPrefix() + ".name");
  };

  CustomDataType.prototype.getCustomSchemaSettingNameLocalized = function(name) {
    return $$(this.getL10NPrefix() + ".setting.schema." + name);
  };

  CustomDataType.prototype.getCustomMaskSettingNameLocalized = function(name) {
    return $$(this.getL10NPrefix() + ".setting.mask." + name);
  };

  CustomDataType.prototype.getL10NPrefix = function() {
    return toDash(getObjectClass(this)).replace(/-/g, ".");
  };

  CustomDataType.prototype.getCustomSchemaSettings = function() {
    return this.ColumnSchema.custom_settings || {};
  };

  CustomDataType.prototype.getCustomMaskSettings = function() {
    return this.FieldSchema.custom_settings || {};
  };

  CustomDataType.prototype.isVisible = function(mode, opts) {
    if (!CustomDataType.__super__.isVisible.call(this, mode, opts) || mode === 'fulltext') {
      return false;
    } else {
      return true;
    }
  };

  CustomDataType.prototype.renderCustomDataOptionsInDatamodel = function(custom_settings) {
    var div, i, info, len, txt;
    info = this.getCustomDataOptionsInDatamodelInfo(custom_settings);
    if (!(info != null ? info.length : void 0)) {
      return;
    }
    div = CUI.DOM.element("DIV", {
      "class": "ez5-tag-holder"
    });
    for (i = 0, len = info.length; i < len; i++) {
      txt = info[i];
      div.appendChild(new Label({
        "class": "ez5-tag",
        text: txt
      }).DOM);
    }
    return div;
  };

  CustomDataType.prototype.getCustomDataOptionsInDatamodelInfo = function(custom_settings) {
    return assert(false, getObjectClass(this) + ".getCustomDataOptionsInDatamodelInfo needs to be implemented.");
  };

  CustomDataType.prototype.hasUserData = function(data) {
    return !this.isEmpty(data);
  };

  CustomDataType.__customDataTypes = {};

  CustomDataType.get = function(customDataTypeName) {
    var dt;
    dt = this.__customDataTypes[customDataTypeName];
    if (!dt) {
      return new CustomDataTypeUnknown({
        name: customDataTypeName
      });
    } else {
      return dt;
    }
  };

  CustomDataType.getTypes = function() {
    var key, ref, results, value;
    ref = this.__customDataTypes;
    results = [];
    for (key in ref) {
      value = ref[key];
      results.push(value);
    }
    return results;
  };

  CustomDataType.register = function(customDataType) {
    var custom_name, dt;
    assert(CUI.isFunction(customDataType) && new customDataType() instanceof CustomDataType, "ez5.register_custom_data_type", "customDataType needs to be instance of CustomDataType.", {
      customDataType: customDataType
    });
    dt = new customDataType();
    custom_name = dt.getCustomDataTypeName() || "";
    assert(custom_name.match("^custom:[a-z][0-9a-z_\.\-]*[0-9a-z]$"), "ez5.register_custom_data_type", "customDataType \"" + custom_name + "\" name is no good.", {
      customDataTypeName: custom_name
    });
    assert(!this.__customDataTypes[custom_name], "ez5.register_custom_data_type", "customDataType \"" + custom_name + "\" already registered.", {
      customDataTypes: this.__customDataTypes
    });
    this.__customDataTypes[custom_name] = dt;
    return console.info("Registered Custom Data Type:", custom_name);
  };

  return CustomDataType;

})(DataColumn);
// Generated by CoffeeScript 1.10.0
var CustomDataTypeUnknown,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CustomDataTypeUnknown = (function(superClass) {
  extend(CustomDataTypeUnknown, superClass);

  function CustomDataTypeUnknown(_opts) {
    var check_map;
    if (_opts == null) {
      _opts = {};
    }
    check_map = {
      name: {
        mandatory: true,
        type: String
      }
    };
    CUI.Element.readOpts.call(this, _opts, "new CustomDataTypeUnknown", check_map, true);
  }

  CustomDataTypeUnknown.prototype.renderCustomDataOptionsInDatamodel = function(custom_settings) {
    return new EmptyLabel({
      text: $$("custom.data.type.unknown.options")
    });
  };

  CustomDataTypeUnknown.prototype.getCustomDataTypeNameLocalized = function() {
    return $$("custom.data.type.unknown.name", {
      name: this._name
    });
  };

  CustomDataTypeUnknown.prototype.getCustomSchemaSettings = function() {
    return [];
  };

  CustomDataTypeUnknown.prototype.getCustomMaskSettings = function() {
    return [];
  };

  return CustomDataTypeUnknown;

})(CustomDataType);
// Generated by CoffeeScript 1.10.0
var CustomDataTypeConfig, CustomDataTypeConfigMask, CustomDataTypeConfigSchema, CustomDataTypeDatamodelSupport,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CustomDataTypeDatamodelSupport = (function(superClass) {
  extend(CustomDataTypeDatamodelSupport, superClass);

  function CustomDataTypeDatamodelSupport() {
    return CustomDataTypeDatamodelSupport.__super__.constructor.apply(this, arguments);
  }

  CustomDataTypeDatamodelSupport.prototype.datamodelSetRowState = function(_opts) {
    var config, opts;
    opts = CUI.Element.readOpts(_opts, this.__cls + ".datamodelSetRowState", {
      row: {
        check: ListViewEditTreeNode
      },
      field_numbers: {
        check: "PlainObject"
      },
      hide: {
        check: Array
      },
      disable: {
        check: Array
      }
    });
    config = this.getCustomTypeConfig(opts.row.data.type).schema;
    if (config.length === 0) {
      opts.hide.push(opts.field_numbers.check);
    }
    return opts.hide.push("reverse_edit", "bidirectional", "bidirectional_reverse");
  };

  CustomDataTypeDatamodelSupport.prototype.maskSetRowState = function(_opts) {
    var config, opts;
    opts = CUI.Element.readOpts(_opts, this.__cls + ".maskSetRowState", {
      row: {
        check: ListViewEditTreeMaskRowNode
      },
      field_numbers: {
        check: "PlainObject"
      },
      hide: {
        check: Array
      },
      disable: {
        check: Array
      }
    });
    config = this.getCustomTypeConfig(opts.row.column_type).mask;
    if (config.length === 0) {
      return opts.hide.push(opts.field_numbers.options);
    }
  };

  CustomDataTypeDatamodelSupport.prototype.getCustomSchemaOptions = function(data) {
    return this.__getCustomDatamodelOptions(data, data.type, "schema");
  };

  CustomDataTypeDatamodelSupport.prototype.getCustomMaskOptions = function(data) {
    return this.__getCustomDatamodelOptions(data, data.field._column.type, "mask");
  };

  CustomDataTypeDatamodelSupport.prototype.getCustomMaskOptionTags = function(data) {
    var config, config_item, custom_data_type, custom_name, custom_settings, def, dt, i, len, param, ref, setting, tags;
    custom_data_type = data.field._column.type;
    dt = CustomDataType.get(custom_data_type);
    custom_name = custom_data_type.match("^custom:(.*)$")[1];
    config = this.getCustomTypeConfig(custom_data_type).mask;
    custom_settings = data.custom_settings;
    tags = [];
    for (i = 0, len = config.length; i < len; i++) {
      config_item = config[i];
      setting = custom_settings[config_item.name];
      if (!setting) {
        continue;
      }
      ref = config_item.parameters;
      for (param in ref) {
        def = ref[param];
        if (isEmpty(setting[param]) || setting[param] === false) {
          continue;
        }
        if (def.type === "select") {
          tags.push($$(dt.getL10NPrefix() + ".config.option.mask." + config_item.name + "." + param + "." + setting[param]));
        } else {
          tags.push($$(dt.getL10NPrefix() + ".config.parameter.mask." + config_item.name + "." + param + ".label"));
        }
      }
    }
    return tags;
  };

  CustomDataTypeDatamodelSupport.prototype.getCustomTypeConfig = function(custom_data_type) {
    var config;
    config = ez5.session.getCustomDataTypes()[custom_data_type] || {};
    if (!config.mask) {
      config.mask = [];
    }
    if (!config.schema) {
      config.schema = [];
    }
    return config;
  };

  CustomDataTypeDatamodelSupport.prototype.__getCustomDatamodelOptions = function(data, custom_data_type, type) {
    var bc, config, config_item, custom_name, custom_settings, dt, fields, i, len;
    dt = CustomDataType.get(custom_data_type);
    custom_name = custom_data_type.match("^custom:(.*)$")[1];
    config = this.getCustomTypeConfig(custom_data_type)[type];
    custom_settings = data.custom_settings;
    fields = [];
    for (i = 0, len = config.length; i < len; i++) {
      config_item = config[i];
      config_item.CustomDataType = dt;
      switch (type) {
        case "schema":
          bc = new CustomDataTypeConfigSchema(config_item);
          break;
        case "mask":
          bc = new CustomDataTypeConfigMask(config_item);
      }
      if (!custom_settings[bc.name()]) {
        custom_settings[bc.name()] = {};
      }
      fields.push(bc.getField(custom_settings));
    }
    return fields;
  };

  CustomDataTypeDatamodelSupport.prototype.getCustom = function(data) {};

  CustomDataTypeDatamodelSupport.prototype.renderDisplayForCustomSchemaOptions = function(data) {
    var dt;
    dt = CustomDataType.get(data.type);
    return dt.renderCustomDataOptionsInDatamodel(data.custom_settings);
  };

  return CustomDataTypeDatamodelSupport;

})(CUI.Element);

CustomDataTypeConfig = (function(superClass) {
  extend(CustomDataTypeConfig, superClass);

  function CustomDataTypeConfig() {
    return CustomDataTypeConfig.__super__.constructor.apply(this, arguments);
  }

  CustomDataTypeConfig.prototype.initOpts = function() {
    CustomDataTypeConfig.__super__.initOpts.call(this);
    return this.addOpts({
      CustomDataType: {
        check: CustomDataType
      }
    });
  };

  CustomDataTypeConfig.prototype.readOpts = function() {
    CustomDataTypeConfig.__super__.readOpts.call(this);
    return this.__l10n_prefix = this._CustomDataType.getL10NPrefix();
  };

  return CustomDataTypeConfig;

})(BaseConfig);

CustomDataTypeConfigSchema = (function(superClass) {
  extend(CustomDataTypeConfigSchema, superClass);

  function CustomDataTypeConfigSchema() {
    return CustomDataTypeConfigSchema.__super__.constructor.apply(this, arguments);
  }

  CustomDataTypeConfigSchema.prototype.readOpts = function() {
    CustomDataTypeConfigSchema.__super__.readOpts.call(this);
    return this.__class = "schema";
  };

  CustomDataTypeConfigSchema.prototype.nameLocalized = function() {
    return this._CustomDataType.getCustomSchemaSettingNameLocalized(this._name);
  };

  return CustomDataTypeConfigSchema;

})(CustomDataTypeConfig);

CustomDataTypeConfigMask = (function(superClass) {
  extend(CustomDataTypeConfigMask, superClass);

  function CustomDataTypeConfigMask() {
    return CustomDataTypeConfigMask.__super__.constructor.apply(this, arguments);
  }

  CustomDataTypeConfigMask.prototype.readOpts = function() {
    CustomDataTypeConfigMask.__super__.readOpts.call(this);
    return this.__class = "mask";
  };

  CustomDataTypeConfigMask.prototype.nameLocalized = function() {
    return this._CustomDataType.getCustomMaskSettingNameLocalized(this._name);
  };

  return CustomDataTypeConfigMask;

})(CustomDataTypeConfig);
// Generated by CoffeeScript 1.10.0
var CSVImporter,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

CSVImporter = (function(superClass) {
  extend(CSVImporter, superClass);

  function CSVImporter() {
    return CSVImporter.__super__.constructor.apply(this, arguments);
  }

  CSVImporter.prototype.start = function() {
    this.resetFile();
    return this.showModal();
  };

  CSVImporter.prototype.resetFile = function() {
    this.__form_data = {
      header_row: 0,
      dest_field_row: 0,
      csv_header_rows: 0,
      csv_rows_count: 0,
      table_preview_chunk_size: 100,
      mapping: {},
      match_existing: null,
      control_fields_warning_shown: null,
      csv_field_names: [],
      preview_offset: 0,
      record_preview: 0,
      csv_filename: null,
      action_chunk_size: this.getActionChunkSizes()[0]
    };
    this.cf_idx = {};
    this.__csv_data = null;
    this.__csv_text = null;
    this.dest_fields = [];
    return this.resetData();
  };

  CSVImporter.prototype.__initControlFieldIndeces = function() {
    var cf, i, len, ref;
    this.cf_idx = {};
    ref = this.control_fields;
    for (i = 0, len = ref.length; i < len; i++) {
      cf = ref[i];
      this.cf_idx[cf.getName()] = cf.getColIdx();
    }
    return this;
  };

  CSVImporter.prototype.resetData = function() {
    this.__stats = null;
    this.__readyRows = null;
    this.__form_data.init_mapping_done = false;
    return this.__form_data.mapping = {};
  };

  CSVImporter.prototype.getTitleLocaKey = function() {
    return "csv.importer.title";
  };

  CSVImporter.prototype.getDestinationFields = function() {
    return [];
  };

  CSVImporter.prototype.getControlFields = function() {
    var f, fields, i, len, ref;
    fields = [];
    ref = [
      {
        name: "row_idx"
      }, {
        name: "operation",
        format: "json"
      }, {
        name: "status"
      }, {
        name: "timestamp"
      }, {
        name: "status_text"
      }, {
        name: "id"
      }, {
        name: "version"
      }
    ];
    for (i = 0, len = ref.length; i < len; i++) {
      f = ref[i];
      fields.push(new CSVImporterControlField(f));
    }
    return fields;
  };

  CSVImporter.prototype.action = function() {
    return assert(false, this.__cls + ".action needs implementation.");
  };

  CSVImporter.prototype.__action = function(ev, op) {
    var chunk_size, dfr, rows, start_action;
    chunk_size = this.__form_data.action_chunk_size;
    rows = this.getReadyRows(op);
    start_action = (function(_this) {
      return function() {
        var i, len, promise, row, toaster;
        for (i = 0, len = rows.length; i < len; i++) {
          row = rows[i];
          row[_this.cf_idx.status] = "processing";
        }
        _this.updateStatsTable();
        promise = CUI.chunkWork.call(_this, {
          items: rows,
          chunk_size: chunk_size,
          call: function(items) {
            return _this.action(ev, op, items);
          }
        });
        toaster = CUI.toaster({
          text_icon: "spinner",
          text: $$("csv.importer.action.start"),
          show_ms: 0
        });
        promise.progress(function(info) {
          return toaster.setText($$("csv.importer.action.progress", {
            progress: info.progress
          }));
        });
        promise.always(function() {
          var j, len1;
          for (j = 0, len1 = rows.length; j < len1; j++) {
            row = rows[j];
            row[_this.cf_idx.timestamp] = window.moment().format("YYYY-MM-DD HH:mm:ss");
            if (row[_this.cf_idx.status] === "processing") {
              row[_this.cf_idx.status] = "ready";
            }
          }
          _this.updateModal();
          return toaster.destroy();
        });
        promise.fail(dfr.reject);
        return promise.done(dfr.resolve);
      };
    })(this);
    dfr = new CUI.Deferred();
    if (rows.length === 0) {
      CUI.problem({
        text: $$("csv.importer.no_ready_rows_found_to_import"),
        markdown: true
      }).done((function(_this) {
        return function() {
          return dfr.reject();
        };
      })(this));
    } else if (ev.hasModifierKey()) {
      start_action();
    } else {
      CUI.confirm({
        text: $$("csv.importer.action.confirm." + op, {
          count: rows.length
        })
      }).done((function(_this) {
        return function() {
          return start_action();
        };
      })(this)).fail(dfr.reject);
    }
    return dfr.promise();
  };

  CSVImporter.prototype.__prepareData = function() {
    var promise, toaster;
    toaster = CUI.toaster({
      text_icon: "spinner",
      text: $$("csv.importer.preparing_data.start"),
      show_ms: 0
    });
    promise = this.prepareData(this.getRows());
    promise.progress((function(_this) {
      return function(info) {
        return toaster.setText($$("csv.importer.preparing_data.progress", {
          progress: info.progress
        }));
      };
    })(this));
    promise.always((function(_this) {
      return function() {
        return toaster.destroy();
      };
    })(this));
    promise.fail((function(_this) {
      return function() {
        return _this.resetReadyRows();
      };
    })(this));
    promise.done((function(_this) {
      return function() {
        return _this.collectReadyRows();
      };
    })(this));
    return promise;
  };

  CSVImporter.prototype.prepareData = function(rows) {
    return CUI.chunkWork.call(this, {
      items: rows,
      chunk_size: this.__form_data.action_chunk_size,
      call: (function(_this) {
        return function(items, offset) {
          return _this.prepareDataChunk(items, offset);
        };
      })(this)
    });
  };

  CSVImporter.prototype.prepareDestinationFieldsDataChunk = function(rows, offset) {
    return this.callOnMappedDestFields((function(_this) {
      return function(dest_field, configs) {
        return dest_field.prepareDataChunk(configs, rows, offset);
      };
    })(this));
  };

  CSVImporter.prototype.prepareDataChunk = function(rows, offset) {
    var dfr;
    dfr = new CUI.Deferred();
    this.prepareDestinationFieldsDataChunk(rows, offset).done((function(_this) {
      return function() {
        return _this.preparePrimaryKeyDataChunk(rows, offset).done(function() {
          return _this.prepareExistingDataChunk(rows, offset).done(dfr.resolve).fail(dfr.reject);
        }).fail(dfr.reject);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  CSVImporter.prototype.__updateStats = function() {
    var i, len, ref, row, row_i, status;
    this.__stats = {
      rows: this.getRows().length,
      ready: 0,
      invalid: 0,
      processing: 0,
      done: 0,
      failed: 0
    };
    ref = this.getRows();
    for (row_i = i = 0, len = ref.length; i < len; row_i = ++i) {
      row = ref[row_i];
      status = row[this.cf_idx.status];
      if (isEmpty(status)) {
        continue;
      }
      if (this.__stats[status] === void 0) {
        this.__stats[status] = 0;
      }
      this.__stats[status]++;
    }
    return this.__stats;
  };

  CSVImporter.prototype.resetReadyRows = function() {
    var i, len, ref, row;
    this.__readyRows = null;
    if (this.cf_idx.status) {
      ref = this.getRows();
      for (i = 0, len = ref.length; i < len; i++) {
        row = ref[i];
        row[this.cf_idx.status] = "";
        row[this.cf_idx.operation] = "";
        row[this.cf_idx.status_text] = "";
      }
    }
    return this;
  };

  CSVImporter.prototype.collectReadyRows = function() {
    var error, ex, i, j, k, len, len1, ops, ref, ref1, row, row_i, status;
    this.__readyRows = {
      insert: [],
      update: [],
      "delete": []
    };
    ref = this.getRows();
    for (row_i = i = 0, len = ref.length; i < len; row_i = ++i) {
      row = ref[row_i];
      status = row[this.cf_idx.status];
      if (status !== "ready") {
        continue;
      }
      try {
        ops = JSON.parse(row[this.cf_idx.operation]);
      } catch (error) {
        ex = error;
        continue;
      }
      ref1 = ["insert", "update", "delete"];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        k = ref1[j];
        if (indexOf.call(ops, k) >= 0) {
          this.__readyRows[k].push(row_i);
        }
      }
    }
  };

  CSVImporter.prototype.getRow = function(row_i) {
    return this.__rows[row_i + this.__form_data.csv_header_rows];
  };

  CSVImporter.prototype.getRows = function() {
    var ref;
    return (ref = this.__rows) != null ? ref.slice(this.__form_data.csv_header_rows) : void 0;
  };

  CSVImporter.prototype.getControlRecord = function(row) {
    var cf, i, len, record, ref;
    record = {};
    ref = this.control_fields;
    for (i = 0, len = ref.length; i < len; i++) {
      cf = ref[i];
      record[cf.name] = row[cf.getColIdx()];
    }
    return record;
  };

  CSVImporter.prototype.getSourceRecord = function(row) {
    var csv_field_idx, csv_field_name, i, len, record, ref;
    record = {};
    ref = this.__form_data.csv_field_names;
    for (csv_field_idx = i = 0, len = ref.length; i < len; csv_field_idx = ++i) {
      csv_field_name = ref[csv_field_idx];
      record[csv_field_name] = row[csv_field_idx];
    }
    return record;
  };

  CSVImporter.prototype.getRecord = function(row, opts) {
    var configs, dest_field, i, len, record, ref;
    if (opts == null) {
      opts = {};
    }
    record = {};
    ref = this.dest_fields;
    for (i = 0, len = ref.length; i < len; i++) {
      dest_field = ref[i];
      configs = this.getMappingConfigsForDestinationField(dest_field);
      if (configs.length > 0) {
        dest_field.setRecordValue(record, configs, row, opts);
      }
    }
    return record;
  };

  CSVImporter.prototype.getMappedDestinationFields = function() {
    var configs, dest_field, i, len, mapped_dest_fields, ref;
    mapped_dest_fields = [];
    ref = this.dest_fields;
    for (i = 0, len = ref.length; i < len; i++) {
      dest_field = ref[i];
      configs = this.getMappingConfigsForDestinationField(dest_field);
      if (configs.length > 0) {
        mapped_dest_fields.push(dest_field);
      }
    }
    return mapped_dest_fields;
  };

  CSVImporter.prototype.getDestinationFieldRow = function() {
    return this.__rows[this.__form_data.dest_field_row - 1];
  };

  CSVImporter.prototype.getHeaderRow = function() {
    return this.__rows[this.__form_data.header_row - 1];
  };

  CSVImporter.prototype.getMappingConfigsForDestinationField = function(dest_field) {
    var col, configs, csv_field_idx, i, len, row;
    configs = [];
    row = this.getHeaderRow();
    if (row) {
      for (csv_field_idx = i = 0, len = row.length; i < len; csv_field_idx = ++i) {
        col = row[csv_field_idx];
        if (this.__form_data.mapping[csv_field_idx] !== dest_field.getName()) {
          continue;
        }
        configs.push({
          csv_field_idx: csv_field_idx,
          config: this.__form_data.mapping["custom_" + csv_field_idx]
        });
      }
    }
    return configs;
  };

  CSVImporter.prototype.initMapping = function() {
    var cf, cf_indices, config, csv_field_idx, dest_field, i, j, len, len1, name, ref, row;
    row = this.getDestinationFieldRow();
    if (row) {
      this.__form_data.mapping = {};
      cf_indices = (function() {
        var i, len, ref, results;
        ref = this.control_fields;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          cf = ref[i];
          results.push(cf.getColIdx());
        }
        return results;
      }).call(this);
      for (csv_field_idx = i = 0, len = row.length; i < len; csv_field_idx = ++i) {
        name = row[csv_field_idx];
        if (indexOf.call(cf_indices, csv_field_idx) >= 0) {
          continue;
        }
        ref = this.dest_fields;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          dest_field = ref[j];
          if (!dest_field.matchesColumnName(name)) {
            continue;
          }
          config = dest_field.getDefaultConfigFromColumnName(name);
          this.__form_data.mapping[csv_field_idx] = dest_field.getName();
          this.__form_data.mapping["custom_" + csv_field_idx] = config;
        }
      }
    }
    this.__form_data.init_mapping_done = true;
    return this;
  };

  CSVImporter.prototype.getMappingForm = function() {
    var csv_field_idx, csv_field_name, fn, format_opts, get_cfield, get_dest_options, i, len, mapping_fields, mapping_form, ref;
    if (!this.__csv_data) {
      return new EmptyLabel({
        text: $$("csv.importer.no_file.placeholder"),
        centered: true
      });
    }
    if (!this.dest_fields.length) {
      return new EmptyLabel({
        text: $$("csv.importer.no_destination_fields.placeholder"),
        centered: true
      });
    }
    mapping_fields = [];
    get_dest_options = (function(_this) {
      return function() {
        var dest_field, i, len, opts, ref;
        opts = [
          {
            text: $$("csv.importer.mapping.dest_col_name.unmapped"),
            value: null
          }, {
            divider: true
          }
        ];
        ref = _this.dest_fields;
        for (i = 0, len = ref.length; i < len; i++) {
          dest_field = ref[i];
          opts.push({
            value: dest_field.getName(),
            text: dest_field.getLabel()
          });
        }
        return opts;
      };
    })(this);
    get_cfield = (function(_this) {
      return function(col_idx) {
        var cf, i, len, ref;
        ref = _this.control_fields;
        for (i = 0, len = ref.length; i < len; i++) {
          cf = ref[i];
          if (cf.getColIdx() === col_idx) {
            return cf;
          }
        }
        return null;
      };
    })(this);
    ref = this.__form_data.csv_field_names;
    fn = (function(_this) {
      return function(csv_field_idx) {
        var custom_form;
        custom_form = new Form({
          name: "custom_" + csv_field_idx,
          undo_and_changed_support: false,
          render_as_block: false,
          fields: function() {
            var dest_field;
            dest_field = _this.getDestinationFieldByName(_this.__form_data.mapping[csv_field_idx]);
            if (!dest_field) {
              return [];
            }
            return dest_field.getCustomFields();
          }
        });
        mapping_fields.push({
          type: Select,
          undo_and_changed_support: false,
          form: {
            label: csv_field_name
          },
          name: "" + csv_field_idx,
          onDataChanged: function(data, df) {
            return custom_form.reload();
          },
          options: get_dest_options
        });
        return mapping_fields.push(custom_form);
      };
    })(this);
    for (csv_field_idx = i = 0, len = ref.length; i < len; csv_field_idx = ++i) {
      csv_field_name = ref[csv_field_idx];
      if (get_cfield(csv_field_idx)) {
        continue;
      }
      format_opts = [
        {
          text: $$("csv.importer.form.custom_format.string"),
          value: "string"
        }, {
          text: $$("csv.importer.form.custom_format.boolean"),
          value: "boolean"
        }, {
          text: $$("csv.importer.form.custom_format.number"),
          value: "number"
        }, {
          text: $$("csv.importer.form.custom_format.json"),
          value: "json"
        }
      ];
      fn(csv_field_idx);
      if (this.__form_data.mapping[csv_field_idx] === void 0) {
        this.__form_data.mapping[csv_field_idx] = null;
      }
    }
    mapping_form = new Form({
      data: this.__form_data.mapping,
      undo_and_changed_support: false,
      maximize_horizontal: true,
      onDataChanged: (function(_this) {
        return function() {
          _this.resetReadyRows();
          _this.updateRecordPreview();
          _this.updateUploadForm();
          _this.updateStatsTable();
          return _this.updateButtons();
        };
      })(this),
      "class": "ez5-csv-importer-mapping",
      fields: mapping_fields
    });
    return mapping_form.start();
  };

  CSVImporter.prototype.getPrepareDataSearchOpts = function() {
    return {};
  };

  CSVImporter.prototype.getMatchExistingValue = function(obj, match_existing) {
    var error, ex, get_eval_split;
    get_eval_split = (function(_this) {
      return function(key) {
        return 'obj["' + key.split(".").join('"]["') + '"]';
      };
    })(this);
    try {
      return eval(get_eval_split(this.getDestinationFieldByName(match_existing).getRecordKeyPath()));
    } catch (error) {
      ex = error;
      return null;
    }
  };

  CSVImporter.prototype.getMatchExistingValueFromSearchResponse = function(obj, match_existing) {
    return this.getMatchExistingValue(obj, match_existing);
  };

  CSVImporter.prototype.getDestinationFieldByName = function(name) {
    var dest_field, i, len, parts, ref;
    if (isEmpty(name)) {
      return null;
    }
    parts = name.split("#");
    ref = this.dest_fields;
    for (i = 0, len = ref.length; i < len; i++) {
      dest_field = ref[i];
      if (dest_field.getName() === parts[0]) {
        return dest_field;
      }
      null;
    }
  };

  CSVImporter.prototype.setRowInvalid = function(row, err_loca_key, err_loca_key_attrs) {
    row[this.cf_idx.operation] = null;
    row[this.cf_idx.status] = "invalid";
    if (err_loca_key) {
      row[this.cf_idx.status_text] = $$(err_loca_key, err_loca_key_attrs);
    }
    return this;
  };

  CSVImporter.prototype.supportsDelete = function() {
    return false;
  };

  CSVImporter.prototype.setRowUpdate = function(row, obj) {
    if (this.supportsDelete()) {
      row[this.cf_idx.operation] = JSON.stringify(["update", "delete"]);
    } else {
      row[this.cf_idx.operation] = JSON.stringify(["update"]);
    }
    row[this.cf_idx.status] = "ready";
    row[this.cf_idx.version] = obj._version;
    row[this.cf_idx.id] = obj._id;
    return this;
  };

  CSVImporter.prototype.setRowInsert = function(row) {
    row[this.cf_idx.operation] = JSON.stringify(["insert"]);
    row[this.cf_idx.id] = null;
    row[this.cf_idx.version] = 1;
    row[this.cf_idx.status] = "ready";
    return this;
  };

  CSVImporter.prototype.prepareExistingDataChunk = function(rows) {
    var unique_dest_field;
    unique_dest_field = this.getDestinationFieldByName(this.__form_data.match_existing);
    if (!unique_dest_field) {
      return CUI.resolvedPromise();
    }
    return this.prepareMatchExistingDataChunk(rows);
  };

  CSVImporter.prototype.prepareMatchExistingDataChunk = function(rows) {
    var i, len, ot_name, record, row, search_opts, unique_dest_field, unique_value, unique_values;
    unique_values = {};
    ot_name = this.getObjecttype();
    unique_dest_field = this.getDestinationFieldByName(this.__form_data.match_existing);
    for (i = 0, len = rows.length; i < len; i++) {
      row = rows[i];
      if (row[this.cf_idx.status] === "invalid") {
        continue;
      }
      record = this.getRecord(row);
      unique_value = unique_dest_field.getMatchExistingValue(record, this.__form_data.match_existing);
      if (isEmpty(unique_value)) {
        this.setRowInsert(row);
        continue;
      }
      if (unique_values[unique_value]) {
        this.setRowInvalid(row, "csv.importer.unique_key_duplicate");
        continue;
      }
      unique_values[unique_value] = row;
    }
    if (!Object.keys(unique_values).length) {
      return CUI.resolvedPromise();
    }
    search_opts = this.getPrepareDataSearchOpts();
    search_opts.limit = 100000;
    search_opts.search = unique_dest_field.getMatchExistingSearch(Object.keys(unique_values), this.__form_data.match_existing);
    return ez5.api.search({
      json_data: search_opts
    }).done((function(_this) {
      return function(data) {
        var found_unique_values, j, len1, obj, ref;
        found_unique_values = {};
        ref = data.objects;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          obj = ref[j];
          unique_value = _this.getMatchExistingValueFromSearchResponse(obj, _this.__form_data.match_existing);
          row = unique_values[unique_value];
          if (!row) {
            console.error("CSVImporter[prepareMatchExistingDataChunk]: No row matched for object:", obj, "Unique Value:", unique_value, "Unique Values:", unique_values);
            continue;
          }
          if (found_unique_values[unique_value]) {
            found_unique_values[unique_value]++;
            _this.setRowInvalid(row, "csv.importer.error.duplicate_rows_found");
            continue;
          }
          if (row[_this.cf_idx.status] !== "ready") {
            _this.setRowUpdate(row, obj[ot_name]);
          }
          found_unique_values[unique_value] = 1;
        }
        for (unique_value in unique_values) {
          row = unique_values[unique_value];
          if (!found_unique_values[unique_value]) {
            _this.setRowInsert(row);
          }
        }
      };
    })(this)).fail((function(_this) {
      return function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = rows.length; j < len1; j++) {
          row = rows[j];
          results.push(_this.setRowInvalid(row));
        }
        return results;
      };
    })(this));
  };

  CSVImporter.prototype.preparePrimaryKeyDataChunk = function(rows) {
    var easydb_id, easydb_ids, i, len, ot_name, record, row, search_opts, unique_dest_field;
    ot_name = this.getObjecttype();
    unique_dest_field = this.getDestinationFieldByName(this.__form_data.match_existing);
    easydb_ids = {};
    for (i = 0, len = rows.length; i < len; i++) {
      row = rows[i];
      if (row[this.cf_idx.status] === "invalid") {
        continue;
      }
      record = this.getRecord(row);
      if (CUI.isEmptyObject(record)) {
        this.setRowInvalid(row, "csv.importer.empty_record");
        continue;
      }
      easydb_id = row[this.cf_idx.id];
      if (easydb_id) {
        if (easydb_ids[easydb_id]) {
          this.setRowInvalid(row, "csv.importer.easydb_id_duplicate");
          continue;
        }
        easydb_ids[easydb_id] = row;
        continue;
      }
      if (!unique_dest_field) {
        this.setRowInsert(row);
        continue;
      }
    }
    if (!Object.keys(easydb_ids).length) {
      return CUI.resolvedPromise();
    }
    search_opts = this.getPrepareDataSearchOpts();
    search_opts.limit = rows.length;
    search_opts.search = [
      {
        type: "in",
        "in": (function() {
          var j, len1, ref, results;
          ref = Object.keys(easydb_ids);
          results = [];
          for (j = 0, len1 = ref.length; j < len1; j++) {
            easydb_id = ref[j];
            results.push(parseInt(easydb_id));
          }
          return results;
        })(),
        fields: [ot_name + "._id"]
      }
    ];
    return ez5.api.search({
      json_data: search_opts
    }).done((function(_this) {
      return function(data) {
        var j, len1, obj, ref, results;
        ref = data.objects;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          obj = ref[j];
          row = easydb_ids[obj[ot_name]._id];
          if (!row) {
            continue;
          }
          _this.setRowUpdate(row, obj[ot_name]);
          delete easydb_ids[obj[ot_name]._id];
        }
        results = [];
        for (easydb_id in easydb_ids) {
          row = easydb_ids[easydb_id];
          results.push(_this.setRowInvalid(row, "csv.importer.easydb_id_not_found"));
        }
        return results;
      };
    })(this)).fail((function(_this) {
      return function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = rows.length; j < len1; j++) {
          row = rows[j];
          results.push(_this.setRowInvalid(row));
        }
        return results;
      };
    })(this));
  };

  CSVImporter.prototype.getRecordPreview = function() {
    var get_content, get_row, navi_record_preview, vl_record_preview;
    if (!this.__csv_data) {
      return new EmptyLabel({
        text: $$("csv.importer.no_file.placeholder"),
        centered: true
      });
    }
    get_row = (function(_this) {
      return function() {
        var row;
        row = _this.getRow(_this.__form_data.record_preview);
        if (!row) {
          _this.__form_data.record_preview = 0;
          row = _this.getRow(_this.__form_data.record_preview);
        }
        return row;
      };
    })(this);
    if (!get_row()) {
      return new EmptyLabel({
        text: $$("csv.importer.error.csv_has_no_rows"),
        centered: true
      });
    }
    get_content = (function(_this) {
      return function() {
        var blk1, blk2, row;
        row = get_row();
        blk1 = new CUI.Block({
          text: $$("csv.importer.block.source_record_preview"),
          content: new CUI.ObjectDumper({
            object: _this.getSourceRecord(row),
            do_open: true
          }),
          padded: false
        });
        blk2 = new CUI.Block({
          text: $$("csv.importer.block.record_preview"),
          content: new CUI.ObjectDumper({
            object: _this.getRecord(row, {
              for_preview: true
            }),
            do_open: false
          }),
          padded: false
        });
        navi_record_preview.update({
          count: _this.__form_data.csv_rows_count,
          offset: _this.__form_data.record_preview,
          limit: 1
        });
        return new HorizontalLayout({
          maximize: true,
          left: {
            content: blk1,
            flexHandle: {
              closable: false,
              hidden: false,
              state_name: "csv-importer-record-preview"
            }
          },
          center: {
            content: blk2
          }
        });
      };
    })(this);
    navi_record_preview = new NavigationToolbar({
      onLoadPage: (function(_this) {
        return function(page) {
          _this.__form_data.record_preview = page;
          return vl_record_preview.replace(get_content(), "center");
        };
      })(this)
    });
    return vl_record_preview = new CUI.VerticalLayout({
      center: {
        content: get_content
      },
      bottom: {
        content: navi_record_preview
      }
    });
  };

  CSVImporter.prototype.getMatchExistingField = function() {
    var dest_field, dest_field_name, dest_field_set, field, i, k, len, ref, ref1, sel_opts, set_dest_fields;
    if (!this.dest_fields.length) {
      return;
    }
    field = {
      form: {
        label: $$("csv.importer.output_form.match_existing")
      }
    };
    sel_opts = [
      {
        text: $$("csv.importer.output_form.match_existing.insert_only"),
        value: null
      }
    ];
    set_dest_fields = [];
    ref = this.__form_data.mapping;
    for (k in ref) {
      dest_field_name = ref[k];
      if (k.startsWith("custom_")) {
        continue;
      }
      dest_field = this.getDestinationFieldByName(dest_field_name);
      if (dest_field) {
        set_dest_fields.push(dest_field);
      }
    }
    if (this.__form_data.match_existing) {
      dest_field_set = this.getDestinationFieldByName(this.__form_data.match_existing);
      if (indexOf.call(set_dest_fields, dest_field_set) < 0) {
        this.__form_data.match_existing = null;
      }
    }
    ref1 = this.dest_fields;
    for (i = 0, len = ref1.length; i < len; i++) {
      dest_field = ref1[i];
      dest_field.addToMatchExisting(sel_opts, set_dest_fields);
    }
    if (sel_opts.length === 0) {
      field.type = Output;
      field.placeholder = $$("csv.importer.output_form.match_existing.no_unique_field");
    } else {
      field.type = Select;
      field.options = sel_opts;
      field.name = "match_existing";
    }
    return field;
  };

  CSVImporter.prototype.getOutputSettingFields = function() {
    var chunk_sizes, cs, fields;
    fields = [];
    chunk_sizes = this.getActionChunkSizes();
    fields.push({
      type: Select,
      form: {
        label: $$("csv.importer.output_form.action_chunk_size")
      },
      options: (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = chunk_sizes.length; i < len; i++) {
          cs = chunk_sizes[i];
          results.push({
            value: cs,
            text: $$("csv.importer.output_form.action_chunk_size.opt", {
              size: cs
            })
          });
        }
        return results;
      })(),
      name: "action_chunk_size"
    });
    return fields;
  };

  CSVImporter.prototype.getActionChunkSizes = function() {
    return [100, 10, 1];
  };

  CSVImporter.prototype.getReadyRows = function(op) {
    var i, len, ref, row_i, rows;
    rows = [];
    ref = this.__readyRows[op];
    for (i = 0, len = ref.length; i < len; i++) {
      row_i = ref[i];
      rows.push(this.getRow(row_i));
    }
    return rows;
  };

  CSVImporter.prototype.__control_prefix = "easydb|";

  CSVImporter.prototype.__loadCSVData = function() {
    this.__csv_data = new CUI.CSVData();
    return this.__csv_data.parse({
      text: this.__csv_text
    }).done((function(_this) {
      return function() {
        _this.__rows = _this.__csv_data.getRows();
        return _this.reloadFormData();
      };
    })(this));
  };

  CSVImporter.prototype.reloadFormData = function() {
    var cf, col_idx, col_name, header_row, i, idx, j, l, len, len1, len2, len3, m, map, n, names, ref, ref1, ref2, ref3, ref4, row, txt;
    if (!this.__csv_data) {
      return this.updateModal();
    }
    this.dest_fields = this.getDestinationFields();
    this.dest_fields.sort(function(a, b) {
      return a.getLabel().localeCompare(b.getLabel());
    });
    this.control_fields = this.getControlFields();
    if (this.__form_data.header_row >= 2 || this.__form_data.dest_field_row >= 2) {
      this.__form_data.csv_header_rows = 2;
    } else if (this.__form_data.header_row >= 1 || this.__form_data.dest_field_row >= 1) {
      this.__form_data.csv_header_rows = 1;
    } else {
      this.__form_data.csv_header_rows = 0;
    }
    this.__form_data.csv_rows_count = Math.max(0, this.__rows.length - this.__form_data.csv_header_rows);
    if (this.__form_data.header_row > 0) {
      header_row = this.__form_data.header_row - 1;
      map = {};
      ref = this.control_fields;
      for (i = 0, len = ref.length; i < len; i++) {
        cf = ref[i];
        ref1 = this.__rows[header_row];
        for (col_idx = j = 0, len1 = ref1.length; j < len1; col_idx = ++j) {
          col_name = ref1[col_idx];
          if (col_name !== this.__control_prefix + cf.getName()) {
            continue;
          }
          map[cf.getName()] = cf;
          cf.setColIdx(col_idx);
        }
      }
      names = [];
      ref2 = this.control_fields;
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        cf = ref2[l];
        names.push(this.__control_prefix + cf.getName());
        if (map[cf.getName()]) {
          continue;
        }
        this.__rows[header_row].push(this.__control_prefix + cf.getName());
        map[cf.getName()] = cf;
        cf.setColIdx(this.__rows[header_row].length - 1);
      }
      this.__initControlFieldIndeces();
      ref3 = this.getRows();
      for (idx = m = 0, len3 = ref3.length; m < len3; idx = ++m) {
        row = ref3[idx];
        row[this.cf_idx.row_idx] = idx;
      }
      this.__csv_data.giveAllRowsSameNumberOfColumns();
    }
    if (this.__form_data.dest_field_row && !this.__form_data.init_mapping_done) {
      this.initMapping();
    }
    this.__form_data.csv_field_names = [];
    for (col_idx = n = 0, ref4 = this.__csv_data.getMaxColumnCount(); 0 <= ref4 ? n < ref4 : n > ref4; col_idx = 0 <= ref4 ? ++n : --n) {
      txt = null;
      if (this.__form_data.header_row) {
        txt = this.__rows[this.__form_data.header_row - 1][col_idx];
      }
      if (isEmpty(txt)) {
        txt = "Column " + (col_idx + 1);
      }
      this.__form_data.csv_field_names.push(txt);
    }
    this.resetReadyRows();
    this.updateModal();
  };

  CSVImporter.prototype.getUploadForm = function() {
    var csv_btn, csv_upload, dest_field_row_opts, fields, fr, header_row_opts, i, k, len, ref, ret, update_form;
    fr = new CUI.FileReader({
      onDone: (function(_this) {
        return function(frf) {
          _this.__form_data.csv_filename = frf.getFile().name;
          _this.loadSettings().always(function() {
            _this.__csv_text = frf.getResult();
            return _this.__loadCSVData();
          });
        };
      })(this)
    });
    if (!this.__csv_data) {
      csv_btn = new FileUploadButton({
        fileUpload: fr,
        text: $$("csv.importer.button.upload"),
        icon: "upload",
        multiple: false
      });
      csv_upload = {
        form: {
          label: $$("csv.importer.form.file")
        },
        type: DataFieldProxy,
        element: csv_btn.DOM
      };
    } else {
      csv_upload = {
        form: {
          label: $$("csv.importer.form.file")
        },
        type: Output,
        multiline: false,
        name: "csv_filename",
        onDataChanged: (function(_this) {
          return function() {
            return _this.resetFile();
          };
        })(this),
        allow_delete: true
      };
    }
    header_row_opts = [];
    dest_field_row_opts = [];
    ref = [0, 1, 2];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      header_row_opts.push({
        text: $$("csv.importer.form.header_row.option." + k),
        value: k
      });
      dest_field_row_opts.push({
        text: $$("csv.importer.form.dest_field_row.option." + k),
        value: k
      });
    }
    fields = [
      csv_upload, {
        form: {
          label: $$("csv.importer.form.header_row")
        },
        type: Select,
        disabled: this.__form_data.header_row > 0,
        name: "header_row",
        options: header_row_opts
      }, {
        form: {
          label: $$("csv.importer.form.dest_field_row")
        },
        type: Select,
        onDataChanged: (function(_this) {
          return function() {
            return _this.__form_data.init_mapping_done = false;
          };
        })(this),
        name: "dest_field_row",
        options: dest_field_row_opts
      }
    ];
    this.__upload_form_vl = new CUI.VerticalLayout({
      center: {
        "class": "ez5-csv-importer-upload"
      },
      bottom: {
        "class": "ez5-csv-importer-stats"
      }
    });
    update_form = (function(_this) {
      return function() {
        var form;
        form = new Form({
          maximize_horizontal: true,
          undo_and_changed_support: false,
          data: _this.__form_data,
          onDataChanged: function() {
            return _this.reloadFormData();
          },
          fields: fields
        });
        _this.__upload_form_vl.replace(form.start(), "center");
        return _this.updateStatsTable();
      };
    })(this);
    ret = this.getOutputSettingFields();
    if (isPromise(ret)) {
      ret.done((function(_this) {
        return function(_fields) {
          fields.push.apply(fields, _fields);
          return update_form();
        };
      })(this));
      ret.fail(update_form);
    } else {
      fields.push.apply(fields, ret);
      update_form();
    }
    return this.__upload_form_vl;
  };

  CSVImporter.prototype.updateStatsTable = function() {
    var add_row, blk, k, ref, ref1, rows, table, v;
    if (!this.__csv_data) {
      this.__upload_form_vl.empty("bottom");
      return;
    }
    this.__updateStats();
    rows = [];
    add_row = (function(_this) {
      return function(key, value) {
        var btn, tt;
        tt = ez5.loca.str_default("csv.importer.info.tooltip." + key);
        if (tt) {
          btn = new Button({
            icon: "info",
            appearance: "flat",
            onClick: function() {
              return new ez5.HintPopover({
                element: btn,
                text: tt
              }).show();
            }
          });
        }
        return rows.push({
          info: btn,
          name: $$("csv.importer.info.key." + key),
          value: value
        });
      };
    })(this);
    ref = this.__stats;
    for (k in ref) {
      v = ref[k];
      add_row(k, v);
    }
    if (this.__readyRows) {
      ref1 = this.__readyRows;
      for (k in ref1) {
        v = ref1[k];
        add_row(k, v.length);
      }
    }
    table = new CUI.Table({
      columns: [
        {
          name: "info"
        }, {
          name: "name"
        }, {
          name: "value"
        }
      ],
      header: false,
      rows: rows
    });
    blk = new CUI.Block({
      text: $$("csv.importer.block.info"),
      content: table,
      padded: false
    });
    return this.__upload_form_vl.replace(blk, "bottom");
  };

  CSVImporter.prototype.updateModal = function() {
    this.updateUploadForm();
    this.__table_preview_tab.setContent(this.getTablePreview());
    this.__mapping_tab.setContent(this.getMappingForm());
    this.updateRecordPreview();
    this.updateStatsTable();
    return this.updateButtons();
  };

  CSVImporter.prototype.updateUploadForm = function() {
    return this.__upload_tab.setContent(this.getUploadForm());
  };

  CSVImporter.prototype.getReadyForPrepare = function() {
    if (!(this.__form_data.header_row > 0 && this.dest_fields.length > 0)) {
      return CUI.rejectedPromise();
    }
    return this.callOnMappedDestFields((function(_this) {
      return function(dest_field, configs) {
        return dest_field.getReadyForPrepare(configs);
      };
    })(this));
  };

  CSVImporter.prototype.callOnMappedDestFields = function(func) {
    var dfr, idx, next_dest_field;
    dfr = new CUI.Deferred();
    idx = -1;
    next_dest_field = (function(_this) {
      return function() {
        var configs, dest_field, ret;
        while (true) {
          idx = idx + 1;
          if (idx === _this.dest_fields.length) {
            dfr.resolve();
            return;
          }
          dest_field = _this.dest_fields[idx];
          configs = _this.getMappingConfigsForDestinationField(dest_field);
          if (configs.length > 0) {
            break;
          }
        }
        ret = func.call(_this, dest_field, configs);
        if (isPromise(ret)) {
          ret.done(next_dest_field);
          return ret.fail(dfr.reject);
        } else {
          return next_dest_field();
        }
      };
    })(this);
    next_dest_field();
    return dfr.promise();
  };

  CSVImporter.prototype.readyForImport = function() {
    return !!this.__readyRows;
  };

  CSVImporter.prototype.updateButtons = function() {
    var action_done, action_fail, buttons, buttons_done, buttons_left, deletes, disabled, inserts, last_ev, tooltip, update_view, updates;
    last_ev = null;
    action_done = (function(_this) {
      return function() {
        if (last_ev.hasModifierKey()) {
          update_view();
          return;
        }
        return CUI.confirm({
          text: $$("csv.importer.action_done.message"),
          button_text_ok: $$("csv.importer.action_done.button.save_csv"),
          button_text_cancel: $$("csv.importer.action_done.button.done"),
          button_primary: "ok"
        }).always(function() {
          return update_view();
        }).done(function(choice) {
          return _this.saveCSV();
        });
      };
    })(this);
    action_fail = (function(_this) {
      return function() {
        console.error("action fail called");
        return update_view();
      };
    })(this);
    update_view = (function(_this) {
      return function() {
        _this.collectReadyRows();
        _this.updateStatsTable();
        return _this.updateButtons();
      };
    })(this);
    buttons_done = (function(_this) {
      return function() {
        return _this.__modal.replace(buttons, "footer_right");
      };
    })(this);
    if (this.readyForImport()) {
      updates = this.__readyRows.update.length;
      inserts = this.__readyRows.insert.length;
      deletes = this.__readyRows["delete"].length;
      buttons = [
        deletes > 0 ? {
          loca_key: "csv.importer.button.delete",
          onClick: (function(_this) {
            return function(ev, btn) {
              last_ev = ev;
              return _this.__action(ev, "delete").done(action_done).fail(action_fail);
            };
          })(this)
        } : void 0, inserts > 0 ? {
          loca_key: "csv.importer.button.insert",
          onClick: (function(_this) {
            return function(ev, btn) {
              last_ev = ev;
              return _this.__action(ev, "insert").done(action_done).fail(action_fail);
            };
          })(this)
        } : void 0, updates > 0 ? {
          loca_key: "csv.importer.button.update",
          onClick: (function(_this) {
            return function(ev, btn) {
              last_ev = ev;
              return _this.__action(ev, "update").done(action_done).fail(action_fail);
            };
          })(this)
        } : void 0, updates > 0 && inserts > 0 ? {
          loca_key: "csv.importer.button.sync",
          onClick: (function(_this) {
            return function(ev, btn) {
              last_ev = ev;
              return _this.__action(ev, "insert").done(function() {
                return _this.__action(ev, "update").done(action_done).fail(action_fail);
              }).fail(action_fail);
            };
          })(this)
        } : void 0
      ];
      buttons_done();
    } else {
      disabled = true;
      tooltip = null;
      buttons = [];
      this.getReadyForPrepare().done((function(_this) {
        return function() {
          return disabled = false;
        };
      })(this)).fail((function(_this) {
        return function(err_loca_key) {
          if (err_loca_key) {
            buttons = [
              new LocaLabel({
                "class": "ez5-csv-importer-prepare-data-error",
                icon: "warning",
                loca_key: err_loca_key
              })
            ];
          }
        };
      })(this)).always((function(_this) {
        return function() {
          buttons.push.apply(buttons, [
            {
              loca_key: "csv.importer.button.prepare",
              disabled: disabled,
              onClick: function(ev, btn) {
                return _this.saveSettings().done(function() {
                  return _this.__prepareData().fail(function(err_loca_key) {
                    if (isString(err_loca_key)) {
                      return CUI.problem({
                        text: $$(err_loca_key)
                      });
                    }
                  }).done(function() {
                    var count, i, key, len, ref;
                    count = 0;
                    ref = ["update", "insert", "delete"];
                    for (i = 0, len = ref.length; i < len; i++) {
                      key = ref[i];
                      count += _this.__readyRows[key].length;
                    }
                    if (count === 0) {
                      CUI.problem({
                        text: $$("csv.importer.error.no_action_rows_found")
                      });
                      return _this.resetReadyRows();
                    }
                  }).always(function() {
                    return _this.updateModal();
                  });
                });
              }
            }
          ]);
          return buttons_done();
        };
      })(this));
    }
    buttons_left = [
      {
        loca_key: "csv.importer.button.reload",
        disabled: !this.__csv_data,
        onClick: (function(_this) {
          return function() {
            _this.resetData();
            return _this.__loadCSVData();
          };
        })(this)
      }, {
        loca_key: "csv.importer.button.csv_save",
        disabled: !this.__csv_data,
        onClick: (function(_this) {
          return function() {
            return _this.saveCSV();
          };
        })(this)
      }
    ];
    this.__modal.replace(buttons_left, "footer_left");
  };

  CSVImporter.prototype.saveCSV = function() {
    var csv_text;
    csv_text = this.__csv_data.toText();
    return CUI.FileReader.save(this.__form_data.csv_filename, csv_text + "\n" + JSON.stringify(this.getFormSaveData()) + "\n");
  };

  CSVImporter.prototype.getSettingsKeyName = function() {
    return "easydb-" + ez5.session.getInstanceGlobalName() + "-" + toDash(this.getElementClass());
  };

  CSVImporter.prototype.__getLocalStore = function() {
    var localStore, schema, sk;
    sk = this.getSettingsKeyName();
    schema = JSON.stringify(ez5.session.getSchemaInfo());
    localStore = CUI.getLocalStorage(sk) || {};
    if (localStore.schema !== schema) {
      localStore = {
        schema: schema,
        data_per_filename: {}
      };
    }
    return localStore;
  };

  CSVImporter.prototype.__setLocalStore = function(localStore) {
    var sk;
    sk = this.getSettingsKeyName();
    return CUI.setLocalStorage(sk, localStore);
  };

  CSVImporter.prototype.saveSettings = function() {
    var localStore;
    localStore = this.__getLocalStore();
    localStore.data_per_filename[this.__form_data.csv_filename] = this.getFormSaveData();
    this.__setLocalStore(localStore);
    return CUI.resolvedPromise();
  };

  CSVImporter.prototype.loadSettings = function() {
    var k, localStore, settings, v;
    localStore = this.__getLocalStore();
    settings = localStore.data_per_filename[this.__form_data.csv_filename];
    if (!settings) {
      CUI.rejectedPromise();
    }
    for (k in settings) {
      v = settings[k];
      this.__form_data[k] = v;
    }
    this.__form_data.init_mapping_done = true;
    return CUI.resolvedPromise();
  };

  CSVImporter.prototype.getFormSaveData = function() {
    var i, key, len, ref, sd;
    sd = {};
    ref = ["control_fields_warning_shown", "mapping", "match_existing", "dest_field_row", "header_row", "action_chunk_size"];
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      sd[key] = this.__form_data[key];
    }
    return sd;
  };

  CSVImporter.prototype.resetInitMapping = function() {
    return this.__form_data.init_mapping_done = false;
  };

  CSVImporter.prototype.updateRecordPreview = function() {
    return this.__record_preview_tab.setContent(this.getRecordPreview());
  };

  CSVImporter.prototype.getTablePreview = function() {
    var col_idx, columns, field_name, get_table, i, len, navi_table_preview, ref, vl_table_preview;
    if (!this.__csv_data) {
      return new EmptyLabel({
        text: $$("csv.importer.no_file.placeholder"),
        centered: true
      });
    }
    columns = [];
    ref = this.__form_data.csv_field_names;
    for (col_idx = i = 0, len = ref.length; i < len; col_idx = ++i) {
      field_name = ref[col_idx];
      columns.push({
        name: "" + col_idx,
        text: field_name
      });
    }
    get_table = (function(_this) {
      return function() {
        navi_table_preview.update({
          count: _this.__form_data.csv_rows_count,
          limit: _this.__form_data.table_preview_chunk_size,
          offset: _this.__form_data.preview_offset
        });
        return new CUI.Table({
          columns: columns,
          rows: _this.__rows.slice(_this.__form_data.preview_offset + _this.__form_data.csv_header_rows, _this.__form_data.preview_offset + _this.__form_data.table_preview_chunk_size + _this.__form_data.csv_header_rows),
          header: true
        });
      };
    })(this);
    navi_table_preview = new NavigationToolbar({
      onLoadPage: (function(_this) {
        return function(page) {
          _this.__form_data.preview_offset = page * _this.__form_data.table_preview_chunk_size;
          return vl_table_preview.replace(get_table(), "center");
        };
      })(this)
    });
    return vl_table_preview = new CUI.VerticalLayout({
      center: {
        content: get_table
      },
      bottom: {
        content: navi_table_preview
      }
    });
  };

  CSVImporter.prototype.showModal = function() {
    var dfr, form_tabs, hl, preview_tabs;
    dfr = new CUI.Deferred();
    this.__upload_tab = new Tab({
      name: "upload_tab",
      text: $$("csv.importer.tab.upload"),
      content: (function(_this) {
        return function() {
          return _this.getUploadForm();
        };
      })(this)
    });
    this.__mapping_tab = new Tab({
      name: "mapping_tab",
      text: $$("csv.importer.tab.mapping"),
      content: (function(_this) {
        return function() {
          return _this.getMappingForm();
        };
      })(this)
    });
    form_tabs = new Tabs({
      tabs: [this.__upload_tab, this.__mapping_tab, this.__output_tab]
    });
    this.__table_preview_tab = new Tab({
      name: "table_preview",
      text: $$("csv.importer.tab.table_preview"),
      content: (function(_this) {
        return function() {
          return _this.getTablePreview();
        };
      })(this)
    });
    this.__record_preview_tab = new Tab({
      name: "record_preview",
      text: $$("csv.importer.tab.record_preview"),
      content: (function(_this) {
        return function() {
          return _this.getRecordPreview();
        };
      })(this)
    });
    preview_tabs = new Tabs({
      tabs: [this.__table_preview_tab, this.__record_preview_tab]
    });
    hl = new HorizontalLayout({
      left: {
        "class": "ez5-csv-importer-left",
        content: form_tabs,
        flexHandle: {
          closable: false,
          state_name: "csv-importer-left"
        }
      },
      center: {
        "class": "ez5-csv-importer-center",
        content: preview_tabs
      }
    });
    this.__modal = new Modal({
      cancel: true,
      fill_space: "both",
      onHide: (function(_this) {
        return function() {
          return dfr.resolve();
        };
      })(this),
      "class": "ez5-csv-importer-modal",
      pane: {
        header_left: new LocaLabel({
          loca_key: this.getTitleLocaKey()
        }),
        force_footer: true,
        content: hl
      }
    });
    this.updateButtons();
    this.__modal.show();
    return dfr.promise();
  };

  return CSVImporter;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var CSVImporterField,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CSVImporterField = (function(superClass) {
  extend(CSVImporterField, superClass);

  function CSVImporterField() {
    return CSVImporterField.__super__.constructor.apply(this, arguments);
  }

  CSVImporterField.prototype.initOpts = function() {
    CSVImporterField.__super__.initOpts.call(this);
    return this.addOpts({
      name: {
        check: String,
        mandatory: true
      },
      format: {
        mandatory: true,
        "default": "string",
        check: String
      }
    });
  };

  CSVImporterField.prototype.getName = function() {
    return this._name;
  };

  CSVImporterField.prototype.getFormat = function() {
    return this._format;
  };

  return CSVImporterField;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var CSVImporterControlField,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CSVImporterControlField = (function(superClass) {
  extend(CSVImporterControlField, superClass);

  function CSVImporterControlField() {
    return CSVImporterControlField.__super__.constructor.apply(this, arguments);
  }

  CSVImporterControlField.prototype.setColIdx = function(__col_idx) {
    this.__col_idx = __col_idx;
  };

  CSVImporterControlField.prototype.getColIdx = function() {
    return this.__col_idx;
  };

  return CSVImporterControlField;

})(CSVImporterField);
// Generated by CoffeeScript 1.10.0
var CSVImporterDestinationField,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

CSVImporterDestinationField = (function(superClass) {
  extend(CSVImporterDestinationField, superClass);

  function CSVImporterDestinationField(opts1) {
    var _idx, arr_idx, i, idx, key, key_name, len, m, part, ref;
    this.opts = opts1 != null ? opts1 : {};
    this.csvData = new CUI.CSVData();
    CSVImporterDestinationField.__super__.constructor.call(this, this.opts);
    key = this.getRecordKeyPath();
    this.__key_parts = [];
    this.__key_part_idx_is_array = [];
    ref = key.split(".");
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      part = ref[idx];
      m = part.match(/(.*?)(?:|\[([0-9]*)\])$/);
      key_name = m[1];
      arr_idx = m[2];
      if (arr_idx === void 0) {
        this.__key_parts.push({
          key: key_name,
          type: "map"
        });
        continue;
      }
      this.__key_parts.push({
        key: key_name,
        type: "array"
      });
      if (arr_idx === "") {
        this.__key_part_idx_is_array.push(this.__key_parts.length);
        _idx = null;
      } else {
        _idx = parseInt(arr_idx);
      }
      this.__key_parts.push({
        key: _idx,
        type: "map"
      });
    }
    this.__nested_depth = this.__key_part_idx_is_array.length;
    assert(this.__nested_depth <= 1, "new CSVImporterDestinationField", "Nested depth > 1 is not supported.");
  }

  CSVImporterDestinationField.prototype.initOpts = function() {
    CSVImporterDestinationField.__super__.initOpts.call(this);
    return this.addOpts({
      csvImporter: {
        mandatory: true,
        check: CSVImporter
      },
      use_for_match_existing: {
        mandatory: true,
        "default": false,
        check: Boolean
      },
      label: {
        check: String
      }
    });
  };

  CSVImporterDestinationField.prototype.addToMatchExisting = function(select_opts, set_dest_fields) {
    var disabled;
    if (!this.useForMatchExisting()) {
      return;
    }
    if (indexOf.call(set_dest_fields, this) < 0) {
      disabled = true;
    } else {
      disabled = false;
    }
    select_opts.push({
      text: this.getLabel(),
      disabled: disabled,
      value: this.getName()
    });
  };

  CSVImporterDestinationField.prototype.getNestedDepth = function() {
    return this.__nested_depth;
  };

  CSVImporterDestinationField.prototype.getColumnNames = function() {
    return [this.getName()];
  };

  CSVImporterDestinationField.prototype.getLabel = function() {
    return this._label || this.getName();
  };

  CSVImporterDestinationField.prototype.getRecordKeyPath = function() {
    return this.getName();
  };

  CSVImporterDestinationField.prototype.prepareDataChunk = function(configs, rows) {};

  CSVImporterDestinationField.prototype.getReadyForPrepare = function(configs) {};

  CSVImporterDestinationField.prototype.action = function(ev, op, rows) {};

  CSVImporterDestinationField.prototype.matchesColumnName = function(name) {
    var check_name, i, len, n, ref;
    if (isEmpty(name)) {
      return false;
    }
    check_name = name.split("#")[0];
    ref = this.getColumnNames();
    for (i = 0, len = ref.length; i < len; i++) {
      n = ref[i];
      if (n === check_name) {
        return true;
      }
    }
    return false;
  };

  CSVImporterDestinationField.prototype.getDefaultConfigFromColumnName = function(name) {
    var cf, config, i, idx, len, parts, ref;
    if (!this.matchesColumnName(name)) {
      return null;
    }
    if (isEmpty(name)) {
      return null;
    }
    parts = name.split("#");
    config = {};
    ref = this.getCustomFields();
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      cf = ref[idx];
      config[cf.name] = this.getValueForCustom(cf.name, parts[idx + 1]);
    }
    return config;
  };

  CSVImporterDestinationField.prototype.setRecordValue = function(record, configs, row, opts) {
    var i, idx, len, set_value, source_value, value;
    if (opts == null) {
      opts = {};
    }
    source_value = this.getRecordValue(configs, row, opts);
    if (source_value === void 0) {
      return;
    }
    set_value = (function(_this) {
      return function(record, value, indices) {
        var data, debug, i, idx, index, j, len, len1, part, ref;
        if (source_value === void 0) {
          return;
        }
        if (_this.getNestedDepth() > 0) {
          assert(_this.getNestedDepth() === indices.length, "CSVImporterDestinationField.eval", "indices length must match nested depth.");
          for (idx = i = 0, len = indices.length; i < len; idx = ++i) {
            index = indices[idx];
            _this.__key_parts[_this.__key_part_idx_is_array[idx]].key = index;
          }
        }
        data = record;
        debug = 0;
        ref = _this.__key_parts;
        for (idx = j = 0, len1 = ref.length; j < len1; idx = ++j) {
          part = ref[idx];
          if (_this.__key_parts.length - 1 === idx) {
            data[part.key] = value;
            return;
          }
          if (!data[part.key]) {
            if (part.type === "map") {
              data = data[part.key] = {};
            } else {
              data = data[part.key] = [];
            }
          } else {
            data = data[part.key];
          }
        }
      };
    })(this);
    if (this.getNestedDepth() === 1) {
      if (!CUI.isArray(source_value)) {
        console.error("CSVImporterDestinationField.setRecordValue", "getRecordValue needs to return an Array: " + this.getRecordKeyPath(), {
          key: this.__key_parts,
          nested_depth: this.getNestedDepth()
        });
        return void 0;
      }
      for (idx = i = 0, len = source_value.length; i < len; idx = ++i) {
        value = source_value[idx];
        set_value(record, value, [idx]);
      }
    } else {
      set_value(record, source_value);
    }
    return this;
  };

  CSVImporterDestinationField.prototype.getRecordValue = function(configs, row, opts) {
    var __row, _row, config, i, info, j, k, len, len1, len2, ref, ref1, ret_values, value, values;
    if (opts == null) {
      opts = {};
    }
    values = [];
    for (i = 0, len = configs.length; i < len; i++) {
      config = configs[i];
      value = row[config.csv_field_idx];
      if (isEmpty(value)) {
        continue;
      }
      if (this.getNestedDepth() === 1) {
        info = this.csvData.parse({
          quotechar: '"',
          delimiter: "",
          text: value,
          defer: false
        });
        ref = info.rows;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          _row = ref[j];
          __row = (ref1 = _row[0]) != null ? ref1.trim() : void 0;
          if (isEmpty(__row)) {
            continue;
          }
          values.push(__row);
        }
      } else {
        values.push(value);
      }
    }
    if (values.length === 0) {
      return void 0;
    }
    if (this.getNestedDepth() === 1) {
      ret_values = [];
      for (k = 0, len2 = values.length; k < len2; k++) {
        value = values[k];
        ret_values.push(this.formatValues([value]));
      }
      return ret_values;
    } else {
      return this.formatValues(values);
    }
  };

  CSVImporterDestinationField.prototype.formatValues = function(values) {
    var data, i, len, number, s, v;
    switch (this.getFormat()) {
      case "string":
        s = values.join(", ").trim();
        if (s === "") {
          return void 0;
        } else {
          return s;
        }
        break;
      case "json":
        data = [];
        for (i = 0, len = values.length; i < len; i++) {
          v = values[i];
          if (isEmpty(v)) {
            continue;
          }
          try {
            data.push(JSON.parse(v));
          } catch (undefined) {}
        }
        if (data.length === 0) {
          return void 0;
        } else if (data.length === 1) {
          return data[0];
        } else {
          return data;
        }
        break;
      case "boolean":
        v = values.join("");
        if (isEmpty(v)) {
          return void 0;
        } else {
          return isTrue(v);
        }
        break;
      case "number":
        v = values.join("");
        number = parseFloat(v);
        if (isNaN(number)) {
          return void 0;
        } else {
          return number;
        }
    }
  };

  CSVImporterDestinationField.prototype.getCustomFields = function() {
    return [];
  };

  CSVImporterDestinationField.prototype.getValueForCustom = function(key, value) {
    return value;
  };

  CSVImporterDestinationField.prototype.useForMatchExisting = function() {
    return this._use_for_match_existing;
  };

  CSVImporterDestinationField.prototype.getMatchExistingValue = function(obj, match_existing) {
    return this._csvImporter.getMatchExistingValue(obj, match_existing);
  };

  CSVImporterDestinationField.prototype.fillPrepareDataSearchOpts = function(search_opts) {};

  CSVImporterDestinationField.prototype.getMatchExistingSearch = function(values) {
    var v;
    switch (this.getFormat()) {
      case "number":
        return [
          {
            type: "in",
            "in": (function() {
              var i, len, results;
              results = [];
              for (i = 0, len = values.length; i < len; i++) {
                v = values[i];
                results.push(parseInt(v));
              }
              return results;
            })(),
            fields: [this.getRecordKeyPath()]
          }
        ];
      default:
        return [
          {
            type: "in",
            "in": values,
            fields: [this.getRecordKeyPath()]
          }
        ];
    }
  };

  return CSVImporterDestinationField;

})(CSVImporterField);
// Generated by CoffeeScript 1.10.0
var ObjecttypeCSVImporter,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

ObjecttypeCSVImporter = (function(superClass) {
  extend(ObjecttypeCSVImporter, superClass);

  function ObjecttypeCSVImporter() {
    return ObjecttypeCSVImporter.__super__.constructor.apply(this, arguments);
  }

  ObjecttypeCSVImporter.prototype.readOpts = function() {
    var dbinfo, objecttypes_dfr;
    ObjecttypeCSVImporter.__super__.readOpts.call(this);
    objecttypes_dfr = new CUI.Deferred();
    this.__objecttypes_promise = objecttypes_dfr.promise();
    objecttypes_dfr.done((function(_this) {
      return function() {
        return _this.__updateMasks();
      };
    })(this));
    dbinfo = new DbInfo();
    dbinfo.load().done((function(_this) {
      return function() {
        var i, len, objecttype, objecttypes, table_id;
        objecttypes = [];
        for (table_id in dbinfo.getAvailableObjecttypes()) {
          objecttypes.push(new Objecttype(ez5.schema.CURRENT._table_by_id[table_id]));
        }
        objecttypes.sort(function(a, b) {
          return a.nameLocalized().localeCompare(b.nameLocalized());
        });
        _this.__objecttype_opts = [
          {
            text: $$("objecttype.csv.importer.form.objecttype.select"),
            value: null
          }
        ];
        for (i = 0, len = objecttypes.length; i < len; i++) {
          objecttype = objecttypes[i];
          _this.__objecttype_opts.push({
            text: objecttype.nameLocalized(),
            value: objecttype.name()
          });
        }
        return objecttypes_dfr.resolve();
      };
    })(this)).fail(objecttypes_dfr.reject);
    return this;
  };

  ObjecttypeCSVImporter.prototype.resetFile = function() {
    ObjecttypeCSVImporter.__super__.resetFile.call(this);
    this.__form_data.append_nested = false;
    this.__form_data.create_linked_objects = true;
    this.__create_linked_objects_cb = null;
    return this.__append_nested_cb = null;
  };

  ObjecttypeCSVImporter.prototype.__updateMasks = function() {
    var masks_dfr, ref, table;
    masks_dfr = new CUI.Deferred();
    this.__masks_promise = masks_dfr.promise();
    this.__mask_opts = [
      {
        text: $$("objecttype.csv.importer.form.mask.select"),
        value: null
      }
    ];
    if (!this.__form_data.objecttype) {
      masks_dfr.resolve();
      return this.__masks_promise;
    }
    table = new Table("CURRENT", ez5.schema.CURRENT._table_by_name[this.__form_data.objecttype]);
    this.__mask_dbinfo = new DbInfo();
    this.__mask_dbinfo.load({
      table: table,
      pool_id: (ref = this.__form_data._pool) != null ? ref.pool._id : void 0
    }).done((function(_this) {
      return function() {
        var i, len, mask, masks;
        masks = _this.__mask_dbinfo.availableMasks(false);
        masks.sort(function(a, b) {
          return a.nameSort().localeCompare(b.nameSort());
        });
        for (i = 0, len = masks.length; i < len; i++) {
          mask = masks[i];
          _this.__mask_opts.push({
            text: mask.nameLocalized(),
            value: mask.name()
          });
        }
        return masks_dfr.resolve();
      };
    })(this)).fail(masks_dfr.reject);
    return this.__masks_promise;
  };

  ObjecttypeCSVImporter.prototype.getMask = function() {
    var table;
    if (!this.__form_data.objecttype || !this.__form_data.mask) {
      return null;
    }
    table = new Table("CURRENT", ez5.schema.CURRENT._table_by_name[this.__form_data.objecttype]);
    return Mask.getMaskByMaskName(this.__form_data.mask, table.id(), 'CURRENT', false);
  };

  ObjecttypeCSVImporter.prototype.getDestinationFields = function() {
    var dest_field, dest_fields, field, i, j, len, len1, ref, ref1;
    dest_fields = [];
    if (!this.__form_data.mask) {
      return dest_fields;
    }
    ref = this.getMask().getFields("csv-import");
    for (i = 0, len = ref.length; i < len; i++) {
      field = ref[i];
      if (!(field instanceof Field)) {
        continue;
      }
      ref1 = field.getCSVDestinationFields(this);
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        dest_field = ref1[j];
        if (dest_field instanceof ObjecttypeCSVImporterDestinationField) {
          dest_fields.push(dest_field);
        } else {
          dest_field.csvImporter = this;
          dest_fields.push(new ObjecttypeCSVImporterDestinationField(dest_field));
        }
      }
    }
    return dest_fields;
  };

  ObjecttypeCSVImporter.prototype.loadSettings = function() {
    var dfr, ret;
    dfr = new CUI.Deferred();
    ret = ObjecttypeCSVImporter.__super__.loadSettings.call(this);
    ret.done((function(_this) {
      return function() {
        return _this.__objecttypes_promise.done(function() {
          return _this.__updateMasks().done(dfr.resolve).fail(dfr.reject);
        }).fail(dfr.reject);
      };
    })(this));
    return dfr.promise();
  };

  ObjecttypeCSVImporter.prototype.getObjecttype = function() {
    return this.__form_data.objecttype;
  };

  ObjecttypeCSVImporter.prototype.getReadyForPrepare = function(configs) {
    var dfr, ret;
    this.linked_objects_by_mask = {};
    dfr = new CUI.Deferred();
    ret = ObjecttypeCSVImporter.__super__.getReadyForPrepare.call(this);
    ret.fail(dfr.reject);
    ret.done((function(_this) {
      return function() {
        var check_dest_fields, col, config, csv_field_idx, dest_field, i, idx, j, k, len, len1, mask, max_level, ref, ref1;
        mask = _this.getMask();
        if (_this.getMask().requireComment() === "always" && !_this.__form_data.comment.trim().length > 0) {
          dfr.reject("objecttype.csv.importer.error.comment_required");
          return;
        }
        if (!mask.isHierarchy()) {
          dfr.resolve();
          return;
        }
        _this.path_dest = {
          path_col_idx: [],
          field: null
        };
        check_dest_fields = [];
        max_level = -1;
        ref = _this.getHeaderRow();
        for (csv_field_idx = i = 0, len = ref.length; i < len; csv_field_idx = ++i) {
          col = ref[csv_field_idx];
          dest_field = _this.getDestinationFieldByName(_this.__form_data.mapping[csv_field_idx]);
          if (!dest_field) {
            continue;
          }
          config = _this.__form_data.mapping["custom_" + csv_field_idx];
          if (!(!isNaN(parseInt(config.level)) && config.level >= 0)) {
            check_dest_fields.push(dest_field);
            continue;
          }
          max_level = Math.max(config.level, max_level);
          if (_this.path_dest.field) {
            if (_this.path_dest.field !== dest_field) {
              dfr.reject("objecttype.csv.importer.error.path_multiple_fields_not_allowed");
              return;
            }
          } else {
            _this.path_dest.field = dest_field;
          }
          if (config.use_for_path === void 0) {
            if (_this.path_dest.path_col_idx[config.level] !== void 0) {
              dfr.reject("objecttype.csv.importer.error.path_multiple_fields_not_allowed");
              return;
            }
            _this.path_dest.path_col_idx[config.level] = csv_field_idx;
          } else if (config.use_for_path) {
            if (_this.path_dest.path_col_idx[config.level] !== void 0) {
              dfr.reject("objecttype.csv.importer.error.path_multiple_fields_not_allowed");
              return;
            } else {
              _this.path_dest.path_col_idx[config.level] = csv_field_idx;
            }
          }
        }
        for (idx = j = 0, ref1 = max_level; j <= ref1; idx = j += 1) {
          if (_this.path_dest.path_col_idx[idx] === void 0) {
            dfr.reject("objecttype.csv.importer.error.path_levels_incomplete");
            return;
          }
        }
        if (_this.path_dest.field) {
          if (_this.path_dest.path_col_idx.length === 0) {
            dfr.reject("objecttype.csv.importer.error.path_levels_incomplete");
            return;
          }
          for (k = 0, len1 = check_dest_fields.length; k < len1; k++) {
            dest_field = check_dest_fields[k];
            if (dest_field === _this.path_dest.field) {
              dfr.reject("objecttype.csv.importer.error.path_level_incomplete");
              return;
            }
          }
        } else {
          _this.path_dest = null;
        }
        return dfr.resolve();
      };
    })(this));
    return dfr.promise();
  };

  ObjecttypeCSVImporter.prototype.preparePathData = function(rows) {
    var col_idx, error, ex, i, j, k, l, len, len1, parent_row_idx, path, path_by_row_idx, path_parent, path_str, prev_row_idx, prev_value, ref, ref1, ref2, row, row_idx, row_idx_by_path, value;
    row_idx_by_path = {};
    path_by_row_idx = [];
    for (row_idx = i = 0, len = rows.length; i < len; row_idx = ++i) {
      row = rows[row_idx];
      try {
        path = [];
        ref = this.path_dest.path_col_idx;
        for (j = ref.length - 1; j >= 0; j += -1) {
          col_idx = ref[j];
          value = (ref1 = row[col_idx]) != null ? ref1.trim() : void 0;
          if (isEmpty(value)) {
            if (path.length === 0) {
              continue;
            } else {
              for (prev_row_idx = k = ref2 = row_idx - 1; k >= 0; prev_row_idx = k += -1) {
                prev_value = rows[prev_row_idx][col_idx].trim();
                if (!isEmpty(prev_value)) {
                  value = prev_value;
                  break;
                }
              }
              if (isEmpty(value)) {
                throw {
                  loca_key: "objecttype.csv.importer.path_misses_parent_value"
                };
              }
            }
          }
          path.splice(0, 0, value);
        }
        if (path.length === 0) {
          throw {
            loca_key: "objecttype.csv.importer.empty_path"
          };
        }
        path_by_row_idx[row_idx] = path;
        path_str = JSON.stringify(path);
        if (row_idx_by_path[path_str] !== void 0) {
          throw {
            loca_key: "objecttype.csv.importer.path_duplicate"
          };
        }
        row_idx_by_path[path_str] = row_idx;
      } catch (error) {
        ex = error;
        if (ex.loca_key) {
          this.setRowInvalid(row, ex.loca_key);
        } else {
          throw ex;
        }
      }
    }
    for (row_idx = l = 0, len1 = rows.length; l < len1; row_idx = ++l) {
      row = rows[row_idx];
      if (row[this.cf_idx.status] === "invalid") {
        continue;
      }
      if (row[this.cf_idx.id_parent]) {
        continue;
      }
      path = path_by_row_idx[row_idx];
      if (path.length <= 1) {
        row[this.cf_idx.id_parent] = null;
        row[this.cf_idx.depth] = 0;
        if (path.length === 1) {
          row[this.cf_idx.path] = JSON.stringify(path);
        }
        continue;
      }
      path_parent = path.slice(0, path.length - 1);
      parent_row_idx = row_idx_by_path[JSON.stringify(path_parent)];
      if (parent_row_idx !== void 0) {
        row[this.cf_idx.id_parent] = JSON.stringify({
          row_idx: parent_row_idx
        });
        row[this.cf_idx.depth] = path_parent.length;
        row[this.cf_idx.path] = JSON.stringify(path);
      } else {
        this.setRowInvalid(row, "objecttype.csv.importer.path_parent_not_found");
      }
    }
    return this;
  };

  ObjecttypeCSVImporter.prototype.prepareData = function(rows) {
    if (this.path_dest) {
      this.preparePathData(rows);
    }
    return ObjecttypeCSVImporter.__super__.prepareData.call(this, rows);
  };

  ObjecttypeCSVImporter.prototype.getPrepareDataSearchOpts = function() {
    var search_opts;
    search_opts = {
      type: "object",
      format: "standard",
      generate_rights: false,
      objecttypes: [this.getObjecttype()]
    };
    if (this.__form_data.match_existing) {
      this.getDestinationFieldByName(this.__form_data.match_existing).fillPrepareDataSearchOpts(search_opts, this.__form_data.match_existing);
    }
    return search_opts;
  };

  ObjecttypeCSVImporter.prototype.getMatchExistingValueFromSearchResponse = function(obj, match_existing) {
    var ref;
    return (ref = obj._fields[this.getDestinationFieldByName(match_existing).getRecordKeyPath()]) != null ? ref[0] : void 0;
  };

  ObjecttypeCSVImporter.prototype.getDepthSortedCopy = function(rows) {
    var rows_copy;
    rows_copy = rows.slice(0);
    rows_copy.sort((function(_this) {
      return function(a, b) {
        return compareIndex(a[_this.cf_idx.depth], b[_this.cf_idx.depth]);
      };
    })(this));
    return rows_copy;
  };

  ObjecttypeCSVImporter.prototype.prepareExistingDataChunk = function(rows) {
    var dfr, ref, unique_dest_field;
    dfr = new CUI.Deferred();
    unique_dest_field = this.getDestinationFieldByName(this.__form_data.match_existing);
    if (!unique_dest_field) {
      dfr.resolve();
    } else if (((ref = this.path_dest) != null ? ref.field : void 0) !== unique_dest_field) {
      this.prepareMatchExistingDataChunk(rows).done(dfr.resolve).fail(dfr.reject);
    } else {
      this.preparePathMatchDataChunk(rows).done(dfr.resolve).fail(dfr.reject);
    }
    return dfr.promise();
  };

  ObjecttypeCSVImporter.prototype.preparePathMatchDataChunk = function(rows) {
    var all_rows, dfr, get_next_chunk, ot_name, run_next_chunk;
    all_rows = this.getRows();
    ot_name = this.__form_data.objecttype;
    get_next_chunk = (function(_this) {
      return function() {
        var _idx, _rows, all_done, i, len, parent_operation, parent_status, ref, row, row_idx, value;
        _rows = [];
        all_done = true;
        ref = _this.getDepthSortedCopy(rows);
        for (_idx = i = 0, len = ref.length; i < len; _idx = ++i) {
          row = ref[_idx];
          if (row[_this.cf_idx.status]) {
            continue;
          }
          all_done = false;
          try {
            value = JSON.parse(row[_this.cf_idx.id_parent]);
          } catch (undefined) {}
          if (value != null ? value.hasOwnProperty("row_idx") : void 0) {
            row_idx = value.row_idx;
            parent_status = all_rows[row_idx][_this.cf_idx.status];
            if (!parent_status) {
              continue;
            }
            if (parent_status !== "ready" && parent_status !== "done") {
              _this.setRowInvalid(row, "objecttype.csv.import.parent_status_invalid");
              continue;
            }
            parent_operation = JSON.parse(all_rows[row_idx][_this.cf_idx.operation]);
            if (parent_status === "ready" && indexOf.call(parent_operation, "insert") >= 0) {
              _this.setRowInsert(row);
              continue;
            }
            if (parent_status === "done" || indexOf.call(parent_operation, "update") >= 0) {
              row[_this.cf_idx.id_parent] = all_rows[row_idx][_this.cf_idx.id];
              _rows.push(row);
              continue;
            }
            console.error("ObjecttypeCSVImporter: Unknown ready operation:", parent_operation);
            _this.setRowInvalid(row);
          } else {
            _rows.push(row);
          }
        }
        if (all_done) {
          return null;
        }
        return _rows;
      };
    })(this);
    dfr = new CUI.Deferred();
    run_next_chunk = (function(_this) {
      return function() {
        var i, id_parent, len, match_search, next_chunk, path, row, row_by_unique_key, search_opts, unique_key, value;
        next_chunk = get_next_chunk();
        if (next_chunk === null) {
          dfr.resolve();
          return;
        }
        search_opts = _this.getPrepareDataSearchOpts();
        search_opts.search = [];
        row_by_unique_key = {};
        for (i = 0, len = next_chunk.length; i < len; i++) {
          row = next_chunk[i];
          path = JSON.parse(row[_this.cf_idx.path]);
          id_parent = row[_this.cf_idx.id_parent] || null;
          value = path[path.length - 1];
          unique_key = JSON.stringify([id_parent, value]);
          if (row_by_unique_key[unique_key]) {
            _this.setRowInvalid(row, "csv.importer.unique_key_duplicate");
            continue;
          }
          row_by_unique_key[unique_key] = row;
          match_search = _this.path_dest.field.getMatchExistingSearch([value], _this.__form_data.match_existing);
          search_opts.search.push({
            type: "complex",
            bool: "should",
            search: [
              {
                type: "in",
                bool: "must",
                "in": [id_parent],
                fields: [ot_name + "._id_parent"]
              }, {
                type: "complex",
                bool: "must",
                search: match_search
              }
            ]
          });
        }
        if (search_opts.search.length === 0) {
          run_next_chunk();
          return;
        }
        return ez5.api.search({
          json_data: search_opts
        }).done(function(data) {
          var j, len1, obj, ref;
          ref = data.objects;
          for (j = 0, len1 = ref.length; j < len1; j++) {
            obj = ref[j];
            value = _this.getMatchExistingValueFromSearchResponse(obj, _this.__form_data.match_existing);
            id_parent = obj[ot_name]._id_parent || null;
            unique_key = JSON.stringify([id_parent, value]);
            row = row_by_unique_key[unique_key];
            if (!row) {
              continue;
            }
            _this.setRowUpdate(row, obj[ot_name]);
            delete row_by_unique_key[unique_key];
          }
          for (unique_key in row_by_unique_key) {
            row = row_by_unique_key[unique_key];
            _this.setRowInsert(row);
          }
          return run_next_chunk();
        }).fail(function() {
          var j, len1;
          for (j = 0, len1 = next_chunk.length; j < len1; j++) {
            row = next_chunk[j];
            _this.setRowInvalid(row);
          }
          return run_next_chunk();
        });
      };
    })(this);
    run_next_chunk();
    return dfr.promise();
  };

  ObjecttypeCSVImporter.prototype.getOutputSettingFields = function() {
    var dfr, finalize_fields;
    if (this.__form_data.objecttype === void 0) {
      this.__form_data.objecttype = null;
    }
    if (this.__form_data.mask === void 0) {
      this.__form_data.mask = null;
    }
    if (this.__form_data._pool === void 0) {
      this.__form_data._pool = null;
    }
    dfr = new CUI.Deferred();
    finalize_fields = (function(_this) {
      return function() {
        var append_nested_cb, create_linked_objects_cb, dest_field, field, fields, i, is_mapped, len, mask_select, objecttype, pool_ids, pool_select, ref;
        mask_select = null;
        pool_select = null;
        if (_this.__form_data.objecttype) {
          objecttype = new Objecttype(ez5.schema.CURRENT._table_by_name[_this.__form_data.objecttype]);
          if (_this.__form_data._pool || !objecttype.poolLink()) {
            mask_select = {
              form: {
                label: $$("objecttype.csv.importer.form.mask.label")
              },
              type: Select,
              undo_and_changed_support: false,
              disabled: _this.__form_data.objecttype === null,
              name: "mask",
              onDataChanged: function() {
                _this.resetInitMapping();
                return _this.reloadFormData();
              },
              options: _this.__mask_opts
            };
          }
          if (objecttype.poolLink()) {
            pool_ids = _this.__mask_dbinfo.getPoolIds();
            pool_select = new DataFieldProxy({
              "class": "ez5-pool-field-proxy",
              form: {
                label: $$("objecttype.csv.importer.form.pool.label")
              },
              element: (new PoolFieldForEditor()).renderEditorInput(_this.__form_data, null, {
                pool_ids: pool_ids
              })
            });
            Events.listen({
              type: "pool-field-changed",
              node: pool_select,
              call: function() {
                _this.__updateMasks();
                return _this.reloadFormData();
              }
            });
          }
          ref = _this.dest_fields;
          for (i = 0, len = ref.length; i < len; i++) {
            dest_field = ref[i];
            field = dest_field.getField();
            is_mapped = _this.getMappingConfigsForDestinationField(dest_field).length > 0;
            if (field.getFatherField()) {
              if (!append_nested_cb) {
                append_nested_cb = {
                  type: Checkbox,
                  disabled: true,
                  name: "append_nested",
                  form: {
                    label: $$("objecttype.csv.importer.form.append_nested.label")
                  }
                };
              }
              if (is_mapped) {
                append_nested_cb.disabled = false;
              }
            }
            if (field instanceof LinkedObject) {
              if (!create_linked_objects_cb) {
                create_linked_objects_cb = {
                  type: Checkbox,
                  disabled: true,
                  name: "create_linked_objects",
                  form: {
                    label: $$("objecttype.csv.importer.form.create_linked_objects.label")
                  }
                };
              }
              if (is_mapped) {
                create_linked_objects_cb.disabled = false;
              }
            }
          }
        }
        fields = [
          {
            form: {
              label: $$("objecttype.csv.importer.form.objecttype.label")
            },
            type: Select,
            undo_and_changed_support: false,
            name: "objecttype",
            onDataChanged: function() {
              _this.__form_data._pool = null;
              _this.__form_data.mask = null;
              return _this.__updateMasks();
            },
            options: _this.__objecttype_opts
          }, pool_select, mask_select, _this.getMatchExistingField(), append_nested_cb, create_linked_objects_cb, {
            form: {
              label: $$("objecttype.csv.importer.form.objecttype.comment")
            },
            name: "comment",
            type: Input,
            textarea: true,
            onDataChanged: function(data, df, ev) {
              if (df.getValue().trim() === "" || df.getLastValue().trim() === "") {
                _this.updateButtons();
              }
              return ev.stopPropagation();
            },
            placeholder: $$("objecttype.csv.importer.comment.default")
          }
        ];
        fields.push.apply(fields, ObjecttypeCSVImporter.__super__.getOutputSettingFields.call(_this));
        return dfr.resolve(fields);
      };
    })(this);
    this.__objecttypes_promise.done((function(_this) {
      return function() {
        _this.__masks_promise.fail(dfr.reject);
        return _this.__masks_promise.done(finalize_fields);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  ObjecttypeCSVImporter.prototype.getRecord = function(row, opts) {
    var dest_field, field, i, len, mask, mask_name, ot_name, record, ref;
    if (opts == null) {
      opts = {};
    }
    record = ObjecttypeCSVImporter.__super__.getRecord.call(this, row, opts);
    ot_name = this.__form_data.objecttype;
    if (!ot_name) {
      return record;
    }
    mask_name = this.__form_data.mask;
    if (!mask_name) {
      return record;
    }
    if (!record[ot_name]) {
      record[ot_name] = {};
    }
    mask = this.getMask();
    if (this.__form_data.comment.trim().length > 0) {
      record._comment = this.__form_data.comment.trim();
    } else {
      record._comment = $$("objecttype.csv.importer.comment.default");
    }
    record._mask = mask_name;
    if (this.__form_data._pool) {
      record[ot_name]._pool = {
        pool: {
          _id: this.__form_data._pool.pool._id
        }
      };
    }
    if (mask.isHierarchy()) {
      record[ot_name]._id_parent = row[this.cf_idx.id_parent];
    }
    if (!row[this.cf_idx.id]) {
      record[ot_name]._version = 1;
    } else {
      record[ot_name]._id = [row[this.cf_idx.id]];
      delete record[ot_name]._version;
      delete record[ot_name]._id_parent;
      ref = this.getMappedDestinationFields();
      for (i = 0, len = ref.length; i < len; i++) {
        dest_field = ref[i];
        field = dest_field.getField();
        if (!field.getFatherField()) {
          continue;
        }
        if (this.__form_data.append_nested) {
          record[ot_name][field.getFatherField().name() + ":group_mode"] = "append";
        } else {
          record[ot_name][field.getFatherField().name() + ":group_mode"] = "replace";
        }
      }
    }
    return record;
  };

  ObjecttypeCSVImporter.prototype.action = function(ev, op, rows) {
    var all_rows, dfr;
    all_rows = this.getRows();
    dfr = new CUI.Deferred();
    this.callOnMappedDestFields((function(_this) {
      return function(dest_field, configs) {
        return dest_field.action(ev, op, rows);
      };
    })(this)).fail((function(_this) {
      return function() {
        var i, len, row;
        for (i = 0, len = rows.length; i < len; i++) {
          row = rows[i];
          row[_this.cf_idx.status] = "failed";
        }
        return dfr.reject();
      };
    })(this)).done((function(_this) {
      return function() {
        var get_next_chunk, mask, mask_name, ot_name, run_next_chunk;
        mask = _this.getMask();
        mask_name = _this.__form_data.mask;
        ot_name = _this.__form_data.objecttype;
        get_next_chunk = function() {
          var _idx, _rows, all_rows_done, i, len, ref, ref1, row, value;
          _rows = [];
          all_rows_done = true;
          ref = _this.getDepthSortedCopy(rows);
          for (_idx = i = 0, len = ref.length; i < len; _idx = ++i) {
            row = ref[_idx];
            if ((ref1 = row[_this.cf_idx.status]) === "done" || ref1 === "failed") {
              continue;
            }
            all_rows_done = false;
            try {
              value = JSON.parse(row[_this.cf_idx.id_parent]);
            } catch (undefined) {}
            if ((value != null ? value.row_idx : void 0) !== void 0) {
              continue;
            }
            _rows.push(row);
          }
          if (all_rows_done) {
            return null;
          }
          return _rows;
        };
        run_next_chunk = function() {
          var i, j, len, len1, next_chunk, record, records, row;
          next_chunk = get_next_chunk();
          if (next_chunk === null || next_chunk.length === 0) {
            dfr.resolve();
            return;
          }
          records = [];
          for (i = 0, len = next_chunk.length; i < len; i++) {
            row = next_chunk[i];
            record = _this.getRecord(row, {
              operation: op
            });
            records.push(record);
          }
          if (ev.hasModifierKey()) {
            console.info(dump(records));
            for (j = 0, len1 = next_chunk.length; j < len1; j++) {
              row = next_chunk[j];
              row[_this.cf_idx.status] = "done";
            }
            run_next_chunk();
            return;
          }
          return ez5.api.db({
            api: "/" + ot_name,
            data: {
              format: "short"
            },
            json_data: records
          }).done(function(objects) {
            var _row, idx, k, l, len2, len3, len4, m, obj, value;
            if (op === "update" && !objects) {
              for (k = 0, len2 = next_chunk.length; k < len2; k++) {
                row = next_chunk[k];
                row[_this.cf_idx.status] = "done";
              }
              run_next_chunk();
              return;
            }
            for (idx = l = 0, len3 = objects.length; l < len3; idx = ++l) {
              obj = objects[idx];
              row = next_chunk[idx];
              row[_this.cf_idx.status] = "done";
              row[_this.cf_idx.id] = obj[ot_name]._id;
              row[_this.cf_idx.version] = obj[ot_name]._version;
              if (!mask.isHierarchy()) {
                continue;
              }
              row[_this.cf_idx.id_parent] = obj[ot_name]._id_parent;
              for (m = 0, len4 = all_rows.length; m < len4; m++) {
                _row = all_rows[m];
                if (!_row[_this.cf_idx.id_parent]) {
                  continue;
                }
                try {
                  value = JSON.parse(_row[_this.cf_idx.id_parent]);
                } catch (undefined) {}
                if ((value != null ? value.row_idx : void 0) === row[_this.cf_idx.row_idx]) {
                  _row[_this.cf_idx.id_parent] = row[_this.cf_idx.id];
                }
              }
            }
            return run_next_chunk();
          }).fail(function() {
            var k, len2;
            for (k = 0, len2 = rows.length; k < len2; k++) {
              row = rows[k];
              row[_this.cf_idx.status] = "failed";
            }
            return dfr.reject();
          });
        };
        return run_next_chunk();
      };
    })(this));
    return dfr.promise();
  };

  ObjecttypeCSVImporter.prototype.getControlFields = function() {
    var cf, cf_name, field, fields, fields_by_name, i, j, k, len, len1, len2, ref, ref1, ref2;
    fields = ObjecttypeCSVImporter.__super__.getControlFields.call(this);
    ref = [
      {
        name: "id_parent"
      }, {
        name: "depth"
      }, {
        name: "path"
      }
    ];
    for (i = 0, len = ref.length; i < len; i++) {
      field = ref[i];
      fields.push(new CSVImporterControlField(field));
    }
    fields_by_name = {};
    ref1 = this.dest_fields;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      field = ref1[j];
      ref2 = field.getControlFields();
      for (k = 0, len2 = ref2.length; k < len2; k++) {
        cf = ref2[k];
        fields_by_name[cf.name] = cf;
      }
    }
    for (cf_name in fields_by_name) {
      cf = fields_by_name[cf_name];
      fields.push(new CSVImporterControlField(cf));
    }
    return fields;
  };

  ObjecttypeCSVImporter.prototype.getFormSaveData = function() {
    var i, key, len, ref, sd;
    sd = ObjecttypeCSVImporter.__super__.getFormSaveData.call(this);
    ref = ["objecttype", "_pool", "mask", "comment", "append_nested", "create_linked_objects"];
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      sd[key] = this.__form_data[key];
    }
    return sd;
  };

  return ObjecttypeCSVImporter;

})(CSVImporter);
// Generated by CoffeeScript 1.10.0
var ObjecttypeCSVImporterDestinationField,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ObjecttypeCSVImporterDestinationField = (function(superClass) {
  extend(ObjecttypeCSVImporterDestinationField, superClass);

  function ObjecttypeCSVImporterDestinationField() {
    return ObjecttypeCSVImporterDestinationField.__super__.constructor.apply(this, arguments);
  }

  ObjecttypeCSVImporterDestinationField.prototype.initOpts = function() {
    ObjecttypeCSVImporterDestinationField.__super__.initOpts.call(this);
    this.addOpts({
      field: {
        mandatory: true,
        check: function(v) {
          return v instanceof Field && !(v instanceof MaskSplitter);
        }
      },
      supports_hierarchy: {
        mandatory: true,
        "default": true,
        check: Boolean
      },
      read_only: {
        mandatory: true,
        "default": false,
        check: Boolean
      }
    });
    this.mergeOpt("csvImporter", {
      check: ObjecttypeCSVImporter
    });
    this.removeOpt("name");
    return this.removeOpt("label");
  };

  ObjecttypeCSVImporterDestinationField.prototype.readOpts = function() {
    ObjecttypeCSVImporterDestinationField.__super__.readOpts.call(this);
    this.__field = this.getField();
    return this.__is_hierarchy = this._supports_hierarchy && this.__field.getMainMask().isHierarchy();
  };

  ObjecttypeCSVImporterDestinationField.prototype.supportsHierarchy = function() {
    return this.__is_hierarchy && this.getNestedDepth() === 0;
  };

  ObjecttypeCSVImporterDestinationField.prototype.getName = function() {
    return this.getField().getCSVName();
  };

  ObjecttypeCSVImporterDestinationField.prototype.getLabel = function() {
    return this.getField().getCSVLabel();
  };

  ObjecttypeCSVImporterDestinationField.prototype.getRecordKeyPath = function() {
    return this.__field.getCSVRecordKeyPath();
  };

  ObjecttypeCSVImporterDestinationField.prototype.getColumnNames = function() {
    return [this.getName(), this.__field.fullName(), this.__field.getCSVName()];
  };

  ObjecttypeCSVImporterDestinationField.prototype.getField = function() {
    return this._field;
  };

  ObjecttypeCSVImporterDestinationField.prototype.useForMatchExisting = function() {
    var config;
    if (ObjecttypeCSVImporterDestinationField.__super__.useForMatchExisting.call(this)) {
      return true;
    }
    config = this._csvImporter.getMappingConfigsForDestinationField(this);
    if (config) {
      return true;
    } else {
      return false;
    }
  };

  ObjecttypeCSVImporterDestinationField.prototype.getControlFields = function() {
    return [];
  };

  ObjecttypeCSVImporterDestinationField.prototype.getCustomFields = function() {
    if (!this.supportsHierarchy()) {
      return [];
    }
    return [
      {
        name: "level",
        form: {
          label: $$("objecttype.csv.importer.destination.field.level.label")
        },
        type: NumberInput,
        undo_and_changed_support: false,
        min: 0,
        max: 99,
        placeholder: $$("objecttype.csv.importer.destination.field.level.placeholder")
      }
    ];
  };

  ObjecttypeCSVImporterDestinationField.prototype.fillPrepareDataSearchOpts = function(search_opts) {
    return search_opts.fields = [
      {
        field: this.getRecordKeyPath()
      }
    ];
  };

  ObjecttypeCSVImporterDestinationField.prototype.getValueForCustom = function(key, value) {
    if (!this.supportsHierarchy()) {
      return value;
    }
    if (key === "level") {
      if (isNaN(parseInt(value))) {
        return null;
      } else {
        return parseInt(value);
      }
    } else {
      return value;
    }
  };

  ObjecttypeCSVImporterDestinationField.prototype.addToMatchExisting = function(select_opts, set_dest_fields) {
    var config, dest_field, i, j, len, len1, path_dest_field, ref;
    ObjecttypeCSVImporterDestinationField.__super__.addToMatchExisting.call(this, select_opts, set_dest_fields);
    path_dest_field = null;
    for (i = 0, len = set_dest_fields.length; i < len; i++) {
      dest_field = set_dest_fields[i];
      ref = this._csvImporter.getMappingConfigsForDestinationField(dest_field);
      for (j = 0, len1 = ref.length; j < len1; j++) {
        config = ref[j];
        if (!isEmpty(config.config.level)) {
          path_dest_field = dest_field;
          break;
        }
      }
      if (path_dest_field) {
        break;
      }
    }
    if (path_dest_field && path_dest_field !== this) {
      select_opts[select_opts.length - 1].disabled = true;
    }
  };

  ObjecttypeCSVImporterDestinationField.prototype.isReadOnly = function() {
    return this._read_only;
  };

  ObjecttypeCSVImporterDestinationField.prototype.getRecordValue = function(configs, row, opts) {
    var __configs, _configs, config, i, j, len, level, ref, value;
    if (opts == null) {
      opts = {};
    }
    if (this.isReadOnly() && opts.operation) {
      return void 0;
    }
    if (((ref = this._csvImporter.path_dest) != null ? ref.field : void 0) === this) {
      __configs = configs.slice(0);
      __configs.sort(function(a, b) {
        return compareIndex(a.config.level, b.config.level);
      });
      level = void 0;
      for (i = __configs.length - 1; i >= 0; i += -1) {
        config = __configs[i];
        value = row[config.csv_field_idx];
        if (!isEmpty(value)) {
          level = config.config.level;
        }
      }
      if (level === void 0) {
        _configs = configs.slice(0);
      } else {
        _configs = [];
        for (j = 0, len = configs.length; j < len; j++) {
          config = configs[j];
          if (config.config.level === level) {
            _configs.push(config);
          }
        }
      }
    } else {
      _configs = configs.slice(0);
    }
    if (this.recordFromMultipleColumns()) {
      return this.getRecordValueFromMultipleColumns(_configs, row, opts);
    } else {
      return ObjecttypeCSVImporterDestinationField.__super__.getRecordValue.call(this, _configs, row, opts);
    }
  };

  ObjecttypeCSVImporterDestinationField.prototype.recordFromMultipleColumns = function() {
    return false;
  };

  ObjecttypeCSVImporterDestinationField.prototype.setValuesFromMultipleColumns = function(config, values, value, idx) {
    console.error(getObjectClass(this) + ".setValuesFromMultipleColumns needs implementation.");
  };

  ObjecttypeCSVImporterDestinationField.prototype.getRecordValueFromMultipleColumns = function(configs, row, opts) {
    var _row, config, i, idx, info, j, len, len1, ref, ref1, value, values;
    if (opts == null) {
      opts = {};
    }
    values = [];
    for (i = 0, len = configs.length; i < len; i++) {
      config = configs[i];
      value = row[config.csv_field_idx];
      if (this.getNestedDepth() === 1) {
        info = this.csvData.parse({
          quotechar: "",
          delimiter: "",
          text: value,
          defer: false
        });
        ref = info.rows;
        for (idx = j = 0, len1 = ref.length; j < len1; idx = ++j) {
          _row = ref[idx];
          this.setValuesFromMultipleColumns(config, values, (ref1 = _row[0]) != null ? ref1.trim() : void 0, idx);
        }
      } else {
        this.setValuesFromMultipleColumns(config, values, value, 0);
      }
    }
    if (this.getNestedDepth() === 1) {
      return values;
    } else {
      return values[0];
    }
  };

  return ObjecttypeCSVImporterDestinationField;

})(CSVImporterDestinationField);
// Generated by CoffeeScript 1.10.0
var LinkedObjectCSVImporterDestinationField,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

LinkedObjectCSVImporterDestinationField = (function(superClass) {
  extend(LinkedObjectCSVImporterDestinationField, superClass);

  function LinkedObjectCSVImporterDestinationField() {
    return LinkedObjectCSVImporterDestinationField.__super__.constructor.apply(this, arguments);
  }

  LinkedObjectCSVImporterDestinationField.prototype.initOpts = function() {
    LinkedObjectCSVImporterDestinationField.__super__.initOpts.call(this);
    return this.mergeOpt("field", {
      check: LinkedObject
    });
  };

  LinkedObjectCSVImporterDestinationField.prototype.readOpts = function() {
    var field, i, j, lang, len, len1, ref, ref1, split_opts;
    LinkedObjectCSVImporterDestinationField.__super__.readOpts.call(this);
    this.__mask = this.getField().linkMask();
    this.__mask_name = this.__mask.name();
    this.__ot_name = this.__mask.getTable().name();
    this.__obj_keys = ["_id", "_version"];
    if (this.__mask.isHierarchy()) {
      this.__obj_keys.push("_id_parent");
    }
    this.__custom_opts = [
      {
        text: $$("linked.object.csv.importer.destination.field.column.placeholder"),
        value: null
      }
    ];
    ref = this.__mask.getFields("editor");
    for (i = 0, len = ref.length; i < len; i++) {
      field = ref[i];
      if (field instanceof LocaTextColumn) {
        ref1 = ez5.loca.getDatabaseLanguages();
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          lang = ref1[j];
          this.__custom_opts.push({
            text: field.name() + '#' + lang,
            value: field.name() + '#' + lang
          });
        }
        continue;
      }
      if (field instanceof TextColumn) {
        this.__custom_opts.push({
          text: field.name(),
          value: field.name()
        });
        continue;
      }
    }
    this.__custom_opts.sort(function(a, b) {
      return a.text.localeCompare(b.text);
    });
    this.__custom_fields = [
      {
        name: "column",
        undo_and_changed_support: false,
        form: {
          label: $$("linked.object.csv.importer.destination.field.column.label")
        },
        type: Select,
        options: this.__custom_opts
      }
    ];
    if (this.__mask.isHierarchy()) {
      split_opts = [
        {
          value: null,
          text: $$("linked.object.csv.importer.destination.field.hierarchy_split.none")
        }, {
          value: ">",
          text: ">"
        }, {
          value: "/",
          text: "/"
        }
      ];
      this.__custom_fields.push({
        name: "hierarchy_split",
        form: {
          label: $$("linked.object.csv.importer.destination.field.hierarchy_split.label")
        },
        type: Select,
        options: split_opts
      });
    }
    return this;
  };

  LinkedObjectCSVImporterDestinationField.prototype.getControlFields = function() {
    var fields;
    return fields = [
      {
        name: this.getControlName()
      }
    ];
  };

  LinkedObjectCSVImporterDestinationField.prototype.getControlName = function() {
    return this.__ot_name + "|" + this.__mask_name;
  };

  LinkedObjectCSVImporterDestinationField.prototype.getCustomFields = function() {
    return this.__custom_fields;
  };

  LinkedObjectCSVImporterDestinationField.prototype.getValueForCustom = function(key, value) {
    var i, len, opt, ref;
    ref = this.__custom_opts;
    for (i = 0, len = ref.length; i < len; i++) {
      opt = ref[i];
      if (opt.value === value) {
        return value;
      }
    }
    return null;
  };

  LinkedObjectCSVImporterDestinationField.prototype.getReadyForPrepare = function(configs, rows) {
    var col, config, i, len, search_columns;
    this.__linked_objects = this._csvImporter.linked_objects_by_mask[this.getControlName()];
    this.__control_idx = this._csvImporter.cf_idx[this.getControlName()];
    if (!this.__linked_objects) {
      this.__linked_objects = this._csvImporter.linked_objects_by_mask[this.getControlName()] = [];
    }
    this.__identifier_keys = this.getIdentifierKeys(configs);
    search_columns = {};
    for (i = 0, len = configs.length; i < len; i++) {
      config = configs[i];
      col = config.config.column;
      if (config.config.hierarchy_split && (!col || configs.length > 1)) {
        return CUI.rejectedPromise("linked.object.csv.importer.destination.field.error.duplicate_mapping");
      }
      if ((!col && configs.length > 1) || search_columns[col]) {
        return CUI.rejectedPromise("linked.object.csv.importer.destination.field.error.duplicate_mapping");
      }
      search_columns[col] = true;
    }
    return CUI.resolvedPromise();
  };

  LinkedObjectCSVImporterDestinationField.prototype.getLinkedRecord = function(linked_object) {
    var record;
    if (!linked_object) {
      return null;
    }
    record = {
      _mask: this.__mask.name()
    };
    if (parseInt(linked_object._id) > 0) {
      record[this.__ot_name] = {
        _id: linked_object._id
      };
    } else if (linked_object._id === "new") {
      record[this.__ot_name] = this.getLinkedObjectValue(linked_object);
      record[this.__ot_name]._id = null;
      record[this.__ot_name]._version = 1;
    } else {
      return null;
    }
    if (this.__mask.isHierarchy()) {
      record[this.__ot_name]._id_parent = linked_object._id_parent || null;
    }
    return record;
  };

  LinkedObjectCSVImporterDestinationField.prototype.getRecordValue = function(configs, row, opts) {
    var _linked_object, found, i, idx, len, linked_object, linked_objects, ret_linked;
    if (opts == null) {
      opts = {};
    }
    if (!this.__linked_objects) {
      return LinkedObjectCSVImporterDestinationField.__super__.getRecordValue.call(this, configs, row, opts);
    }
    ret_linked = [];
    linked_objects = this.getLinkedObjectsFromRow(configs, row);
    for (idx = i = 0, len = linked_objects.length; i < len; idx = ++i) {
      linked_object = linked_objects[idx];
      _linked_object = this.findLinkedObject(linked_object);
      found = this.getLinkedRecord(_linked_object);
      if (!found) {
        continue;
      }
      if (!this.getNestedDepth() && idx === linked_objects.length - 1) {
        return found;
      }
      ret_linked.push(found);
    }
    if (!this.getNestedDepth()) {

    } else {
      return ret_linked;
    }
  };

  LinkedObjectCSVImporterDestinationField.prototype.getLinkedObjectValue = function(linked_object) {
    var _key, i, info, key, languages, len, ref, ref1;
    info = {};
    ref = this.__identifier_keys;
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      if (isEmpty(linked_object[key])) {
        info[key] = void 0;
      } else {
        ref1 = key.split('#'), _key = ref1[0], languages = 2 <= ref1.length ? slice.call(ref1, 1) : [];
        if (languages.length > 0) {
          info[_key] = {};
          info[_key][languages[0]] = linked_object[key];
        } else {
          info[key] = linked_object[key];
        }
      }
    }
    return info;
  };

  LinkedObjectCSVImporterDestinationField.prototype.getIdentifierKeys = function(configs) {
    var config, i, identifier_keys, len;
    identifier_keys = [];
    for (i = 0, len = configs.length; i < len; i++) {
      config = configs[i];
      pushOntoArray(this.getColName(config), identifier_keys);
    }
    return identifier_keys;
  };

  LinkedObjectCSVImporterDestinationField.prototype.getColName = function(config) {
    if (!config.config.column) {
      return "_id";
    } else {
      return config.config.column;
    }
  };

  LinkedObjectCSVImporterDestinationField.prototype.getLinkedObjectsFromRow = function(configs, row) {
    var __value, _value, cell_info, cell_row, col_name, config, i, idx, j, l, len, len1, len2, linked_objects, lobj, m, path, pidx, ref, ref1, ref2, ref3, value;
    linked_objects = [];
    for (i = 0, len = configs.length; i < len; i++) {
      config = configs[i];
      value = (ref = row[config.csv_field_idx]) != null ? ref.trim() : void 0;
      if (isEmpty(value)) {
        continue;
      }
      if (config.config.hierarchy_split) {
        cell_info = this.csvData.parse({
          delimiter: config.config.hierarchy_split,
          text: value,
          defer: false
        });
      } else {
        cell_info = this.csvData.parse({
          quotechar: "",
          delimiter: "",
          text: value,
          defer: false
        });
      }
      col_name = this.getColName(config);
      ref1 = cell_info.rows;
      for (idx = j = 0, len1 = ref1.length; j < len1; idx = ++j) {
        cell_row = ref1[idx];
        if (!config.config.hierarchy_split) {
          _value = (ref2 = cell_row[0]) != null ? ref2.trim() : void 0;
          if (isEmpty(_value)) {
            continue;
          }
          if (!linked_objects[idx]) {
            linked_objects[idx] = {};
          }
          linked_objects[idx].__hierarchy_split = config.config.hierarchy_split;
          linked_objects[idx][col_name] = _value;
        } else {
          path = [];
          for (l = 0, len2 = cell_row.length; l < len2; l++) {
            __value = cell_row[l];
            _value = __value.trim();
            if (_value === "") {
              break;
            }
            path.push(_value);
          }
          if (path.length > 0) {
            for (pidx = m = 0, ref3 = path.length; 0 <= ref3 ? m < ref3 : m > ref3; pidx = 0 <= ref3 ? ++m : --m) {
              lobj = {};
              lobj[col_name] = path[pidx];
              lobj._depth = pidx;
              if (pidx === 0) {
                lobj._id_parent = null;
              } else {
                lobj._id_parent = JSON.stringify(path.slice(0, pidx));
              }
              lobj.__hierarchy_split = config.config.hierarchy_split;
              linked_objects.push(lobj);
              lobj._path = JSON.stringify(path.slice(0, pidx + 1));
            }
          }
        }
      }
    }
    return linked_objects;
  };

  LinkedObjectCSVImporterDestinationField.prototype.action = function(ev, op, rows) {
    var depth, dfr, i, len, linked_object, max_depth, next_depth, ref;
    max_depth = 0;
    depth = null;
    ref = this.__linked_objects;
    for (i = 0, len = ref.length; i < len; i++) {
      linked_object = ref[i];
      if (linked_object._id !== "new") {
        continue;
      }
      if (this.__mask.isHierarchy()) {
        linked_object._depth = linked_object._depth || 0;
        max_depth = Math.max(max_depth, linked_object._depth);
      }
    }
    next_depth = (function(_this) {
      return function() {
        var j, len1, linked_objects, objects, records, ref1;
        if (max_depth === depth) {
          dfr.resolve();
          return;
        }
        if (depth === null) {
          depth = 0;
        } else {
          depth = depth + 1;
        }
        records = [];
        linked_objects = [];
        ref1 = _this.__linked_objects;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          linked_object = ref1[j];
          if (linked_object._id !== "new") {
            continue;
          }
          if (_this.__mask.isHierarchy() && depth !== linked_object._depth) {
            continue;
          }
          records.push(_this.getLinkedRecord(linked_object));
          linked_objects.push(linked_object);
        }
        if (records.length === 0) {
          next_depth();
          return;
        }
        if (ev.hasModifierKey()) {
          console.debug(dump(records));
          next_depth();
          return;
        }
        objects = [];
        CUI.chunkWork.call(_this, {
          items: records,
          chunk_size: 1000,
          call: function(items) {
            return ez5.api.db({
              api: "/" + _this.__ot_name,
              data: {
                format: "short"
              },
              json_data: items
            }).done(function(_objects) {
              return objects.push.apply(objects, _objects);
            });
          }
        }).done(function() {
          var idx, key, l, len2, len3, len4, m, n, obj, ref2, ref3;
          for (idx = l = 0, len2 = objects.length; l < len2; idx = ++l) {
            obj = objects[idx];
            if (_this.__mask.isHierarchy()) {
              ref2 = _this.__linked_objects;
              for (m = 0, len3 = ref2.length; m < len3; m++) {
                linked_object = ref2[m];
                if (linked_object._id_parent && linked_object._id_parent === linked_objects[idx]._path) {
                  linked_object._id_parent = obj[_this.__ot_name]._id;
                }
              }
            }
            ref3 = _this.__obj_keys;
            for (n = 0, len4 = ref3.length; n < len4; n++) {
              key = ref3[n];
              linked_objects[idx][key] = obj[_this.__ot_name][key];
            }
          }
          console.info("Created objects.", depth, objects);
          return next_depth();
        }).fail(dfr.reject);
      };
    })(this);
    dfr = new CUI.Deferred();
    next_depth();
    return dfr.promise();
  };

  LinkedObjectCSVImporterDestinationField.prototype.findLinkedObject = function(search_linked_object, use_hierarchy_setting) {
    var i, j, key, len, len1, linked_object, match, ref, ref1;
    if (use_hierarchy_setting == null) {
      use_hierarchy_setting = true;
    }
    ref = this.__linked_objects;
    for (i = 0, len = ref.length; i < len; i++) {
      linked_object = ref[i];
      if (search_linked_object._path && search_linked_object._path === linked_object._path) {
        return linked_object;
      }
      match = true;
      ref1 = this.__identifier_keys;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        key = ref1[j];
        if (linked_object[key] !== search_linked_object[key]) {
          match = false;
          break;
        }
      }
      if (this.__mask.isHierarchy() && (!use_hierarchy_setting || linked_object.__hierarchy_split)) {
        if (linked_object._id_parent) {
          if (linked_object._id_parent !== search_linked_object._id_parent) {
            match = false;
          }
        }
      }
      if (match) {
        return linked_object;
      }
    }
    return null;
  };

  LinkedObjectCSVImporterDestinationField.prototype.prepareDataChunk = function(configs, rows, offset) {
    var _key, dfr, do_next_search, fields, i, j, key, l, languages, len, len1, len2, linked_object, linked_object_idx, linked_objects, max_depth, ref, ref1, row, row_idx, search_depth, search_items, search_opts, stored_linked_object;
    dfr = new CUI.Deferred();
    max_depth = null;
    search_items = [];
    for (row_idx = i = 0, len = rows.length; i < len; row_idx = ++i) {
      row = rows[row_idx];
      linked_objects = this.getLinkedObjectsFromRow(configs, row);
      if (linked_objects.length === 0) {
        continue;
      }
      for (linked_object_idx = j = 0, len1 = linked_objects.length; j < len1; linked_object_idx = ++j) {
        linked_object = linked_objects[linked_object_idx];
        stored_linked_object = this.findLinkedObject(linked_object);
        if (!stored_linked_object) {
          this.__linked_objects.push(linked_object);
          stored_linked_object = linked_object;
        }
        if (stored_linked_object._depth !== void 0) {
          max_depth = Math.max(max_depth, stored_linked_object._depth);
        }
        if (!stored_linked_object._id) {
          stored_linked_object._id = "search";
        }
        if (!stored_linked_object._row_idx) {
          stored_linked_object._row_idx = [];
        }
        pushOntoArray(row_idx + offset, stored_linked_object._row_idx);
      }
    }
    fields = [];
    ref = this.__identifier_keys;
    for (l = 0, len2 = ref.length; l < len2; l++) {
      key = ref[l];
      ref1 = key.split('#'), _key = ref1[0], languages = 2 <= ref1.length ? slice.call(ref1, 1) : [];
      fields.push({
        key: _key,
        field: this.__ot_name + "." + _key
      });
    }
    search_opts = {
      type: "object",
      fields: fields,
      format: "short",
      generate_rights: false,
      objecttypes: [this.__ot_name],
      search: []
    };
    search_depth = void 0;
    do_next_search = (function(_this) {
      return function() {
        var len3, len4, m, n, ref2, ref3, ref4, search;
        search_opts.search = [];
        if (search_depth === void 0) {
          if (max_depth === null) {
            search_depth = null;
          } else {
            search_depth = 0;
          }
        } else if (search_depth === null) {
          dfr.resolve();
          return;
        } else {
          search_depth = search_depth + 1;
          if (search_depth === max_depth + 1) {
            search_depth = null;
          }
        }
        ref2 = _this.__linked_objects;
        for (m = 0, len3 = ref2.length; m < len3; m++) {
          linked_object = ref2[m];
          if (linked_object._id !== "search") {
            continue;
          }
          if (search_depth !== null && search_depth !== linked_object._depth) {
            continue;
          }
          if (isString(linked_object._id_parent)) {
            linked_object._id = "new";
            continue;
          }
          linked_object._id = "searching";
          search = {
            type: "complex",
            bool: "should",
            search: []
          };
          ref3 = _this.__identifier_keys;
          for (n = 0, len4 = ref3.length; n < len4; n++) {
            key = ref3[n];
            ref4 = key.split('#'), _key = ref4[0], languages = 2 <= ref4.length ? slice.call(ref4, 1) : [];
            search.search.push({
              type: "in",
              bool: "must",
              fields: [_this.__ot_name + "." + _key],
              "in": [linked_object[key]],
              languages: languages
            });
          }
          if (linked_object._id_parent !== void 0) {
            search.search.push({
              type: "in",
              bool: "must",
              fields: [_this.__ot_name + "._id_parent"],
              "in": [linked_object._id_parent]
            });
          }
          search_opts.search.push(search);
        }
        if (search_opts.search.length === 0) {
          _this.updateFoundLinkedObjects();
          do_next_search();
        } else {
          ez5.api.search({
            json_data: search_opts
          }).done(function(data) {
            var error, ex;
            try {
              _this.updateFoundLinkedObjects(data.objects);
              return do_next_search();
            } catch (error) {
              ex = error;
              if (ex === "not_allowed_to_create_linked_objects") {
                return dfr.reject("linked.object.csv.importer.destination.field." + ex);
              } else {
                throw ex;
              }
            }
          }).fail(dfr.reject);
        }
      };
    })(this);
    dfr.always((function(_this) {
      return function() {
        var len3, len4, len5, len6, linked_object_per_row_idx, m, n, o, p, ref2, ref3;
        linked_object_per_row_idx = {};
        ref2 = _this.__linked_objects;
        for (m = 0, len3 = ref2.length; m < len3; m++) {
          linked_object = ref2[m];
          ref3 = linked_object._row_idx;
          for (n = 0, len4 = ref3.length; n < len4; n++) {
            row_idx = ref3[n];
            if (row_idx < offset) {
              continue;
            }
            if (!linked_object_per_row_idx[row_idx]) {
              linked_object_per_row_idx[row_idx] = [];
            }
            pushOntoArray(linked_object, linked_object_per_row_idx[row_idx]);
          }
        }
        for (o = 0, len5 = rows.length; o < len5; o++) {
          row = rows[o];
          row[_this.__control_idx] = "";
        }
        for (row_idx in linked_object_per_row_idx) {
          linked_objects = linked_object_per_row_idx[row_idx];
          for (p = 0, len6 = linked_objects.length; p < len6; p++) {
            linked_object = linked_objects[p];
            rows[row_idx - offset][_this.__control_idx] += JSON.stringify(_this.getLinkedObjectValue(linked_object)) + ": " + linked_object._id + "\n";
          }
        }
      };
    })(this));
    do_next_search();
    return dfr.promise();
  };

  LinkedObjectCSVImporterDestinationField.prototype.updateFoundLinkedObjects = function(objs) {
    var _key, found_linked_object, i, j, k, key, l, languages, len, len1, len2, len3, len4, linked_object, m, n, obj, ref, ref1, ref2, ref3, ref4, stored_linked_object, v;
    if (objs == null) {
      objs = [];
    }
    for (i = 0, len = objs.length; i < len; i++) {
      obj = objs[i];
      found_linked_object = {};
      ref = this.__identifier_keys;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        key = ref[j];
        ref1 = key.split('#'), _key = ref1[0], languages = 2 <= ref1.length ? slice.call(ref1, 1) : [];
        found_linked_object[key] = obj._fields[_key][0];
      }
      if (obj[this.__ot_name]._id_parent) {
        found_linked_object._id_parent = obj[this.__ot_name]._id_parent;
      }
      stored_linked_object = this.findLinkedObject(found_linked_object, false);
      if (!stored_linked_object) {
        console.error("Linked Object not found in store:", obj, found_linked_object, this.__linked_objects);
        continue;
      }
      if (parseInt(stored_linked_object._id) > 0) {
        found_linked_object._id = "duplicate";
        console.error("Linked Object found multiple times:", obj, found_linked_object);
      }
      for (k in found_linked_object) {
        v = found_linked_object[k];
        stored_linked_object[k] = v;
      }
      ref2 = this.__obj_keys;
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        key = ref2[l];
        stored_linked_object[key] = obj[this.__ot_name][key];
      }
      if (stored_linked_object._path) {
        ref3 = this.__linked_objects;
        for (m = 0, len3 = ref3.length; m < len3; m++) {
          linked_object = ref3[m];
          if (linked_object._id_parent === stored_linked_object._path) {
            linked_object._id_parent = stored_linked_object._id;
          }
        }
      }
    }
    ref4 = this.__linked_objects;
    for (n = 0, len4 = ref4.length; n < len4; n++) {
      linked_object = ref4[n];
      if (linked_object._id === "searching") {
        if (!this._csvImporter.__form_data.create_linked_objects) {
          throw "not_allowed_to_create_linked_objects";
        }
        linked_object._id = "new";
      }
    }
  };

  return LinkedObjectCSVImporterDestinationField;

})(ObjecttypeCSVImporterDestinationField);
// Generated by CoffeeScript 1.10.0
var EASColumnCSVImporterDestinationField,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

EASColumnCSVImporterDestinationField = (function(superClass) {
  extend(EASColumnCSVImporterDestinationField, superClass);

  function EASColumnCSVImporterDestinationField() {
    return EASColumnCSVImporterDestinationField.__super__.constructor.apply(this, arguments);
  }

  EASColumnCSVImporterDestinationField.prototype.initOpts = function() {
    EASColumnCSVImporterDestinationField.__super__.initOpts.call(this);
    return this.mergeOpt("field", {
      check: EASColumn
    });
  };

  EASColumnCSVImporterDestinationField.prototype.supportsHierarchy = function() {
    return false;
  };

  EASColumnCSVImporterDestinationField.prototype.getLabel = function() {
    return EASColumnCSVImporterDestinationField.__super__.getLabel.call(this) + "#original_filename";
  };

  EASColumnCSVImporterDestinationField.prototype.getRecordKeyPath = function() {
    return EASColumnCSVImporterDestinationField.__super__.getRecordKeyPath.call(this) + ".original_filename";
  };

  EASColumnCSVImporterDestinationField.prototype.getRecordValue = function(configs, row, opts) {
    if (opts.operation || opts.for_preview) {
      return void 0;
    }
    return EASColumnCSVImporterDestinationField.__super__.getRecordValue.call(this, configs, row, opts);
  };

  EASColumnCSVImporterDestinationField.prototype.getMatchExistingSearch = function(values) {
    var i, len, search, value;
    search = [];
    for (i = 0, len = values.length; i < len; i++) {
      value = values[i];
      search.push({
        type: "in",
        fields: [this.getRecordKeyPath()],
        "in": [value],
        bool: "should"
      });
    }
    return search;
  };

  return EASColumnCSVImporterDestinationField;

})(ObjecttypeCSVImporterDestinationField);
// Generated by CoffeeScript 1.10.0
var DateColumnCSVImporterDestinationField,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DateColumnCSVImporterDestinationField = (function(superClass) {
  extend(DateColumnCSVImporterDestinationField, superClass);

  function DateColumnCSVImporterDestinationField() {
    return DateColumnCSVImporterDestinationField.__super__.constructor.apply(this, arguments);
  }

  DateColumnCSVImporterDestinationField.prototype.initOpts = function() {
    DateColumnCSVImporterDestinationField.__super__.initOpts.call(this);
    return this.mergeOpt("field", {
      check: DateColumn
    });
  };

  DateColumnCSVImporterDestinationField.prototype.supportsHierarchy = function() {
    return false;
  };

  DateColumnCSVImporterDestinationField.prototype.formatValues = function(values) {
    var value;
    value = CUI.DateTime.format(values[0], "store");
    if (!value && !isEmpty(values[0])) {
      value = "invalid:" + values[0];
    }
    if (value) {
      return {
        value: value
      };
    } else {
      return void 0;
    }
  };

  DateColumnCSVImporterDestinationField.prototype.prepareDataChunk = function(configs, rows, offset) {
    var _rec, i, j, k, len, len1, rec, records, row, v;
    for (i = 0, len = rows.length; i < len; i++) {
      row = rows[i];
      _rec = this.getRecordValue(configs, row, {
        prepare: true
      });
      if (this.getNestedDepth() === 1) {
        records = _rec;
      } else {
        records = [_rec];
      }
      for (j = 0, len1 = records.length; j < len1; j++) {
        rec = records[j];
        for (k in rec) {
          v = rec[k];
          if (v != null ? v.startsWith("invalid:") : void 0) {
            this._csvImporter.setRowInvalid(row, "date.column.csv.importer.destination.field.date_invalid", {
              date: v.substr("invalid:".length)
            });
          }
        }
      }
    }
    return CUI.resolvedPromise();
  };

  return DateColumnCSVImporterDestinationField;

})(ObjecttypeCSVImporterDestinationField);
// Generated by CoffeeScript 1.10.0
var DateTimeColumnCSVImporterDestinationField,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DateTimeColumnCSVImporterDestinationField = (function(superClass) {
  extend(DateTimeColumnCSVImporterDestinationField, superClass);

  function DateTimeColumnCSVImporterDestinationField() {
    return DateTimeColumnCSVImporterDestinationField.__super__.constructor.apply(this, arguments);
  }

  DateTimeColumnCSVImporterDestinationField.prototype.initOpts = function() {
    DateTimeColumnCSVImporterDestinationField.__super__.initOpts.call(this);
    return this.mergeOpt("field", {
      check: DateTimeColumn
    });
  };

  DateTimeColumnCSVImporterDestinationField.prototype.formatValues = function(values) {
    var value;
    value = CUI.DateTime.format(values[0], "store", "date_time_seconds");
    if (value) {
      return {
        value: value
      };
    } else {
      return void 0;
    }
  };

  return DateTimeColumnCSVImporterDestinationField;

})(ObjecttypeCSVImporterDestinationField);
// Generated by CoffeeScript 1.10.0
var DateRangeColumnCSVImporterDestinationField,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DateRangeColumnCSVImporterDestinationField = (function(superClass) {
  extend(DateRangeColumnCSVImporterDestinationField, superClass);

  function DateRangeColumnCSVImporterDestinationField() {
    return DateRangeColumnCSVImporterDestinationField.__super__.constructor.apply(this, arguments);
  }

  DateRangeColumnCSVImporterDestinationField.prototype.initOpts = function() {
    DateRangeColumnCSVImporterDestinationField.__super__.initOpts.call(this);
    return this.mergeOpt("field", {
      check: DateRangeColumn
    });
  };

  DateRangeColumnCSVImporterDestinationField.prototype.locaKeyPrefix = "date.range.column..csv.importer.destination.field.from_to.";

  DateRangeColumnCSVImporterDestinationField.prototype.recordFromMultipleColumns = function() {
    return true;
  };

  DateRangeColumnCSVImporterDestinationField.prototype.setValuesFromMultipleColumns = function(config, values, value, idx) {
    var _value;
    _value = CUI.DateTime.format(value, "store");
    if (!_value && !isEmpty(value)) {
      _value = "invalid:" + value;
    }
    if (!isEmpty(_value)) {
      if (!values[idx]) {
        values[idx] = {
          from: null,
          to: null
        };
      }
      values[idx][config.config.from_to] = _value;
    }
  };

  DateRangeColumnCSVImporterDestinationField.prototype.prepareDataChunk = function(configs, rows, offset) {
    return DateColumnCSVImporterDestinationField.prototype.prepareDataChunk.call(this, configs, rows, offset);
  };

  DateRangeColumnCSVImporterDestinationField.prototype.getReadyForPrepare = function(configs) {
    var config, i, len, used;
    used = {};
    for (i = 0, len = configs.length; i < len; i++) {
      config = configs[i];
      if (used[config.config.from_to]) {
        return CUI.rejectedPromise(this.locaKeyPrefix + "error.config");
      }
      used[config.config.from_to] = true;
    }
    return CUI.resolvedPromise();
  };

  DateRangeColumnCSVImporterDestinationField.prototype.getCustomFields = function() {
    return [
      {
        name: "from_to",
        form: {
          label: $$(this.locaKeyPrefix + "label")
        },
        type: Select,
        undo_and_changed_support: false,
        options: [
          {
            value: "from",
            text: $$(this.locaKeyPrefix + "option.from")
          }, {
            value: "to",
            text: $$(this.locaKeyPrefix + "option.to")
          }
        ]
      }
    ];
  };

  return DateRangeColumnCSVImporterDestinationField;

})(ObjecttypeCSVImporterDestinationField);
// Generated by CoffeeScript 1.10.0
var LocaTextColumnCSVImporterDestinationField,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

LocaTextColumnCSVImporterDestinationField = (function(superClass) {
  extend(LocaTextColumnCSVImporterDestinationField, superClass);

  function LocaTextColumnCSVImporterDestinationField() {
    return LocaTextColumnCSVImporterDestinationField.__super__.constructor.apply(this, arguments);
  }

  LocaTextColumnCSVImporterDestinationField.prototype.initOpts = function() {
    LocaTextColumnCSVImporterDestinationField.__super__.initOpts.call(this);
    return this.mergeOpt("field", {
      check: LocaTextColumn
    });
  };

  LocaTextColumnCSVImporterDestinationField.prototype.readOpts = function() {
    var i, lang, len, ref;
    LocaTextColumnCSVImporterDestinationField.__super__.readOpts.call(this);
    this.__lang_opts = [];
    this.__empty_record = {};
    ref = ez5.session.getConfigDatabaseLanguages();
    for (i = 0, len = ref.length; i < len; i++) {
      lang = ref[i];
      this.__lang_opts.push({
        value: lang,
        text: lang
      });
      this.__empty_record[lang] = "";
    }
    return this;
  };

  LocaTextColumnCSVImporterDestinationField.prototype.addToMatchExisting = function(select_opts, set_dest_fields) {
    var config, disabled, i, j, lang, langs, len, len1, path_mode, ref, ref1;
    if (!this.useForMatchExisting()) {
      return;
    }
    disabled = indexOf.call(set_dest_fields, this) < 0;
    langs = [];
    if (!disabled) {
      path_mode = false;
      ref = this._csvImporter.getMappingConfigsForDestinationField(this);
      for (i = 0, len = ref.length; i < len; i++) {
        config = ref[i];
        if (!config.config.language) {
          disabled = true;
          continue;
        }
        if (isEmpty(config.config.level)) {
          langs.push(config.config.language);
          continue;
        }
        path_mode = true;
        if (config.config.use_for_path) {
          langs.push(config.config.language);
        }
      }
      if (path_mode) {
        disabled = true;
      }
    }
    ref1 = ez5.session.getConfigDatabaseLanguages();
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      lang = ref1[j];
      select_opts.push({
        text: this.getLabel() + "#" + lang,
        disabled: indexOf.call(langs, lang) < 0,
        value: this.getName() + "#" + lang
      });
    }
    return this;
  };

  LocaTextColumnCSVImporterDestinationField.prototype.getCustomFields = function() {
    var field, fields, i, len, ref;
    fields = [
      {
        name: "language",
        form: {
          label: $$("loca.text.column.csv.importer.destination.field.language.label")
        },
        type: Select,
        undo_and_changed_support: false,
        options: this.__lang_opts
      }
    ];
    ref = LocaTextColumnCSVImporterDestinationField.__super__.getCustomFields.call(this);
    for (i = 0, len = ref.length; i < len; i++) {
      field = ref[i];
      fields.push(field);
    }
    if (this.supportsHierarchy()) {
      fields.push({
        type: Checkbox,
        form: {
          label: $$("loca.text.column.csv.importer.destination.field.use_for_path.label")
        },
        undo_and_changed_support: false,
        name: "use_for_path"
      });
    }
    return fields;
  };

  LocaTextColumnCSVImporterDestinationField.prototype.recordFromMultipleColumns = function() {
    return true;
  };

  LocaTextColumnCSVImporterDestinationField.prototype.setValuesFromMultipleColumns = function(config, values, value, idx) {
    var lang;
    lang = config.config.language;
    if (!values[idx]) {
      values[idx] = copyObject(this.__empty_record, true);
    }
    if (!isEmpty(value)) {
      if (isEmpty(values[idx][lang])) {
        values[idx][lang] = value;
      } else {
        values[idx][lang] = values[idx][lang] + ", " + value;
      }
    }
  };

  LocaTextColumnCSVImporterDestinationField.prototype.getMatchExistingValue = function(obj, match_existing) {
    var parts, value;
    value = LocaTextColumnCSVImporterDestinationField.__super__.getMatchExistingValue.call(this, obj, match_existing);
    parts = match_existing.split("#");
    return value[parts[1]];
  };

  LocaTextColumnCSVImporterDestinationField.prototype.getMatchExistingSearch = function(values, match_existing) {
    var parts, search;
    parts = match_existing.split("#");
    search = LocaTextColumnCSVImporterDestinationField.__super__.getMatchExistingSearch.call(this, values, match_existing);
    search[0].languages = [parts[1]];
    return search;
  };

  LocaTextColumnCSVImporterDestinationField.prototype.fillPrepareDataSearchOpts = function(search_opts, match_existing) {
    var parts;
    parts = match_existing.split("#");
    LocaTextColumnCSVImporterDestinationField.__super__.fillPrepareDataSearchOpts.call(this, search_opts);
    search_opts.language = parts[1];
    return search_opts;
  };

  return LocaTextColumnCSVImporterDestinationField;

})(ObjecttypeCSVImporterDestinationField);
// Generated by CoffeeScript 1.10.0
var BooleanColumnCSVImporterDestinationField,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

BooleanColumnCSVImporterDestinationField = (function(superClass) {
  extend(BooleanColumnCSVImporterDestinationField, superClass);

  function BooleanColumnCSVImporterDestinationField() {
    return BooleanColumnCSVImporterDestinationField.__super__.constructor.apply(this, arguments);
  }

  BooleanColumnCSVImporterDestinationField.prototype.initOpts = function() {
    BooleanColumnCSVImporterDestinationField.__super__.initOpts.call(this);
    return this.mergeOpt("field", {
      check: BooleanColumn
    });
  };

  BooleanColumnCSVImporterDestinationField.prototype.supportsHierarchy = function() {
    return false;
  };

  BooleanColumnCSVImporterDestinationField.prototype.getFormat = function() {
    return "boolean";
  };

  return BooleanColumnCSVImporterDestinationField;

})(ObjecttypeCSVImporterDestinationField);
// Generated by CoffeeScript 1.10.0
var NumberColumnCSVImporterDestinationField,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

NumberColumnCSVImporterDestinationField = (function(superClass) {
  extend(NumberColumnCSVImporterDestinationField, superClass);

  function NumberColumnCSVImporterDestinationField() {
    return NumberColumnCSVImporterDestinationField.__super__.constructor.apply(this, arguments);
  }

  NumberColumnCSVImporterDestinationField.prototype.initOpts = function() {
    NumberColumnCSVImporterDestinationField.__super__.initOpts.call(this);
    this.addOpts({
      fixed: {
        mandatory: true,
        "default": 0,
        check: function(v) {
          return isInteger(v) && v >= 0;
        }
      }
    });
    return this.removeOpt("use_for_match_existing");
  };

  NumberColumnCSVImporterDestinationField.prototype.supportsHierarchy = function() {
    return false;
  };

  NumberColumnCSVImporterDestinationField.prototype.getFormat = function() {
    return "number";
  };

  NumberColumnCSVImporterDestinationField.prototype.useForMatchExisting = function() {
    return false;
  };

  NumberColumnCSVImporterDestinationField.prototype.formatValues = function(values) {
    var str_value, value;
    str_value = values.join("");
    value = parseFloat(str_value);
    if (isNaN(value) || value + '' !== str_value) {
      return "invalid:" + str_value;
    }
    return value * Math.pow(10, this._fixed);
  };

  NumberColumnCSVImporterDestinationField.prototype.prepareDataChunk = function(configs, rows, offset) {
    var _rec, i, j, len, len1, records, row, v;
    for (i = 0, len = rows.length; i < len; i++) {
      row = rows[i];
      _rec = this.getRecordValue(configs, row, {
        prepare: true
      });
      if (this.getNestedDepth() === 1) {
        records = _rec;
      } else {
        records = [_rec];
      }
      for (j = 0, len1 = records.length; j < len1; j++) {
        v = records[j];
        if (!isString(v)) {
          continue;
        }
        if (v.startsWith("invalid:")) {
          console.debug("v:", v, $$("number.column.csv.importer.destination.field.number_invalid", {
            number: v.substr("invalid:".length)
          }));
          this._csvImporter.setRowInvalid(row, "number.column.csv.importer.destination.field.number_invalid", {
            number: v.substr("invalid:".length)
          });
        }
      }
    }
    return CUI.resolvedPromise();
  };

  return NumberColumnCSVImporterDestinationField;

})(ObjecttypeCSVImporterDestinationField);
// Generated by CoffeeScript 1.10.0
var CSVExporter,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CSVExporter = (function(superClass) {
  extend(CSVExporter, superClass);

  function CSVExporter() {
    return CSVExporter.__super__.constructor.apply(this, arguments);
  }

  CSVExporter.prototype.initOpts = function() {
    return CSVExporter.__super__.initOpts.call(this);
  };

  CSVExporter.prototype.getTitle = function() {
    return this.__cls;
  };

  CSVExporter.prototype.start = function() {
    var dfr, promise, show_toaster, toaster;
    dfr = new CUI.Deferred();
    this.__stopExport = false;
    toaster = null;
    show_toaster = (function(_this) {
      return function(txt) {
        return toaster = CUI.toaster({
          title: _this.getTitle(),
          cancel: true,
          onCancel: function() {
            _this.__stopExport = true;
            return promise;
          },
          show_ms: 0,
          text: txt,
          text_icon: $$("csv.exporter.progress|icon")
        });
      };
    })(this);
    promise = this.getRows().progress((function(_this) {
      return function(progress) {
        var txt;
        txt = $$("csv.exporter.progress", {
          offset: progress.offset,
          count: progress.count
        });
        if (!toaster) {
          show_toaster(txt);
        } else {
          toaster.updateText(txt);
        }
      };
    })(this)).always((function(_this) {
      return function() {
        return toaster.destroy();
      };
    })(this)).done((function(_this) {
      return function(rows) {
        var csv, hrow, i, ref;
        ref = _this.getHeaderRows();
        for (i = ref.length - 1; i >= 0; i += -1) {
          hrow = ref[i];
          rows.splice(0, 0, hrow);
        }
        csv = new CUI.CSVData({
          rows: rows
        });
        CUI.downloadData(csv.toText(), "users-" + ez5.session.getSystemName() + ".csv");
        return dfr.resolve();
      };
    })(this)).fail((function(_this) {
      return function() {
        return dfr.reject();
      };
    })(this));
    return dfr.promise();
  };

  CSVExporter.prototype.getHeaderRows = function() {
    return [];
  };

  CSVExporter.prototype.getRowsChunk = function() {
    return [];
  };

  CSVExporter.prototype.getCount = function() {
    return 0;
  };

  CSVExporter.prototype.getLimit = function() {
    return 10;
  };

  CSVExporter.prototype.getRows = function() {
    var count, dfr, get_next_chunk, limit, offset, rows;
    dfr = new CUI.Deferred();
    count = this.getCount();
    limit = this.getChunkSize();
    offset = 0;
    rows = [];
    get_next_chunk = (function(_this) {
      return function() {
        var _limit;
        if (offset >= count) {
          dfr.resolve(rows);
          return;
        }
        dfr.notify({
          offset: offset,
          count: count
        });
        _limit = Math.min(count - offset, limit);
        return _this.getRowsChunk(offset, _limit).progress(function(info) {
          return dfr.notify({
            offset: info.offset,
            count: count
          });
        }).done(function(more_rows) {
          if (_this.exportStopRequested()) {
            dfr.reject();
            return;
          }
          rows.push.apply(rows, more_rows);
          offset = offset + limit;
          get_next_chunk();
        }).fail(dfr.reject);
      };
    })(this);
    get_next_chunk();
    return dfr.promise();
  };

  CSVExporter.prototype.exportStopRequested = function() {
    return this.__stopExport;
  };

  return CSVExporter;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var NewObjectRootMenuApp,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

NewObjectRootMenuApp = (function(superClass) {
  extend(NewObjectRootMenuApp, superClass);

  function NewObjectRootMenuApp() {
    return NewObjectRootMenuApp.__super__.constructor.apply(this, arguments);
  }

  NewObjectRootMenuApp.label = function() {
    return "top.menu.new_objects";
  };

  NewObjectRootMenuApp.group = function() {
    return "aa_main";
  };

  NewObjectRootMenuApp.submenu = function() {
    return "root";
  };

  NewObjectRootMenuApp.isStartApp = function() {
    return false;
  };

  NewObjectRootMenuApp.is_allowed = function() {
    if (!ez5.mask) {
      return false;
    }
    this.otm = new ObjecttypeManager();
    this.otm.addObjecttypes(function(table) {
      return table.inMainSearch();
    });
    return DbInfo.canCreate({
      objecttypes: this.otm.objecttypes
    });
  };

  NewObjectRootMenuApp.click = function() {
    var unload;
    this.editor = null;
    unload = (function(_this) {
      return function() {
        _this.editor.destroy();
        return _this.editor = null;
      };
    })(this);
    this.editor = new EditorModalNew({
      mode: "new",
      object_list: new ObjectList(),
      onCancel: unload,
      onSave: unload
    });
    return this.editor.openEmpty();
  };

  return NewObjectRootMenuApp;

})(RootMenuApp);

ez5.session_ready(function() {
  document.body.classList.add("cui-file-upload-drop-zone");
  Events.listen({
    node: document.body,
    type: ["dragover"],
    instance: this,
    call: (function(_this) {
      return function(ev) {
        ev.stopPropagation();
        ev.preventDefault();
        if (NewObjectRootMenuApp.editor) {
          return false;
        }
        FileUpload.setDropClassByEvent(ev);
        return false;
      };
    })(this)
  });
  Events.listen({
    node: document.body,
    instance: this,
    type: ["drop"],
    call: (function(_this) {
      return function(ev) {
        var dt, file, queueFiles, ref;
        ev.stopPropagation();
        ev.preventDefault();
        if (NewObjectRootMenuApp.editor) {
          return false;
        }
        FileUpload.setDropClassByEvent(ev);
        dt = ev.getNativeEvent().dataTransfer;
        if (!((ref = dt.files) != null ? ref.length : void 0)) {
          return;
        }
        queueFiles = (function() {
          var i, len, ref1, results;
          ref1 = dt.files;
          results = [];
          for (i = 0, len = ref1.length; i < len; i++) {
            file = ref1[i];
            results.push(file);
          }
          return results;
        })();
        NewObjectRootMenuApp.click().done(function() {
          console.debug("queue files:", queueFiles);
          return NewObjectRootMenuApp.editor.queueFiles(queueFiles);
        });
        return false;
      };
    })(this)
  });
  return ez5.rootMenu.registerApp(NewObjectRootMenuApp);
});
// Generated by CoffeeScript 1.10.0
var DetailDeepLink, Main,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Main = (function(superClass) {
  extend(Main, superClass);

  function Main(opts1) {
    this.opts = opts1;
    Main.__super__.constructor.call(this, this.opts);
    this.search = null;
    this.detail = null;
    this.detail_fullscreen = null;
    this.mode = "long";
  }

  Main.is_allowed = function() {
    return ez5.session.hasSystemRight("root", "search");
  };

  Main.group = function() {
    return "aa_main";
  };

  Main.path = function() {
    return ["search"];
  };

  Main.label = function() {
    return "top.menu.main";
  };

  Main.prototype.load = function(path) {
    Main.__super__.load.call(this);
    if (!path[0]) {
      this.replaceState();
    }
    return this.loadLayout();
  };

  Main.prototype.allow_unload = function() {
    if (!this.sidebar) {
      return CUI.resolvedPromise();
    } else {
      return this.sidebar.allow_unload();
    }
  };

  Main.prototype.update_path = function(path) {
    return this.search.update_path(path);
  };

  Main.prototype.unload = function() {
    var dfr;
    dfr = new CUI.Deferred();
    Main.__super__.unload.call(this).done((function(_this) {
      return function() {
        var ref, ref1, ref2, ref3, ref4, ref5;
        if ((ref = _this.search) != null) {
          ref.destroy();
        }
        if ((ref1 = _this.cm) != null) {
          ref1.destroy();
        }
        if ((ref2 = _this.sidebar) != null) {
          ref2.destroy();
        }
        if ((ref3 = _this.mainLayout) != null) {
          ref3.destroy();
        }
        if ((ref4 = _this.detail) != null) {
          ref4.destroy();
        }
        if ((ref5 = _this.detail_fullscreen) != null) {
          ref5.destroy();
        }
        ez5.rootLayout.empty("center");
        return dfr.resolve();
      };
    })(this));
    return dfr.promise();
  };

  Main.prototype.loadLayout = function() {
    this.searchLayout = new HorizontalLayout({
      "class": "ez5-main-layout-search",
      left: {
        "class": "ez5-main-collection",
        flexHandle: {
          hidden: false,
          state_name: "main-collection-split"
        }
      },
      center: {
        "class": "ez5-main-search"
      }
    });
    this.mainLayout = new HorizontalLayout({
      "class": "ez5-main-layout ez5-finder ez5-event-poller",
      absolute: false,
      left: {
        "class": "ez5-main-left",
        flexHandle: {
          "class": "ez5-main-left-flex-handle",
          label: {
            loca_key: "collection.manager.title"
          },
          state_name: "main-finder",
          closable: true,
          hidden: false
        }
      },
      right: {
        "class": "ez5-main-right",
        flexHandle: {
          label: {
            text: ""
          },
          hidden: false,
          closable: false,
          state_name: "main-sidebar",
          closed: true
        }
      },
      center: {
        "class": "ez5-main-center",
        content: this.searchLayout
      }
    });
    ez5.rootLayout.replace(this.mainLayout, "center");
    this.sidebar = new Sidebar({
      mainLayout: this.mainLayout,
      getSearch: (function(_this) {
        return function() {
          return _this.search;
        };
      })(this)
    });
    this.cm = this.getCollectionManager({
      mainLayout: this.mainLayout,
      detailDiv: this.searchLayout.left(),
      sidebar: this.sidebar
    });
    this.mainLayout.replace(this.cm.render(), "left");
    return this.loadSearch();
  };

  Main.prototype.getCollectionManager = function(opts) {
    return new CollectionManager(opts);
  };

  Main.prototype.loadSearch = function() {
    var sel_col;
    sel_col = this.cm.getCollectionSelection();
    this.search = new SearchMain({
      container: this.searchLayout.center(),
      collection: sel_col,
      collectionManager: this.cm
    });
    this.cm.setSearch(this.search);
    return this.search.init().done((function(_this) {
      return function() {
        return _this.loadDeepLink(sel_col);
      };
    })(this));
  };

  Main.prototype.loadDeepLink = function(sel_col) {
    var gid;
    gid = Main.getGlobalObjectIdFromLocation(document.location);
    if (!gid) {
      return CUI.resolvedPromise();
    }
    return ResultObject.loadFromGlobalObjectId(gid, "short", null, true, false).done((function(_this) {
      return function(ro) {
        _this.sidebar.showSidebar();
        return sel_col.insertObjects([ro.getCollectionObject()]);
      };
    })(this));
  };

  Main.getGlobalObjectIdFromLocation = function(location) {
    var dfr, id, match;
    match = location.pathname.match("^/(?:detail|lists/.+)/([1-9][0-9]*)$");
    if (!match) {
      return null;
    }
    id = match[1];
    dfr = new CUI.Deferred();
    if (!id.match(/@/)) {
      return id + "@" + ez5.session.getInstance().name;
    } else {
      return id;
    }
  };

  return Main;

})(RootMenuApp);

ez5.session_ready(function() {
  ez5.rootMenu.registerApp(Main);
  return ez5.rootMenu.registerAppLoader(new DetailDeepLink());
});

DetailDeepLink = (function(superClass) {
  extend(DetailDeepLink, superClass);

  function DetailDeepLink() {
    return DetailDeepLink.__super__.constructor.apply(this, arguments);
  }

  DetailDeepLink.prototype.findAppByLocation = function(location, apps) {
    var ask_login, dfr, gid, load_app, load_object;
    gid = Main.getGlobalObjectIdFromLocation(location);
    if (!gid || location.pathname.match("^/lists")) {
      return CUI.rejectedPromise();
    }
    dfr = new CUI.Deferred();
    ask_login = (function(_this) {
      return function() {
        var anon;
        if (false && ez5.session.getAuthMethod() === "anonymous") {
          anon = ".anonymous";
        } else {
          anon = "";
        }
        return CUI.choice({
          text: $$("main.deep_link_needs_login" + anon),
          choices: [
            {
              text: $$("main.deep_link_needs_login.button.login"),
              _choice: "login",
              primary: true
            }, {
              text: $$("main.deep_link_needs_login.button.cancel"),
              _choice: "cancel"
            }
          ]
        }).done(function(choice) {
          if (choice._choice === "cancel") {
            dfr.reject();
            return;
          }
          return ez5.session.loginAgain(false).done(function() {
            return ez5.start.loadApps().fail(dfr.reject).done(function() {
              return load_object();
            });
          }).fail(function() {
            return ask_login();
          });
        });
      };
    })(this);
    load_object = (function(_this) {
      return function() {
        var promise;
        promise = ResultObject.loadFromGlobalObjectId(gid, "short", null, true, false);
        promise.done(function(ro) {
          var sid;
          if (ro.getMask().inMainSearch()) {
            return load_app("/search");
          } else {
            sid = gid.match(/(.*)@/)[1];
            window.history.replaceState({}, null, "/lists/" + ro.getMask().getTable().name() + "/" + sid);
            return dfr.reject();
          }
        });
        return promise.fail(function() {
          return ask_login();
        });
      };
    })(this);
    load_app = (function(_this) {
      return function(pathname) {
        var app, i, len;
        for (i = 0, len = apps.length; i < len; i++) {
          app = apps[i];
          if ((typeof app.getPathname === "function" ? app.getPathname() : void 0) === pathname) {
            return dfr.resolve(app);
          }
        }
        return dfr.reject();
      };
    })(this);
    load_object();
    return dfr.promise();
  };

  return DetailDeepLink;

})(RootMenuAppLoader);
// Generated by CoffeeScript 1.10.0
var Sidebar,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Sidebar = (function(superClass) {
  extend(Sidebar, superClass);

  function Sidebar() {
    return Sidebar.__super__.constructor.apply(this, arguments);
  }

  Sidebar.prototype.initOpts = function() {
    Sidebar.__super__.initOpts.call(this);
    return this.addOpts({
      getSearch: {
        check: Function
      },
      mainLayout: {
        mandatory: true,
        check: HorizontalLayout
      }
    });
  };

  Sidebar.prototype.readOpts = function() {
    Sidebar.__super__.readOpts.call(this);
    this.__flexHandle = this._mainLayout.getFlexHandle("right");
    this.hideSidebar();
    return this.empty();
  };

  Sidebar.prototype.loadCollectionObject = function(_opts) {
    var opts;
    if (_opts == null) {
      _opts = {};
    }
    opts = CUI.Element.readOpts(_opts, "Sidebar.loadCollectionObject", {
      global_object_id: {
        mandatory: true,
        check: String
      },
      search: {
        check: Search
      },
      offset: {
        check: function(v) {
          return v >= 0;
        }
      }
    });
    if (this.__last_loaded === "editor") {
      return this.loadEditor(opts);
    } else {
      return this.loadDetail(opts);
    }
  };

  Sidebar.prototype.loadDetail = function(opts) {
    var mainDiv, push_state, timeout;
    if (this.isEmpty() || this._editor) {
      if (this.isEmpty()) {
        this.__showWaitFrame();
      } else {
        timeout = CUI.setTimeout({
          ms: wait_ms,
          call: (function(_this) {
            return function() {
              return _this.__showWaitFrame();
            };
          })(this)
        });
      }
    }
    push_state = (function(_this) {
      return function() {
        var url;
        if (opts.push_state === false) {
          return;
        }
        url = _this.detail.getShareUrl();
        if (url) {
          return window.history.pushState({}, null, url);
        }
      };
    })(this);
    this.__is_empty = false;
    this.__loaded_gid = opts.global_object_id;
    if (this.__last_loaded === "detail" && this.detail && this.detail.canUpdate()) {
      this.detail.update({
        global_object_id: opts.global_object_id,
        offset: opts.offset,
        search: opts.search
      }).done((function(_this) {
        return function() {
          return push_state();
        };
      })(this));
      return;
    }
    this.__last_loaded = "detail";
    if (this.editor) {
      this.editor.destroy();
      this.editor = null;
    }
    if (this.detail) {
      this.detail.destroy();
    }
    this.detail = new DetailSidebar({
      global_object_id: opts.global_object_id,
      offset: opts.offset,
      sidebar: this,
      search: opts.search
    });
    mainDiv = this.detail.render();
    this.__showLoading();
    return this.detail.load().always((function(_this) {
      return function() {
        CUI.clearTimeout(timeout);
        return _this.__unshowLoading();
      };
    })(this)).fail((function(_this) {
      return function() {
        var ref;
        if ((ref = _this.detail) != null) {
          ref.destroy();
        }
        _this.detail = null;
        return _this.empty();
      };
    })(this)).done((function(_this) {
      return function() {
        push_state();
        return _this._mainLayout.replace(mainDiv, "right");
      };
    })(this));
  };

  Sidebar.prototype.__showLoading = function() {
    if (this._mainLayout.isDestroyed()) {
      return;
    }
    return CUI.DOM.addClass(this._mainLayout.right(), "ez5-sidebar-is-loading");
  };

  Sidebar.prototype.__unshowLoading = function() {
    if (this._mainLayout.isDestroyed()) {
      return;
    }
    return CUI.DOM.removeClass(this._mainLayout.right(), "ez5-sidebar-is-loading");
  };

  Sidebar.prototype.allow_unload = function() {
    var dfr;
    dfr = new CUI.Deferred();
    if (this.editor) {
      this.editor.doClose().done(dfr.resolve).fail(dfr.reject);
    } else {
      dfr.resolve();
    }
    return dfr.promise();
  };

  Sidebar.prototype.getLoadedGlobalObjectId = function() {
    return this.__loaded_gid;
  };

  Sidebar.prototype.loadEditor = function(_opts) {
    var mainDiv, mode, opts, timeout;
    this.__last_loaded = "editor";
    if (this.isEmpty() || this.detail) {
      timeout = CUI.setTimeout({
        ms: 500,
        call: (function(_this) {
          return function() {
            return _this.__showWaitFrame();
          };
        })(this)
      });
    }
    if (this.editor) {
      this.editor.destroy();
    }
    if (this.detail) {
      this.detail.destroy();
      this.detail = null;
    }
    this.__is_empty = false;
    opts = CUI.Element.readOpts(_opts, "Sidebar.loadEditor", {
      table_id: {
        check: "Integer"
      },
      offset: {
        check: "Integer"
      },
      copy: {
        "default": false,
        check: Boolean
      },
      global_object_id: {
        check: String
      }
    });
    if (opts.global_object_id) {
      this.__loaded_gid = opts.global_object_id;
      if (opts.copy) {
        mode = "copy";
      } else {
        mode = "single";
      }
    } else {
      this.__loaded_gid = null;
      mode = "new";
    }
    this.editor = new EditorSidebar({
      global_object_id: opts.global_object_id,
      table_id: opts.table_id,
      mode: mode,
      search: opts.search,
      sidebar: this,
      onCancel: (function(_this) {
        return function() {
          _this.editor.destroy();
          _this.editor = null;
          _this.empty();
          return _this.hideSidebar();
        };
      })(this),
      onCloseEditor: (function(_this) {
        return function() {
          _this.editor.destroy();
          _this.editor = null;
          return _this.loadDetail({
            global_object_id: _this.__loaded_gid
          });
        };
      })(this),
      onDelete: (function(_this) {
        return function() {
          _this.editor.destroy();
          _this.editor = null;
          return _this.empty();
        };
      })(this),
      onCopy: (function(_this) {
        return function() {
          return _this.loadEditor({
            global_object_id: _this.__loaded_gid,
            copy: true
          });
        };
      })(this),
      onSaveReadOnly: (function(_this) {
        return function(editor, received_data) {
          var gid;
          _this.editor.destroy();
          _this.editor = null;
          gid = received_data[0]._global_object_id;
          return _this.loadDetail({
            global_object_id: gid
          });
        };
      })(this),
      onSave: (function(_this) {
        return function(editor, received_data) {
          var gid;
          if (_this.editor.getMode() === "new") {
            gid = received_data[0]._global_object_id;
            _this.editor.setMode("single");
            _this.__loaded_gid = received_data[0]._global_object_id;
          }
          return _this.editor.load();
        };
      })(this)
    });
    this.__showLoading();
    mainDiv = this.editor.render();
    return this.editor.load().always((function(_this) {
      return function() {
        CUI.clearTimeout(timeout);
        return _this.__unshowLoading();
      };
    })(this)).fail((function(_this) {
      return function() {
        var ref;
        if ((ref = _this.editor) != null) {
          ref.destroy();
        }
        _this.editor = null;
        return _this.empty();
      };
    })(this)).done((function(_this) {
      return function() {
        return _this._mainLayout.replace(mainDiv, "right");
      };
    })(this));
  };

  Sidebar.prototype.getCloseButton = function() {
    return new LocaButton({
      icon: "close",
      loca_key: "base.help.flex_handle.hide",
      onClick: (function(_this) {
        return function(ev, df) {
          return _this.hideSidebar();
        };
      })(this)
    });
  };

  Sidebar.prototype.__setLabel = function(label) {
    var ref, ref1;
    return (ref = this.__flexHandle) != null ? (ref1 = ref.getLabel()) != null ? ref1.setText($$("sidebar.label." + label)) : void 0 : void 0;
  };

  Sidebar.prototype.getSearch = function() {
    assert(this._mainLayout, "Sidebar.getSearch", "MainLayout not set.");
    return typeof this._getSearch === "function" ? this._getSearch() : void 0;
  };

  Sidebar.prototype.resetState = function() {
    var ref, url;
    url = (ref = this.getSearch()) != null ? ref.getSharePath() : void 0;
    if (url && url !== document.location.pathname) {
      window.history.pushState({}, null, url);
    }
    return this;
  };

  Sidebar.prototype.empty = function() {
    this.__is_empty = true;
    this.__loaded_gid = null;
    this.resetState();
    this.__setLabel("empty");
    if (!this._mainLayout.isDestroyed()) {
      this._mainLayout.replace(new SimplePane({
        "class": "cui-pane--window",
        header_left: (function(_this) {
          return function() {
            return new Label({
              text: $$("sidebar.label.empty")
            });
          };
        })(this),
        header_right: (function(_this) {
          return function() {
            return _this.getCloseButton();
          };
        })(this),
        content: new EmptyLabel({
          centered: true,
          icon: $$("main.sidebar.empty.icon"),
          text: $$("main.sidebar.empty.hint")
        })
      }), "right");
    }
    return this;
  };

  Sidebar.prototype.__showWaitFrame = function() {
    return this._mainLayout.replace(new SimplePane({
      "class": "cui-pane--window ez5-wait-pane",
      header_left: (function(_this) {
        return function() {
          return new Label({
            text: $$("sidebar.loading.label")
          });
        };
      })(this),
      content: this.__emptyLabel = new EmptyLabel({
        centered: true,
        icon: $$("sidebar.loading.icon"),
        text: $$("sidebar.loading.text")
      })
    }), "right");
  };

  Sidebar.prototype.getMainLayout = function() {
    return this._mainLayout;
  };

  Sidebar.prototype.hideSidebar = function() {
    var ref;
    this.resetState();
    if ((ref = this.__flexHandle) != null) {
      ref.close().hide();
    }
    this.scrollLoadedObjectIntoView();
    return this;
  };

  Sidebar.prototype.showSidebar = function() {
    this.__flexHandle.open().show();
    this.scrollLoadedObjectIntoView();
    return this;
  };

  Sidebar.prototype.scrollLoadedObjectIntoView = function() {
    var rc, ref, scroll_el;
    if (!this.__loaded_gid) {
      return;
    }
    rc = (ref = this.getSearch()) != null ? ref.getResultContainer() : void 0;
    if (rc) {
      scroll_el = CUI.DOM.matchSelector(rc, "[global-object-id='" + this.__loaded_gid + "']")[0];
      CUI.DOM.scrollIntoView(scroll_el);
    }
    return this;
  };

  Sidebar.prototype.isShown = function() {
    return this.__flexHandle.isOpen();
  };

  Sidebar.prototype.isEmpty = function() {
    return this.__is_empty;
  };

  return Sidebar;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var UserManager,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

UserManager = (function(superClass) {
  extend(UserManager, superClass);

  function UserManager() {
    this.getListFields = bind(this.getListFields, this);
    return UserManager.__super__.constructor.apply(this, arguments);
  }

  UserManager.is_allowed = function() {
    if (ez5.session.hasSystemRight("root")) {
      return true;
    }
    if (ez5.session.hasSystemRight("user") && !ez5.session.hasSystemRight("user[hide_frontend_app]")) {
      return true;
    }
    return false;
  };

  UserManager.group = function() {
    return "rightsmanagement";
  };

  UserManager.label = function() {
    return "admin.menu.user";
  };

  UserManager.submenu = function() {
    return "rightsmanagement";
  };

  UserManager.path = function() {
    return ["usermanager"];
  };

  UserManager.prototype.initFilterData = function() {
    return this.__filter_data = {
      search: "",
      types: [],
      not_groups: false,
      login_disabled: null,
      custom_group_ids: [],
      __group_ids: []
    };
  };

  UserManager.prototype.getMissingName = function() {
    return $$("admin.user.missing.name");
  };

  UserManager.prototype.getListFields = function() {
    return [
      {
        th_label: "admin.user.list.name"
      }, {
        th_label: "admin.user.list.type"
      }
    ];
  };

  UserManager.prototype.getPlusButton = function() {
    var ref;
    if (((ref = ez5.session.getSystemRight("user")) != null ? ref.create : void 0) || ez5.session.hasSystemRight("root")) {
      return UserManager.__super__.getPlusButton.call(this);
    } else {

    }
  };

  UserManager.prototype.getExtraButton = function() {
    return new LocaButton({
      loca_key: "user.manager.button.extra",
      group: "plus-minus",
      menu: {
        items: [
          {
            loca_key: "user.manager.extra.upload_csv",
            onClick: (function(_this) {
              return function() {
                return _this.showCSVImport().done(function() {
                  return _this.loadFilter();
                });
              };
            })(this)
          }, {
            loca_key: "user.manager.extra.download_csv",
            onClick: (function(_this) {
              return function() {
                return _this.showCSVExport();
              };
            })(this)
          }
        ]
      }
    });
  };

  UserManager.prototype.showCSVImport = function() {
    return new UserCSVImporter().start();
  };

  UserManager.prototype.showCSVExport = function() {
    return new UserCSVExporter({
      userManager: this
    }).start();
  };

  UserManager.prototype.addRow = function() {
    var new_node;
    new_node = new ez5.defaults["class"].User({
      manager: this
    });
    return this.tree.addNode(new_node).done((function(_this) {
      return function() {
        return new_node.select().fail(function() {
          return new_node["delete"]();
        }).done(function() {
          return new_node.scrollIntoView();
        });
      };
    })(this));
  };

  UserManager.prototype.getTreeOpts = function() {
    var opts;
    opts = UserManager.__super__.getTreeOpts.call(this);
    opts.filterManager = (function(_this) {
      return function() {
        var aclm, aclm_data, custom_groups, fields, filter_form, input, lay;
        input = ListViewEditTree.prototype.getFilterManager.call(_this, function(filter) {
          _this.__filter_data.search = filter;
          return _this.loadFilter();
        });
        fields = null;
        aclm_data = {};
        aclm = new AclWhoManager({
          store_full_data: true,
          name: "custom_group",
          filter_groups: ["system", "easydb"],
          who_filter: ["group"]
        });
        custom_groups = [];
        filter_form = new FormPopover({
          data: _this.__filter_data,
          fields: function() {
            var i, j, k, len, len1, login_disabled_opts, ref, ref1, term;
            if (!_this.data) {
              return [];
            }
            if (!fields) {
              fields = [];
              opts = [];
              ref = _this.data.aggregations._users.terms;
              for (i = 0, len = ref.length; i < len; i++) {
                term = ref[i];
                opts.push({
                  text: term.term,
                  value: term.term
                });
              }
              opts.sort(function(a, b) {
                return compareIndex(a.text, b.text);
              });
              fields.push({
                form: {
                  label: $$("user.manager.filter.types")
                },
                type: Options,
                horizontal: false,
                name: "types",
                undo_and_changed_support: false,
                options: opts
              });
              login_disabled_opts = [];
              ref1 = [null, true, false];
              for (j = 0, len1 = ref1.length; j < len1; j++) {
                k = ref1[j];
                login_disabled_opts.push({
                  text: $$("user.manager.filter.login_disabled." + k),
                  value: k
                });
              }
              fields.push({
                type: Select,
                form: {
                  label: $$("user.manager.filter.login_disabled.label")
                },
                options: login_disabled_opts,
                name: "login_disabled"
              });
              fields.push({
                type: Options,
                placeholder: "",
                name: "custom_group_ids",
                options: custom_groups
              });
              fields.push({
                type: DataFieldProxy,
                form: {
                  label: $$("user.manager.filter.custom_groups.label")
                },
                element: aclm.getWhoSelector(aclm_data),
                onDataChanged: function() {
                  var group, group_data, group_id;
                  group_data = aclm_data["custom_group"];
                  if (!group_data) {
                    return;
                  }
                  aclm.inputSearch.emptyInput(false);
                  group = Group.newInstance({
                    group: group_data
                  });
                  group_id = group.getId();
                  if (idxInArray(null, custom_groups, (function(v) {
                    return v.value === group_id;
                  })) === -1) {
                    custom_groups.push({
                      value: group.getId(),
                      text: group.getDisplayText()
                    });
                  }
                  pushOntoArray(group_id, _this.__filter_data.custom_group_ids);
                  return filter_form.getFieldsByName("custom_group_ids")[0].reload();
                }
              });
              fields.push.apply(fields, Group.getGroupFields(["easydb"]));
              fields.push({
                type: Checkbox,
                text: $$("user.manager.filter.not_groups"),
                name: "not_groups",
                options: custom_groups
              });
            }
            return fields;
          },
          trigger_data_changed_while_open: true,
          button: {
            "class": "ez5-user-manager-filter-button",
            loca_key: "user.manager.filter.button"
          },
          renderDisplayButton: function() {
            return _this.__filter_data.__group_ids.length > 0 || _this.__filter_data.types.length > 0;
          },
          onDataChanged: function() {
            return _this.loadFilter();
          }
        });
        lay = new HorizontalLayout({
          "class": "ez5-filter-manager",
          center: {
            content: [input, DOM.space("small")]
          },
          right: {
            content: filter_form.start()
          }
        });
        return lay;
      };
    })(this);
    return opts;
  };

  UserManager.prototype.loadList = function(filter, opts) {
    var group_ids, search, searchOpts;
    if (opts == null) {
      opts = {};
    }
    search = [
      {
        type: "in",
        bool: "must_not",
        fields: ["user.type"],
        "in": ["anonymous"]
      }
    ];
    group_ids = [];
    group_ids.push.apply(group_ids, this.__filter_data.__group_ids);
    group_ids.push.apply(group_ids, this.__filter_data.custom_group_ids);
    if (group_ids.length > 0) {
      search.push({
        type: "in",
        bool: this.__filter_data.not_groups ? "must_not" : "must",
        fields: ["_groups.group._id"],
        "in": group_ids
      });
    }
    if (this.__filter_data.types.length > 0) {
      search.push({
        type: "in",
        bool: "must",
        fields: ["user.type"],
        "in": this.__filter_data.types
      });
    }
    if (this.__filter_data.login_disabled !== null) {
      search.push({
        type: "in",
        bool: "must",
        fields: ["user.login_disabled"],
        "in": [this.__filter_data.login_disabled]
      });
    }
    searchOpts = opts.searchOpts || {};
    CUI.mergeMap(searchOpts, {
      type: "user",
      search: search,
      limit: 100,
      aggregations: {
        _users: {
          field: "user.type",
          type: "term",
          limit: 10000
        }
      },
      sort: [
        {
          field: "user._generated_displayname",
          order: "ASC"
        }
      ]
    });
    return UserManager.__super__.loadList.call(this, this.__filter_data.search, {
      searchOpts: searchOpts,
      newInstanceFunc: (function(_this) {
        return function(user) {
          return User.newInstance({
            user: user,
            manager: _this
          });
        };
      })(this)
    });
  };

  return UserManager;

})(SystemListManager);

ez5.session_ready(function() {
  return ez5.rootMenu.registerApp(UserManager);
});
// Generated by CoffeeScript 1.10.0
var UserCSVImporter,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

UserCSVImporter = (function(superClass) {
  extend(UserCSVImporter, superClass);

  function UserCSVImporter() {
    return UserCSVImporter.__super__.constructor.apply(this, arguments);
  }

  UserCSVImporter.prototype.getDestinationFields = function() {
    var dest_field, dest_fields, fields, i, j, k, len, len1, ref;
    dest_fields = [
      {
        name: "_basetype"
      }, {
        name: "user.type"
      }, {
        name: "user._id",
        format: "number",
        use_for_match_existing: true
      }, {
        name: "user.login",
        use_for_match_existing: true
      }, {
        name: "user.frontend_prefs",
        format: "json"
      }, {
        name: "user.login_disabled",
        format: "boolean"
      }, {
        name: "user.require_password_change",
        format: "boolean"
      }, new UserCSVImporterGroupsField({
        csvImporter: this,
        name: "_groups#find"
      }), {
        name: "_emails",
        format: "json"
      }, {
        name: "_emails[].email",
        format: "string"
      }, {
        name: "_emails[].use_for_login",
        format: "boolean"
      }, {
        name: "_emails[].use_for_email",
        format: "boolean"
      }, {
        name: "_emails[].needs_confirmation",
        format: "boolean"
      }, {
        name: "_emails[].send_email",
        format: "boolean"
      }, {
        name: "_emails[].send_email_include_password",
        format: "boolean"
      }, {
        name: "_emails[].intended_primary",
        format: "boolean"
      }, {
        name: "_emails[].is_primary",
        format: "boolean"
      }
    ];
    ref = ["first_name", "last_name", "displayname", "company", "department", "address_supplement", "street", "house_number", "postal_code", "town", "country", "phone", "remarks", "_new_primary_email"];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      dest_fields.push({
        name: "user." + k
      });
    }
    fields = [];
    for (j = 0, len1 = dest_fields.length; j < len1; j++) {
      dest_field = dest_fields[j];
      if (dest_field instanceof CSVImporterDestinationField) {
        fields.push(dest_field);
      } else {
        dest_field.csvImporter = this;
        fields.push(new CSVImporterDestinationField(dest_field));
      }
    }
    return fields;
  };

  UserCSVImporter.prototype.getTitleLocaKey = function() {
    return "user.csv.importer.title";
  };

  UserCSVImporter.prototype.getOutputSettingFields = function() {
    var fields, match_existing;
    fields = UserCSVImporter.__super__.getOutputSettingFields.call(this);
    match_existing = this.getMatchExistingField();
    if (match_existing) {
      fields.splice(0, 0, match_existing);
    }
    return fields;
  };

  UserCSVImporter.prototype.getObjecttype = function() {
    return "user";
  };

  UserCSVImporter.prototype.getPrepareDataSearchOpts = function() {
    return {
      type: "user"
    };
  };

  UserCSVImporter.prototype.supportsDelete = function() {
    return true;
  };

  UserCSVImporter.prototype.getRecord = function(row, opts) {
    var record;
    if (opts == null) {
      opts = {};
    }
    record = UserCSVImporter.__super__.getRecord.call(this, row, opts);
    record._basetype = "user";
    if (!record.user) {
      record.user = {};
    }
    if (!record.user.type) {
      record.user.type = "easydb";
    }
    if (row[this.cf_idx.id]) {
      record.user._id = row[this.cf_idx.id];
      record.user._version = parseInt(row[this.cf_idx.version]) + 1;
    } else {
      if (opts.operation) {
        record.user._id = null;
      }
      record.user._version = 1;
    }
    return record;
  };

  UserCSVImporter.prototype.action = function(ev, op, rows) {
    var delete_ids, i, idx, idx_by_id, j, len, len1, promise, record, records, row;
    records = [];
    for (i = 0, len = rows.length; i < len; i++) {
      row = rows[i];
      record = this.getRecord(row, {
        operation: op
      });
      records.push(record);
    }
    if (ev.hasModifierKey()) {
      console.info("UserCSVImporter:", dump(records));
      return CUI.rejectedPromise();
    }
    if (op === "delete") {
      delete_ids = [];
      idx_by_id = {};
      for (idx = j = 0, len1 = records.length; j < len1; idx = ++j) {
        record = records[idx];
        if (!record.user._id) {
          continue;
        }
        delete_ids.push(record.user._id);
        idx_by_id[record.user._id] = idx;
      }
      promise = CUI.chunkWork.call(this, {
        timeout: -1,
        chunk_size: 1,
        items: delete_ids,
        call: (function(_this) {
          return function(_delete_ids) {
            console.debug("deleting ids..", _delete_ids);
            return ez5.api.user({
              type: "DELETE",
              api: "/" + _delete_ids[0]
            }).done(function() {
              row = rows[idx_by_id[_delete_ids[0]]];
              row[_this.cf_idx.status] = "done";
              row[_this.cf_idx.status_text] = "deleted";
              return row[_this.cf_idx.id] = _delete_ids[0];
            });
          };
        })(this)
      });
      promise.fail((function(_this) {
        return function() {
          var l, len2;
          for (l = 0, len2 = rows.length; l < len2; l++) {
            row = rows[l];
            if (row[_this.cf_idx.status] !== "done") {
              row[_this.cf_idx.status] = "failed";
            }
          }
        };
      })(this));
      return promise;
    }
    return ez5.api.user({
      type: "POST",
      json_data: records
    }).done((function(_this) {
      return function(users) {
        var l, len2, user;
        for (idx = l = 0, len2 = users.length; l < len2; idx = ++l) {
          user = users[idx];
          row = rows[idx];
          row[_this.cf_idx.status] = "done";
          row[_this.cf_idx.id] = user.user._id;
          row[_this.cf_idx.version] = user.user._version;
        }
      };
    })(this)).fail((function(_this) {
      return function() {
        var l, len2;
        for (l = 0, len2 = rows.length; l < len2; l++) {
          row = rows[l];
          row[_this.cf_idx.status] = "failed";
        }
      };
    })(this));
  };

  return UserCSVImporter;

})(CSVImporter);
// Generated by CoffeeScript 1.10.0
var UserCSVImporterGroupsField,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

UserCSVImporterGroupsField = (function(superClass) {
  extend(UserCSVImporterGroupsField, superClass);

  function UserCSVImporterGroupsField() {
    return UserCSVImporterGroupsField.__super__.constructor.apply(this, arguments);
  }

  UserCSVImporterGroupsField.prototype.__matchGroup = function(_value) {
    var data, displayname, grp, i, j, lang, len, len1, ref, ref1, value;
    value = _value.trim();
    ref = ez5.groupManager.getGroups();
    for (i = 0, len = ref.length; i < len; i++) {
      grp = ref[i];
      data = grp.getData();
      if (data.group._id + "" === value) {
        return grp;
      }
      if (data.group.name === value) {
        return grp;
      }
      ref1 = data.group.displayname;
      for (displayname = j = 0, len1 = ref1.length; j < len1; displayname = ++j) {
        lang = ref1[displayname];
        if (displayname === value) {
          return grp;
        }
      }
    }
    return null;
  };

  UserCSVImporterGroupsField.prototype.getRecordKeyPath = function() {
    return this.getName().split("#")[0];
  };

  UserCSVImporterGroupsField.prototype.getRecordValue = function(configs, row, opts) {
    var _value, config, groups, grp, i, j, len, len1, ref, value;
    if (opts == null) {
      opts = {};
    }
    groups = [];
    for (i = 0, len = configs.length; i < len; i++) {
      config = configs[i];
      _value = row[config.csv_field_idx];
      if (isEmpty(_value)) {
        continue;
      }
      ref = _value.split(",");
      for (j = 0, len1 = ref.length; j < len1; j++) {
        value = ref[j];
        grp = this.__matchGroup(value);
        if (!grp) {
          continue;
        }
        groups.push({
          _basetype: "group",
          group: {
            _id: grp.id
          }
        });
      }
    }
    if (groups.length === 0) {
      return void 0;
    } else {
      return groups;
    }
  };

  return UserCSVImporterGroupsField;

})(CSVImporterDestinationField);
// Generated by CoffeeScript 1.10.0
var UserCSVExporter,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

UserCSVExporter = (function(superClass) {
  extend(UserCSVExporter, superClass);

  function UserCSVExporter() {
    return UserCSVExporter.__super__.constructor.apply(this, arguments);
  }

  UserCSVExporter.prototype.initOpts = function() {
    UserCSVExporter.__super__.initOpts.call(this);
    return this.addOpts({
      userManager: {
        mandatory: true,
        check: (function(_this) {
          return function(v) {
            if (v instanceof UserManager && v.getLastData()) {
              return true;
            } else {
              return false;
            }
          };
        })(this)
      }
    });
  };

  UserCSVExporter.prototype.readOpts = function() {
    UserCSVExporter.__super__.readOpts.call(this);
    this.__data = this._userManager.getLastData();
    return this.__searchOpts = this._userManager.getLastSearchOptions();
  };

  UserCSVExporter.prototype.getCount = function() {
    return this.__data.count;
  };

  UserCSVExporter.prototype.getChunkSize = function() {
    return this.__data.limit;
  };

  UserCSVExporter.prototype.getRows = function() {
    this.__colidx = {};
    this.__column_keys = [];
    return UserCSVExporter.__super__.getRows.call(this);
  };

  UserCSVExporter.prototype.getHeaderRows = function() {
    return [this.__column_keys];
  };

  UserCSVExporter.prototype.getRowsChunk = function(offset, limit) {
    var dfr, rows, sopts;
    dfr = new CUI.Deferred();
    rows = [];
    sopts = copyObject(this.__searchOpts, true);
    sopts.offset = offset;
    sopts.limit = limit;
    sopts.generate_rights = false;
    ez5.api.search({
      json_data: sopts
    }).done((function(_this) {
      return function(data) {
        var i, len1, obj, ref, user_ids;
        user_ids = [];
        ref = data.objects;
        for (i = 0, len1 = ref.length; i < len1; i++) {
          obj = ref[i];
          user_ids.push(obj.user._id);
        }
        return CUI.chunkWork.call(_this, {
          timeout: 0,
          items: user_ids,
          chunk_size: 1,
          call: function(items, idx, len) {
            if (_this.exportStopRequested()) {
              return false;
            }
            dfr.notify({
              offset: idx + offset
            });
            return ez5.api.user({
              api: "/" + items[0]
            }).done(function(objects) {
              var j, len2;
              for (j = 0, len2 = objects.length; j < len2; j++) {
                obj = objects[j];
                rows.push(_this.__getDataRow(obj));
              }
            });
          }
        }).done(function() {
          return dfr.resolve(rows);
        }).fail(dfr.reject);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  UserCSVExporter.prototype.__getDataRow = function(obj) {
    var email, emails, groups, grp, i, idx, j, k, key, len1, len2, ref, ref1, ref2, row, v;
    row = [];
    ref = obj.user;
    for (k in ref) {
      v = ref[k];
      if (CUI.isPlainObject(v)) {
        this.__addData(row, "user." + k, JSON.stringify(v));
      } else {
        this.__addData(row, "user." + k, v);
      }
    }
    groups = [];
    ref1 = obj._groups;
    for (i = 0, len1 = ref1.length; i < len1; i++) {
      grp = ref1[i];
      groups.push(grp.group._id);
    }
    this.__addData(row, "_groups#find", groups.join(","));
    emails = {};
    ref2 = obj._emails;
    for (idx = j = 0, len2 = ref2.length; j < len2; idx = ++j) {
      email = ref2[idx];
      for (k in email) {
        v = email[k];
        key = "_emails[]." + k;
        if (emails[key] === void 0) {
          emails[key] = [];
        }
        emails[key][idx] = [v];
      }
    }
    for (key in emails) {
      v = emails[key];
      this.__addData(row, key, new CUI.CSVData({
        rows: v
      }).toText({
        always_quote: false
      }));
    }
    return row;
  };

  UserCSVExporter.prototype.__addData = function(row, key, value) {
    var colidx;
    colidx = this.__colidx[key];
    if (colidx === void 0) {
      this.__colidx[key] = colidx = this.__column_keys.length;
      this.__column_keys.push(key);
    }
    row[colidx] = value;
  };

  return UserCSVExporter;

})(CSVExporter);
// Generated by CoffeeScript 1.10.0
var GroupManager,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GroupManager = (function(superClass) {
  extend(GroupManager, superClass);

  GroupManager.is_allowed = function() {
    if (ez5.session.hasSystemRight("root")) {
      return true;
    }
    if (ez5.session.hasSystemRight("group") && !ez5.session.hasSystemRight("group[hide_frontend_app]")) {
      return true;
    }
    return false;
  };

  GroupManager.group = function() {
    return "rightsmanagement";
  };

  GroupManager.label = function() {
    return "admin.menu.group";
  };

  GroupManager.submenu = function() {
    return "rightsmanagement";
  };

  GroupManager.path = function() {
    return ["groupmanager"];
  };

  function GroupManager(opts1) {
    this.opts = opts1 != null ? opts1 : {};
    this.getListFields = bind(this.getListFields, this);
    GroupManager.__super__.constructor.call(this, this.opts);
    if (this._auto_reload) {
      EventPoller.listen({
        instance: this,
        filter: {
          type: ["OBJECT_INDEX", "OBJECT_DELETE"],
          basetype: "group"
        },
        call: (function(_this) {
          return function(events) {
            return _this.loadAllGroups();
          };
        })(this)
      });
    }
  }

  GroupManager.prototype.destroy = function() {
    Events.ignore({
      instance: this
    });
    return GroupManager.__super__.destroy.call(this);
  };

  GroupManager.prototype.initOpts = function() {
    GroupManager.__super__.initOpts.call(this);
    return this.addOpts({
      auto_reload: {
        "default": false,
        mandatory: true,
        check: Boolean
      }
    });
  };

  GroupManager.prototype.initFilterData = function() {
    return this.__filter_data = {
      search: "",
      types: []
    };
  };

  GroupManager.prototype.getMissingName = function() {
    return $$("admin.group.missing.name");
  };

  GroupManager.prototype.getListFields = function() {
    return [
      {
        th_label: "admin.group.list.name"
      }, {
        th_label: "admin.group.list.type"
      }
    ];
  };

  GroupManager.prototype.getPlusButton = function() {
    var ref;
    if (((ref = ez5.session.getSystemRight("group")) != null ? ref.create : void 0) || ez5.session.hasSystemRight("root")) {
      return GroupManager.__super__.getPlusButton.call(this);
    } else {

    }
  };

  GroupManager.prototype.addRow = function() {
    return this.tree.addNode(new Group({
      manager: this
    })).done((function(_this) {
      return function(node) {
        return node.select().done(function() {
          return node.scrollIntoView();
        });
      };
    })(this));
  };

  GroupManager.prototype.loadList = function(filter, opts) {
    var _s, i, len, ref, search, searchOpts;
    if (opts == null) {
      opts = {};
    }
    search = [
      {
        bool: "must",
        type: "in",
        fields: ["_basetype"],
        "in": ["group"]
      }
    ];
    if (this.__filter_data.types.length > 0) {
      search.push({
        type: "in",
        bool: "must",
        fields: ["group.type"],
        "in": this.__filter_data.types
      });
      CUI.debug("Added Types:", this.__filter_data.types);
    }
    if (opts.searchOpts) {
      searchOpts = copyObject(opts.searchOpts, true);
      if (searchOpts.search) {
        ref = searchOpts.search;
        for (i = 0, len = ref.length; i < len; i++) {
          _s = ref[i];
          search.push(_s);
        }
      }
      delete searchOpts.search;
    } else {
      searchOpts = {};
    }
    CUI.mergeMap(searchOpts, {
      type: "group",
      search: search,
      limit: 100,
      offset: 0,
      aggregations: {
        _groups: {
          field: "group.type",
          type: "term",
          limit: 10000
        }
      },
      sort: [
        {
          field: "group.displayname",
          order: "ASC"
        }
      ]
    });
    return GroupManager.__super__.loadList.call(this, this.__filter_data.search, {
      searchOpts: searchOpts,
      newInstanceFunc: (function(_this) {
        return function(group) {
          return Group.newInstance({
            group: group,
            manager: _this
          });
        };
      })(this)
    });
  };

  GroupManager.prototype.getGroups = function() {
    assert($.isArray(this.groups), "GroupManager.getGroups", ".loadAllGroups not called");
    return this.groups;
  };

  GroupManager.prototype.getGroupById = function(groupId) {
    var group, i, len, ref;
    assert(CUI.isArray(this.groups), "GroupManager.getGroupById", ".loadAllGroups not called", {
      groupId: groupId
    });
    ref = this.groups;
    for (i = 0, len = ref.length; i < len; i++) {
      group = ref[i];
      if (group.id === groupId) {
        return group;
      }
    }
    return null;
  };

  GroupManager.prototype.loadAllGroups = function() {
    return this.loadList(null, {
      searchOpts: {
        type: "acl",
        search: [
          {
            type: "complex",
            search: [
              {
                type: "in",
                bool: "should",
                fields: ["group.type"],
                "in": ["easydb", "system"]
              }, {
                type: "in",
                bool: "should",
                fields: ["group._id"],
                "in": ez5.session.getGroupIds()
              }
            ]
          }
        ],
        limit: 100000
      }
    }).done((function(_this) {
      return function(groups) {
        _this.groups = groups;
      };
    })(this));
  };

  GroupManager.prototype.addGroupToAllGroups = function(group) {
    assert(group instanceof Group, "GroupManager.addGroupToAllGroups", "group needs to be instance of Group.", {
      group: group
    });
    pushOntoArray(group, this.groups, function(v) {
      return v.getId() === group.getId();
    });
    return this;
  };

  GroupManager.prototype.getTreeOpts = function() {
    var opts;
    opts = GroupManager.__super__.getTreeOpts.call(this);
    opts.filterManager = (function(_this) {
      return function() {
        var fields, input, lay;
        input = ListViewEditTree.prototype.getFilterManager.call(_this, function(filter) {
          _this.__filter_data.search = filter;
          return _this.loadFilter();
        });
        fields = null;
        lay = new HorizontalLayout({
          "class": "ez5-filter-manager",
          center: {
            content: [input, DOM.space("small")]
          },
          right: {
            content: new FormPopover({
              data: _this.__filter_data,
              fields: function() {
                var i, len, ref, term;
                if (!_this.data) {
                  return [];
                }
                opts = [];
                ref = _this.data.aggregations._groups.terms;
                for (i = 0, len = ref.length; i < len; i++) {
                  term = ref[i];
                  opts.push({
                    text: term.term,
                    value: term.term
                  });
                }
                opts.sort(function(a, b) {
                  return compareIndex(a.text, b.text);
                });
                return [
                  {
                    form: {
                      label: $$("group.manager.filter.types")
                    },
                    type: Options,
                    name: "types",
                    undo_and_changed_support: false,
                    horizontal: false,
                    options: opts
                  }
                ];
              },
              trigger_data_changed_while_open: true,
              onRender: function(df) {
                var btn;
                btn = df.getButton();
                return Events.listen({
                  type: "click",
                  capture: true,
                  node: btn.DOM,
                  call: function(ev) {
                    if (!btn.isActive()) {
                      return;
                    }
                    _this.__filter_data.types.splice(0);
                    _this.loadFilter();
                    btn.deactivate();
                    return ev.stopImmediatePropagation();
                  }
                });
              },
              button: {
                loca_key: "group.manager.filter.button"
              },
              renderDisplayButton: function() {
                return _this.__filter_data.types.length > 0;
              },
              onDataChanged: function() {
                return _this.loadFilter();
              }
            }).start()
          }
        });
        return lay;
      };
    })(this);
    return opts;
  };

  return GroupManager;

})(SystemListManager);

ez5.session_ready(function() {
  return ez5.rootMenu.registerApp(GroupManager);
});
// Generated by CoffeeScript 1.10.0
var ObjecttypeAdminManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ObjecttypeAdminManager = (function(superClass) {
  extend(ObjecttypeAdminManager, superClass);

  function ObjecttypeAdminManager() {
    return ObjecttypeAdminManager.__super__.constructor.apply(this, arguments);
  }

  ObjecttypeAdminManager.is_allowed = function() {
    return ez5.session.hasSystemRight("root", "objecttypemanager");
  };

  ObjecttypeAdminManager.label = function() {
    return "admin.menu.objecttype";
  };

  ObjecttypeAdminManager.group = function() {
    return "rightsmanagement";
  };

  ObjecttypeAdminManager.submenu = function() {
    return "rightsmanagement";
  };

  ObjecttypeAdminManager.path = function() {
    return ["objecttypeadminmanager"];
  };

  ObjecttypeAdminManager.prototype.hasFooter = function() {
    return false;
  };

  ObjecttypeAdminManager.prototype.getTreeOpts = function() {
    return {
      no_hierarchy: true,
      title: $$("objecttype.admin.manager.title")
    };
  };

  ObjecttypeAdminManager.prototype.getMissingName = function() {
    return $$("admin.easydb.objecttype.missing.name");
  };

  ObjecttypeAdminManager.prototype.getListFields = function() {
    return [
      {
        th_label: "admin.easydb.objecttype.list.title"
      }
    ];
  };

  ObjecttypeAdminManager.prototype.itemClass = function() {
    return ObjecttypeListViewItem;
  };

  ObjecttypeAdminManager.prototype.loadList = function() {
    var cls, dfr, i, len, o, ref, tb;
    dfr = new CUI.Deferred();
    this.objecttypes = [];
    cls = this.itemClass();
    ref = ez5.schema.CURRENT._objecttypes;
    for (i = 0, len = ref.length; i < len; i++) {
      o = ref[i];
      tb = new Table("CURRENT", o.table_id);
      if (tb.poolLink()) {
        cls = window.ObjecttypeListViewItem;
      } else {
        cls = window.ObjecttypeWithoutPoolListViewItem;
      }
      this.objecttypes.push(new cls({
        objecttype: new Objecttype(tb),
        manager: this
      }));
    }
    return dfr.resolve(this.objecttypes).promise();
  };

  ObjecttypeAdminManager.prototype.loadFilter = false;

  return ObjecttypeAdminManager;

})(SystemListManager);

ez5.session_ready(function() {
  return ez5.rootMenu.registerApp(ObjecttypeAdminManager);
});
// Generated by CoffeeScript 1.10.0
var ObjecttypeAdminManagerMaskItem,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ObjecttypeAdminManagerMaskItem = (function(superClass) {
  extend(ObjecttypeAdminManagerMaskItem, superClass);

  function ObjecttypeAdminManagerMaskItem() {
    this.getSaveData = bind(this.getSaveData, this);
    return ObjecttypeAdminManagerMaskItem.__super__.constructor.apply(this, arguments);
  }

  ObjecttypeAdminManagerMaskItem.prototype.initOpts = function() {
    ObjecttypeAdminManagerMaskItem.__super__.initOpts.call(this);
    return this.addOpts({
      data: {
        mandatory: true,
        check: "PlainObject"
      },
      mask: {
        mandatory: true,
        check: Mask
      },
      objecttypeListViewItem: {
        mandatory: true,
        check: ObjecttypeListViewItem
      },
      tagForm: {
        mandatory: true,
        check: TagForm
      }
    });
  };

  ObjecttypeAdminManagerMaskItem.prototype.readOpts = function() {
    var ref;
    ObjecttypeAdminManagerMaskItem.__super__.readOpts.call(this);
    this.mask = this._mask;
    this.data = ((ref = this._data) != null ? ref[this.mask.id()] : void 0) || {};
    this.objecttypeListViewItem = this._objecttypeListViewItem;
    this.tagForm = this._tagForm;
    this.opts.fields = [
      new ListViewColumn({
        text: this.mask.nameLocalized()
      })
    ];
    if (this.mask.isStandard()) {
      this.opts.fields.push(new ListViewColumn({
        element: new EmptyLabel({
          text: $$("objecttype.admin.manager.mask.item")
        })
      }));
    } else {
      this.tagfilter = new TagFilter({
        data: this.data,
        name: "tagfilter",
        tagForm: this.tagForm
      });
      this.opts.fields.push(this.tagfilter.getField({
        onDataChanged: (function(_this) {
          return function() {
            return _this.update();
          };
        })(this)
      }));
    }
    return this;
  };

  ObjecttypeAdminManagerMaskItem.prototype.getSaveData = function(sd) {
    if (sd == null) {
      sd = {};
    }
    if (!this.tagfilter) {
      return;
    }
    sd[this.mask.id()] = {
      tagfilter: this.tagfilter.getSaveData()
    };
    return sd;
  };

  return ObjecttypeAdminManagerMaskItem;

})(ListViewEditTreeNode);
// Generated by CoffeeScript 1.10.0
var ColumnRightItem,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ColumnRightItem = (function(superClass) {
  extend(ColumnRightItem, superClass);

  function ColumnRightItem() {
    return ColumnRightItem.__super__.constructor.apply(this, arguments);
  }

  ColumnRightItem.prototype.readOpts = function() {
    var acl, f, fields, i, j, len, len1, ref, ref1, who;
    ColumnRightItem.__super__.readOpts.call(this);
    if (!this._data.columns) {
      this._data.columns = [];
    }
    acl = [];
    if (this._data.who) {
      ref = this._data.who;
      for (i = 0, len = ref.length; i < len; i++) {
        who = ref[i];
        acl.push({
          who: who
        });
      }
    }
    this.aclManager = new AclManager({
      data: acl,
      tagForm: this._tagForm,
      right: false,
      tagfilter: false,
      onUpdate: (function(_this) {
        return function() {
          return _this.update();
        };
      })(this)
    });
    if (this._objecttype.hasTags()) {
      if (!this._data.tagfilter) {
        this._data.tagfilter = {};
      }
      this.tagfilter = new TagFilter({
        data: this._data,
        name: "tagfilter",
        tagForm: ez5.tagForm
      });
    }
    fields = [];
    ref1 = this._objecttype.getAllFields();
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      f = ref1[j];
      if (f.id()) {
        fields.push(f);
      }
    }
    this.opts.fields = [
      {
        type: Input,
        name: "internal_name"
      }, AclRight.getFieldColumnSelector({
        name: 'columns',
        fields: fields
      })
    ];
    if (this._objecttype.hasTags()) {
      this.opts.fields.push(this.tagfilter.getField());
    }
    this.opts.fields.push(this.aclManager.getField());
    return this;
  };

  ColumnRightItem.prototype.initOpts = function() {
    ColumnRightItem.__super__.initOpts.call(this);
    this.mergeOpt('data', {
      mandatory: true
    });
    return this.addOpts({
      tagForm: {
        mandatory: true,
        check: TagFormForManager
      },
      objecttype: {
        mandatory: true,
        check: Objecttype
      }
    });
  };

  ColumnRightItem.prototype.getSaveData = function() {
    var acl_item, i, id, len, ref, sd, tagfilter_missing, who, who_id, who_ids;
    sd = {
      who: [],
      columns: this._data.columns,
      internal_name: this._data.internal_name.trim()
    };
    tagfilter_missing = false;
    if (this._objecttype.hasTags()) {
      sd.tagfilter = this._data.tagfilter;
      if (CUI.isEmptyObject(sd.tagfilter)) {
        tagfilter_missing = true;
      }
    }
    who_ids = {};
    ref = this.aclManager.getSaveData();
    for (i = 0, len = ref.length; i < len; i++) {
      acl_item = ref[i];
      who = acl_item.who;
      switch (who._basetype) {
        case 'user':
          id = who.user._id;
          break;
        case 'group':
          id = who.group._id;
      }
      who_id = who._basetype + id;
      if (who_ids[who_id]) {
        continue;
      }
      who_ids[who_id] = true;
      sd.who.push(acl_item.who);
    }
    if (sd.who.length === 0 && tagfilter_missing) {
      throw new InvalidSaveDataException();
    }
    if (sd.columns.length === 0) {
      throw new InvalidSaveDataException();
    }
    if (isEmpty(this._data.internal_name)) {
      throw new InvalidSaveDataException();
    }
    return sd;
  };

  return ColumnRightItem;

})(ListViewEditTreeNode);
// Generated by CoffeeScript 1.10.0
var ObjecttypeRights,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ObjecttypeRights = (function(superClass) {
  extend(ObjecttypeRights, superClass);

  function ObjecttypeRights() {
    return ObjecttypeRights.__super__.constructor.apply(this, arguments);
  }

  ObjecttypeRights.prototype.load = function() {
    return ez5.api.objecttype().done((function(_this) {
      return function(__ots) {
        var cf, i, j, k, len, len1, len2, ot, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, who;
        _this.__ots = __ots;
        ref = _this.__ots;
        for (i = 0, len = ref.length; i < len; i++) {
          ot = ref[i];
          ref1 = ot._columnfilters || [];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            cf = ref1[j];
            if (!ez5.schema.CURRENT._objecttype_by_name[ot.objecttype.name].has_tags) {
              delete cf.tagfilter;
            } else {
              if (!((ref2 = cf.tagfilter) != null ? (ref3 = ref2.not) != null ? ref3.length : void 0 : void 0) && !((ref4 = cf.tagfilter) != null ? (ref5 = ref4.any) != null ? ref5.length : void 0 : void 0) && !((ref6 = cf.tagfilter) != null ? (ref7 = ref6.all) != null ? ref7.length : void 0 : void 0)) {
                cf.tagfilter = {};
              }
            }
            if (!cf.acl) {
              cf.acl = [];
              if (cf.who) {
                ref8 = cf.who;
                for (k = 0, len2 = ref8.length; k < len2; k++) {
                  who = ref8[k];
                  cf.acl.push({
                    who: who
                  });
                }
              }
              delete cf.who;
            }
          }
        }
      };
    })(this));
  };

  ObjecttypeRights.prototype.getColumnFilters = function(ot_name) {
    var _ot, i, len, ot, ref;
    ref = this.__ots || [];
    for (i = 0, len = ref.length; i < len; i++) {
      _ot = ref[i];
      if (_ot.objecttype.name === ot_name) {
        ot = _ot;
        break;
      }
    }
    assert(ot, "ObjecttypeRights.getColumnFilter", "Objecttype '" + ot_name + "' not found.", {
      objecttype: ot_name,
      objecttypes: this.__ots
    });
    return ot._columnfilters || [];
  };

  return ObjecttypeRights;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var SearchMain,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SearchMain = (function(superClass) {
  extend(SearchMain, superClass);

  function SearchMain() {
    return SearchMain.__super__.constructor.apply(this, arguments);
  }

  SearchMain.prototype.initOpts = function() {
    SearchMain.__super__.initOpts.call(this);
    return this.addOpts({
      container: {
        mandatory: true,
        check: function(v) {
          return isElement(v);
        }
      },
      collection: {
        mandatory: true,
        check: Collection
      },
      collectionManager: {
        check: CollectionManager
      }
    });
  };

  SearchMain.prototype.emptyCollection = function() {
    this._collection.removeObjects();
    return this;
  };

  SearchMain.prototype.searchButtonBeforeExecute = function() {
    this.emptyCollection();
    return this;
  };

  SearchMain.prototype.execute = function(request) {
    if (request == null) {
      request = new Request();
    }
    this.__searchInput.prepareSearch(request);
    return SearchMain.__super__.execute.call(this, request);
  };

  SearchMain.prototype.executeOnLoad = function() {
    var dfr, fulltext, search, url_data;
    if (document.location.pathname.startsWith(this.getSharePath())) {
      fulltext = document.location.pathname.split("/")[2];
    }
    search = document.location.search.substring(1);
    if (!fulltext && !search) {
      return this.execute();
    }
    url_data = CUI.decodeUrlDataArray(search, CUI.decodeURIComponentNicely);
    dfr = new CUI.Deferred();
    this.getSearchInitializedPromise().fail(dfr.reject).done((function(_this) {
      return function() {
        return _this.initFromUrlData(url_data, [fulltext]).always(function() {
          return _this.executeWithLog().done(dfr.resolve).fail(dfr.reject);
        });
      };
    })(this));
    return dfr.promise();
  };

  SearchMain.prototype.initFromUrlData = function(url_data, fulltext) {
    var fn, funcs, i, j, len, len1, ref, sm, txt;
    if (fulltext == null) {
      fulltext = null;
    }
    if (fulltext) {
      if (!url_data.inp) {
        url_data.inp = [];
      }
      for (i = 0, len = fulltext.length; i < len; i++) {
        txt = fulltext[i];
        if (isEmpty(txt)) {
          continue;
        }
        url_data.inp.push("fulltext:" + txt);
      }
    }
    funcs = [];
    ref = this.searchManagers;
    fn = (function(_this) {
      return function(sm) {
        return funcs.push(function() {
          return sm.initFromUrlData(url_data);
        });
      };
    })(this);
    for (j = 0, len1 = ref.length; j < len1; j++) {
      sm = ref[j];
      fn(sm);
    }
    return CUI.chainedCall.apply(CUI, funcs);
  };

  SearchMain.prototype.update_path = function(path) {
    var gid;
    gid = Main.getGlobalObjectIdFromLocation(document.location);
    if (gid) {
      return this._collection.loadInSidebar({
        global_object_id: gid,
        push_state: false
      });
    } else {
      return this.executeOnLoad();
    }
  };

  SearchMain.prototype.storeSearch = function() {
    var c, cdata, cm, ref, ref1, sd;
    cm = this._collectionManager;
    sd = this.getStoreSearchData();
    if (!((ref = sd.search) != null ? (ref1 = ref.SearchInput) != null ? ref1.query.length : void 0 : void 0)) {
      CUI.problem({
        text: $$("search.main.store.search.unable_to_store")
      });
      return;
    }
    cdata = {
      collection: {
        webfrontend_props: {
          search: sd
        }
      }
    };
    c = new CollectionStoredSearch({
      collection: cdata,
      manager: cm
    });
    return cm.addStoredSearch(c);
  };

  SearchMain.prototype.init = function() {
    var bottomToolbar, facetManager, paneHeader, ref, searchInputContainer;
    paneHeader = new PaneHeader({
      "class": "ez5-search-main-header",
      left: {
        content: new Label({
          text: $$("main.menu.search")
        })
      },
      right: {
        content: [(ref = this._collectionManager) != null ? ref.getProModeButtonForSearch() : void 0]
      }
    });
    searchInputContainer = CUI.DOM.element("DIV", {
      "class": "ez5-search-input-toolbar"
    });
    this.__buttonToolbar = new PaneToolbar({
      "class": "ez5-search-main-button-toolbar"
    });
    this.__mainSearch = new HorizontalLayout({
      "class": "ez5-tmp-mainSearch",
      absolute: true,
      left: {
        "class": "ez5-facet-manager",
        flexHandle: {
          hidden: true,
          state_name: "search-main-facets",
          closed: true
        }
      }
    });
    this.rc = this.__mainSearch.center();
    bottomToolbar = new PaneToolbar();
    this.__searchTypeSelector = new SearchTypeSelector({
      pref_name: "search_type_selector",
      ignoreSelection: (function(_this) {
        return function() {
          if (_this.__searchInput.ignoreSearchManager(_this.__searchTypeSelector)) {
            return true;
          }
          if (_this.__searchHierarchyManager.isActive()) {
            return true;
          }
          return false;
        };
      })(this)
    });
    this.addSearchManager(this.__searchTypeSelector);
    this.__searchInput = new SearchInput({
      expert: this,
      searchTypeSelector: this.__searchTypeSelector
    });
    this.addSearchManager(this.__searchInput);
    this.__searchInput.getInputLayout().append(this.getSearchButton(), "right", false);
    this.__searchInput.addPlaceholder();
    this.__pane = new Pane({
      "class": "ez5-search-main-pane cui-pane--window",
      absolute: true,
      top: {
        content: [paneHeader, this.__searchInput.getInputLayout(), this.__buttonToolbar]
      },
      center: {
        content: this.__mainSearch
      },
      bottom: false
    });
    this._container.empty().append(this.__pane.DOM);
    facetManager = new FacetManager();
    this.facetButton = new LocaButton({
      "switch": true,
      loca_key: "search.main.button.filter",
      onActivate: (function(_this) {
        return function() {
          _this.__mainSearch.getFlexHandle("left").show().open();
          return _this.execute();
        };
      })(this),
      onDeactivate: (function(_this) {
        return function(btn, flags) {
          _this.__mainSearch.getFlexHandle("left").hide().close();
          if (!flags.initial_activate) {
            facetManager.resetFacets();
            _this.execute();
          }
        };
      })(this)
    });
    this.__buttonToolbar.append(this.facetButton, "left");
    this.addSearchManager(facetManager);
    Events.listen({
      type: "toolbox",
      node: this.rc,
      call: (function(_this) {
        return function(ev, info) {
          return info.tools.push.apply(info.tools, _this.getCurrentTools());
        };
      })(this)
    });
    this.registerResultContainer(this.rc);
    this._collection.on({
      type: ["remove", "insert", "select"],
      instance: this,
      call: (function(_this) {
        return function(ev, info) {
          if (info.skip_update) {
            return;
          }
          return _this.updateFlyoutButtonbar();
        };
      })(this)
    });
    this.addSearchManager(new ResultManager({
      pref: "search_main_view_data",
      managers: [
        new ResultStandard({
          container: this.rc,
          selectable_opts: {
            collection: this._collection
          }
        }), new ResultText({
          container: this.rc,
          selectable_opts: {
            collection: this._collection
          }
        }), new ResultTable({
          container: this.rc,
          selectable_opts: {
            collection: this._collection
          }
        })
      ]
    }));
    this.addSearchManager(new CollectionSearchManager({
      collection: this._collection
    }));
    this.addSearchManager(new SortManager({
      pref: "search_main_sort_data"
    }));
    this.__searchHierarchyManager = new SearchHierarchyManager({
      container: this.__pane.top(),
      searchInput: this.getSearchInput()
    });
    this.addSearchManager(this.__searchHierarchyManager);
    return SearchMain.__super__.init.call(this).done((function(_this) {
      return function() {
        _this.__searchInput.focusQueryContainer();
        return Events.trigger({
          type: "content-resize",
          node: _this.__pane.top()
        });
      };
    })(this));
  };

  SearchMain.prototype.getCurrentTools = function() {
    var ref, share_url, tools;
    tools = SearchMain.__super__.getCurrentTools.call(this);
    if (ez5.session.hasSystemRight("root", "frontend_features[deep_link_sharing]")) {
      share_url = this.getShareUrl();
      if (share_url) {
        tools.push(new ToolboxTool({
          group: "search",
          sort: "F:1",
          favorite: true,
          name: "search.present_share_url",
          run: (function(_this) {
            return function() {
              return _this.presentShareUrl();
            };
          })(this)
        }));
      }
    }
    tools.push(new ToolboxTool({
      group: "search",
      name: "search.refresh",
      sort: "A:3",
      run: (function(_this) {
        return function() {
          return _this.refresh();
        };
      })(this)
    }));
    if (this._collectionManager && this.hasUserInput() && this.getStoreSearchData() && ez5.session.hasSystemRight("root", "frontend_features[stored_searches]")) {
      tools.push(new ToolboxTool({
        group: "search",
        name: "search.save",
        sort: "A:5",
        run: (function(_this) {
          return function() {
            return _this.storeSearch();
          };
        })(this)
      }));
    }
    if (((ref = this.getLastData()) != null ? ref.count : void 0) > 0) {
      if (ez5.session.hasSystemRight("root", "frontend_features[download]") && this.hasEASFields()) {
        tools.push(new ToolboxTool({
          group: "search",
          name: "search.download",
          sort: "D:1",
          loca_key: "tool.search.download",
          run: (function(_this) {
            return function() {
              var cls;
              cls = _this.getDownloadManagerClass();
              return new cls({
                search: _this
              }).startExport();
            };
          })(this)
        }));
      }
      if (ez5.session.hasSystemRight("root", "frontend_features[export]")) {
        tools.push(new ToolboxTool({
          group: "search",
          name: "search.export",
          sort: "D:2",
          run: (function(_this) {
            return function() {
              return new ExportManager({
                search: _this
              }).prepareExport();
            };
          })(this)
        }));
      }
      if (ez5.session.hasSystemRight("root", "frontend_features[print]")) {
        tools.push(new ToolboxTool({
          group: "search",
          name: "search.print",
          sort: "D:3",
          run: (function(_this) {
            return function() {
              return new PrintManager({
                search: _this
              }).print();
            };
          })(this)
        }));
      }
      if (this.hasEASFields()) {
        tools.push(new ToolboxTool({
          group: "search",
          name: "search.show.fullscreen",
          sort: "B:2",
          run: (function(_this) {
            return function() {
              return new DetailFullscreen({
                search: _this,
                offset: _this.getLastData().offset
              });
            };
          })(this)
        }));
      }
    }
    return tools;
  };

  SearchMain.prototype.getSearchHierarchyManager = function() {
    return this.__searchHierarchyManager;
  };

  SearchMain.prototype.getDetailShareUrl = function(sid) {
    return "/detail/" + sid;
  };

  SearchMain.prototype.getSharePath = function() {
    return "/search";
  };

  SearchMain.prototype.getShareUrl = function() {
    var url_data;
    url_data = this.getStoreAsUrlData();
    if (!url_data) {
      return null;
    }
    return document.location.origin + this.getSharePath() + "?" + CUI.encodeUrlData(url_data, CUI.encodeURIComponentNicely);
  };

  SearchMain.prototype.getShareHint = function() {
    return $$("search.main.share_url_hint", {
      url: document.location.origin + this.getSharePath()
    });
  };

  SearchMain.prototype.hasEASFields = function() {
    if (SearchMain.__super__.hasEASFields.call(this)) {
      return true;
    }
    return this.hasLinkedEASFields();
  };

  SearchMain.prototype.hasLinkedEASFields = function() {
    var f, i, j, len, len1, ot, ref, ref1;
    ref = this.getSearchObjecttypes();
    for (i = 0, len = ref.length; i < len; i++) {
      ot = ref[i];
      ref1 = ot.getAllFields();
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        f = ref1[j];
        if (f instanceof LinkedObject && f.getFirstStandardEASColumn()) {
          return true;
        }
      }
    }
    return false;
  };

  SearchMain.prototype.presentShareUrl = function() {
    var dia, fields, form, hint, shareInput, share_data, share_url;
    share_data = {
      require_login: true
    };
    share_url = this.getShareUrl();
    if (window.easydb_server_url) {
      share_url += "&server=" + encodeURIComponent(window.easydb_server_url);
    }
    share_data.url = share_url;
    shareInput = new Input({
      "class": "ez5-search-share-url-input",
      textarea: true,
      readonly: true,
      name: "url"
    });
    hint = this.getShareHint();
    fields = [
      {
        type: Output,
        multiline: true,
        text: $$("search.share_url.text")
      }, shareInput
    ];
    if (hint) {
      fields.push({
        type: Output,
        "class": "ez5-search-share-url-hint",
        multiline: true,
        text: hint
      });
    }
    form = new Form({
      data: share_data,
      onDataChanged: (function(_this) {
        return function() {
          return shareInput.setValue(get_url());
        };
      })(this),
      fields: fields
    });
    return dia = new CUI.ConfirmationDialog({
      title: $$("search.share_url.title"),
      content: form.start(),
      cancel: true,
      buttons: [
        {
          loca_key: "search.share_url.button.ok",
          onClick: function() {
            return dia.destroy();
          }
        }
      ]
    }).show();
  };

  SearchMain.prototype.getSearchTypeSelector = function() {
    return this.__searchTypeSelector;
  };

  SearchMain.prototype.destroy = function() {
    var ref, ref1;
    if ((ref = this._collection) != null) {
      ref.off({
        instance: this
      });
    }
    if ((ref1 = this.layout) != null) {
      ref1.destroy();
    }
    this.layout = null;
    return SearchMain.__super__.destroy.call(this);
  };

  SearchMain.prototype.refresh = function() {
    this.__flyoutButtonbar = null;
    return SearchMain.__super__.refresh.call(this).done((function(_this) {
      return function() {
        return _this.execute();
      };
    })(this));
  };

  SearchMain.prototype.objecttypesUpdated = function(initiator) {
    var dfr, go_on;
    dfr = new CUI.Deferred();
    go_on = (function(_this) {
      return function() {
        return SearchMain.__super__.objecttypesUpdated.call(_this, initiator).done(function() {
          var ref;
          if ((ref = _this._collectionManager) != null) {
            ref.objecttypesUpdated();
          }
          _this.updateSearchButtonState();
          return dfr.resolve();
        }).fail(dfr.reject);
      };
    })(this);
    if (this.__searchTypeSelector && initiator !== this.__searchTypeSelector) {
      this.__searchTypeSelector.updateContent().done((function(_this) {
        return function() {
          return go_on();
        };
      })(this)).fail(dfr.reject);
    } else {
      go_on();
    }
    return dfr.promise();
  };

  SearchMain.prototype.selectInCollectionManager = function() {
    var ref, ref1;
    return (ref = this._collectionManager) != null ? (ref1 = ref.getSearchCollection()) != null ? ref1.select() : void 0 : void 0;
  };

  SearchMain.prototype.executeAlwaysCallback = function() {
    this.enableSearchButton();
    return this.updateSearchButtonState();
  };

  SearchMain.prototype.updateSearchButtonState = function() {
    var ots;
    ots = this.getSearchObjecttypes();
    if (ots.length === 0) {
      this.getSearchButton().disable();
    } else {
      this.getSearchButton().enable();
    }
    return this.updateFlyoutButtonbar();
  };

  SearchMain.prototype.updateFlyoutButtonbar = function() {
    var btns, current, ref, search_btns;
    if (!this.getButtonToolbar()) {
      return;
    }
    current = this.__flyoutButtonbar;
    btns = (ref = this._collection) != null ? ref.getButtons() : void 0;
    search_btns = Toolbox.getFlyoutButtons(this.getCurrentTools());
    this.__flyoutButtonbar = new Buttonbar({
      buttons: Toolbox.mergeFlyoutButtons(btns, search_btns)
    });
    if (current) {
      return CUI.DOM.replaceWith(current.DOM, this.__flyoutButtonbar.DOM);
    } else {
      return this.getButtonToolbar().append(this.__flyoutButtonbar, "right");
    }
  };

  SearchMain.prototype.getDefaultSortFilter = function() {
    return [
      {
        "field": "_system_object_id",
        "order": "DESC"
      }
    ];
  };

  SearchMain.prototype.getDefaultSortKey = function() {
    return "main.search.sort.latest";
  };

  SearchMain.prototype.getButtonToolbar = function() {
    return this.__buttonToolbar;
  };

  SearchMain.prototype.getFacetsContainer = function() {
    return this.__mainSearch.left();
  };

  SearchMain.prototype.hasFacets = function() {
    return !this.__mainSearch.getFlexHandle("left").isClosed();
  };

  SearchMain.prototype.hideFacets = function() {
    return this.facetButton.deactivate();
  };

  SearchMain.prototype.hasUserInput = function() {
    return !this.__searchInput.isEmpty() || SearchMain.__super__.hasUserInput.call(this);
  };

  SearchMain.prototype.getSearchInput = function() {
    return this.__searchInput;
  };

  SearchMain.prototype.showInSearch = function(queryElement) {
    var dfr;
    dfr = new CUI.Deferred();
    this.getSearchInitializedPromise().done((function(_this) {
      return function() {
        _this.emptyRequest();
        _this.getSearchInput().replaceSearchInput(queryElement);
        _this.emptyCollection();
        return _this.execute().done(dfr.resolve).fail(dfr.reject);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  return SearchMain;

})(Search);
// Generated by CoffeeScript 1.10.0
var SearchMainHeadless,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SearchMainHeadless = (function(superClass) {
  extend(SearchMainHeadless, superClass);

  function SearchMainHeadless() {
    return SearchMainHeadless.__super__.constructor.apply(this, arguments);
  }

  SearchMainHeadless.prototype.initOpts = function() {
    SearchMainHeadless.__super__.initOpts.call(this);
    this.removeOpt("container");
    return this.removeOpt("collection");
  };

  SearchMainHeadless.prototype.init = function() {};

  return SearchMainHeadless;

})(SearchMain);
// Generated by CoffeeScript 1.10.0
var CollectionSearchManager, CollectionSearchManagerProxy,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CollectionSearchManager = (function(superClass) {
  extend(CollectionSearchManager, superClass);

  function CollectionSearchManager() {
    return CollectionSearchManager.__super__.constructor.apply(this, arguments);
  }

  CollectionSearchManager.prototype.initOpts = function() {
    CollectionSearchManager.__super__.initOpts.call(this);
    return this.addOpts({
      collection: {
        mandatory: true,
        check: Collection
      }
    });
  };

  CollectionSearchManager.prototype.getCurrentTools = function() {
    var data, not_selected_on_page, tools;
    tools = [];
    data = this.getSearch().getLastData();
    if ((data != null ? data.count : void 0) > 0) {
      not_selected_on_page = CUI.DOM.matchSelector(this.getSearch().getResultContainer(), ".result-dynamic:not(.cui-selected):not(.ez5-deleted),.result-table-node:not(.cui-selected):not(.ez5-deleted)").length;
      tools.push(new ToolboxTool({
        group: "search",
        name: "selection.all",
        sort: "A:1",
        run: (function(_this) {
          return function() {
            return _this.getSearch().execute(new Request({
              searchManagers: [
                new CollectionSearchManagerProxy({
                  collection: _this._collection
                })
              ],
              exclusive_show: true
            }));
          };
        })(this)
      }));
    }
    return tools;
  };

  return CollectionSearchManager;

})(SearchManager);

CollectionSearchManagerProxy = (function(superClass) {
  extend(CollectionSearchManagerProxy, superClass);

  function CollectionSearchManagerProxy() {
    return CollectionSearchManagerProxy.__super__.constructor.apply(this, arguments);
  }

  CollectionSearchManagerProxy.prototype.initOpts = function() {
    CollectionSearchManagerProxy.__super__.initOpts.call(this);
    return this.addOpts({
      limit: {
        mandatory: true,
        "default": 1000
      },
      offset: {
        mandatory: true,
        "default": 0
      },
      collection: {
        mandatory: true,
        check: Collection
      }
    });
  };

  CollectionSearchManagerProxy.prototype.addToRequest = function(request) {
    request.format = "standard";
    request.offset = this._offset;
    request.limit = this._limit;
    return request;
  };

  CollectionSearchManagerProxy.prototype.showResult = function(request, data) {
    var collection_objects, i, len, obj, ref;
    collection_objects = [];
    ref = data.objects;
    for (i = 0, len = ref.length; i < len; i++) {
      obj = ref[i];
      collection_objects.push(new CollectionObject(obj));
    }
    this._collection.insertObjects(collection_objects);
    return CUI.debug("showResult", request, data, collection_objects.length);
  };

  return CollectionSearchManagerProxy;

})(SearchManager);
// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ez5.getPermanentMessageApp = function(adminMessage) {
  var PermanentMessageApp;
  return PermanentMessageApp = (function(superClass) {
    extend(PermanentMessageApp, superClass);

    function PermanentMessageApp() {
      return PermanentMessageApp.__super__.constructor.apply(this, arguments);
    }

    PermanentMessageApp.is_allowed = function() {
      return true;
    };

    PermanentMessageApp.isStartApp = function() {
      return false;
    };

    PermanentMessageApp.group = function() {
      return "zzz_info";
    };

    PermanentMessageApp.submenu = function() {
      return "zzz_info";
    };

    PermanentMessageApp.label = function() {
      return "permanent.messages.label";
    };

    PermanentMessageApp.getDisplay = function() {
      return {
        text: adminMessage.getTitleLocalized(),
        onClick: (function(_this) {
          return function() {
            return adminMessage.showMessage();
          };
        })(this)
      };
    };

    return PermanentMessageApp;

  })(RootMenuApp);
};

ez5.session_ready(function() {
  return AdminMessage.load("permanent").done((function(_this) {
    return function(adminMessages) {
      var adminMessage, i, len, results;
      results = [];
      for (i = 0, len = adminMessages.length; i < len; i++) {
        adminMessage = adminMessages[i];
        results.push(ez5.rootMenu.registerApp(ez5.getPermanentMessageApp(adminMessage)));
      }
      return results;
    };
  })(this));
});
// Generated by CoffeeScript 1.10.0
var BaseConfigManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

BaseConfigManager = (function(superClass) {
  extend(BaseConfigManager, superClass);

  function BaseConfigManager() {
    return BaseConfigManager.__super__.constructor.apply(this, arguments);
  }

  BaseConfigManager.label = function() {
    return "admin.menu.configmanager";
  };

  BaseConfigManager.group = function() {
    return "administration";
  };

  BaseConfigManager.submenu = function() {
    return "administration";
  };

  BaseConfigManager.path = function() {
    return ["configmanager"];
  };

  BaseConfigManager.is_allowed = function() {
    return ez5.session.hasSystemRight("root", "config");
  };

  BaseConfigManager.prototype.readOpts = function() {
    BaseConfigManager.__super__.readOpts.call(this);
    return this.config = [];
  };

  BaseConfigManager.prototype.allow_unload = function() {
    if (this.hasChanges()) {
      return CUI.confirm({
        text: $$("main.editor.unsaved_changes")
      });
    } else {
      return CUI.resolvedPromise();
    }
  };

  BaseConfigManager.prototype.load = function() {
    BaseConfigManager.__super__.load.call(this);
    this.pane = new BorderLayout({
      "class": "ez5-base-config-manager"
    });
    ez5.rootLayout.replace(this.pane, "center");
    new WaitBlock({
      element: this.pane.center(),
      text: $$("base.config.manager.loading")
    }).show();
    return ez5.server({
      api: "/config/list"
    }).done((function(_this) {
      return function(baseConfig) {
        _this.baseConfig = baseConfig;
        return ez5.api.config().done(function(config) {
          _this.config = config;
          return _this.show();
        });
      };
    })(this));
  };

  BaseConfigManager.prototype.unload = function() {
    var ref;
    this.baseConfigs = null;
    if ((ref = this.pane) != null) {
      ref.destroy();
    }
    this.pane = null;
    return BaseConfigManager.__super__.unload.call(this);
  };

  BaseConfigManager.prototype.show = function() {
    var tabs;
    tabs = this.getTabs();
    this.pane.replace(tabs, "center");
    return this.registerDataChangedListener(this.pane.center());
  };

  BaseConfigManager.prototype.hasChanges = function() {
    if (!this.initialData) {
      return false;
    }
    if (this.initialData === JSON.stringify(this.getSaveData())) {
      return false;
    } else {
      return true;
    }
  };

  BaseConfigManager.prototype.registerDataChangedListener = function(div) {
    this.initialData = JSON.stringify(this.getSaveData());
    Events.listen({
      type: ["data-changed", "editor-changed", "editor-update-asset-browser"],
      node: div,
      call: (function(_this) {
        return function(ev, info) {
          if (_this.hasChanges()) {
            return _this.saveButton.enable();
          } else {
            return _this.saveButton.disable();
          }
        };
      })(this)
    });
    return div;
  };

  BaseConfigManager.prototype.getTabs = function() {
    var ret, tabs;
    ret = BaseConfig.renderTabs({
      data: this.config.system || {},
      config: this.baseConfig.system,
      l10n_prefix: "server.config.group",
      BaseConfigClass: SystemBaseConfig
    });
    this.baseConfigs = ret.baseConfigs;
    tabs = ret.tabs;
    if (ez5.session.isDebug()) {
      tabs.push(new Tab({
        text: $$("base.config.manager.tab.server_config"),
        name: "server_config",
        content: new CUI.ObjectDumper({
          object: ez5.session.getBaseConfig()
        })
      }));
    }
    this.saveButton = new LocaButton({
      loca_key: "base.config.manager.button.save",
      disabled: true,
      text: $$("base.save"),
      onClick: (function(_this) {
        return function(ev, btn) {
          btn.disable();
          ez5.splash.show('system.list.manager.item.saving');
          return _this.saveForm(ev).done(function() {
            return ez5.splash.done('system.list.manager.item.saved');
          }).fail(function() {
            return ez5.splash.hide();
          }).always(function() {
            return btn.enable();
          });
        };
      })(this)
    });
    return new Tabs({
      tabs: tabs,
      footer_right: this.saveButton
    });
  };

  BaseConfigManager.prototype.getSaveData = function() {
    var bc, i, len, ref, save_data;
    save_data = {
      system: {}
    };
    ref = this.baseConfigs;
    for (i = 0, len = ref.length; i < len; i++) {
      bc = ref[i];
      bc.getSaveData(save_data.system);
    }
    return save_data;
  };

  BaseConfigManager.prototype.saveForm = function(ev) {
    var save_data;
    save_data = this.getSaveData();
    if (ev.hasModifierKey()) {
      CUI.debug(dump(save_data));
      return CUI.rejectedPromise();
    }
    return ez5.server({
      api: "/config",
      type: "POST",
      json_data: save_data
    }).done((function(_this) {
      return function(config) {
        _this.config = config;
        return ez5.session.get(ez5.session.token).done(function() {
          ez5.start.updateLogo();
          return _this.show();
        });
      };
    })(this));
  };

  return BaseConfigManager;

})(RootMenuApp);

ez5.session_ready(function() {
  return ez5.rootMenu.registerApp(BaseConfigManager);
});

ez5.admin = ez5.admin || {}
ez5.admin.version = "CURRENT";

ez5.admin.datatypes = [
	["text_oneline", { group: 0, check: ["not_empty", "email", "regexp"], length: true } ],
	["text_l10n_oneline", { group: 0, check: ["not_empty", "regexp"], length: true } ],
	["text", { group: 0, check: ["not_empty", "regexp"], length: true } ],
	["text_l10n", { group: 0, check: ["not_empty", "regexp"], length: true } ],
	["string", { group: 0, check: ["not_empty", "email", "regexp"], length: true } ],

	["date", { group: 1, check: ["not_empty", "daterange"] } ],
	["daterange", { group: 1, check: ["not_empty", "daterange"] } ],
	["datetime", { group: 1, check: ["not_empty", "datetimerange"] } ],

	["number", { group: 2, check: ["not_empty", "numberrange"] } ],
	["integer.2", { group: 2, check: ["not_empty", "numberrange.2"] } ],
	["eas", { group: 3, check: ["not_empty"] } ],
	["boolean", { group: 3, check: [] } ]
];

ez5.admin.datatype = function(type) {
	return findInArray(null, ez5.admin.datatypes, function(v) { return v[0] == type; });
}

// return all table ids of nested tables
ez5.admin.get_dependent_table_ids = function(table_id, dependent_table_ids) {
	if (!dependent_table_ids) {
		dependent_table_ids = [];
	}
	$.each(ez5.schema[ez5.admin.version].tables, function(table_name, table) {
		if (table.owned_by && table.owned_by.other_table_id === table_id) {
			dependent_table_ids.push(table.table_id);
			ez5.admin.get_dependent_table_ids(table.table_id, dependent_table_ids);
		}
	});
	return dependent_table_ids;
}

// return all table ids of linked tables other
// than the nested tables
ez5.admin.get_linked_table_ids = function(table_id, linked_table_ids, already_checked) {
	if (!already_checked) {
		already_checked = [];
	}
	already_checked.push(table_id);

	if (!linked_table_ids) {
		linked_table_ids = [];
	}
	// CUI.debug("checking for table_id", table_id, already_checked);
	var dependent_table_ids = ez5.admin.get_dependent_table_ids(table_id);
	$.each(ez5.schema[ez5.admin.version].tables, function(idx, table) {
		if (idxInArray(table.table_id, already_checked) > -1) {
			return;
		}

		$.each(table.foreign_keys, function(idx2, fk) {
			if (fk.referenced_table.table_id !== table_id) {
				return;
			}
			if ($.inArray(table.table_id, dependent_table_ids) === -1) {
				linked_table_ids.push(table.table_id);
				ez5.admin.get_linked_table_ids(table.table_id, linked_table_ids, already_checked);
			}
		})
		$.each(table.columns, function(idx2, col) {
			if (col.other_table_id == table_id && col.kind == "reverse_link") {
				linked_table_ids.push(table.table_id);
			}
		})
	});
	return linked_table_ids;
}

ez5.admin.post_schema = function(schema) {

	if (schema.version === ez5.schema.CURRENT.version) {
		// increment head version by one
		schema.version++;
	}

	ez5.schema.clean_schema(schema);

	CUI.debug("POST schema", schema);
	var dfr = new CUI.Deferred();

	ez5.api.schema({
		type: "POST",
		api: "/user/HEAD",
		json_data: schema
	}).done(function(data) {
		ez5.schema.load_schema()
			.done(dfr.resolve)
			.fail(dfr.reject)
	}).fail(dfr.reject)
	return dfr.promise()
}


ez5.admin.datamodel = function(opts) {
	opts = opts || {}

	var custom_type_support = new CustomDataTypeDatamodelSupport();

	var $attr_map = [
		["name", "name"],
		["", "displayname_l10n"],
		["", "unique"],
		["", "check"],
		["type", "type"],
		["not_null", "not_null"],
		["column_id", "column_id"],
		// ["connector", "connector"],
		["reverse_edit", "reverse_edit"],
		["check", "check"],
		["check_regexp", "check_regexp"],
		["check_regexp_flags", "check_regexp_flags"],
		["", "check_range_upper"],
		["", "check_range_upper_exclusive"],
		["", "check_range_lower"],
		["", "check_range_lower_exclusive"],
		["bidirectional", "bidirectional"]
	];

	var get_new_row = function(type) {

		var row = new ListViewEditTreeNode({data: {_fields: {}}});
		row.data = row.getData();
		row.data._node = row

		$.each($attr_map, function(idx, k) {
			switch(k[1]) {
			case "reverse_edit":
			case "bidirectional":
				row.data[k[1]] = false;
				break;
			default:
				row.data[k[1]] = null;
			}
		});
		row.data.type = type;

		switch (type) {
		case "nested_table":
			/*
			if (ez5.admin.version==="HEAD") {
				var add_new_row = function(type) {
					var row_new = get_new_row(type);
					row.data._node.addNode(row_new);
					row.data._node.getTree().layout();
					row_new.select();
					setTimeout(function() { row_new.deselect()}, 300);
				}

				row.opts.renderContent = function(element, node) {
					var div = $div().append(element);
					div.append("</br>");
					div.append(new Buttonbar({buttons: [
						new Button({
							role: "minor",
							text: $$("admin.datamodel.new_field"),
							icon: "plus",
							onClick: function() { add_new_row(ez5.admin.datatypes[0][0]); }
						}),
						new Button({
							role: "minor",
							text: $$("admin.datamodel.new_nested_table"),
							icon: "plus",
							onClick: function() { add_new_row("nested_table"); }
						})
					]}).DOM);
					return div;
				}
			}
*/
			row.children = [];
			break;
		case "reverse_link":
			row.opts.fields = fields_reverse_link;
			break;
		case "hierarchical_reverse_link":
			row.opts.fields = fields_reverse_link;
			row.l10n_key = "schema."+datamodel.table_schema.name+".column.reverse:"+datamodel.table_schema.name;
			row.data.reverse_name =	$$("admin.datamodel.hierarchical_reverse_name");
			row.data.displayname_l10n = ez5.loca.get_user_key(ez5.admin.version, row.l10n_key);
			break;
		}
		row.data.custom_settings = {};

		return row;
	}

	var add_new_row = function(type, node, append_sibling) {
		var row = get_new_row(type);
		var promise;

		if (node) {
			if (append_sibling) {
				promise = node.appendSibling(row);
			} else {
				promise = node.addNode(row);
			}
		} else {
			promise = $columns_table.addNode(row);
		}
		promise.done(function() {
			row.select();
			update_datamodel_data_form();
		});
	}

	var update_row_state = function(row) {
		var hide=[], disable=[];
		// field 2 is "type", field 3 is "check" we need to ise integers
		var check = 3;
		var type = 2;
		// here, as these types are really embedded in formpopovers and cannot
		// be addressed by name
		switch(row.data.type) {
		case "reverse_link":
		case "hierarchical_reverse_link":
			hide = [check, type, "reverse_edit", "bidirectional", "bidirectional_reverse"];
			break;
		case "nested_table":
			hide = [type, "reverse_edit", "bidirectional", "bidirectional_reverse"];
			break;
		case "eas":
			// disable = ["not_null"];
			// check = ["unique"];
			hide = ["reverse_edit", "bidirectional", "bidirectional_reverse"];
		default:
			if (row.data.type.match("^custom:")) {
				custom_type_support.datamodelSetRowState({
					row: row,
					field_numbers: {
						check: check,
						type: type
					},
					hide: hide,
					disable: disable
				});
			} else if (row.data.type.match("^link_")) {
				if (row.getPath().length === 1) {
					if (row.data.type === "link_"+datamodel.table_schema.table_id) {
						hide.push("reverse_edit");
					}
				} else {
					hide.push("reverse_edit");
				}
				// bidirectional is handled in update_all_rows
			} else {
				hide.push("reverse_edit", "bidirectional", "bidirectional_reverse");
			}
		}

		// CUI.debug("update_row_state", row.data.type, datamodel.table_schema.table_id, row.getPath(), hide, disable);
		row.updateFields({hide: hide, disable: disable})
		update_all_rows(row);
	}

	var update_all_rows = function(row_changed, rows, father_row, depth) {


		if (!depth) {
			depth = 0;
		}
		if (!rows) {
			rows = datamodel.rows;
		}
		// start this only, if all rows have been added to the list view
		for (var idx = 0; idx < rows.length; idx++) {
			if (!rows[idx].isAddedToListView()) {
				return;
			}
		}


		var get_bidirectional_reverse_fields = function(type, others, key) {
			return get_bi_fields(type, others, "bidirectional_reverse");
		}

		var get_bidirectional_fields = function(type, others, key) {
			return get_bi_fields(type, others, "bidirectional");
		}


		var get_bi_fields = function(type, others, key) {
			var bidi_fields = {
				count: 0, // number of links which point to the same top-level table
				enabled: [], // links enabled
				disabled: [], // links disabled
				all: [],
				reverse_edit: 0 // counter for active reverse_edit links
			}
			$.each(rows, function(idx, r) {
				if (!r.data.type.match(/^link_/)) {
					return;
				}
				if (!type || (r.data.type == type && !others) || (r.data.type != type && others)) {
					var bidi_field = r.getOtherField(key);
					if (!bidi_field) {
						// row is not rendered yet
						return;
					}
					bidi_fields.count++;
					if (r.data[key]) {
						bidi_fields.enabled.push(bidi_field);
					} else {
						bidi_fields.disabled.push(bidi_field);
					}
					bidi_fields.all.push(bidi_field);
					if (r.data.reverse_edit) {
						bidi_fields.reverse_edit++;
					}
				}
			});
			return bidi_fields;
		}

		// BI-DIRECTIONAL checks

		var all_bidis = get_bidirectional_fields();


		$.each(rows, function(idx, r) {
			var row_done = function() {
				if (r.children) {
					update_all_rows(row_changed, r.children, r, depth+1);
				}
				return;
			}

			if (!r.data.type.match(/^link_/)) {
				return row_done();
			}

			var bidi_field_reverse = r.getOtherField("bidirectional_reverse");


			if (bidi_field_reverse) {
				// show bidirectional_reverse, if same table
				if (depth === 0 && r.data.type === "link_"+datamodel.table_schema.table_id) {
					bidi_field_reverse.show();
				} else {
					bidi_field_reverse.hide();
				}
			}

			// console.debug("name", r.data.name, r, bidi_field, bidi_field_reverse, depth);
			var bidi_field = r.getOtherField("bidirectional");

			if (!bidi_field) {
				return row_done();
			}

			var all_bidi_rev = get_bidirectional_reverse_fields();

			// console.debug("all bidi rev", all_bidi_rev, bidi_field_reverse.getValue());

			if (all_bidi_rev.enabled.length == 1) {
				$.each(all_bidi_rev.disabled, function(idx, dis) {
					dis.disable();
				});
			} else {
				$.each(all_bidi_rev.all, function(idx, en) {
					en.enable();
				});
			}

			var same_bidis = get_bidirectional_fields(r.data.type);
			var other_bidis = get_bidirectional_fields(r.data.type, true);

			var count_needed = false;
			if (r.data.type === "link_"+datamodel.table_schema.table_id) {
				if (depth === 1) {
					count_needed = 1;
				}
			} else if (depth === 0) {
				if (same_bidis.reverse_edit > 0) {
					count_needed = 2;
				}
			}

			r.data.__bidirectional_valid = true;

			// show if we have have enough columns of the same
			// kind
			if (count_needed !== false && same_bidis.count >= count_needed) {
				bidi_field.show();

				// make sure enough are on, do this only if
				// our box has changed
				if (r == row_changed &&
					bidi_field.getLastValue() != bidi_field.getValue()) {

					if (same_bidis.enabled.length == count_needed) {
						// disable all inactive
						$.each(all_bidis.disabled, function(idx, dis) {
							dis.disable();
						});
					} else if (same_bidis.enabled.length > 0) {
						r.data.__bidirectional_valid = false;
						// disable all others
						$.each(other_bidis.all, function(idx, dis) {
							dis.disable();
						});
						// enable all from this type
						$.each(same_bidis.all, function(idx, cb) {
							cb.enable();
						});
					} else { // enable all
						$.each(all_bidis.all, function(idx, cb) {
							cb.enable();
						});
					}
				}
			} else {
				bidi_field.hide();
				bidi_field.setValue(false);
			}

			// console.debug("row:", r.data.name, "bidi state:", r.data.bidirectional, "bidi valid", r.data.__bidirectional_valid, same_bidis.reverse_edit, "depth:", depth, "count:", count_needed);
			return row_done();
		});
	}

	var get_schema_tables = function() {

		var get_nested_table = function(table, column, nested_table_id) {
			nested_table = {
				name: column.name,
				displayname_l10n: column.displayname_l10n,
				es_type: "linked-table",
				table_id: nested_table_id,
				father_table: table,
				columns: []
			};

			nested_table_schema = nested_table_id?ez5.schema[ez5.admin.version]._table_by_id[nested_table_id]:null;

			/*
			// add primary key column
			nested_table.columns.push({
				name: "id",
				system: "primary-key-field",
				type: "serial",
				not_null: true,
				column_id: nested_table_schema?nested_table_schema._primary_key_column.column_id:null
			});

			// add link to father table column
			nested_table.linked_table_column = {
				name: table.name+"_id",
				system: "linked-table-field",
				type: "link",
				not_null: true,
				column_id: nested_table_schema?nested_table_schema.owned_by.column_id:null
			};


			nested_table.linked_table_column.foreign_key = {table: table,
															cascade: true};
			nested_table.columns.push(nested_table.linked_table_column);
			*/

			return nested_table;
		}


		var get_rows = function(table, rows) {

			var nested_table = null;
			var linked_table;

			$.each(rows, function(idx, row) {

				var column = {};
				$.each($attr_map, function(idx, key) {
					switch(key[1]) {
					case "unique":
						if (isTrue(row.data.unique)) {
							column.unique = row.data.unique_group;
							column.unique_parent = row.data.unique_parent;
						}
						break;
					case "displayname_l10n":
						column.displayname_l10n = row.data.displayname_l10n;
						break;
					default:
						column[key[1]] = row.data[key[1]];
					}
				});

				column.__bidirectional_valid = row.data.__bidirectional_valid;
				column.bidirectional_reverse = row.data.bidirectional_reverse;

				column.check_length = row.data.check_length;
				column.check_length_min = row.data.check_length_min;
				column.check_length_max = row.data.check_length_max;
				column.custom_settings = row.data.custom_settings;

				if (row.children) {
					column.kind = "link";
					column.name = table.name + "__" + column.name;
					var nested_table = get_nested_table(table, column, row.link_table_id);
					tables.push(nested_table);
					get_rows(nested_table, row.children);
					column.link_table_id = row.link_table_id;
				} else if (column.type.match("^link_")) {
					column.foreign_key = {
						table: {table_id: parseInt(column.type.substring(5))},
						cascade: (column.reverse_edit === true || column.bidirectional === true)
					};
					column.type = "link";
				} else if (column.type === "reverse_link") {
					column.kind = "reverse_link";
					column.reverse_link_column = row.reverse_link_column;
				} else if (column.type === "hierarchical_reverse_link") {
					column.kind = "hierarchical_reverse_link";
				}
				column.l10n_key = row.l10n_key;
				table.columns.push(column);
			});
		};

		// merge input in easier to handle json
		// structure
		var tables = [];
		var current = []; // collect all rows hierachically

		var table = {
			table_id: datamodel.table_schema.table_id,
			name: datamodel.datamodel_data.name,
			displayname_l10n: datamodel.datamodel_data.displayname_l10n,
			acl_table: datamodel.datamodel_data.acl_table,
			has_tags: datamodel.datamodel_data.has_tags,
			pool_link: datamodel.datamodel_data.pool_link,
			comment: datamodel.datamodel_data.comment,
			is_hierarchical: datamodel.datamodel_data.is_hierarchical,
			in_main_search: datamodel.datamodel_data.in_main_search,
			// in_facets: datamodel.datamodel_data.in_facets,
			columns: []
		};

		var table_schema = table.table_id?ez5.schema[ez5.admin.version]._table_by_id[table.table_id]:null

		tables.push(table);

		/*
		// add primary key column
		table.columns.push({
			name: "id",
			system: "primary-key-field",
			type: "serial",
			not_null: true,
			column_id: table_schema?table_schema._primary_key_column.column_id:null
		});
		*/

		get_rows(table, datamodel.rows);

		return tables;

	}

	var save_schema = function(opts) {
		var dfr = new CUI.Deferred();
		// send to server
		if (ez5.admin.version !== "HEAD") {
			alert("cannot post schema for: "+ez5.admin.version);
			return;
		}

		var schema = copyObject(ez5.schema.HEAD, true);

		// the deep copy de-referenced all _* references, so
		// we need to re-enrich the schema
		ez5.schema.clean_schema(schema);
		ez5.schema.enrich_schema(schema, "HEAD");

		// updates the existing schema an saves it to the server
		var tables = get_schema_tables();
		// $schema.children("schema").children().remove();

		// update xml schema
		var tables_by_id = {};
		var tables_by_name = {};
		for (var i = 0; i < tables.length; i++) {
			var t = tables[i];
			if (t.table_id) {
				tables_by_id[t.table_id] = tables[i];
			}
			tables_by_name[t.name] = tables[i];
			for (var j = 0; j < t.columns.length; j++) {
				var c = t.columns[j];
				/*
				if (c.system === "primary-key-field") {
					t.pk_col = c;
				}
				*/
			}
		}

		// the first table is the top level table
		var dependent_table_ids = ez5.admin.get_dependent_table_ids(tables[0].table_id);

		var l10n_keys = {}; // collect all l10n keys

		// for debug purposes
		var debug_table_schemas = [];

		for (var i = 0; i < tables.length; i++) {
			var t = tables[i];
			l10n_keys["schema."+t.name+".name"] = t.displayname_l10n;

			var table_schema = schema._table_by_id[t.table_id];
			if (!table_schema) {
				// generate a new table stub
				table_schema = {"columns":[], "_column_by_id": {}}
				schema.tables.push(table_schema);
			}
			debug_table_schemas.push(table_schema);

			table_schema.name = t.name;
			table_schema.pool_link = t.pool_link;
			table_schema.acl_table = t.acl_table;
			table_schema.comment = t.comment;
			table_schema.has_tags = t.has_tags;
			table_schema.in_main_search = t.in_main_search;
			// table_schema.in_facets = t.in_facets;
			table_schema.is_hierarchical = t.is_hierarchical;

			table_schema.unique_keys = [];
			table_schema.foreign_keys = [];
			table_schema._bidirectional_by_other_table_id = {};

			delete(table_schema.owned_by);
			if (t.father_table) {
				table_schema.owned_by = {
					/*
					"column_id": t.linked_table_column.column_id,
					"column_name_hint": t.linked_table_column.name,
					*/
					"other_table_name_hint": t.father_table.name,
					"other_table_id": t.father_table.table_id
				}
			}

			var reverse_link_columns_active = [];
			var reverse_link_columns_inactive = [];
			var reverse_link_table_ids = [];

			table_schema.new_columns = [] // this links the new columns, we might have a new order
			for (var j = 0; j < t.columns.length; j++) {
				var c = t.columns[j];
				if (!c.l10n_key) {
					c.l10n_key = "schema."+t.name+".column."+c.name;
				}
				var col;
				var allowed_attrs = null;

				l10n_keys[c.l10n_key] =  c.displayname_l10n;

				switch (c.kind) {
				case "link": // nested table uplink
					col = {
						kind: "link",
						other_table_name_hint: c.name,
						other_table_id: c.link_table_id
					}
					break;
				case "reverse_link": // table link to reversed link table
					col = {
						kind: "reverse_link",
						other_table_name_hint: c.name,
						other_table_id: c.reverse_link_column.other_table_id,
						other_column_id: c.reverse_link_column.other_column_id
					}
					break;
				case "hierarchical_reverse_link": // table link to self reversed link table
					col = {
						kind: "reverse_link",
						is_hierarchical: true
					}
					break;
				default:
					// col = table_schema._column_by_id[c.column_id];
					// if (!col) {
					col = {
						"kind": "column"
					}
					// }
				}

				table_schema.new_columns.push(col);

				// not_null is stored here

				/* FIXME: make this explicit in the block above */
				$.each($attr_map, function(idx, key) {
					if (isEmpty(key[0])) {
						return;
					}
					switch (c.kind) {
					case "link":
						switch(key[0]) {
						case "table_id":
							break;
						default:
							return;
						}
						break;
					case "reverse_link":
					case "hierarchical_reverse_link":

						// dont map anything
						return;
					default:
						switch(key[0]) {
						case "sort":
							return;
						}
					}

					col[key[0]] = c[key[1]];
				});

				// delete(col.check_range_upper);
				// delete(col.check_range_upper_open);
				// delete(col.check_range_lower);
				// delete(col.check_range_lower_open);

				if (c.type.match("^custom:")) {
					col.custom_settings = c.custom_settings;
					continue;
				}

				if (c.type == 'nested_table' && c.check == 'not_empty') {
					col.check = 'not_empty';
				}

				if (c.check == "range") {
					// CUI.debug("BEFORE", dump(col));
					if (!isEmpty(c.check_range_upper)) {
						if (c.check_range_upper_exclusive) {
							col.check_range_upper_open = c.check_range_upper;
						} else {
							col.check_range_upper = c.check_range_upper;
						}
					}

					if (!isEmpty(c.check_range_lower)) {
						if (c.check_range_lower_exclusive) {
							col.check_range_lower_open = c.check_range_lower;
						} else {
							col.check_range_lower = c.check_range_lower;
						}
					}
					// CUI.debug(dump(col), dump(c));
				}

				// delete(col.length_min);
				// delete(col.length_max);

				if (c.check_length) {
					if (!isEmpty(c.check_length_min)) {
						col.length_min = c.check_length_min;
					}
					if (!isEmpty(c.check_length_max)) {
						col.length_max = c.check_length_max;
					}
				}

				if (c.bidirectional) {
					console.debug("column ", c.name, "check save", c, "column:", col);
					if (c.__bidirectional_valid === false) {
						throw new InvalidSaveDataException();
					}
					var tid = c.foreign_key.table.table_id;
					assert(tid,"save_schema","Column has no table_id for bidirectional link");
					if (!table_schema._bidirectional_by_other_table_id[tid]) {
						table_schema._bidirectional_by_other_table_id[tid] = {
							columns: []
						}
					}
					var bidi = table_schema._bidirectional_by_other_table_id[tid];
					/*
					if (t.linked_table_column && bidi.columns.length === 0) {
						bidi.columns.push(
							{
								column_id: t.linked_table_column.column_id,
								column_name_hint: t.linked_table_column.name
							}
						)
					}
					*/
					if (t.father_table && bidi.columns.length === 0) {
						bidi.columns.push(
							{
								"auto_column_uplink": true
							}
						);
					}
					bidi.columns.push(
						{
							column_id: col.column_id,
							column_name_hint: col.name
						}
					)
					// CUI.debug("*bidi", c, col, tid,t , bidi);
				}

				if (c.bidirectional_reverse) {
					col.bidirectional_reverse = true;
				}

				if (c.type == "boolean") {
					col.not_null = true;
				}

				if (c.unique) {
					var unique_key = null;
					// CUI.debug("saving unique key", copyObject(c, true));
					if (c.unique !== "single") {
						$.each(table_schema.unique_keys, function(idx, uk) {
							if (uk.group === c.unique) {
								unique_key = uk;
							}
						});
						if (!unique_key) {
							unique_key = {
								"group": c.unique,
								"columns": []
							}
							table_schema.unique_keys.push(unique_key);
						}
					} else {
						unique_key = {
							"columns": []
						}
						table_schema.unique_keys.push(unique_key);
					}
					if (t.father_table && unique_key.columns.length === 0) {
						unique_key.columns.push({
							"auto_column_uplink": true
						});
					}
					if (t.is_hierarchical && unique_key.columns.length === 0 && c.unique_parent) {
						unique_key.columns.push({
							"auto_column_parent": true
						});
					}

					var unique_info = {
						"column_id": c.column_id,
						"column_name_hint": c.name,
					}

					if (c.type == "boolean") {
						unique_info.unique_true = true;
					}

					unique_key.columns.push(unique_info);
				}

				if (c.foreign_key) {
					var ref_table;
					var fk = {}
					table_schema.foreign_keys.push(fk);

					if (c.foreign_key.cascade) {
						fk.on_delete = "cascade";
						fk.on_update = "cascade";
					} else {
						fk.on_delete = "restrict";
						fk.on_update = "cascade";
					}

					if (c.foreign_key.table.table_id) {
						ref_table = tables_by_id[c.foreign_key.table.table_id];
						if (!ref_table) {
							// this table is not the current and not a linked_table
							var ref_table = schema._table_by_id[c.foreign_key.table.table_id];

							ref_table = {
								/* pk_col: {column_id: ref_table._primary_key_column.column_id,
								   name: ref_table._primary_key_column.name_hint},
								   */
								name: ref_table.name,
								table_id: ref_table.table_id
							};
						}
					} else {
						ref_table = tables_by_name[c.foreign_key.table.name];
					}

					fk.columns = [{
						"column_id": c.column_id,
						"column_name_hint": c.name
					}];
					fk.referenced_table = {
						"table_id": ref_table.table_id,
						"name_hint": ref_table.name,
						"columns": [{
							"auto_column_primary_key": true
							/*
							"column_id": ref_table.pk_col.column_id,
							"column_name_hint": ref_table.pk_col.name
							*/
						}]
					}
				}



				// maintain reverse linked column in the linked table
				// for new columns, we need to simply add a reversed link column
				// for existing columns we need to add or remove or leave the reversed
				// link untouched
				if (c.type === "link" && !table_schema.owned_by) {
					if (c.reverse_edit === true) {
						reverse_link_columns_active.push(c);
					} else {
						reverse_link_columns_inactive.push(c);
					}
					// maintain a list of references other tables
					pushOntoArray(c.foreign_key.table.table_id, reverse_link_table_ids);
				}
			}

			// CUI.debug("reverse_link_column in my table:", reverse_link_columns_active, "inactive:", reverse_link_columns_inactive, "table:", t, "table reverse id:", reverse_link_table_ids);

			// c.foreign_key.table.table_id should be set for this datatype
			// for existing tables, we need to check if someone looks us up
			if (t.table_id) {
				for (var j0 = 0; j0 < reverse_link_table_ids.length; j0++) {
					var reverse_link_table = schema._table_by_id[reverse_link_table_ids[j0]];
					for (var j1 = 0; j1 < reverse_link_table.columns.length; j1++) {
						var col1 = reverse_link_table.columns[j1];
						if (!(col1.kind === "reverse_link" && col1.other_table_id === t.table_id)) {
							continue;
						}
						// this column points to us, now we have to check if we need
						// to remove it or leave it

						// run thru active columns and remove them from the active list if
						// they already exist
						for (var j2 = 0; j2 < reverse_link_columns_active.length; j2++) {
							var col2 = reverse_link_columns_active[j2];
							if (col2.column_id == col1.other_column_id) {
								// this column is already there, all good
								console.debug("Col already exists:", col2.name, "table:", reverse_link_table.name);
								reverse_link_columns_active.splice(j2, 1);
								j2--;
							}
						}

						// run thru inactive columns and remove them from the table
						for (var j2 = 0; j2 < reverse_link_columns_inactive.length; j2++) {
							var col2 = reverse_link_columns_inactive[j2];
							if (col2.column_id == col1.other_column_id) {
								// this column needs to be removed from the reverse linked table
								console.debug("Removing already existing col:", col2.name, "table:", reverse_link_table.name);
								reverse_link_table.columns.splice(j1, 1);
								j1--;
							}
						}
					}
				}
			}

			// add missing active columns
			for (var j0 = 0; j0 < reverse_link_columns_active.length; j0++) {
				var col0 = reverse_link_columns_active[j0];
				var reverse_link_table = schema._table_by_id[col0.foreign_key.table.table_id];
				console.debug("Col add:", col0.name, "table:", reverse_link_table.name);
				reverse_link_table.columns.push({
					kind: "reverse_link",
					other_table_name_hint: t.name,
					other_table_id: t.table_id,
					other_column_id: col0.column_id,
					other_column_name_hint: col0.name
				});
			}

			// this deletes left over from the old solution how
			// to handle hierarchical tables
			delete(table_schema.hierarchical);
			delete(table_schema.primary_key);
			/*
			if (t.pk_col) {
				table_schema.primary_key = {
					"columns": [{
						"column_name_hint": t.pk_col.name,
						"column_id": t.pk_col.column_id
					}]
				}
			}
			*/
			table_schema.columns = table_schema.new_columns;
			table_schema.bidirectional = [];

			$.each(table_schema._bidirectional_by_other_table_id, function(table_id, bidi) {
				// CUI.debug("pushing bidi", bidi);
				table_schema.bidirectional.push(bidi);
			});
			delete(table_schema._bidirectional_by_other_table_id);
			delete(table_schema.new_columns);
		}
		// CUI.debug("copy of schema", dump(schema));

		// remove all unused tables, owned-by already exists for existing tables
		$.each(dependent_table_ids, function(idx, t_id) {
			if (!tables_by_id[t_id]) {
				var table = schema._table_by_id[t_id];
				removeFromArray(table, schema.tables);
			}
		});

		ez5.schema.clean_schema(schema);
		ez5.loca.clean_keys(l10n_keys);

		if (opts.return_data) {
			return {
				l10n_keys: l10n_keys,
				schema: schema
			}
		}

		ev = opts.event;
		if (ev.altKey() || ev.shiftKey() || ev.ctrlKey()) {
			if (ev.altKey() && ev.ctrlKey()) {
				CUI.debug(dump(schema));
				CUI.warn("dumped full schema post", schema);
			} else {
				CUI.debug(dump(debug_table_schemas));
				CUI.warn("dumped updated schema post only, use ctrl+alt for full dump", debug_table_schemas);
			}
			return dfr.reject();
		}

		ez5.admin.post_schema(schema)
			.done(function() {
				// save loca keys
				var valid_prefixes = ez5.loca.get_valid_user_key_prefixes(ez5.admin.version);
				CUI.debug("valid prefixes", valid_prefixes);
				CUI.debug("save loca keys:", l10n_keys);
				ez5.loca.update({
					valid_prefixes: valid_prefixes,
					delete_prefix: "schema."+tables[0].name+".",
					realm: ez5.admin.version,
					keys: l10n_keys
				})
					.done(dfr.resolve)
					.fail(dfr.reject)
			})
			.fail(dfr.reject);

		return dfr.promise();
	}

	var get_datamodel_for_table =  function(table_id, $attr_map) {

		var datamodel = {
			table_schema: ez5.schema[ez5.admin.version]._table_by_id[table_id],
			datamodel_data: {_fields:{}}
		};

		datamodel.get_row_data_for_datamodel = function(table_schema) {
			var rows = [];

			$.each(table_schema.columns, function(idx, column) {

				// CUI.debug(row.data.name, row.data.system, row.data.type);
				switch(column._system_type) {
				case "primary-key-field":
				case "tree-field":
				case "linked-table-field":
				case "object-rights-linked-table":
					// skip this, we add it back later when we save the schema
					return;
				}

				var row;

				switch (column.kind) {
				case "link": // nested linked table (owned_by table)

					var link_table_id = column.other_table_id
					var link_table_schema = ez5.schema[ez5.admin.version]._table_by_id[link_table_id];

					row = get_new_row("nested_table");


					row.link_table_id = link_table_id;

					row.data.name = link_table_schema.name.substr(table_schema.name.length+2);

					row.data.displayname_l10n =	ez5.loca.get_user_key(ez5.admin.version, column._l10n_key);

					row.data.check = column.check;
					row.children = datamodel.get_row_data_for_datamodel(link_table_schema);
					break;
				case "reverse_link":
					if (!column.is_hierarchical) {
						row = get_new_row("reverse_link");
						// CUI.debug("loading reverser link", column);
						var reverse_link_table_schema = ez5.schema[ez5.admin.version]._table_by_id[column.other_table_id];

						// hint for save_schema when sending, server uses this to look up the
						// linked table
						row.reverse_link_column = column;
						// row.reverse_link_column_id = reverse_link_column_id;

						row.data.name = reverse_link_table_schema.name+"."+column.name;
						// row.data.reverse_name = $$("admin.datamodel.reverse_link_prefix", {
						// 	'name': reverse_link_table_schema._name_localized+' / '+reverse_link_table_schema._column_by_id[column.other_column_id]._name_localized
						// });
						row.data.reverse_name = reverse_link_table_schema._name_localized+' / '+reverse_link_table_schema._column_by_id[column.other_column_id]._name_localized;

						row.l10n_key = column._l10n_key
						row.data.displayname_l10n = ez5.loca.get_user_key(ez5.admin.version, row.l10n_key);

					} else {
						datamodel.datamodel_data.hierarchical_reverse_edit = true;
						// ignore column here, the main form for datamodel will add the column
						return;
					}

					break;
				default:
					row = get_new_row();
					row.data.column = column;

					$.each($attr_map, function(idx, key) {
						if (!isUndef(column[key[0]])) {
							row.data[key[1]] = column[key[0]];
						}
					});

					row.data.bidirectional_reverse = column.bidirectional_reverse;

					if (!isNull(column.length_min) || !isNull(column.length_max)) {
						row.data.check_length = true;
						row.data.check_length_min = column.length_min;
						row.data.check_length_max = column.length_max;
					} else {
						row.data.check_length = false;
						row.data.check_length_min = null;
						row.data.check_length_max = null;
					}

					if (!isNull(column.check_range_lower)) {
						row.data.check_range_lower = column.check_range_lower;
						row.data.check_range_lower_exclusive = false;
					} else if (!isNull(column.check_range_lower_open)) {
						row.data.check_range_lower = column.check_range_lower_open;
						row.data.check_range_lower_exclusive = true;
					}
					if (!isNull(column.check_range_upper)) {
						row.data.check_range_upper = column.check_range_upper;
						row.data.check_range_upper_exclusive = false;
					} else if (!isNull(column.check_range_upper_open)) {
						row.data.check_range_upper = column.check_range_upper_open;
						row.data.check_range_upper_exclusive = true;
					}

					row.data.displayname_l10n =
						ez5.loca.get_user_key(ez5.admin.version, "schema."+table_schema.name+".column."+
											  column.name);

					if (column._foreign_key) {
						// $column.attr("type", "link_"+link_table_id);
						row.data.type = "link_"+column._foreign_key.referenced_table.table_id;
					}

					if (column.type.match("^custom:")) {
						row.data.custom_settings = column.custom_settings || {};
						// check if type is available, if not add it to
						// the list
						var exists = false;
						for (var idx in datamodel.custom_types) {
							var opt = datamodel.custom_types[idx];
							if (opt.value == column.type) {
								exists = true;
								break;
							}
						}
						if (!exists) {
							console.warn("Adding non existing datatype for column", column, datamodel.custom_types);
							var dt = CustomDataType.get(column.type);
							datamodel.custom_types.push({value: column.type, text: dt.getCustomDataTypeNameLocalized()});
						}
					}

					if (column._unique_keys) {
						// CUI.debug("table:", table_schema, "column:", column);
						var parent_table_link_column_id = null;
						var children_count = 1;

						if (table_schema.owned_by) {
							parent_table_link_column_id = table_schema.owned_by.column_id;
							children_count = 2;
						}

						try {
							switch (column._unique_keys.length) {
							case 1:
								var unique_key = column._unique_keys[0];
								if (parent_table_link_column_id) {
									// check if the unique key contains the parent link column
									var good = false;
									$.each(unique_key.columns, function(idx, col) {
										if (col.column_id === parent_table_link_column_id) {
											good = true;
										}
									});
									if (!good) {
										throw "admin.datamodel.error.single_unique_key";
									}
								}

								if (table_schema.is_hierarchical) {
									$.each(unique_key.columns, function(idx, col) {
										if (col.auto_column_parent) {
											row.data.unique_parent = true;
											children_count++;
										}
									});
								}

								row.data.unique_group = unique_key.group;

								switch(row.data.unique_group) {
								case "a":
								case "b":
								case "c":
									// group key
									row.data.unique = true;
									break;
								default:
									if (unique_key.columns.length <= children_count) {
										// single unique key
										row.data.unique = true;
										row.data.unique_group = "single";
									} else {
										throw "admin.datamodel.error.no_group_in_unique_key";
									}
								}

								break;
							default:
								// we cannot have the same column in multiple unique keys. this
								// is an error we have to warn the user about
								throw "admin.datamodel.error.multiple_unique_keys";
							}
						} catch (error_label) {
							CUI.error(error_label, "column", column, "table", table_schema);
							new ModalDialog({
								title: $$(error_label),
								text: $$(error_label+".text",
										 [row.data.name, table_schema._name_localized])
							}).open();
						}
					}
				}

				row.data.system = column._system_type;
				rows.push(row);

			});
			return rows;
		};

		if (!datamodel.table_schema) {
			datamodel.table_schema = {
				name: "",
				acl_table: false,
				has_tags: false,
				pool_link: false,
				comment: "",
				in_main_search: false,
				// in_facets: false,
				is_hierarchical: false,
				hierarchical_reverse_edit: false,
				columns:[]
			}
		}

		datamodel.datamodel_data.name = datamodel.table_schema.name;
		datamodel.datamodel_data.displayname_l10n =
			ez5.loca.get_user_key(ez5.admin.version, "schema."+datamodel.datamodel_data.name+".name");

		datamodel.datamodel_data.pool_link = datamodel.table_schema.pool_link;
		datamodel.datamodel_data.is_hierarchical = datamodel.table_schema.is_hierarchical;
		datamodel.datamodel_data.comment = datamodel.table_schema.comment;
		datamodel.datamodel_data.in_main_search = datamodel.table_schema.in_main_search;
		// datamodel.datamodel_data.in_facets = datamodel.table_schema.in_facets;
		datamodel.datamodel_data.acl_table = datamodel.table_schema.acl_table;
		datamodel.datamodel_data.has_tags = datamodel.table_schema.has_tags;

		datamodel.additional_types = [];

		$.each(ez5.schema[ez5.admin.version]._objecttypes, function(idx, table) {
			datamodel.additional_types.push({value: "link_"+table.table_id,
											 text: table._name_localized});
		});

		datamodel.custom_types = [];
		$.each(CustomDataType.getTypes(), function(idx, ctype) {
			var type = ctype.getCustomDataTypeName()
			if (!ez5.session.getCustomDataTypes()[type]) {
				CUI.warn("Datamodel load: Custom Type loaded but not supported by server:", type);
			}
			datamodel.custom_types.push({value: type, text: ctype.getCustomDataTypeNameLocalized()});
		});

		// CUI.debug("datamodel looooooooad", datamodel);

		return datamodel;
	}

	var update_datamodel_data_form = function() {
		var d = datamodel.datamodel_data;
		// CUI.debug("update_datamodel_data_form", d, d.hierarchical_reverse_edit)
		if (d.is_hierarchical) {
			dm_form.getFieldsByName("hierarchical_reverse_edit")[0].enable()
			// d._fields.hierarchical_reverse_edit.$element.enable();
		} else {
			dm_form.getFieldsByName("hierarchical_reverse_edit")[0].setValue(false).disable()
			// d._fields.hierarchical_reverse_edit.$element[0].set_value(false);
			// d._fields.hierarchical_reverse_edit.$element.disable();
		}
		if (!d.hierarchical_reverse_edit && d._hierarchical_reverse_edit_old_value) {
			CUI.debug("switched off", datamodel.rows);
			$.each(datamodel.rows, function(idx, row) {
				if (row.data.type === "hierarchical_reverse_link") {
					if ($columns_table.isLoaded()) {
						row.remove();
					} else {
						datamodel.rows.splice(idx,1);
					}
				}
			});
		} else if (d.hierarchical_reverse_edit && !d._hierarchical_reverse_edit_old_value) {
			var row = get_new_row("hierarchical_reverse_link");
			if ($columns_table.isLoaded()) {
				$columns_table.addNode(row);
			} else {
				datamodel.rows.push(row);
			}
		}
		d._hierarchical_reverse_edit_old_value = d.hierarchical_reverse_edit;
		if (minusButton) {
			if ($columns_table.getSelectedNode()) {
				minusButton.enable();
			} else {
				minusButton.disable();
			}
		}
	}


	var dm_form_opts = { fields: [
		{
			type: Input,
			form: {
				label: $$("admin.datamodel.form.name")
			},
			name: "name"
		},
		{
			type: MultiInput,
			control: ez5.loca.getLanguageControlAdmin(),
			form: {
				label: $$("admin.datamodel.form.displayname_l10n")
			},
			name: "displayname_l10n"
		},
		{
			type: Input,
			textarea: true,
			form: {
				label: $$("admin.datamodel.form.comment")
			},
			name: "comment"
		},
		{
			type: Form,
			form: {
				label: $$("admin.datamodel.form.options")
			},
			onDataChanged: update_datamodel_data_form,
			fields: [
				{
					type: Checkbox,
					text: $$("admin.datamodel.form.pool_link"),
					name: "pool_link"
				},
				{
					type: Checkbox,
					text: $$("admin.datamodel.form.hierarchical"),
					name: "is_hierarchical"
				},
				// this is an internal field only, it appends
				// a field to the list of fields
				{
					type: Checkbox,
					text: $$("admin.datamodel.form.hierarchical_reverse_edit"),
					name: "hierarchical_reverse_edit"
				}
			]
		},
		{
			form: {
				label: $$("admin.datamodel.form.frontendoptions")
			},
			type: Form,
			onDataChanged: update_datamodel_data_form,
			fields: [
				{
					type: Checkbox,
					text: $$("admin.datamodel.form.in_main_search"),
					name: "in_main_search"
				}
				/* ,
				{
					type: Checkbox,
					text: $$("admin.datamodel.form.in_facets"),
					name: "in_facets"
				}, */
			]
		},
		{
			form: {
				label: $$("admin.datamodel.form.rightsmanagement")
			},
			type: Form,
			onDataChanged: update_datamodel_data_form,
			fields: [
				{
					type: Checkbox,
					text: $$("admin.datamodel.form.acl_table"),
					name: "acl_table"
				},
				{
					type: Checkbox,
					text: $$("admin.datamodel.form.has_tags"),
					name: "has_tags"
				}

			]
		}
	] };

	var get_check_db_fields = function(formField) {
		var data = formField.getData()
		if (!data) {
			return [];
		}

		fields = [
			{
				type: Checkbox,
				text: $$("admin.datamodel.col.not_null"),
				name: "not_null"
			},
			{
				type: Form,
				horizontal: true,
				fields: [
					{
						type: Checkbox,
						text: $$("admin.datamodel.col.unique"),
						name: "unique"
					},
					{
						type: Form,
						fields: [
							{
								type: Select,
								name: "unique_group",
								options: [
									{
										value: "single",
										text: $$("admin.datamodel.col.unique.key.single")
									},
									{
										value: "a",
										text: $$("admin.datamodel.col.unique.key.a")
									}
									,
									{
										value: "b",
										text: $$("admin.datamodel.col.unique.key.b")
									}
									,
									{
										value: "c",
										text: $$("admin.datamodel.col.unique.key.c")
									}
								]
							}
							,
							unique_parent_checkbox
						]
					}
				]
			}
		];

		if (ez5.admin.datatype(data.type) && ez5.admin.datatype(data.type)[1].length) {
			fields.splice(1,0, {
				type: Form,
				horizontal: true,
				fields: [
					{
						type: Checkbox,
						text: $$("admin.datamodel.col.length"),
						name: "check_length"
					},
					{
						type: Form,
						fields: [
							{
								form: { label: $$("admin.datamodel.col.length.min") },
								type: NumberInput,
								min: 0,
								name: "check_length_min"
							},
							{
								form: { label: $$("admin.datamodel.col.length.max") },
								type: NumberInput,
								min: 1,
								name: "check_length_max"
							}
						]
					}
				]
			})
		}

		switch (data.type) {
		case 'boolean':
			fields[0].disabled = true;
			break;
		case 'nested_table':
			// No database options available
			fields = [];
			break;
		}

		return fields;
	}

	var get_check_options = function(data) {
		var extra_form = null;
		var check_options = [];
		if (!data) {
			return check_options;
		}
		var check = null;


		var dt = ez5.admin.datatype(data.type);
		if (dt) {
			check = dt[1].check.slice(0);
		} else {
			check = [];
		}
		check.splice(0, 0, 'none');

		switch (data.type) {
		case 'nested_table':
			check.push('not_empty');
			break;
		}

		var get_range_field = function(opts) {
			return new Form(
				{
					data: data,
					fields: [
						{
							type: opts.type,
							decimals: opts.decimals,
							placeholder: $$("admin.datamodel.range_from.placeholder"),
							name: "check_range_lower"
						},
						{
							type: Checkbox,
							text: $$("admin.datamodel.range.exclusive"),
							name: "check_range_lower_exclusive"
						},
						{
							type: opts.type,
							decimals: opts.decimals,
							placeholder: $$("admin.datamodel.range_to.placeholder"),
							name: "check_range_upper"
						},
						{
							type: Checkbox,
							text: $$("admin.datamodel.range.exclusive"),
							name: "check_range_upper_exclusive"
						}
					]
				}
			)
		}

		$.each(check,
			   function(idx, value) {
				   var value_parsed;
				   if (value.match(/range/)) {
					   value_parsed = "range";
				   } else {
					   value_parsed = value;
				   }
				   var o = {
					   // this is the not empty checkbox here
					   text: $$("admin.datamodel.check."+value),
					   value: value==="none"?null:value_parsed,
				   };

				   // CUI.debug("check", idx, value, o);
				   switch (value) {
				   case "regexp":
					   extra_form = new Form({
						   data: data,
						   fields: [
							   {
								   form: { label: "Regexp" },
								   type: Input,
								   name: "check_regexp"
							   },
							   {
								   form: { label: "Regexp Flags" },
								   type: Input,
								   name: "check_regexp_flags"
							   }
						   ]})
					   break;
				   case "numberrange":
					   extra_form = get_range_field(
						   {
							   type: NumberInput,
							   decimals: 0
						   }
					   );
					   break;
				   case "numberrange.2":
					   extra_form = get_range_field(
						   {
							   type: NumberInput,
							   decimals: 2
						   }
					   );
					   break;
				   case "daterange":
					   extra_form = get_range_field(
						   {
							   type: DateTime
						   }
					   );
					   break;
				   case "datetimerange":
					   extra_form = get_range_field(
						   {
							   type: DateTime
						   }
					   );
					   break;
				   }
				   check_options.push(o);
			   });

		return {
			check_options: check_options,
			extra_form: extra_form
		};
	}

	var datamodel = get_datamodel_for_table(opts.table_id, $attr_map);

	var unique_parent_checkbox;
	if (datamodel.table_schema.is_hierarchical) {
		unique_parent_checkbox = {
			type: Checkbox,
			name: "unique_parent",
			text: $$("admin.datamodel.col.unique_parent")
		}
	}

	var options_field = { // 3
		th_label: "admin.datamodel.col.check",
		type: FormPopover,
		popover:  {
			pane: {
				"class": "ez5-admin-datamodel-check-popover",
				header_left: new Label({text: $$("admin.datamodel.col.check.popover.title")})
			},
			placements: ["es","e","ws","w"]
		},
		fields: function(form) {
			var data = form.getData();
			if (!data) {
				return [];
			}

			if (data.type.match("^custom:")) {
				return custom_type_support.getCustomSchemaOptions(data);
			}

			if (data.type == "boolean") {
				data.not_null = true;
			}

			var info = get_check_options(data);
			var db_fields_form = null;

			if (data.type != 'nested_table') {
				db_fields_form = {
					type: Form,
					form: {
						label: $$("admin.datamodel.col.check.db.label")
					},
					fields: get_check_db_fields
				}
			}

			return [
				{
					type: Options,
					horizontal: false,
					radio: true,
					form: {
						label: $$("admin.datamodel.col.check.label"),
					},
					name: "check",
					options: info.check_options
				},
				info.extra_form,
				db_fields_form
			]
		},
		button: {
			text: $$("admin.datamodel.col.check.button")
		},
		renderDisplayContent: function(df, data) {
			if (data.type.match("^custom:")) {
				return custom_type_support.renderDisplayForCustomSchemaOptions(data);
			}
			var info = [];
			if (data) {
				if (data.check) {
					info.push($$("admin.datamodel.check."+data.check));
				}
				if (isTrue(data.not_null)) {
					info.push($$("admin.datamodel.check.not_null.display"));
				}
				if (isTrue(data.check_length)) {
					var len_min;
					var len_max;
					if (isNull(data.check_length_min)) {
						len_min = "";
					} else {
						len_min = data.check_length_min;
					}
					if (isNull(data.check_length_max)) {
						len_max = "";
					} else {
						len_max = data.check_length_max;
					}
					if (len_min != "" || len_max != "") {
						info.push($$("admin.datamodel.check.length.display",
									 {
										 min: len_min,
										 max: len_max
									 }));
					}
				}
				if (info.length == 0) {
					info.push($$("admin.datamodel.check.none"));
				}
				if (isTrue(data.unique)) {
					if (!data.unique_group) {
						data.unique_group = "single";
					}
					info.push($$("admin.datamodel.col.unique.key."+data.unique_group));
				}
			}
			if (info.length == 0) {
				return;
			}
			div = CUI.DOM.element("DIV", {"class": "ez5-tag-holder ez5-datamodel-check"})
			for (var i=0; i < info.length; i++) {
				div.appendChild(new Label({"class": "ez5-tag", text: info[i]}).DOM);
			}
			return div;
		}
	}

	var fields = [
		{ // 0
			th_label: "admin.datamodel.col.name",
			name: "name",
			type: Input
		},
		{ // 1
			th_label: "admin.datamodel.col.displayname_l10n",
			name: "displayname_l10n",
			type: MultiInput,
			control: ez5.loca.getLanguageControlAdmin()
		},
		{ // 2
			th_label: "admin.datamodel.col.type",
			type: FormPopover,
			popover:  {
				placements: ["es","e","ws","w"],
				pane: {
					header_left: new LocaLabel({loca_key: "admin.datamodel.col.type.popover.title"})
				}
			},
			fields: (function() {
				var fields = [];
				for (var i=0; i < 6; i++) {
					fields.push({
						type: Options,
						horizontal: false,
						radio: "type",
						placeholder: $$("admin.datamodel.type.group_label."+i+".placeholder"),
						form: {
							label: $$("admin.datamodel.type.group_label."+i)
						},
						name: "type",
						options: []
					});
				}
				return fields;
			})(),
			renderDisplayButton: function(df, data) {
				return ez5._schema_inst.getDatatypeLocalized(data.type, ez5.admin.version)
			},
			onDataChanged: function(data) {
				update_row_state(data._node);
			}
		},
		// 3
		options_field,
		{ // 4
			th_label: "admin.datamodel.col.reverse_edit",
			name: "reverse_edit",
			th_rotate_90: true,
			type: Checkbox,
			onDataChanged: function(data) {
				update_row_state(data._node);
			}
		},
		{ // 5
			th_label: "admin.datamodel.col.bidirectional",
			name: "bidirectional",
			th_rotate_90: true,
			type: Checkbox,
			onDataChanged: function(data) {
				update_row_state(data._node);
			}
		},
		{ // 6
			th_label: "admin.datamodel.col.bidirectional_reverse",
			name: "bidirectional_reverse",
			th_rotate_90: true,
			type: Checkbox,
			onDataChanged: function(data) {
				update_row_state(data._node);
			}
		}

	];

	var minusButton = null;

	if (ez5.admin.version==="HEAD") {
		minusButton = new LocaButton({
			icon: "minus",
			loca_key: "datamodel.fields.button.minus",
			group: "plusminus",
			onClick: function() {
				var row = $columns_table.getSelectedNode();
				CUI.confirm({
					text: $$("admin.datamodel.remove_row.confirm"),
					button_text_ok: $$("base.delete")
				}).done(function() {
					row.remove(true)
				})
			}
		})
	}

	var fields_reverse_link = fields.slice(0); // make a shallow copy
	fields_reverse_link[0] = { // 0
		th_label: "admin.datamodel.col.name",
		name: "reverse_name",
		type: Output
	};

	datamodel.rows = datamodel.get_row_data_for_datamodel(datamodel.table_schema);

	// bind data to the form
	dm_form_opts.data = datamodel.datamodel_data;

	// populate datatype pulldown
	var type_idx = idxInArray(null, fields, function(v) { return v.th_label == "admin.datamodel.col.type"; })

	var fields_tmp = fields[type_idx].fields;

	// CUI.debug("datatype", ez5.admin.datatypes);

	$.each(ez5.admin.datatypes, function(idx, type) {
		fields_tmp[type[1].group].options.
			push({text: $$("datamodel.type."+type[0]),
				  value: type[0]});
	});

	datamodel.additional_types.sort(function(a, b){
		return compareIndex(a.text.toLowerCase(), b.text.toLowerCase());
	});

	datamodel.custom_types.sort(function(a, b){
		return compareIndex(a.text.toLowerCase(), b.text.toLowerCase());
	});

	// the 4th group is the objecttypes
	fields_tmp[4].options = datamodel.additional_types;

	// the 5th group is the custom types
	fields_tmp[5].options = datamodel.custom_types;

	// CUI.debug("datamodel", datamodel);

	var dm_form = new Form(dm_form_opts);
	dm_form.start()
	// $ele.append($("<h2/>").text($$("admin.datamodel.edit.title")));

	var get_menu_items = function() {
		var items = [
			{
                label: $$("admin.datamodel.label_topmost_level")
			},
			{
				onClick: function(e) {
					add_new_row(ez5.admin.datatypes[0][0]);
				},
				loca_key: "admin.datamodel.new_field"
			},
			{
				onClick: function(e) {
					add_new_row("nested_table");
				},
				loca_key: "admin.datamodel.new_nested_table"
			}
		];
		items.push({
			divider: true
		});
		items.push({
			label: $$("admin.datamodel.label_below_nested_table")
        });
		var row = $columns_table.getSelectedNode();
		if (!row || row.data.type != "nested_table") {
			items.push(new EmptyLabel({
				text: $$("admin.datamodel.no_nested_table_selected")
			}))
		} else {
			items.push({
				loca_key: "admin.datamodel.new_field",
				onClick: function() {
					add_new_row(ez5.admin.datatypes[0][0], row.data._node);
				}
			});
			items.push({
				loca_key: "admin.datamodel.new_nested_table",
				onClick: function() {
					add_new_row("nested_table", row.data._node);
				}
			})
		}

		items.push({
			divider: true
		});
		items.push({
			label: $$("admin.datamodel.label_append_sibling_to_field")
        });
		var row = $columns_table.getSelectedNode();
		if (!row) {
			items.push(new EmptyLabel({
				text: $$("admin.datamodel.no_field_selected")
			}))
		} else {
			items.push({
				loca_key: "admin.datamodel.new_field",
				onClick: function() {
					add_new_row(ez5.admin.datatypes[0][0], row.data._node, true);
				}
			});
			items.push({
				loca_key: "admin.datamodel.new_nested_table",
				onClick: function() {
					add_new_row("nested_table", row.data._node, true);
				}
			})
		}


		CUI.debug("row selected", row);
		return items;
	}

	//var $columns_table = ez5.edittable({
	var $columns_table = new ListViewEditTree({
		fields: fields,
		class: 'cui-lv--has-datafields',
		fixedCols: 0, // 2,
		selectableRows: ez5.admin.version == "HEAD",
		rowMove: ez5.admin.version == "HEAD",
		rowMoveWithinNodesOnly: true,
		onSelect: function() {
			update_datamodel_data_form();
		},
		onDeselect: function() {
			update_datamodel_data_form();
		},
		end_add_row: function(row) {
			update_row_state(row);
		},
		footer_left: function() {
			if (ez5.admin.version==="HEAD") {
				return [
					{
						icon: "plus",
						loca_key: "datamodel.fields.button.plus",
						group: "plusminus",
						menu: {
							items: get_menu_items
						}
					}
					,
					minusButton
				];
			} else {
				return;
			}
		}
	});

	update_datamodel_data_form();


	/* Save / Cancel Buttons */

	return {
		save_schema: save_schema,
		datamodel: datamodel,
		form: dm_form,
		$columns_table: $columns_table
	};
}
ez5.admin.save_masks = function(opts) {
	var l10n_prefix = null;

	var parse_data = function(rows, mask, l10n_keys) {
		// CUI.debug("parse_data", rows, mask);

		mask.fields = []

		$.each(rows, function(idx, row) {

			if (row.getFieldToSave) {
				mask.fields.push(row.getFieldToSave(
					{
						mask: mask,
						l10n_prefix: l10n_prefix,
						l10n_keys: l10n_keys
					}
				))
				return;
			}

			var field = {
				"kind": row.type
			}

			mask.fields.push(field);

			field.edit = {}
			field.output = {}
			field.search = {}

			if (row.data.edit_show) {
				field.edit.mode = "show";
			} else if (row.data.edit_edit) {
				field.edit.mode = "edit";
			} else {
				field.edit.mode = "off";
			}

			field.output.detail = row.data.output_detail;
			field.output.text = row.data.output_text;
			field.output.table = row.data.output_table;

			field.custom_settings = row.data.custom_settings;

			if (row.data.standard_order) {
				field.output.standard = {
					design: row.data.standard_design,
					format: row.data.standard_format,
					order: row.data.standard_order || null
				}
			} else {
				field.output.standard = {
					order: row.data.standard_order || null
				}
			}

			field.output.standard_eas = {
				order: row.data.standard_eas_order || null
			}

			switch(row.type) {
			case "linked-table":
				field.sort_first_field = row.data.sort_first_field;
			case "reverse-linked-table":
				if (row.data.field.is_hierarchical) {
					field.is_hierarchical = true;
					// CUI.debug("adding reverse linked table", row, field);
				} else {
					field.other_table_id = row.data.field.other_table_id;
					field.other_column_id = row.data.field.other_column_id;
				}
				field.edit.as_table = row.data.edit_as_table;
				field.edit.append_only = row.data.edit_append_only;
				field.search.fulltext = row.data.search_fulltext;
				field.search.facet = row.data.search_facet;
				field.search.expert = row.data.search_expert;
				field.search.nested = row.data.search_nested;

				if (!row.data.field.hierarchical_mask_hint) {
					if (row.children) {
						field.mask = copyObject(row.data.field.mask, true);
						parse_data(row.children, field.mask, l10n_keys);
					}
				} else {
					field.hierarchical_mask_hint = true;
				}
				break;
			case "field":
				field.column_id = row.data.field.column_id;

				field.search.fulltext = row.data.search_fulltext;
				field.search.facet = row.data.search_facet;
				field.search.expert = row.data.search_expert;

				break;
			case "link":
				// $field.attr("type", row.data.$field.attr("type"));
				field.column_id = row.data.field.column_id;
				field.other_table_id = row.data.field.other_table_id;
				field.mask_id = row.data.mask_id;
				// CUI.debug("row data", row.data.inline, row.data);
				field.inline = row.data.inline;

				field.search.fulltext = row.data.search_fulltext;
				field.search.facet = row.data.search_facet;
				field.search.expert = row.data.search_expert;
				break;
			default:
				assert(false, "save_masks", "Unsupported row.type", {row: row});
			}
			l10n_keys[row.data.field._user_hint_loca_key()] = row.data.edit_user_hint_l10n;
			l10n_keys[row.data.field._user_hint_loca_key()]._comment = row.data.field._full_name;
		});
	}

	var mask = opts.mask;
	var data = mask.getData();

	var new_mask = null;
	var l10n_keys = {}

	if (!opts["delete"]) {
		assert(data.table_id, "ez5.admin.save_masks", "No table_id set, cannot save mask", {opts: opts});
		new_mask = {
			"table_id": data.table_id,
			"mask_id": data.mask_id,
			"name": data.name,
			"comment": data.comment,
			"is_preferred": data.is_preferred,
			"require_comment": data.require_comment,
			"system_fields": {}
		}

		var tb = ez5.schema[ez5.admin.version]._table_by_id[new_mask.table_id]

		if (tb.is_hierarchical) {
			new_mask.system_fields.parent = {
				"output": {
					"mode": data.parent_output
				},
				"edit": {
					"mode": data.parent_edit
				},
				"inline": data.parent_inline,
				"mask_id": data.parent_mask_id
			}
		}

		if (tb.has_tags) {
			new_mask.system_fields.tags = {
				"output": {
					"mode": data.tags_output
				},
				"edit": {
					"mode": data.tags_edit
				}
			};
		}

		new_mask.system_fields.owner = {
			"output": {
				"mode": data.owner_output
			},
			"edit": {
				"mode": data.owner_edit
			}
		};

		if (tb.acl_table) {
			new_mask.system_fields.acl = {
				"output": {
					"mode": data.acl_output
				},
				"edit": {
					"mode": data.acl_edit
				}
			};
		}

		if (tb.in_main_search) {
			new_mask.system_fields.collections = {
				"output": {
					"mode": data.collections_output
				},
				"edit": {
					"mode": data.collections_edit
				}
			};
		}

		if (tb.pool_link) {
			new_mask.system_fields.pool = {
				"output": {
					"mode": data.pool_output
				}
			};
		}


		l10n_prefix = function() { return "mask."+new_mask.table_id+"."+new_mask.name+"."; }
		l10n_keys[mask.getNameLocaKey()] = data.displayname_l10n;
		// l10n_keys[mask.getUserHintLocaKey()] = data.user_hint_l10n;

		parse_data(mask.getRows(), new_mask, l10n_keys);
	}

	ez5.loca.clean_keys(l10n_keys);

	if (opts.return_data) {
		return {
			l10n_keys: l10n_keys,
			new_mask: new_mask
		}
	}

	var mask_schema = copyObject(ez5.mask[ez5.admin.version], true);

	var old_mask;
	var other_masks = [];
	assert(!opts["delete"] || data.mask_id, "ez5.admin.save_masks", "No table_id set, cannot delete mask", {opts: opts});
	if (data.mask_id) {
		// replace in mask set
		for (idx = 0; idx < mask_schema.masks.length; idx++) {
			if (mask_schema.masks[idx].mask_id === data.mask_id) {
				if (new_mask) {
					old_mask = mask_schema.masks.splice(idx, 1, new_mask)[0];
				} else {
					old_mask = mask_schema.masks.splice(idx, 1)[0];
					idx--;
				}
			} else if (mask_schema.masks[idx].table_id === data.table_id) {
				other_masks.push(mask_schema.masks[idx]);
			}
		};
	} else {
		old_mask = null;
		for (idx = 0; idx < mask_schema.masks.length; idx++) {
			if (mask_schema.masks[idx].table_id === data.table_id) {
				other_masks.push(mask_schema.masks[idx]);
			}
		}
		mask_schema.masks.push(new_mask);
	}

	ez5.schema.clean_mask_schema(mask_schema);

	mask_schema.based_on_schema_version = ez5.schema.HEAD.version;
	mask_schema.version = 1; // right now the version is not used, so we send a "1"

	var dfr = new CUI.Deferred();
	if (opts["delete"]) {
		/* make sure one of our other masks is preferred */
		var preferred = null;
		for (var idx = 0; idx < other_masks.length; idx++) {
			if (other_masks[idx].is_preferred) {
				preferred = idx;
				break;
			}
		}
		if (other_masks.length > 0 && preferred === null) {
			other_masks[0].is_preferred = true;
		}
	} else if (new_mask.is_preferred) {
		/* make sure to reset all other mask's preferred */
		for (var idx = 0; idx < other_masks.length; idx++) {
			other_masks[idx].is_preferred = false;
		}
	}

	/* FIXME: we lower case all mask names, the server does not allow upper case any more */
	/*
	for (var idx = 0; idx < mask_schema.masks.length; idx++) {
		mask_schema.masks[idx].name = mask_schema.masks[idx].name.toLocaleLowerCase();
		}
	*/


	var ev = opts.event;
	if (ev.hasModifierKey()) {
		if (ev.altKey() && ev.ctrlKey() && ev.shiftKey()) {
			CUI.debug("l10n_keys", l10n_keys);
			CUI.debug("mask_schema", mask_schema);
			CUI.warn("dumped full mask post as objects");
		} else if (ev.altKey() && ev.ctrlKey()) {
			CUI.debug(dump(l10n_keys));
			CUI.debug(dump(mask_schema));
			CUI.warn("dumped full mask post, use shift+ctrl+alt for full dump as objects");
		} else {
			CUI.debug(dump(l10n_keys));
			CUI.debug("mask schema to save", dump(new_mask));
			CUI.warn("dumped updated mask post only, use ctrl+alt for full dump, use shift+ctrl+alt for full dump as objects");
		}
		return dfr.reject().promise();
	}

	CUI.debug("sending mask schema. l10n_keys:", l10n_keys);

	var send_schema = function() {
		ez5.api.mask({
			api: "/"+ez5.admin.version,
			type: "POST",
			json_data: mask_schema,
			success: function() {
				var valid_prefixes = ez5.loca.get_valid_user_key_prefixes(ez5.admin.version);
				var delete_prefix;
				if (new_mask) {
					delete_prefix = "mask."+new_mask.table_id+"."+new_mask.name+".";
				}
				CUI.debug("save loca keys:", l10n_keys, valid_prefixes, delete_prefix);
				ez5.loca.update({
					realm: ez5.admin.version,
					valid_prefixes: valid_prefixes,
					delete_prefix: delete_prefix,
					keys: l10n_keys
				}).done(function() {
					ez5.schema.load_schema()
						.done(dfr.resolve)
						.fail(dfr.reject)
				});
			}
		}).fail(dfr.reject);
	}

	if (ez5.schema.CURRENT.version == ez5.schema.HEAD.version) {
		// if the schema HEAD version === CURRENT version we need to post the
		// schema to increment the HEAD version so that the schema is consistent
		// and comittable. post_schema increments the head version.

		// to not clean_schema which is linked to our tree,
		// we copy the schema to be send

		ez5.admin.post_schema(copyObject(ez5.schema.HEAD, true)).done(send_schema);
	} else {
		send_schema();
	}


	return dfr.promise();
}
// Generated by CoffeeScript 1.10.0
var DatamodelListView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DatamodelListView = (function(superClass) {
  extend(DatamodelListView, superClass);

  function DatamodelListView() {
    return DatamodelListView.__super__.constructor.apply(this, arguments);
  }

  DatamodelListView.prototype.check_deselect = function(ev) {
    if (ev) {
      return this.allow_deselect();
    } else {
      return CUI.resolvedPromise();
    }
  };

  DatamodelListView.prototype.allow_deselect = function() {
    if (this.hasChanges()) {
      return CUI.confirm({
        text: $$("main.editor.unsaved_changes")
      });
    } else {
      return CUI.resolvedPromise();
    }
  };

  DatamodelListView.prototype.hasChanges = function() {
    var e, error;
    if (ez5.admin.version === "CURRENT") {
      return false;
    }
    try {
      return this.saveData !== JSON.stringify(this.getSaveData());
    } catch (error) {
      e = error;
      if (e instanceof InvalidSaveDataException) {
        return false;
      }
      throw e;
    }
  };

  DatamodelListView.prototype.setStatus = function() {
    var ref, ref1;
    if (this.hasChanges() && ez5.admin.version === "HEAD" && this.datamodel.lock_status === 'open') {
      if ((ref = this.saveButton) != null) {
        ref.enable();
      }
    } else {
      if ((ref1 = this.saveButton) != null) {
        ref1.disable();
      }
    }
    return this;
  };

  DatamodelListView.prototype.select = function(ev) {
    var ret, set_status;
    ret = DatamodelListView.__super__.select.call(this, ev);
    this.showWaitBlock();
    if (ez5.admin.version === "CURRENT") {
      return ret;
    }
    set_status = (function(_this) {
      return function() {
        return _this.setStatus();
      };
    })(this);
    ret.done((function(_this) {
      return function() {
        Events.ignore({
          instance: _this
        });
        Events.listen({
          node: _this.datamodel.pane.center(),
          instance: _this,
          type: ["data-changed", "row_added", "row_removed", "row_moved"],
          call: function(ev) {
            return CUI.scheduleCallback({
              call: set_status,
              ms: 200
            });
          }
        });
        return CUI.setTimeout({
          call: function() {
            _this.setSaveData();
            _this.datamodel.setStatus();
            return _this.setStatus();
          }
        });
      };
    })(this));
    return ret;
  };

  DatamodelListView.prototype.deselect = function(ev) {
    this.hideWaitBlock();
    return DatamodelListView.__super__.deselect.call(this, ev).done((function(_this) {
      return function() {
        return _this.datamodel.empty();
      };
    })(this));
  };

  DatamodelListView.prototype.showWaitBlock = function() {
    if (this.__waitBlock) {
      return;
    }
    this.__waitBlock = new WaitBlock({
      element: this.datamodel.pane.center()
    }).show();
    return this;
  };

  DatamodelListView.prototype.hideWaitBlock = function() {
    var ref;
    if ((ref = this.__waitBlock) != null) {
      ref.destroy();
    }
    this.__waitBlock = null;
    return this;
  };

  DatamodelListView.prototype.getWaitModalTitleLocaKeyPrefix = function() {
    return "datamodel.list.view.wait.";
  };

  DatamodelListView.prototype.setSaveData = function() {
    return this.saveData = JSON.stringify(this.getSaveData());
  };

  DatamodelListView.prototype.getCancelButton = function() {
    if (ez5.admin.version === "CURRENT") {
      return;
    }
    return new LocaButton({
      loca_key: "datamodel.listview.cancel.button",
      onClick: (function(_this) {
        return function(ev) {
          return _this.check_deselect(ev).done(function() {
            return _this.deselect();
          });
        };
      })(this)
    });
  };

  return DatamodelListView;

})(ListViewTreeNode);
// Generated by CoffeeScript 1.10.0
var DatamodelListViewObjecttype,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DatamodelListViewObjecttype = (function(superClass) {
  extend(DatamodelListViewObjecttype, superClass);

  function DatamodelListViewObjecttype() {
    this.setObjecttype = bind(this.setObjecttype, this);
    return DatamodelListViewObjecttype.__super__.constructor.apply(this, arguments);
  }

  DatamodelListViewObjecttype.prototype.initOpts = function() {
    DatamodelListViewObjecttype.__super__.initOpts.call(this);
    return this.addOpts({
      objecttype: {
        check: "PlainObject"
      },
      datamodel: {
        mandatory: true,
        check: Datamodel
      },
      version: {
        check: ["CURRENT", "HEAD"]
      }
    });
  };

  DatamodelListViewObjecttype.prototype.readOpts = function() {
    DatamodelListViewObjecttype.__super__.readOpts.call(this);
    this.datamodel = this._datamodel;
    if (this._objecttype) {
      return this.setObjecttype(this._objecttype);
    }
  };

  DatamodelListViewObjecttype.prototype.setObjecttype = function(objecttype1) {
    var i, len, mask, ref;
    this.objecttype = objecttype1;
    this.children = [];
    ref = ez5.mask[this.opts.version]._masks_by_table_id[this.objecttype.table_id];
    for (i = 0, len = ref.length; i < len; i++) {
      mask = ref[i];
      this.children.push(new DatamodelListViewMask({
        mask: mask,
        datamodel: this.datamodel,
        objecttype: this,
        version: this.opts.version
      }));
    }
    return this.__tableInst = new Table(this.opts.version, this.objecttype);
  };

  DatamodelListViewObjecttype.prototype.getMenuItem = function() {
    if (!this.objecttype) {
      return {
        hidden: true
      };
    }
    return {
      value: this.objecttype,
      text: this.objecttype._name_localized,
      onClick: (function(_this) {
        return function() {
          var new_mask;
          new_mask = new DatamodelListViewMask({
            datamodel: _this.datamodel,
            objecttype: _this,
            version: ez5.admin.version
          });
          return _this.addNode(new_mask).done(function() {
            return new_mask.select();
          });
        };
      })(this)
    };
  };

  DatamodelListViewObjecttype.prototype.renderContent = function() {
    if (this.objecttype) {
      return [
        new Label({
          "class": "ez5-objecttype-name",
          text: this.__tableInst.nameLocalized()
        }), new Label({
          "class": "ez5-objecttype-display-types",
          text: this.__tableInst.getDisplayType(),
          size: "mini"
        })
      ];
    } else {
      return new EmptyLabel({
        text: $$("admin.easydb.objecttype.list.name.new")
      });
    }
  };

  DatamodelListViewObjecttype.prototype.select = function(ev) {
    return DatamodelListViewObjecttype.__super__.select.call(this, ev).done((function(_this) {
      return function() {
        var ref;
        _this.datamodelAdmin = ez5.admin.datamodel({
          table_id: (ref = _this.objecttype) != null ? ref.table_id : void 0
        });
        _this.tabs = new Tabs({
          "class": "ez5-data-model-list-view-objecttype-tabs",
          tabs: [
            {
              name: "general",
              text: $$("admin.objecttype.tab.general"),
              content: _this.datamodelAdmin.form
            }, {
              name: "datamodel",
              text: $$("admin.objecttype.tab.datamodel"),
              content: _this.datamodelAdmin.$columns_table.render()
            }
          ],
          footer_right: [_this.getCancelButton(), _this.getSaveButton()]
        });
        _this.datamodel.pane.replace(_this.tabs, "center");
        _this.datamodelAdmin.$columns_table.load_data(_this.datamodelAdmin.datamodel.rows);
        return _this.hideWaitBlock();
      };
    })(this)).fail((function(_this) {
      return function() {
        return _this.hideWaitBlock();
      };
    })(this));
  };

  DatamodelListViewObjecttype.prototype.getSaveButton = function() {
    if (ez5.admin.version === "CURRENT") {
      return;
    }
    return this.saveButton = new Button({
      disabled: true,
      onClick: (function(_this) {
        return function(ev) {
          ez5.splash.show('datamodel.list.view.wait.save_in_progress');
          return CUI.setTimeout({
            call: function() {
              return _this.save(ev).done(function() {
                return ez5.splash.done('datamodel.list.view.wait.saved');
              }).fail(function() {
                return ez5.splash.hide();
              });
            }
          });
        };
      })(this),
      text: $$("base.save")
    });
  };

  DatamodelListViewObjecttype.prototype["delete"] = function(ev) {
    var _table, i, len, ot_id, ot_ids, tns;
    if (!this.objecttype) {
      return this.remove();
    }
    ot_ids = ez5.admin.get_linked_table_ids(this.objecttype.table_id);
    if (ot_ids.length) {
      tns = [];
      for (i = 0, len = ot_ids.length; i < len; i++) {
        ot_id = ot_ids[i];
        _table = ez5.schema[ez5.admin.version]._table_by_id[ot_id];
        tns.push(_table._name_localized);
      }
      CUI.problem({
        text: $$("admin.objecttype.remove.error_other_tables", {
          tables: tns.join(", ")
        })
      });
      return;
    }
    return CUI.confirm({
      text: $$('admin.objecttype.remove.confirm'),
      button_text_ok: $$('base.delete'),
      button_text_cancel: $$('base.cancel'),
      button_primary: 'cancel'
    }).done((function(_this) {
      return function() {
        var j, len1, remove_table_ids, schema, table_id;
        ez5.splash.show('datamodel.list.view.wait.delete_objecttype_in_progress');
        remove_table_ids = ez5.admin.get_dependent_table_ids(_this.objecttype.table_id, [parseInt(_this.objecttype.table_id)]);
        schema = copyObject(ez5.schema.HEAD, true);
        for (j = 0, len1 = remove_table_ids.length; j < len1; j++) {
          table_id = remove_table_ids[j];
          removeFromArray(table_id, schema.tables, function(v) {
            return v.table_id === table_id;
          });
        }
        return ez5.admin.post_schema(schema).done(function() {
          _this.datamodel.setStatus();
          _this.remove();
          return ez5.splash.done('datamodel.list.view.wait.objecttype_deleted');
        }).fail(function() {
          return ez5.splash.hide();
        });
      };
    })(this));
  };

  DatamodelListViewObjecttype.prototype.getSaveData = function() {
    return this.datamodelAdmin.save_schema({
      return_data: true
    });
  };

  DatamodelListViewObjecttype.prototype.save = function(ev) {
    var dfr;
    this.saveButton.disable();
    dfr = new CUI.Deferred();
    dfr.done((function(_this) {
      return function() {
        return _this.setSaveData();
      };
    })(this));
    this.datamodelAdmin.save_schema({
      event: ev
    }).fail((function(_this) {
      return function() {
        return _this.saveFailed(dfr);
      };
    })(this)).done((function(_this) {
      return function() {
        var app_count, appendix, mask_name, ot, preferred_mask;
        ot = ez5.schema.HEAD._table_by_name[_this.datamodelAdmin.datamodel.datamodel_data.name];
        if (ez5.mask.HEAD._masks_by_table_id[ot.table_id].length) {
          _this.datamodel.copyToStore().always(function() {
            _this.saveDone(ot);
            return dfr.resolve();
          });
          return;
        }
        preferred_mask = ez5.all_fields_mask_preferred.HEAD._masks_by_table_id[ot.table_id][0];
        mask_name = _this.datamodelAdmin.datamodel.datamodel_data.name + "__all_fields";
        appendix = "";
        app_count = 0;
        while (true) {
          if (!ez5.mask.HEAD._mask_by_name[mask_name + appendix]) {
            mask_name = mask_name + appendix;
            break;
          }
          appendix = "_" + (++app_count);
        }
        preferred_mask.name = mask_name;
        preferred_mask.is_preferred = true;
        CUI.debug("adding default mask", dump(preferred_mask));
        return (new MaskEditor({
          schema: preferred_mask
        })).save(ev).done(function() {
          return _this.datamodel.copyToStore().always(function() {
            _this.saveDone(ot);
            return dfr.resolve();
          });
        }).fail(function() {
          return _this.saveFailed(dfr);
        });
      };
    })(this));
    return dfr.promise();
  };

  DatamodelListViewObjecttype.prototype.saveFailed = function(dfr) {
    this.saveButton.enable();
    return dfr.reject();
  };

  DatamodelListViewObjecttype.prototype.saveDone = function(objecttype) {
    this.datamodel.setStatus();
    this.removeFromDOM(false);
    this.setObjecttype(objecttype);
    this.update();
    if (this.children.length && this.do_open) {
      this.open();
    }
    return ListViewTreeNode.prototype.deselect.call(this).done((function(_this) {
      return function() {
        return _this.select();
      };
    })(this));
  };

  return DatamodelListViewObjecttype;

})(DatamodelListView);
// Generated by CoffeeScript 1.10.0
var DatamodelListViewMask,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DatamodelListViewMask = (function(superClass) {
  extend(DatamodelListViewMask, superClass);

  function DatamodelListViewMask() {
    return DatamodelListViewMask.__super__.constructor.apply(this, arguments);
  }

  DatamodelListViewMask.prototype.readOpts = function() {
    DatamodelListViewMask.__super__.readOpts.call(this);
    this.datamodel = this._datamodel;
    this.objecttype = this._objecttype;
    this.table_id = this.objecttype.objecttype.table_id;
    if (this._mask) {
      return this.setMask(this._mask);
    } else {
      return this.setMask(ez5.all_fields_mask_preferred.HEAD._masks_by_table_id[this.table_id][0]);
    }
  };

  DatamodelListViewMask.prototype.initOpts = function() {
    DatamodelListViewMask.__super__.initOpts.call(this);
    return this.addOpts({
      datamodel: {
        mandatory: true,
        check: Datamodel
      },
      objecttype: {
        mandatory: true,
        check: function(v) {
          return v instanceof DatamodelListViewObjecttype && isInteger(v.objecttype.table_id);
        }
      },
      mask: {
        check: "PlainObject"
      },
      version: {
        mandatory: true,
        check: ["CURRENT", "HEAD"]
      }
    });
  };

  DatamodelListViewMask.prototype.setMask = function(mask) {
    this.mask = mask;
  };

  DatamodelListViewMask.prototype.setStatus = function() {
    var ref, ref1;
    DatamodelListViewMask.__super__.setStatus.call(this);
    if (this.hasChanges() || !this.mask.mask_id) {
      return (ref = this.copyButton) != null ? ref.disable() : void 0;
    } else {
      return (ref1 = this.copyButton) != null ? ref1.enable() : void 0;
    }
  };

  DatamodelListViewMask.prototype.renderContent = function() {
    if (this.mask.mask_id) {
      return new Label({
        text: this.mask._name_localized
      });
    } else {
      return new EmptyLabel({
        text: $$("admin.mask.list.name.new.placeholder")
      });
    }
  };

  DatamodelListViewMask.prototype["delete"] = function(ev) {
    if (this.mask.mask_id) {
      return this.maskEditor["delete"](ev).progress((function(_this) {
        return function() {
          _this.deselect();
          return ez5.splash.show('datamodel.list.view.wait.delete_mask_in_progress');
        };
      })(this)).done((function(_this) {
        return function() {
          _this.datamodel.setStatus();
          _this.remove(true);
          return ez5.splash.done('datamodel.list.view.wait.mask_deleted');
        };
      })(this)).fail((function(_this) {
        return function() {
          return ez5.splash.hide();
        };
      })(this));
    } else {
      ez5.splash.show('datamodel.list.view.wait.delete_mask_in_progress');
      this.remove(true);
      return ez5.splash.done('datamodel.list.view.wait.mask_deleted');
    }
  };

  DatamodelListViewMask.prototype.getSaveData = function() {
    return this.maskEditor.getSaveData();
  };

  DatamodelListViewMask.prototype.select = function(ev) {
    if (this.mask.mask_id) {
      this.setMask(ez5.mask[this._version]._mask_by_id[this.mask.mask_id]);
    }
    return DatamodelListViewMask.__super__.select.call(this, ev).done((function(_this) {
      return function() {
        _this.maskEditor = new MaskEditor({
          schema: _this.mask
        });
        return _this.show();
      };
    })(this)).fail((function(_this) {
      return function() {
        return _this.hideWaitBlock();
      };
    })(this));
  };

  DatamodelListViewMask.prototype.show = function() {
    var tabs;
    tabs = this.maskEditor.getTabs();
    tabs.setFooterRight(new Buttonbar({
      buttons: [
        ez5.session.isDebug() ? {
          "class": "btn-info",
          text: "Dump Mask Fields",
          onClick: (function(_this) {
            return function() {
              return _this.maskEditor.dump_mask_fields();
            };
          })(this)
        } : void 0, this.getCancelButton(), this.getCopyButton(), this.getSaveButton()
      ]
    }));
    this.maskEditor.show();
    this.datamodel.pane.replace(tabs, "center");
    this.datamodel.setStatus();
    this.setStatus();
    this.maskEditor.loadFields();
    return this.hideWaitBlock();
  };

  DatamodelListViewMask.prototype.getCopyButton = function() {
    if (this._version === "CURRENT") {
      return;
    }
    this.copyButton = new LocaButton({
      loca_key: "datamodel.list.view.mask.button.copy",
      disabled: true,
      onClick: (function(_this) {
        return function(ev) {
          var new_mask, new_mask_schema, new_schema;
          new_mask_schema = {
            masks: []
          };
          new_schema = copyObject(_this.maskEditor.getMask().getSchema(), true);
          new_schema.mask_id = null;
          new_schema.is_preferred = false;
          new_mask_schema.masks.push(new_schema);
          ez5.schema.enrich_mask_schema(new_mask_schema, ez5.admin.version);
          new_mask = new DatamodelListViewMask({
            datamodel: _this.datamodel,
            mask: new_schema,
            objecttype: _this.getFather(),
            version: ez5.admin.version
          });
          if (ev.hasModifierKey()) {
            return;
          }
          return _this.appendSibling(new_mask).done(function() {
            new_mask.select();
            return CUI.setTimeout({
              call: function() {
                return new_mask.maskEditor.getNameField().setValue(new_schema.name + "__copy", {
                  no_trigger: false
                });
              }
            });
          });
        };
      })(this)
    });
    return this.copyButton;
  };

  DatamodelListViewMask.prototype.getSaveButton = function() {
    if (this._version === "CURRENT") {
      return;
    }
    return this.saveButton = new Button({
      disabled: true,
      onClick: (function(_this) {
        return function(ev) {
          _this.saveButton.disable();
          ez5.splash.show('datamodel.list.view.wait.save_in_progress');
          return CUI.setTimeout({
            ms: 0,
            call: function() {
              return _this.maskEditor.save(ev).done(function() {
                return _this.datamodel.copyToStore().always(function() {
                  _this.setSaveData();
                  _this.setMask(_this.maskEditor.getMask().getSchema());
                  _this.showWaitBlock();
                  return CUI.setTimeout({
                    call: function() {
                      _this.update();
                      _this.show();
                      return ez5.splash.done('datamodel.list.view.wait.saved');
                    }
                  });
                });
              }).fail(function() {
                _this.saveButton.enable();
                return ez5.splash.hide();
              });
            }
          });
        };
      })(this),
      text: $$("base.save")
    });
  };

  return DatamodelListViewMask;

})(DatamodelListView);
// Generated by CoffeeScript 1.10.0
var Datamodel,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Datamodel = (function(superClass) {
  extend(Datamodel, superClass);

  function Datamodel() {
    return Datamodel.__super__.constructor.apply(this, arguments);
  }

  Datamodel.label = function() {
    return "admin.menu.datamodel_masks";
  };

  Datamodel.group = function() {
    return "administration";
  };

  Datamodel.submenu = function() {
    return "administration";
  };

  Datamodel.path = function() {
    return ["datamodel"];
  };

  Datamodel.is_allowed = function() {
    if (this.getLevel()) {
      return true;
    } else {
      return false;
    }
  };

  Datamodel.getLevel = function() {
    var level, levels, max_level, ref, ref1;
    levels = ["current", "development", "commit"];
    max_level = (ref = ez5.session.getClientDefault("database")) != null ? ref.level : void 0;
    if (max_level && indexOf.call(levels, max_level) < 0) {
      CUI.error("Datamodel.getLevel: Unknown level in .yml config default_client.database: ", max_level, ". Supported levels are: ", levels);
      max_level = null;
    }
    if (ez5.session.getSystemRight("root")) {
      level = "commit";
    } else {
      level = (ref1 = ez5.session.getSystemRight("datamodel")) != null ? ref1.level : void 0;
    }
    if (max_level && idxInArray(max_level, levels) < idxInArray(level, levels)) {
      level = max_level;
    }
    return level;
  };

  Datamodel.prototype.readOpts = function() {
    Datamodel.__super__.readOpts.call(this);
    return this.__level = Datamodel.getLevel();
  };

  Datamodel.prototype.unload = function() {
    var ref;
    if ((ref = this.tree) != null) {
      ref.destroy();
    }
    this.tree = null;
    this.pane.destroy();
    Events.ignore({
      instance: this
    });
    return Datamodel.__super__.unload.call(this);
  };

  Datamodel.prototype.allow_unload = function() {
    var promise, ref;
    promise = (ref = this.tree.getSelectedNode()) != null ? typeof ref.allow_deselect === "function" ? ref.allow_deselect() : void 0 : void 0;
    if (promise) {
      return promise;
    }
    return CUI.resolvedPromise();
  };

  Datamodel.prototype.empty = function() {
    this.setStatus();
    return this.pane.replace(new EmptyLabel({
      centered: true,
      text: $$("admin.datamodel.no_objecttype_or_mask.hint")
    }), "center");
  };

  Datamodel.prototype.getLockButton = function() {
    var inst, lock_id, ref, uid;
    this.__lock_config = ez5.session.getClientDefault('datamodel');
    uid = (ref = this.__lock_config) != null ? ref.uid : void 0;
    if (!uid) {
      this.lock_status = 'open';
      return;
    }
    inst = ez5.session.getInstance().name;
    lock_id = this.__lock_config.server + '/' + inst + '/' + this.__lock_config.uid;
    this.__lock_btn = new Button({
      disabled: true,
      left: true,
      tooltip: {
        text: lock_id
      },
      activate_initial: false,
      onClick: (function(_this) {
        return function() {
          switch (_this.lock_status) {
            case 'unknown':
              return _this.checkLockStatus();
            case 'available':
              _this.__lock_btn.startSpinner();
              return _this.acquireLock(uid).always(function() {
                return _this.checkSchemaStatus().done(function() {
                  _this.loadList();
                  _this.__lock_btn.stopSpinner();
                  return _this.checkLockStatus();
                }).fail(function() {
                  return _this.releaseLock(uid).always(function() {
                    return _this.__lock_btn.stopSpinner();
                  });
                });
              });
            case 'open':
              _this.__lock_btn.startSpinner();
              return _this.releaseLock(uid).always(function() {
                _this.__lock_btn.stopSpinner();
                return _this.checkLockStatus();
              });
          }
        };
      })(this)
    });
    this.checkLockStatus().always((function(_this) {
      return function() {
        return _this.setLockIcon();
      };
    })(this));
    return this.__lock_btn;
  };

  Datamodel.prototype.setLockIcon = function() {
    var icon;
    icon = (function() {
      switch (this.lock_status) {
        case 'unknown':
          return 'question';
        case 'available':
          return 'fa-lock';
        case 'taken':
          return 'fa-lock';
        case 'open':
          return 'fa-unlock-alt';
      }
    }).call(this);
    if (this.lock_status === 'taken') {
      this.__lock_btn.disable();
    } else {
      this.__lock_btn.enable();
    }
    return this.__lock_btn.setIcon(icon);
  };

  Datamodel.prototype.checkLockStatus = function() {
    this.__lock_btn.startSpinner();
    return this.lockStatus(this.__lock_config.uid).done((function(_this) {
      return function(data) {
        _this.lock_status = data.status;
        return console.debug("lock status:", _this.lock_status);
      };
    })(this)).fail((function(_this) {
      return function() {
        _this.lock_status = 'unknown';
        return CUI.problem({
          text: "Error connecting to lock server."
        });
      };
    })(this)).always((function(_this) {
      return function() {
        _this.__lock_btn.stopSpinner();
        _this.setLockIcon();
        return _this.setStatus();
      };
    })(this));
  };

  Datamodel.prototype.ask_unload = function() {
    var node;
    if (node = this.tree.getSelectedNode()) {
      return node.check_deselect();
    } else {
      return CUI.resolvedPromise();
    }
  };

  Datamodel.prototype.getDatamodelMenuItems = function() {
    var i, items, len, node, ref;
    items = [
      {
        value: "",
        text: $$("datamodel.create_new_objecttype"),
        onClick: (function(_this) {
          return function() {
            return _this.ask_unload().done(function() {
              var node;
              node = new DatamodelListViewObjecttype({
                datamodel: _this,
                version: ez5.admin.version
              });
              return _this.tree.addNode(node).done(function() {
                return node.select();
              });
            });
          };
        })(this)
      }, {
        divider: true
      }, {
        disabled: true,
        text: $$("datamodel.plus_button.new_mask")
      }
    ];
    ref = this.tree.root.children;
    for (i = 0, len = ref.length; i < len; i++) {
      node = ref[i];
      items.push(node.getMenuItem());
    }
    return items;
  };

  Datamodel.prototype.load = function() {
    var adminVersionButton, params, ref, ref1, ref2, svg_download_button, url;
    Datamodel.__super__.load.call(this);
    if ((ref = this.__level) === "commit" || ref === "development") {
      ez5.admin.version = "HEAD";
    }
    this.currentVersionButton = new Button({
      radio: "version",
      group: "version",
      tooltip: {
        text: "version:" + ez5.schema.CURRENT.version + " based on:" + ez5.schema.CURRENT.based_on_version
      },
      text: $$("admin.version.current"),
      active: ez5.admin.version === "CURRENT",
      onClick: (function(_this) {
        return function() {
          return _this.ask_unload().done(function() {
            ez5.admin.version = "CURRENT";
            return _this.loadList();
          });
        };
      })(this)
    });
    if ((ref1 = this.__level) === "commit" || ref1 === "development") {
      adminVersionButton = new Button({
        radio: "version",
        group: "version",
        tooltip: {
          text: "version:" + ez5.schema.HEAD.version + " based on:" + ez5.schema.HEAD.based_on_version
        },
        text: $$("admin.version.head"),
        active: ez5.admin.version === "HEAD",
        onClick: (function(_this) {
          return function() {
            return _this.ask_unload().done(function() {
              ez5.admin.version = "HEAD";
              return _this.loadList();
            });
          };
        })(this)
      });
    }
    if ((ref2 = this.__level) === "commit") {
      this.commitButton = new LocaButton({
        loca_key: "datamodel.button.commit",
        hidden: true,
        onClick: (function(_this) {
          return function() {
            return _this.commitConfirm();
          };
        })(this)
      });
    }
    params = CUI.encodeUrlData({
      format: "svg",
      token: ez5.session.token
    });
    url = ez5.api.getFullBase() + "/schema/user/" + ez5.admin.version + "?" + params;
    svg_download_button = new LocaButtonHref({
      loca_key: "datamodel.button.svg_download",
      download: true,
      href: url
    });
    this.tree = new ListViewTree({
      cols: ["maximize"],
      selectableRows: true,
      header_center: [this.currentVersionButton, adminVersionButton],
      footer_left: [
        this.plusButton = new LocaButton({
          loca_key: "datamodel.list.button.plus",
          icon: "plus",
          group: "plus-minus",
          "class": "btn-mini plus-button",
          menu: {
            items: (function(_this) {
              return function() {
                return _this.getDatamodelMenuItems();
              };
            })(this)
          }
        }), this.minusButton = new LocaButton({
          loca_key: "datamodel.list.button.minus",
          icon: "minus",
          group: "plus-minus",
          "class": "btn-mini minus-button",
          onClick: (function(_this) {
            return function(ev) {
              return _this.tree.getSelectedNode()["delete"](ev);
            };
          })(this)
        })
      ],
      footer_right: [
        this.getLockButton(), new LocaButton({
          loca_key: "datamodel.button.extra",
          menu: {
            items: [this.commitButton, svg_download_button]
          }
        })
      ]
    });
    if (ez5.schema.CURRENT.version === 0) {
      CUI.alert({
        title: $$("admin.objecttype.message.no_current.title"),
        text: $$("admin.objecttype.message.no_current")
      });
    }
    this.pane = new BorderLayout({
      "class": "ez5-event-poller",
      absolute: true,
      center: {
        "class": "ez5-datamodel-border-layout-center"
      },
      west: {
        flexHandle: {
          state_name: "admin-manager-left"
        },
        content: (function(_this) {
          return function() {
            var dom;
            dom = _this.tree.render(false);
            _this.tree.root.open();
            return dom;
          };
        })(this)
      }
    });
    ez5.rootLayout.replace(this.pane, "center");
    return this.loadList();
  };

  Datamodel.prototype.setStatus = function() {
    var ref, ref1, ref2, ref3, ref4, ref5;
    if (ez5.schema.CURRENT.version === 0) {
      this.currentVersionButton.disable();
    } else {
      this.currentVersionButton.enable();
    }
    if (ez5.admin.version === "HEAD") {
      this.plusButton.show();
      this.minusButton.show();
      if ((ref = this.commitButton) != null) {
        ref.show();
      }
      if (this.lock_status !== 'open') {
        this.plusButton.disable();
        this.minusButton.disable();
        return (ref1 = this.commitButton) != null ? ref1.disable() : void 0;
      } else {
        this.plusButton.enable();
        if (this.commitButton) {
          if (ez5.schema.CURRENT.version === ez5.schema.HEAD.version || ((ref2 = this.__level) !== "commit")) {
            this.commitButton.disable();
          } else {
            this.commitButton.enable();
          }
        }
        if (!this.tree.getSelectedNode()) {
          this.minusButton.disable();
          return (ref3 = this.__lock_btn) != null ? ref3.enable() : void 0;
        } else {
          this.minusButton.enable();
          return (ref4 = this.__lock_btn) != null ? ref4.disable() : void 0;
        }
      }
    } else {
      this.minusButton.hide();
      this.plusButton.hide();
      return (ref5 = this.commitButton) != null ? ref5.hide() : void 0;
    }
  };

  Datamodel.prototype.commitConfirm = function() {
    return this.ask_unload().done((function(_this) {
      return function() {
        return CUI.confirm({
          title: $$("admin.easydb.objecttype.commit.modal.title"),
          text: $$("admin.easydb.objecttype.commit.modal.text"),
          button_text_ok: $$("admin.easydb.objecttype.commit.button")
        }).done(function() {
          var ref, spinner;
          if ((ref = _this.commitButton) != null) {
            ref.disable();
          }
          spinner = CUI.spinner({
            text: $$('admin.easydb.objecttype.commit.committing')
          });
          return ez5.api.schema({
            type: 'POST',
            api: '/commit'
          }).always(function() {
            return spinner.destroy();
          }).done(function(data, status, jqXHR) {
            return _this.saveFile('versions.json', {
              head: ez5.schema.HEAD.version,
              current: ez5.schema.HEAD.version
            }).always(function() {
              return ez5.session.handleSchemaUpdate();
            });
          }).fail(function() {
            return _this.setStatus();
          });
        });
      };
    })(this));
  };

  Datamodel.prototype.loadList = function() {
    var i, len, node, ot, ref, ref1;
    this.tree.removeAllRows();
    if ((ref = this.tree.getSelectedNode()) != null) {
      ref.deselect();
    }
    this.tree.root.children = [];
    ref1 = ez5.schema[ez5.admin.version]._objecttypes;
    for (i = 0, len = ref1.length; i < len; i++) {
      ot = ref1[i];
      node = new DatamodelListViewObjecttype({
        objecttype: ot,
        datamodel: this,
        version: ez5.admin.version
      });
      this.tree.root.children.push(node);
    }
    this.empty();
    return this.tree.root.update(true);
  };

  Datamodel.prototype.lockStatus = function() {
    var connect, inst;
    inst = ez5.session.getInstance().name;
    connect = new CUI.XHR({
      url: this.__lock_config.server + '/status/' + inst + '/' + this.__lock_config.uid
    });
    return connect.start();
  };

  Datamodel.prototype.acquireLock = function() {
    var connect, inst;
    inst = ez5.session.getInstance().name;
    connect = new CUI.XHR({
      url: this.__lock_config.server + '/acquire/' + inst + '/' + this.__lock_config.uid
    });
    return connect.start();
  };

  Datamodel.prototype.releaseLock = function() {
    var connect, inst;
    inst = ez5.session.getInstance().name;
    connect = new CUI.XHR({
      url: this.__lock_config.server + '/release/' + inst + '/' + this.__lock_config.uid
    });
    return connect.start();
  };

  Datamodel.prototype.checkSchemaStatus = function() {
    var commit_version, current_version, datamodels, dfr, go_reload, head_version, load_model, load_models, load_versions, schema, send_to_server, set_spinner_text, spinner, update_models, version, versions;
    current_version = ez5.schema.CURRENT.version;
    head_version = ez5.schema.HEAD.version;
    console.debug("CURRENT schema version:", current_version);
    console.debug("HEAD schema version:", head_version);
    spinner = null;
    schema = new Schema();
    versions = null;
    version = null;
    datamodels = {};
    dfr = new CUI.Deferred();
    load_versions = (function(_this) {
      return function() {
        return _this.loadFile('versions.json', [404]).fail(function(data, status) {
          if (status === 404) {
            return dfr.resolve();
          } else {
            return dfr.reject();
          }
        }).done(function(_versions) {
          versions = _versions;
          versions.local_current = current_version;
          versions.local_head = head_version;
          return load_models();
        });
      };
    })(this);
    load_model = (function(_this) {
      return function(version) {
        console.debug("getting version:", version);
        return _this.loadFile('datamodel-' + version + '.json').done(function(datamodel) {
          return datamodels[datamodel.schema.HEAD.version] = datamodel;
        });
      };
    })(this);
    set_spinner_text = (function(_this) {
      return function(loca_key, loca_key_attrs) {
        var txt;
        txt = $$(loca_key, loca_key_attrs);
        if (!spinner) {
          spinner = CUI.spinner({
            text: txt
          });
        } else {
          spinner.setText(txt);
        }
      };
    })(this);
    commit_version = (function(_this) {
      return function(version) {
        set_spinner_text('datamodel.check_schema_status.spinner.commit', {
          version: version
        });
        return ez5.api.schema({
          type: 'POST',
          api: '/commit'
        }).fail(function() {
          return CUI.problem({
            text: $$('datamodel.check_schema_status.problem.commit')
          });
        });
      };
    })(this);
    send_to_server = (function(_this) {
      return function(datamodel) {
        set_spinner_text('datamodel.check_schema_status.spinner.send', {
          version: datamodel.schema.HEAD.version
        });
        return schema.sendToServer(datamodel);
      };
    })(this);
    go_reload = (function(_this) {
      return function() {
        spinner.destroy();
        return ez5.session.handleSchemaUpdate();
      };
    })(this);
    load_models = (function(_this) {
      return function() {
        var load_next_model;
        load_next_model = function() {
          return load_model(version).done(function() {
            if (version < versions.head) {
              version = version + 1;
              return load_next_model();
            } else {
              return update_models();
            }
          });
        };
        version = head_version;
        return load_next_model();
      };
    })(this);
    update_models = (function(_this) {
      return function() {
        var process_next_version;
        if (current_version === versions.current) {
          CUI.confirm({
            text: $$('datamodel.check_schema_status.confirm.reload_version', versions)
          }).fail(dfr.reject).done(function() {
            return send_to_server(datamodels[versions.head]).done(dfr.resolve).fail(dfr.reject);
          });
          return;
        }
        version = head_version;
        process_next_version = function() {
          console.debug("processing version:", version);
          return send_to_server(datamodels[version]).done(function() {
            if (version <= versions.current) {
              return commit_version(version).fail(dfr.reject).done(function() {
                if (version < versions.head) {
                  version = version + 1;
                  return process_next_version();
                } else {
                  return go_reload();
                }
              });
            } else {
              return go_reload();
            }
          });
        };
        CUI.confirm({
          text: $$('datamodel.check_schema_status.confirm.newer_version', versions)
        }).done(process_next_version).fail(dfr.reject);
      };
    })(this);
    dfr.always((function(_this) {
      return function() {
        return spinner != null ? spinner.destroy() : void 0;
      };
    })(this));
    if (!ez5.eventPoller.isStopped()) {
      ez5.eventPoller.stop();
      dfr.always((function(_this) {
        return function() {
          return ez5.eventPoller.stop();
        };
      })(this));
    }
    load_versions();
    return dfr.promise();
  };

  Datamodel.prototype.loadFile = function(filename, no_problem_status) {
    var dfr, inst;
    if (no_problem_status == null) {
      no_problem_status = [];
    }
    if (!this.__lock_btn) {
      return CUI.rejectedPromise();
    }
    dfr = new CUI.Deferred();
    inst = ez5.session.getInstance().name;
    return new CUI.XHR({
      url: this.__lock_config.server + '/file/' + inst + '/' + this.__lock_config.uid + '/' + filename
    }).start().fail((function(_this) {
      return function(data, status) {
        if (indexOf.call(no_problem_status, status) >= 0) {
          return dfr.reject(data, status);
        } else {
          return CUI.problem({
            text: $$('datamodel.check_schema_status.problem.load_file', {
              filename: filename
            })
          }).done(dfr.reject);
        }
      };
    })(this)).done(dfr.resolve);
  };

  Datamodel.prototype.saveFile = function(filename, json_data) {
    var dfr, inst;
    if (!this.__lock_btn) {
      return CUI.resolvedPromise();
    }
    dfr = new CUI.Deferred();
    inst = ez5.session.getInstance().name;
    return new CUI.XHR({
      method: 'POST',
      url: this.__lock_config.server + '/file/' + inst + '/' + this.__lock_config.uid + '/' + filename,
      json_data: json_data
    }).start().fail((function(_this) {
      return function() {
        return CUI.problem({
          text: $$('datamodel.check_schema_status.problem.save_file', {
            filename: filename
          })
        }).done(dfr.reject);
      };
    })(this)).done(dfr.resolve);
  };

  Datamodel.prototype.copyToStore = function() {
    var dfr;
    if (!this.__lock_btn) {
      return CUI.resolvedPromise();
    }
    dfr = new CUI.Deferred();
    new Schema().getForStore().fail(dfr.reject).done((function(_this) {
      return function(store) {
        var head_version;
        head_version = store.schema.HEAD.version;
        return _this.saveFile('datamodel-' + head_version + '.json', store).fail(dfr.reject).done(function() {
          return _this.saveFile('versions.json', {
            head: head_version,
            current: ez5.schema.CURRENT.version
          }).done(dfr.resolve).fail(dfr.reject);
        });
      };
    })(this));
    return dfr.promise();
  };

  return Datamodel;

})(RootMenuApp);

ez5.session_ready(function() {
  return ez5.rootMenu.registerApp(Datamodel);
});
// Generated by CoffeeScript 1.10.0
var MaskEditor,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

MaskEditor = (function(superClass) {
  extend(MaskEditor, superClass);

  function MaskEditor() {
    this.dump_mask_fields = bind(this.dump_mask_fields, this);
    this.save = bind(this.save, this);
    this["delete"] = bind(this["delete"], this);
    return MaskEditor.__super__.constructor.apply(this, arguments);
  }

  MaskEditor.prototype.initOpts = function() {
    MaskEditor.__super__.initOpts.call(this);
    return this.addOpts({
      schema: {
        mandatory: true,
        check: "PlainObject"
      }
    });
  };

  MaskEditor.prototype.readOpts = function() {
    var design, i, len, ref, ref1, separator, text;
    MaskEditor.__super__.readOpts.call(this);
    this.current_mask = new MaskSchema({
      schema: this._schema,
      maskEditor: this
    });
    this.__separator_options = [];
    ref = ResultObject.charTextMap;
    for (separator in ref) {
      text = ref[separator];
      this.__separator_options.push({
        text: $$("admin.mask.col.format.separator." + separator),
        value: separator
      });
    }
    this.__design_options = [];
    ref1 = ["normal", "bold", "thin"];
    for (i = 0, len = ref1.length; i < len; i++) {
      design = ref1[i];
      this.__design_options.push({
        text: $$("admin.mask.col.format.design." + design),
        value: design
      });
    }
    return this.__custom_type_support = new CustomDataTypeDatamodelSupport();
  };

  MaskEditor.prototype.getMask = function() {
    return this.current_mask;
  };

  MaskEditor.prototype.ensureCurrentMask = function() {
    return assert(this.current_mask instanceof MaskSchema, "MaskEditor.render", "mask needs to be instance of MaskSchema but is " + (getObjectClass(this.current_mask)), {
      mask: this.current_mask
    });
  };

  MaskEditor.prototype["delete"] = function(ev) {
    var dfr;
    dfr = new CUI.Deferred();
    CUI.confirm({
      text: $$("admin.mask.remove.confirm"),
      button_primary: "cancel"
    }).done((function(_this) {
      return function() {
        dfr.notify();
        return _this.save(ev, true).done(dfr.resolve).fail(dfr.reject);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  MaskEditor.prototype.getSaveData = function() {
    if (!this.current_mask) {
      return null;
    }
    return ez5.admin.save_masks({
      mask: this.current_mask,
      return_data: true,
      "delete": false
    });
  };

  MaskEditor.prototype.getDemoResultObject = function() {
    var i, idx, k, len, m, mask, promises, ref, ref1, ro, sd, v;
    ez5.schema.clean_mask_schema(ez5.mask[ez5.admin.version]);
    ez5.schema.clean_schema(ez5.schema[ez5.admin.version]);
    ez5.mask.TEMP = copyObject(ez5.mask[ez5.admin.version], true);
    ez5.schema.TEMP = copyObject(ez5.schema[ez5.admin.version], true);
    ez5.schema.enrich_schema(ez5.schema.TEMP, "TEMP");
    ez5.schema.enrich_schema(ez5.schema[ez5.admin.version], ez5.admin.version);
    ez5.schema.enrich_mask_schema(ez5.mask[ez5.admin.version], ez5.admin.version);
    ez5.loca.user_keys.TEMP = copyObject(ez5.loca.user_keys[ez5.admin.version], true);
    if (ez5.admin.version === 'HEAD') {
      sd = this.getSaveData();
      if (sd.new_mask.mask_id) {
        ref = ez5.mask.TEMP.masks;
        for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
          m = ref[idx];
          if (m.mask_id === sd.new_mask.mask_id) {
            ez5.mask.TEMP.masks[idx] = sd.new_mask;
            break;
          }
        }
      } else {
        ez5.mask.TEMP.masks.push(sd.new_mask);
      }
      ref1 = sd.l10n_keys;
      for (k in ref1) {
        v = ref1[k];
        ez5.loca.user_keys.TEMP[k] = v;
      }
    } else {
      sd = {
        new_mask: this.current_mask.getSchema()
      };
    }
    ez5.schema.enrich_mask_schema(ez5.mask.TEMP, "TEMP");
    ez5._schema_inst.initMaskInstances("TEMP");
    ez5._schema_inst.initPreferredMask("TEMP");
    mask = new Mask("TEMP", null, sd.new_mask);
    promises = [];
    ro = new ResultObjectDemo({
      mask: mask,
      version: "TEMP",
      format: "long",
      opts: {
        promises: promises
      }
    });
    console.debug("TEMP schema", mask, mask.nameLocalized(), ro, ez5.mask.TEMP, sd);
    return ro;
  };

  MaskEditor.prototype.save = function(ev, del) {
    var promise;
    if (del == null) {
      del = false;
    }
    this.ensureCurrentMask();
    promise = ez5.admin.save_masks({
      mask: this.current_mask,
      "delete": del,
      event: ev
    });
    promise.done((function(_this) {
      return function() {
        if (del) {
          return _this.current_mask = null;
        } else {
          return _this.current_mask = new MaskSchema({
            schema: ez5.mask.HEAD._mask_by_name[_this.current_mask.getData().name],
            maskEditor: _this
          });
        }
      };
    })(this));
    return promise;
  };

  MaskEditor.prototype.getNameField = function() {
    return this.__nameField;
  };

  MaskEditor.prototype.dm_form_opts = function() {
    var board, columns, get_enum, i, inline_opts, inline_sel, j, k, len, len1, mask, mask_opts, mask_sel, opts, ref, ref1, tb;
    get_enum = function(name, _enum) {
      var e, i, len, opts;
      opts = [];
      for (i = 0, len = _enum.length; i < len; i++) {
        e = _enum[i];
        opts.push({
          text: $$("admin.mask.form.board." + name + "." + e),
          value: e
        });
      }
      return new Select({
        name: name,
        options: opts
      });
    };
    opts = {
      fields: [
        {
          type: Input,
          form: {
            label: $$("admin.mask.form.name")
          },
          name: "name",
          onConstruct: (function(_this) {
            return function(__nameField) {
              _this.__nameField = __nameField;
            };
          })(this),
          onDataChanged: (function(_this) {
            return function(data) {
              return _this.current_mask.setName(data.name);
            };
          })(this)
        }, {
          type: MultiInput,
          control: ez5.loca.getLanguageControlAdmin(),
          form: {
            label: $$("admin.mask.form.displayname_l10n")
          },
          name: "displayname_l10n"
        }, {
          type: Input,
          textarea: true,
          name: "comment",
          form: {
            label: $$("admin.mask.form.comment")
          }
        }, {
          type: Checkbox,
          form: {
            label: $$("admin.mask.form.is_preferred")
          },
          name: "is_preferred"
        }, {
          type: Select,
          form: {
            label: $$("admin.mask.form.require_comment")
          },
          name: "require_comment",
          options: (function() {
            var i, len, ref, results;
            ref = ["never", "default-disabled", "default-enabled", "always"];
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              k = ref[i];
              results.push({
                value: k,
                text: $$("admin.mask.form.require_comment." + k)
              });
            }
            return results;
          })()
        }
      ]
    };
    tb = this.current_mask.getTable();
    board = $table("ez5-admin-mask-form-board-table");
    columns = [
      "", new LocaLabel({
        loca_key: "admin.mask.form.board.header.edit"
      }).DOM, new LocaLabel({
        loca_key: "admin.mask.form.board.header.output"
      }).DOM
    ];
    if (tb.is_hierarchical) {
      columns.push.apply(columns, [
        new LocaLabel({
          loca_key: "admin.mask.form.board.header.mask"
        }).DOM, new LocaLabel({
          loca_key: "admin.mask.col.inline"
        }).DOM
      ]);
    }
    $tr_one_row.apply(this, columns).appendTo(board);
    if (tb.is_hierarchical) {
      mask_opts = [
        {
          text: $$("admin.mask.form.mask_id.same"),
          value: "SAME"
        }, {
          text: $$("admin.mask.form.mask_id.preferred"),
          value: "PREFERRED"
        }
      ];
      ref = ez5.mask[ez5.admin.version]._masks_by_table_id[tb.table_id];
      for (i = 0, len = ref.length; i < len; i++) {
        mask = ref[i];
        mask_opts.push({
          text: mask._name_localized,
          value: mask.mask_id
        });
      }
      mask_sel = new Select({
        name: "parent_mask_id",
        options: mask_opts
      });
      inline_opts = [];
      ref1 = ["standard", "text", "short"];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        k = ref1[j];
        inline_opts.push({
          text: $$("admin.mask.form.inline." + k),
          value: k
        });
      }
      inline_sel = new Select({
        name: "parent_inline",
        options: inline_opts
      });
      $tr_one_row(new LocaLabel({
        loca_key: "admin.mask.form.board.column.parent"
      }).DOM, get_enum("parent_edit", ["edit", "show", "off"]), get_enum("parent_output", ["show", "off"]), mask_sel, inline_sel).appendTo(board);
    }
    if (tb.has_tags) {
      $tr_one_row(new LocaLabel({
        loca_key: "admin.mask.form.board.column.tags"
      }).DOM, get_enum("tags_edit", ["edit", "show", "off"]), get_enum("tags_output", ["show", "off"])).appendTo(board);
    }
    $tr_one_row(new LocaLabel({
      loca_key: "admin.mask.form.board.column.owner"
    }).DOM, get_enum("owner_edit", ["edit", "show", "off"]), get_enum("owner_output", ["show", "off"])).appendTo(board);
    if (tb.acl_table) {
      $tr_one_row(new LocaLabel({
        loca_key: "admin.mask.form.board.column.acl"
      }).DOM, get_enum("acl_edit", ["edit", "show", "off"]), get_enum("acl_output", ["show", "off"])).appendTo(board);
    }
    if (tb.in_main_search) {
      $tr_one_row(new LocaLabel({
        loca_key: "admin.mask.form.board.column.collections"
      }).DOM, get_enum("collections_edit", ["show", "off"]), get_enum("collections_output", ["show", "off"])).appendTo(board);
    }
    if (tb.pool_link) {
      $tr_one_row(new LocaLabel({
        loca_key: "admin.mask.form.board.column.pool"
      }).DOM, new LocaLabel({
        loca_key: "admin.mask.form.board.pool_edit.hint"
      }).DOM, get_enum("pool_output", ["show", "off"])).appendTo(board);
    }
    opts.fields.push({
      form: {
        label: $$("admin.mask.form.board")
      },
      type: DataFieldProxy,
      element: board
    });
    return opts;
  };

  MaskEditor.prototype.fields = function() {
    var tb;
    tb = this.current_mask.getTable();
    return [
      {
        name: "field_displayname",
        th_label: "admin.mask.col.field",
        type: Output
      }, {
        name: "field_displaytype",
        th_label: "admin.mask.col.type",
        type: Output
      }, {
        name: "mask_id",
        th_label: "admin.mask.col.mask",
        type: Select,
        options: (function(_this) {
          return function(dataField) {
            var data, i, len, mask, opts, ref, table_id;
            opts = [
              {
                text: $$("admin.mask.form.mask_id.preferred"),
                value: "PREFERRED"
              }
            ];
            data = dataField.getData();
            if (!data) {
              return opts;
            }
            if (data.field.kind === "link") {
              table_id = data.field.other_table_id;
              ref = ez5.mask[ez5.admin.version]._masks_by_table_id[table_id];
              for (i = 0, len = ref.length; i < len; i++) {
                mask = ref[i];
                opts.push({
                  text: mask._name_localized,
                  value: mask.mask_id
                });
              }
            }
            return opts;
          };
        })(this)
      }, {
        name: "edit_show",
        th_label: "admin.mask.col.edit_show",
        th_rotate_90: true,
        type: Checkbox,
        onDataChanged: (function(_this) {
          return function(data, field) {
            var append_only;
            if (data.edit_show && data.edit_edit) {
              field.getForm().getFieldsByName("edit_edit")[0].setValue(false);
            }
            append_only = field.getForm().getFieldsByName("edit_append_only")[0];
            if (append_only) {
              if (data.edit_show) {
                return append_only.setValue(false).disable();
              }
            }
          };
        })(this)
      }, {
        name: "edit_edit",
        th_label: "admin.mask.col.edit_edit",
        th_rotate_90: true,
        type: Checkbox,
        onDataChanged: function(data, field) {
          var append_only;
          if (data.edit_show && data.edit_edit) {
            field.getForm().getFieldsByName("edit_show")[0].setValue(false);
          }
          append_only = field.getForm().getFieldsByName("edit_append_only")[0];
          if (append_only && data.edit_edit) {
            return append_only.enable();
          }
        }
      }, {
        th_label: "admin.mask.col.edit_append_only",
        th_rotate_90: true,
        type: Checkbox,
        name: "edit_append_only"
      }, {
        th_label: "admin.mask.col.edit_as_table",
        th_rotate_90: true,
        type: Checkbox,
        name: "edit_as_table",
        onDataChanged: (function(_this) {
          return function() {
            return _this.update_mask_form();
          };
        })(this)
      }, {
        th_label: "admin.mask.col.user_hint",
        th_rotate_90: true,
        type: FormPopover,
        popover: {
          pane: {
            padded: true,
            title: $$("admin.mask.col.user_hint.popover.title")
          }
        },
        button: {
          loca_key: "admin.mask.col.user_hint.button"
        },
        fields: [
          {
            type: Output,
            text: $$("admin.mask.col.user_hint.popup_text")
          }, {
            type: MultiInput,
            name: "edit_user_hint_l10n",
            control: ez5.loca.getLanguageControlAdmin(),
            textarea: true
          }
        ],
        renderDisplayContent: (function(_this) {
          return function(df, data) {
            var div, k, ref, v;
            ref = data.edit_user_hint_l10n;
            for (k in ref) {
              v = ref[k];
              if (k === "_comment") {
                continue;
              }
              if (v && !isEmpty(v.trim())) {
                div = CUI.DOM.element("DIV", {
                  "class": "ez5-tag-holder"
                });
                div.appendChild(new Label({
                  "class": "ez5-tag",
                  text: $$("admin.mask.col.user_hint.tag")
                }).DOM);
                return div;
              }
            }
            return null;
          };
        })(this)
      }, {
        th_label: "admin.mask.col.output_detail",
        th_rotate_90: true,
        type: Checkbox,
        name: "output_detail"
      }, {
        th_label: "admin.mask.col.output_text",
        th_rotate_90: true,
        type: Checkbox,
        name: "output_text"
      }, {
        th_label: "admin.mask.col.output_table",
        th_rotate_90: true,
        type: Checkbox,
        name: "output_table"
      }, this.__getStandardField(), this.__getStandardFieldEAS(), {
        th_label: "admin.mask.col.search_fulltext",
        th_rotate_90: true,
        type: Checkbox,
        name: "search_fulltext"
      }, {
        th_label: "admin.mask.col.search_expert",
        th_rotate_90: true,
        type: Checkbox,
        group: "expert-checkbox",
        name: "search_expert"
      }, {
        th_label: "admin.mask.col.search_facet",
        th_rotate_90: true,
        type: Checkbox,
        name: "search_facet"
      }, {
        th_label: "admin.mask.col.search_nested",
        th_rotate_90: true,
        type: Checkbox,
        name: "search_nested"
      }, {
        th_label: "admin.mask.col.options",
        type: FormPopover,
        button: {
          loca_key: "admin.mask.col.options.button"
        },
        popover: {
          pane: {
            title: $$("admin.mask.col.options.popover.title")
          }
        },
        renderDisplayContent: (function(_this) {
          return function(df, data) {
            var div, editor_mode, i, len, link_mode, ref, ref1, ref2, sort_first_field, tag, tagfilter, tags;
            tags = [];
            tagfilter = (ref = data.custom_settings) != null ? ref.visibility_tagfilter : void 0;
            if (!CUI.isEmptyObject(tagfilter)) {
              tags.push($$('admin.mask.form.visibility_tagfilter.tag'));
            }
            editor_mode = (ref1 = data.custom_settings) != null ? ref1.editor_frontend_mode : void 0;
            if (editor_mode && editor_mode !== "default") {
              tags.push($$("admin.mask.form.editor_frontend_mode." + editor_mode));
            }
            link_mode = data.inline;
            if (link_mode) {
              tags.push($$("admin.mask.form.inline." + link_mode));
            }
            sort_first_field = data.sort_first_field;
            if (sort_first_field) {
              tags.push($$("admin.mask.form.sort_first_field." + sort_first_field));
            }
            if ((ref2 = data.field._column) != null ? ref2.type.match("^custom:") : void 0) {
              tags.push.apply(tags, _this.__custom_type_support.getCustomMaskOptionTags(data));
            }
            if (tags.length > 0) {
              div = CUI.DOM.element("DIV", {
                "class": "ez5-tag-holder"
              });
              for (i = 0, len = tags.length; i < len; i++) {
                tag = tags[i];
                div.appendChild(new Label({
                  "class": "ez5-tag ez5-tag-mask-editor-option",
                  text: tag
                }).DOM);
              }
              return div;
            } else {
              return null;
            }
          };
        })(this),
        fields: (function(_this) {
          return function(df) {
            var data, fields, ref, ref1;
            data = df.getData();
            if (!data) {
              return [];
            }
            if (data.field.kind === 'linked-table' || data.field.kind === 'reverse-linked-table') {
              fields = [
                {
                  name: "sort_first_field",
                  form: {
                    label: $$("admin.mask.col.sort_first_field")
                  },
                  type: Select,
                  options: function() {
                    var i, k, len, opts, ref;
                    opts = [
                      {
                        text: $$('admin.mask.form.sort_first_field.none'),
                        value: null
                      }
                    ];
                    ref = ['asc', 'desc'];
                    for (i = 0, len = ref.length; i < len; i++) {
                      k = ref[i];
                      opts.push({
                        text: $$('admin.mask.form.sort_first_field.' + k),
                        value: k
                      });
                    }
                    return opts;
                  }
                }
              ];
            } else if (((ref = data.field._column) != null ? ref.type : void 0) === "link") {
              fields = [
                {
                  name: "inline",
                  form: {
                    label: $$("admin.mask.col.inline")
                  },
                  type: Select,
                  options: function() {
                    var i, k, len, ref1, results;
                    ref1 = ["standard", "text", "short"];
                    results = [];
                    for (i = 0, len = ref1.length; i < len; i++) {
                      k = ref1[i];
                      results.push({
                        text: $$("admin.mask.form.inline." + k),
                        value: k
                      });
                    }
                    return results;
                  }
                }
              ];
            } else if ((ref1 = data.field._column) != null ? ref1.type.match("^custom:") : void 0) {
              fields = _this.__custom_type_support.getCustomMaskOptions(data);
            } else {
              fields = [];
            }
            fields.splice(0, 0, {
              name: "editor_frontend_mode",
              data: data.custom_settings,
              undo_and_changed_support: false,
              form: {
                label: $$('admin.mask.col.editor_frontend_mode')
              },
              type: Select,
              options: function() {
                var i, k, len, ref2, results;
                ref2 = ["default", "hide", "readonly"];
                results = [];
                for (i = 0, len = ref2.length; i < len; i++) {
                  k = ref2[i];
                  results.push({
                    text: $$("admin.mask.form.editor_frontend_mode." + k),
                    value: k
                  });
                }
                return results;
              }
            });
            return fields;
          };
        })(this)
      }
    ];
  };

  MaskEditor.prototype.__getStandardFieldEAS = function() {
    return this.__getStandardField(true);
  };

  MaskEditor.prototype.__getStandardField = function(eas) {
    var field, fields, th_label;
    if (eas == null) {
      eas = false;
    }
    if (eas) {
      th_label = "admin.mask.col.standard_eas";
      fields = [
        {
          form: {
            label: $$("admin.mask.col.format.container_asset")
          },
          type: Options,
          name: "standard_eas_order",
          radio: true,
          options: [
            {
              value: "",
              text: $$("admin.mask.col.format.standard.dont_show")
            }, {
              value: 1,
              text: $$("admin.mask.col.format.standard.show")
            }
          ]
        }
      ];
    } else {
      th_label = "admin.mask.col.standard";
      fields = [
        {
          form: {
            label: $$("admin.mask.col.format.container")
          },
          type: Options,
          name: "standard_order",
          radio: true,
          options: [
            {
              value: "",
              text: $$("admin.mask.col.format.standard.dont_show")
            }, {
              value: 1,
              text: $$("admin.mask.col.format.standard.title")
            }, {
              value: 2,
              text: $$("admin.mask.col.format.standard.subtitle")
            }, {
              value: 3,
              text: $$("admin.mask.col.format.standard.description")
            }
          ]
        }, {
          name: "standard_design",
          type: Select,
          form: {
            label: $$("admin.mask.col.format.design")
          },
          options: this.__design_options
        }, {
          name: "standard_format",
          type: Select,
          form: {
            label: $$("admin.mask.col.format.separator")
          },
          options: this.__separator_options
        }
      ];
    }
    field = {
      th_label: th_label,
      th_rotate_90: true,
      type: FormPopover,
      popover: {
        pane: {
          title: $$(th_label)
        }
      },
      fields: fields,
      renderDisplayButton: function(df, data) {
        if (eas) {
          if (data.standard_eas_order) {
            CUI.debug("renderDisplayButton", eas, df, data);
            return $$("admin.datamodel.standard_eas." + data.standard_eas_order);
          } else {
            return $$("admin.datamodel.standard_eas.empty");
          }
        } else {
          if (data.standard_order) {
            return $$("admin.datamodel.standard." + data.standard_order);
          } else {
            return $$("admin.datamodel.standard.empty");
          }
        }
      }
    };
    return field;
  };

  MaskEditor.prototype.init_mask_table = function() {
    if (ez5.admin.version === "HEAD") {
      this.minusButton = new LocaButton({
        icon: "minus",
        loca_key: "mask.editor.fields.button.minus",
        group: "plusminus",
        onClick: (function(_this) {
          return function() {
            var node;
            node = _this.mask_table.getSelectedNode();
            node.remove();
            return _this.update_mask_form();
          };
        })(this)
      });
      this.plusButton = new LocaButton({
        icon: "plus",
        loca_key: "mask.editor.fields.button.plus",
        group: "plusminus",
        menu: {
          items: (function(_this) {
            return function() {
              return MaskSplitter.getMenuItems(_this);
            };
          })(this)
        }
      });
    }
    return this.mask_table = new ListViewEditTree({
      absolute: true,
      "class": 'cui-lv--has-datafields',
      extra_header: [
        null, null, {
          the_label: "admin.mask.col.linked_object"
        }, {
          th_label: "admin.mask.col.editor",
          th_colspan: 5
        }, {
          th_label: "admin.mask.col.output",
          th_colspan: 5
        }, {
          th_label: "admin.mask.col.search",
          th_colspan: 4
        }
      ],
      fields: this.fields(),
      fixedCols: 0,
      rowMove: true,
      selectableRows: true,
      onSelect: (function(_this) {
        return function() {
          return _this.update_mask_form();
        };
      })(this),
      onDeselect: (function(_this) {
        return function() {
          return _this.update_mask_form();
        };
      })(this),
      onOpen: (function(_this) {
        return function() {
          return _this.update_mask_form();
        };
      })(this),
      footer_left: [this.plusButton, this.minusButton],
      end_add_row: (function(_this) {
        return function(row) {
          return _this.end_add_row(row);
        };
      })(this)
    });
  };

  MaskEditor.prototype.addNode = function(row) {
    return this.mask_table.addNode(row);
  };

  MaskEditor.prototype.end_add_row = function(row) {
    var disable, hide, options, ref, ref1, ref2, standard, standard_eas;
    hide = [];
    disable = [];
    standard = 11;
    standard_eas = 12;
    options = 17;
    switch (row.type) {
      case "linked-table":
      case "reverse-linked-table":
        hide.push("mask_id", standard, standard_eas);
        if (row.data.field.hierarchical_mask_hint) {
          hide.push('edit_show', 'edit_edit', "edit_append_only", "edit_as_table");
        }
        break;
      case "link":
        hide.push("edit_append_only", "edit_as_table", "edit_show_labels", "search_nested");
        break;
      case "field":
        if (row.column_type.match("^custom:")) {
          hide.push("mask_id", "edit_append_only", "edit_as_table", "search_nested");
          this.__custom_type_support.maskSetRowState({
            row: row,
            field_numbers: {
              standard: standard,
              standard_eas: standard_eas,
              options: options
            },
            hide: hide,
            disable: disable
          });
        } else {
          hide.push("mask_id", "edit_append_only", "edit_as_table", "search_nested");
          if ((ref = row.column_type) !== "eas" && ref !== "date" && ref !== "daterange" && ref !== "datetime") {
            hide.push("search_facet");
            hide.push(standard_eas);
          }
          if ((ref1 = row.column_type) === "number" || ref1 === "boolean") {
            hide.push("search_fulltext");
          }
          if ((ref2 = row.column_type) === "eas") {
            hide.push(standard);
          }
        }
    }
    if (row.data.edit_edit === false && row.data.edit_append_only !== void 0) {
      disable.push("edit_append_only");
    }
    row.updateFields({
      hide: hide,
      disable: disable,
      button_group: row.button_group
    });
  };

  MaskEditor.prototype.getTabs = function() {
    this.ensureCurrentMask();
    this.tabs = new Tabs({
      "class": "ez5-mask-editor-tabs",
      absolute: true,
      tabs: [
        {
          name: "mask",
          text: $$("admin.masks.tab.mask"),
          content: ""
        }, {
          name: "fields",
          text: $$("admin.masks.tab.fields"),
          content: ""
        }, {
          name: "preview_editor",
          text: $$("admin.masks.tab.preview_editor"),
          onActivate: (function(_this) {
            return function() {
              return _this.renderPreviewEditor();
            };
          })(this),
          content: ""
        }, {
          name: "preview_search",
          text: $$("admin.masks.tab.preview_search"),
          onActivate: (function(_this) {
            return function() {
              return _this.renderPreviewSearch();
            };
          })(this),
          content: ""
        }, {
          name: "preview_detail",
          text: $$("admin.masks.tab.preview_detail"),
          onActivate: (function(_this) {
            return function() {
              return _this.renderPreviewDetail();
            };
          })(this),
          content: ""
        }
      ]
    });
    this.form_opts = this.dm_form_opts();
    this.form_opts.data = this.current_mask.getData();
    this.form_opts.fields[3].disabled = this.form_opts.data.is_preferred;
    return this.tabs;
  };

  MaskEditor.prototype.show = function() {
    this.init_mask_table();
    this.tabs.getTab("mask").getBody().append(new Form(this.form_opts).start().DOM);
    return this.tabs.getTab("fields").getBody().append(this.mask_table.render());
  };

  MaskEditor.prototype.loadFields = function() {
    return this.mask_table.load_data(this.current_mask.getRows()).done((function(_this) {
      return function() {
        return _this.update_mask_form();
      };
    })(this));
  };

  MaskEditor.prototype.renderPreviewEditor = function() {
    var ro, tmpl;
    tmpl = new Template({
      name: "mask-editor-preview-editor",
      map: {
        editor: true
      }
    });
    ro = this.getDemoResultObject();
    this.tabs.getTab("preview_editor").getBody().empty().append(tmpl.DOM);
    return tmpl.append(ro.renderEditor("editor", "editor-header"), "editor");
  };

  MaskEditor.prototype.renderPreviewSearch = function() {
    var css1, ro, tmpl;
    tmpl = new Template({
      name: "mask-editor-preview-search",
      map: {
        short: true,
        card1: true,
        card2: true,
        card3: true,
        css_switcher: true,
        standard: true,
        standard_div: true,
        text: true
      }
    });
    ro = this.getDemoResultObject();
    CUI.debug("demo result object", ro.getData());
    this.tabs.getTab("preview_search").getBody().empty().append(tmpl.DOM);
    tmpl.append(ro.renderShort(), "short");
    tmpl.append(ro.renderCard1(), "card1");
    tmpl.append(ro.renderCard2(), "card2");
    tmpl.append(ro.renderCard3(), "card3");
    css1 = new CSSSwitcher({
      element: tmpl.map.standard,
      variants: ResultStandard.CSSVariants,
      data: {}
    });
    tmpl.append(css1.render(), "css_switcher");
    tmpl.append(ro.renderStandard(), "standard_div");
    return tmpl.append(ro.renderTextHtml(), "text");
  };

  MaskEditor.prototype.renderPreviewDetail = function() {
    var ro, tmpl;
    tmpl = new Template({
      name: "mask-editor-preview-detail",
      map: {
        detail: true
      }
    });
    ro = this.getDemoResultObject();
    this.tabs.getTab("preview_detail").getBody().empty().append(tmpl.DOM);
    return tmpl.append(ro.renderDetail("detail", "detail-header"), "detail");
  };

  MaskEditor.prototype.update_mask_form = function() {
    var ref, ref1, ref2;
    this.update_as_table_checkbox(this.current_mask.getRows());
    if ((ref = this.mask_table.getSelectedNode()) != null ? typeof ref.trashable === "function" ? ref.trashable() : void 0 : void 0) {
      return (ref1 = this.minusButton) != null ? ref1.enable() : void 0;
    } else {
      return (ref2 = this.minusButton) != null ? ref2.disable() : void 0;
    }
  };

  MaskEditor.prototype.update_as_table_checkbox = function(rows) {
    var edit_as_table, father_edit_as_table, i, idx, len, old_value, ref, ref1, row;
    for (idx = i = 0, len = rows.length; i < len; idx = ++i) {
      row = rows[idx];
      if (!row.isRendered() || row instanceof MaskSplitter) {
        continue;
      }
      old_value = null;
      edit_as_table = row.getFieldsByName("edit_as_table")[0];
      father_edit_as_table = (ref = row.getFather()) != null ? typeof ref.getFieldsByName === "function" ? (ref1 = ref.getFieldsByName("edit_as_table")) != null ? ref1[0] : void 0 : void 0 : void 0;
      if (father_edit_as_table) {
        if (father_edit_as_table.getValue() === true) {
          edit_as_table.setValue(true);
          edit_as_table.disable();
        } else {
          edit_as_table.enable();
        }
      }
      if (row.children) {
        this.update_as_table_checkbox(row.children);
      }
    }
  };

  MaskEditor.prototype.dump_mask_fields = function() {
    var fieldsRenderer;
    fieldsRenderer = new FieldsRendererTopLevel();
    return CUI.debug(fieldsRenderer.read(this.mask_table.root.children).dump());
  };

  return MaskEditor;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var MaskSchema,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

MaskSchema = (function(superClass) {
  extend(MaskSchema, superClass);

  function MaskSchema() {
    return MaskSchema.__super__.constructor.apply(this, arguments);
  }

  MaskSchema.prototype.initOpts = function() {
    MaskSchema.__super__.initOpts.call(this);
    return this.addOpts({
      maskEditor: {
        mandatory: true,
        check: MaskEditor
      },
      schema: {
        mandatory: true,
        check: "PlainObject"
      }
    });
  };

  MaskSchema.prototype.readOpts = function() {
    var i, k, len, ref;
    MaskSchema.__super__.readOpts.call(this);
    this.maskEditor = this._maskEditor;
    this.version = this._schema._version;
    this.schema = this._schema;
    this.table = ez5.schema[this.version]._table_by_id[this.schema.table_id];
    this.rows = this.readFieldsFromSchema(this.schema);
    this.data = {};
    ref = ["table_id", "mask_id", "name", "is_preferred", "comment", "require_comment"];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      this.data[k] = this.schema[k];
    }
    if (this.table.has_tags) {
      this.data.tags_output = this.schema.system_fields.tags.output.mode;
      this.data.tags_edit = this.schema.system_fields.tags.edit.mode;
    }
    if (this.table.acl_table) {
      this.data.acl_output = this.schema.system_fields.acl.output.mode;
      this.data.acl_edit = this.schema.system_fields.acl.edit.mode;
    }
    this.data.owner_output = this.schema.system_fields.owner.output.mode;
    this.data.owner_edit = this.schema.system_fields.owner.edit.mode;
    if (this.table.pool_link) {
      this.data.pool_output = this.schema.system_fields.pool.output.mode;
    }
    if (this.table.in_main_search) {
      this.data.collections_output = this.schema.system_fields.collections.output.mode;
      this.data.collections_edit = this.schema.system_fields.collections.edit.mode;
    }
    if (this.table.is_hierarchical) {
      this.data.parent_inline = this.schema.system_fields.parent.inline;
      this.data.parent_mask_id = this.schema.system_fields.parent.mask_id;
      this.data.parent_output = this.schema.system_fields.parent.output.mode;
      this.data.parent_edit = this.schema.system_fields.parent.edit.mode;
    }
    if (!this.data.require_comment) {
      this.data.require_comment = "never";
    }
    if (this.data.name === "_all_fields") {
      this.data.name = "";
    }
    if (this.getNameLocaKey()) {
      return this.data.displayname_l10n = ez5.loca.get_user_key(this.version, this.getNameLocaKey());
    } else {
      return this.data.displayname_l10n = {};
    }
  };

  MaskSchema.prototype.getTable = function() {
    return this.table;
  };

  MaskSchema.prototype.setName = function(name) {
    return this.schema.name = name;
  };

  MaskSchema.prototype.getNameLocaKey = function() {
    return this.schema._name_loca_key();
  };

  MaskSchema.prototype.getUserHintLocaKey = function() {
    return this.schema._user_hint_loca_key();
  };

  MaskSchema.prototype.getRows = function() {
    return this.rows;
  };

  MaskSchema.prototype.getData = function() {
    return this.data;
  };

  MaskSchema.prototype.getSchema = function() {
    return this.schema;
  };

  MaskSchema.prototype.readFieldsFromSchema = function(schema) {
    var field, i, idx, j, k, key, l, len, len1, len2, len3, len4, len5, len6, len7, len8, m, map, n, o, p, q, r, ref, ref1, ref10, ref11, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, row, rows, table, value;
    rows = [];
    table = ez5.schema[this.version]._table_by_id[schema.table_id];
    ref = schema.fields;
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      field = ref[idx];
      if (field.kind === "splitter") {
        rows.push(MaskSplitter.getFromField({
          version: this.version,
          l10n_prefix: this.schema._l10n_prefix,
          field: field,
          maskEditor: this.maskEditor
        }));
        continue;
      } else {
        row = new ListViewEditTreeMaskRowNode({
          data: {
            field: field,
            _fields: {}
          }
        });
      }
      row.type = field.kind;
      row.column_type = (ref1 = field._column) != null ? ref1.type : void 0;
      row.button_group = table.table_id;
      row.data.field_displaytype = (function() {
        switch (row.type) {
          case "field":
            return ez5._schema_inst.getDatatypeLocalized(field._column.type, this.version);
          case "link":
            return ez5._schema_inst.getDatatypeLocalized("link_" + field.other_table_id, this.version);
          case "reverse-linked-table":
            if (field.is_hierarchical) {
              return table._name_localized;
            } else {
              return ez5.schema[this.version]._table_by_id[field.other_table_id]._name_localized;
            }
        }
      }).call(this);
      switch (row.type) {
        case "linked-table":
        case "reverse-linked-table":
          ref2 = ["edit_as_table", "edit_append_only", "edit_show", "edit_edit", "output_detail", "output_text", "output_table", "standard_order", "standard_design", "standard_format", "standard_eas_order", "search_fulltext", "search_expert", "search_nested", "search_facet"];
          for (j = 0, len1 = ref2.length; j < len1; j++) {
            k = ref2[j];
            row.data[k] = false;
          }
          row.data.edit_show = false;
          row.data.edit_edit = false;
          row.data.field_displayname = field._name_localized;
          row.data.edit_user_hint_l10n = ez5.loca.get_user_key(this.version, field._user_hint_loca_key());
          if (!field.is_hierarchical) {
            row.data.table_name = field._other_table.name;
          }
          row.data.sort_first_field = field.sort_first_field;
          break;
        case "field":
          ref3 = ["edit_show", "edit_edit", "output_detail", "output_text", "output_table", "user_hint", "search_fulltext", "search_expert", "search_facet"];
          for (l = 0, len2 = ref3.length; l < len2; l++) {
            k = ref3[l];
            row.data[k] = false;
          }
          if (row.column_type === "eas") {
            ref4 = ["standard_eas_order"];
            for (m = 0, len3 = ref4.length; m < len3; m++) {
              k = ref4[m];
              row.data[k] = false;
            }
          } else {
            ref5 = ["standard_order", "standard_design", "standard_format"];
            for (n = 0, len4 = ref5.length; n < len4; n++) {
              k = ref5[n];
              row.data[k] = false;
            }
          }
          assert(field._column, "MaskEditor.readFieldsFromSchema", "field._column not found in table, unparsable mask, idx: " + idx, {
            table: table,
            field: field,
            schema: schema,
            version: this.version
          });
          row.data.field_displayname = field._column._name_localized;
          row.data.field_name = field._column.name;
          row.data.edit_user_hint_l10n = ez5.loca.get_user_key(this.version, field._user_hint_loca_key());
          break;
        case "link":
          ref6 = ["edit_show", "edit_edit", "output_detail", "output_text", "output_table", "standard_order", "standard_design", "standard_format", "standard_eas_order", "search_fulltext", "search_expert", "search_facet"];
          for (o = 0, len5 = ref6.length; o < len5; o++) {
            k = ref6[o];
            row.data[k] = false;
          }
          assert(field._column, "MaskEditor.readFieldsFromSchema", "field._column not found in table, unparsable mask, idx: " + idx, {
            table: table,
            field: field,
            schema: schema,
            version: this.version
          });
          row.data.inline = field.inline;
          row.data.field_displayname = field._column._name_localized;
          row.data.field_name = field._column.name;
          row.data.mask_id = field.mask_id;
          row.data.edit_user_hint_l10n = ez5.loca.get_user_key(this.version, field._user_hint_loca_key());
          break;
        default:
          assert(false, "MaskEditor.mask_row_from_mask", "field.kind is unknown", {
            table: table,
            field: field,
            schema: schema,
            version: this.version
          });
      }
      switch (row.type) {
        case "linked-table":
        case "reverse-linked-table":
        case "link":
        case "field":
          switch (field.edit.mode) {
            case "off":
              row.data.edit_show = false;
              row.data.edit_edit = false;
              break;
            case "edit":
              row.data.edit_show = false;
              row.data.edit_edit = true;
              break;
            case "show":
              row.data.edit_show = true;
              row.data.edit_edit = false;
          }
      }
      if ((ref7 = row.type) === "linked-table" || ref7 === "reverse-linked-table") {
        map = {
          as_table: "edit_as_table",
          append_only: "edit_append_only"
        };
        for (key in map) {
          value = map[key];
          if (isUndef(row.data[value])) {
            continue;
          }
          if (field.edit[key]) {
            row.data[value] = true;
          }
        }
      }
      row.data.custom_settings = field.custom_settings || {};
      ref8 = ["detail", "text", "table"];
      for (p = 0, len6 = ref8.length; p < len6; p++) {
        k = ref8[p];
        if (isUndef(row.data["output_" + k])) {
          continue;
        }
        if (field.output[k]) {
          row.data["output_" + k] = true;
        }
      }
      ref9 = ["fulltext", "expert", "facet", "nested"];
      for (q = 0, len7 = ref9.length; q < len7; q++) {
        k = ref9[q];
        if (isUndef(row.data["search_" + k])) {
          continue;
        }
        if (field.search[k]) {
          row.data["search_" + k] = true;
        }
      }
      if (row.column_type === "eas") {
        if (field.output.standard_eas) {
          row.data["standard_eas_order"] = field.output.standard_eas.order || "";
        } else if ((ref10 = field.output.standard) != null ? ref10.order : void 0) {
          row.data["standard_eas_order"] = field.output.standard.order;
        }
        CUI.debug("setting standard order to", row.data["standard_eas_order"]);
      } else {
        ref11 = ["order", "design", "format"];
        for (r = 0, len8 = ref11.length; r < len8; r++) {
          k = ref11[r];
          if (isUndef(row.data["standard_" + k])) {
            continue;
          }
          if (field.output.standard[k] !== false) {
            row.data["standard_" + k] = field.output.standard[k];
          }
        }
        if (!isUndef(row.data["standard_eas_order"])) {
          row.data["standard_eas_order"] = field.output.standard_eas.order;
        }
      }
      if (field.mask) {
        row.children = this.readFieldsFromSchema(field.mask);
      }
      rows.push(row);
    }
    return rows;
  };

  return MaskSchema;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var ExportManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ExportManager = (function(superClass) {
  extend(ExportManager, superClass);

  function ExportManager() {
    return ExportManager.__super__.constructor.apply(this, arguments);
  }

  ExportManager.prototype.readOpts = function() {
    ExportManager.__super__.readOpts.call(this);
    return this.__search = this._search;
  };

  ExportManager.prototype.init = function() {
    var dfr, go_on, req;
    dfr = new CUI.Deferred();
    go_on = (function(_this) {
      return function() {
        _this.data = _this.getFormData();
        return dfr.resolve();
      };
    })(this);
    if (this._export) {
      this["export"] = this.opts["export"];
      go_on();
    } else {
      req = new Request({
        for_export: true
      });
      this.__search.addToRequest(req);
      this.expandForExport(this.__search, req).done((function(_this) {
        return function() {
          var ref;
          assert(((ref = req.search) != null ? ref.length : void 0) >= 0, "new ExportManager", "opts.search[" + (getObjectClass(_this.__search)) + "].addToRequest did not fill request with search Array", {
            request: req,
            opts: _this.opts
          });
          _this["export"] = new Export({
            "export": {
              search: req.cleanRequestForSearch()
            }
          });
          return go_on();
        };
      })(this)).fail(dfr.reject);
    }
    return dfr.promise();
  };

  ExportManager.prototype.expandForExport = function(search, request) {
    var dfr, fields, lbl, ots, sids, toaster;
    fields = [];
    ots = [];
    toaster = null;
    lbl = new LocaLabel({
      loca_key: 'export.manager.collecting_data',
      multiline: true,
      loca_key_attrs: {
        percent: 0
      }
    });
    sids = [];
    if (request.objecttypes == null) {
      request.objecttypes = [];
    }
    dfr = new CUI.Deferred();
    dfr.always((function(_this) {
      return function() {
        return toaster != null ? toaster.destroy() : void 0;
      };
    })(this));
    dfr.done((function(_this) {
      return function() {
        var i, len, ot;
        if (fields.length === 0 || sids.length === 0) {
          return;
        }
        for (i = 0, len = ots.length; i < len; i++) {
          ot = ots[i];
          pushOntoArray(ot, request.objecttypes);
        }
        request.search = [
          {
            type: 'complex',
            bool: 'should',
            search: request.search
          }, {
            type: 'in',
            bool: 'should',
            fields: ['_system_object_id'],
            "in": sids
          }
        ];
      };
    })(this));
    search.getExportObjecttypes(request).fail(dfr.reject).done((function(_this) {
      return function(objecttypes) {
        var count, eas_column, f, i, idx, j, l, len, len1, len2, lf, limit, name, new_eas_column, offset, ot, ref, req_data, search_more, set_percent;
        for (i = 0, len = objecttypes.length; i < len; i++) {
          ot = objecttypes[i];
          pushOntoArray(ot.name(), request.objecttypes);
          ref = ot.getAllFields();
          for (j = 0, len1 = ref.length; j < len1; j++) {
            f = ref[j];
            if (!(f instanceof LinkedObject)) {
              continue;
            }
            eas_column = f.getFirstStandardEASColumn();
            if (eas_column) {
              new_eas_column = new EASColumnLinkedObject(eas_column.mask, eas_column.FieldSchema, f);
              fields.push(new_eas_column);
            }
          }
        }
        if (fields.length === 0) {
          dfr.resolve();
          return;
        }
        req_data = copyObject(request.cleanRequestForSearch(), true);
        req_data.fields = [];
        req_data.format = 'short';
        req_data.generate_rights = false;
        for (idx = l = 0, len2 = fields.length; l < len2; idx = ++l) {
          f = fields[idx];
          lf = f.getLinkedObject();
          name = lf.fullName() + '._system_object_id';
          req_data.fields.push({
            key: '_system_object_id',
            field: name
          });
          pushOntoArray(f.getMainMask().table.name(), ots);
          req_data.search.push({
            bool: 'must_not',
            fields: [name],
            type: 'in',
            "in": [null]
          });
        }
        offset = 0;
        limit = 1000;
        count = -1;
        set_percent = function(percent) {
          if (!toaster) {
            toaster = CUI.toaster({
              content: lbl,
              show_ms: 0
            });
          }
          return lbl.setText($$('export.manager.collecting_data|text', {
            percent: Math.ceil(offset / count * 100)
          }));
        };
        search_more = function() {
          req_data.offset = offset;
          req_data.limit = limit;
          return ez5.api.search({
            json_data: req_data
          }).done(function(data) {
            var len3, m, obj, ref1, sid;
            ref1 = data.objects;
            for (m = 0, len3 = ref1.length; m < len3; m++) {
              obj = ref1[m];
              sids.push.apply(sids, (function() {
                var len4, n, ref2, results;
                ref2 = obj._fields._system_object_id;
                results = [];
                for (n = 0, len4 = ref2.length; n < len4; n++) {
                  sid = ref2[n];
                  results.push(parseInt(sid));
                }
                return results;
              })());
            }
            if (offset + limit < data.count) {
              offset = offset + limit;
              count = data.count;
              set_percent();
              return search_more();
            } else {
              return dfr.resolve();
            }
          }).fail(dfr.reject);
        };
        return search_more();
      };
    })(this));
    return dfr.promise();
  };

  ExportManager.prototype.initOpts = function() {
    ExportManager.__super__.initOpts.call(this);
    return this.addOpts({
      search: {
        mandatory: true,
        check: Search
      },
      "export": {
        check: Export
      }
    });
  };

  ExportManager.prototype.prepareExport = function() {
    this.init().done((function(_this) {
      return function() {
        var btn_type;
        _this._schedules = new ScheduleEditor({
          button_type: "apply",
          show_minutes: true,
          onButtonClick: function(ev, schedules) {
            _this["export"].getData()._schedules = schedules;
          },
          loadSchedules: function() {
            return _this["export"].getChildren(function() {
              return this.getData()._schedules;
            });
          }
        });
        _this._transports = new TransportsEditor({
          "export": _this["export"],
          button_type: "apply",
          onButtonClick: function(ev, transports) {
            _this["export"].getData()._transports = transports;
          }
        });
        _this.content = new HorizontalLayout({
          "class": "ez5-export-manager",
          left: {},
          center: {
            "class": "result-navigation-minimal ez-export-manager-main ez-export-manager-details"
          }
        });
        if (_this["export"].getId()) {
          btn_type = "update";
        } else {
          btn_type = "export";
        }
        _this.saveButton = new LocaButton({
          loca_key: "export.manager.button." + btn_type,
          disabled: true,
          onClick: function(ev) {
            if (ev.ctrlKey() || ev.altKey() || ev.shiftKey()) {
              CUI.debug(dump(_this["export"].setExportData(_this.getExportData()).getSaveData()));
              return;
            }
            _this.openModalToUpdateName().done(function() {
              var autoStart, ref;
              _this.modal.disableAllButtons();
              if (!((ref = _this["export"].getData()._schedules) != null ? ref.length : void 0) && !_this["export"].getId()) {
                autoStart = true;
              } else {
                autoStart = false;
              }
              return _this["export"].setExportData(_this.getExportData()).save().always(function() {
                return _this.modal.enableAllButtons();
              }).done(function() {
                if (autoStart) {
                  _this.modal.disableAllButtons();
                  return _this["export"].start().always(function() {
                    return _this.modal.enableAllButtons();
                  }).done(function() {
                    return _this.modal.destroy();
                  });
                } else {
                  return _this.modal.destroy();
                }
              });
            });
          }
        });
        _this.modal = new Modal({
          "class": "export-manager-modal",
          cancel: true,
          onCancel: function() {
            if (_this.saveButton.isDisabled() || (!_this["export"].getId() && !_this.__isChanged())) {
              _this.destroy();
            } else {
              return CUI.confirm({
                text: $$("export.manager.confirm.close")
              }).done(function() {
                return _this.destroy();
              });
            }
          },
          pane: {
            content: _this.content,
            header_left: new LocaLabel({
              loca_key: "export.manager.title"
            }),
            footer_right: function() {
              return [btn_type === "export" ? _this._schedules.getButton() : void 0, btn_type === "export" ? _this._transports.getButton() : void 0, _this.saveButton];
            }
          }
        });
        Events.listen({
          type: "data-changed",
          node: _this.modal,
          call: function(ev) {
            return _this.__updateSaveButton();
          }
        });
        return _this.gatherBaseData().done(function(request, data) {
          _this.modal.replace(new LocaLabel({
            loca_key: "export.manager.modal.title",
            loca_key_attrs: {
              count: data.count
            }
          }), "header_left");
          _this.renderForm();
          _this.modal.show();
          _this.__initIsChanged();
          _this.__updateSaveButton();
        });
      };
    })(this));
  };

  ExportManager.prototype.__updateSaveButton = function() {
    var cls, disable, fn, info, ref, ref1, show;
    disable = (function(_this) {
      return function() {
        _this.saveButton.disable();
        return _this;
      };
    })(this);
    if (this["export"].getId() && !this.__isChanged()) {
      return disable();
    }
    show = this.data.xml || this.data.csv || this.data.json;
    if (!show) {
      ref = this.data.fields;
      for (fn in ref) {
        info = ref[fn];
        if (info._enabled) {
          show = true;
          break;
        }
      }
      if (!show) {
        return disable();
      }
      show = false;
      ref1 = this.data.classes;
      for (cls in ref1) {
        info = ref1[cls];
        if (!info._enabled) {
          continue;
        }
        if (!isNull(info._original) || !isNull(info._version) || info._custom) {
          show = true;
          break;
        }
      }
    }
    if (!show) {
      return disable();
    }
    this.saveButton.enable();
    return this;
  };

  ExportManager.prototype.__initIsChanged = function() {
    this.__startData = JSON.stringify(this.getExportData());
    return this;
  };

  ExportManager.prototype.__isChanged = function() {
    return this.__startData !== JSON.stringify(this.getExportData());
  };

  ExportManager.prototype.gatherBaseData = function() {
    return this.__search.execute(new Request({
      searchManagers: [
        new ExportManagerResultForm({
          exportManager: this
        })
      ],
      exclusive: true,
      for_export: true
    }));
  };

  ExportManager.prototype.openModalToUpdateName = function() {
    var ref;
    return CUI.prompt({
      title: $$("export.manager.name_modal.title"),
      text: $$("export.manager.name_modal.help"),
      "default": this.data.name,
      min_length: ((ref = this["export"].getData()._schedules) != null ? ref.length : void 0) > 0 ? 1 : 0,
      placeholder: $$("export.manager.name_modal.input.name.placeholder"),
      button_text_ok: $$("base.save")
    }).done((function(_this) {
      return function(new_name) {
        return _this.data.name = new_name;
      };
    })(this));
  };

  ExportManager.prototype.addToRequest = function(request) {
    var k, ref, v;
    if (request == null) {
      request = {};
    }
    ref = this["export"].getData()["export"].search;
    for (k in ref) {
      v = ref[k];
      if (k === 'offset' || k === 'limit') {
        continue;
      }
      request[k] = copyObject(v, true);
    }
    delete request.event_log;
    return request;
  };

  ExportManager.prototype.setEASColumnsInfo = function(EASColumnsInfo) {
    this.EASColumnsInfo = EASColumnsInfo;
  };

  ExportManager.prototype.getEASColumnsInfo = function() {
    return this.EASColumnsInfo;
  };

  ExportManager.prototype.__getOriginalKeys = function(cls) {
    if (!cls || cls === "image") {
      return ["original", "current", "current+original"];
    } else {
      return ["original"];
    }
  };

  ExportManager.prototype.__getXSLTs = function() {
    var i, len, ref, ref1, xslt, xslts;
    xslts = [];
    ref1 = (ref = ez5.session.getBaseConfig().system["export"]) != null ? ref.xslts : void 0;
    for (i = 0, len = ref1.length; i < len; i++) {
      xslt = ref1[i];
      if (xslt.xslt._id > 1) {
        xslts.push(xslt);
      }
    }
    return xslts;
  };

  ExportManager.prototype.renderForm = function() {
    var advanced_fields, advanced_form, block_advanced, block_data, block_fields, block_filetypes, block_urls, cb, check_fields, cls, cls_tr, data_form, def, defs, eas_form_fields, form_classes, form_classes_table, form_fields, group, groups, i, idx, j, k, l, len, len1, len2, mapping_opts, opts, ref, ref1, sf_btn, sf_checkbox, tabs, tooltip, tt_txt, url_fields, url_form, versions, xslt, xslts;
    eas_form_fields = this.generateFieldsFormEAS();
    if (eas_form_fields) {
      block_fields = new CUI.Block({
        "class": "ez5-export-manager-block ez5-export-manager-block-fields",
        text: $$("export.manager.group.fields"),
        content: eas_form_fields
      });
      url_fields = [];
      opts = [
        {
          text: $$("export.manager.form.url.no"),
          value: null
        }
      ];
      ref = this.__getOriginalKeys();
      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
        k = ref[idx];
        opts.push({
          text: $$("export.manager.original." + k),
          value: idx
        });
      }
      url_fields.push({
        form: {
          label: $$("export.manager.form.url.original")
        },
        type: Select,
        tooltip: {
          text: $$("export.manager.form.url.original.versions")
        },
        name: "_url_original",
        options: opts
      });
      groups = Asset.getExportVersionGroups();
      for (group in groups) {
        defs = groups[group];
        opts = [
          {
            text: $$("export.manager.form.url.no"),
            value: false
          }, {
            text: $$("export.manager.form.url.yes"),
            value: true
          }
        ];
        versions = (function() {
          var j, len1, results;
          results = [];
          for (j = 0, len1 = defs.length; j < len1; j++) {
            def = defs[j];
            results.push(Asset.getPrintSizeForVersion(def.__cls, def.version, true));
          }
          return results;
        })();
        url_fields.push({
          form: {
            label: $$("server.eas.rightsmanagement.group." + group)
          },
          type: Form,
          type: Select,
          tooltip: {
            text: versions.join(", ")
          },
          name: "_url_group_" + group,
          options: opts
        });
      }
      url_form = new Form({
        fields: url_fields,
        onDataChanged: check_fields,
        data: this.data
      });
      block_urls = new CUI.Block({
        level: 2,
        "class": "ez5-export-manager-block ez5-export-manager-block-urls",
        text: $$("export.manager.group.urls"),
        content: url_form.start()
      });
    }
    form_classes = $div("export-manager-form-classes");
    form_classes_table = $table().appendTo(form_classes);
    ref1 = Asset.fileclasses();
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      cls = ref1[j];
      if (!this.EASColumnsInfo.counts.by_class[cls]) {
        continue;
      }
      if (!this.data.classes[cls]) {
        this.data.classes[cls] = {
          _enabled: !this["export"].getId(),
          _class: cls,
          _original: 0
        };
      }
      cls_tr = $tr("export-manager-form-cls").appendTo(form_classes_table);
      cb = new Checkbox({
        name: "_enabled",
        text: $$("server.eas.fileclass." + cls),
        onDataChanged: (function(_this) {
          return function() {
            return _this.setStateForm();
          };
        })(this),
        data: this.data.classes[cls]
      }).start();
      $td().append(cb.DOM).appendTo(cls_tr);
      this.data.classes[cls]._form_outer = cls_tr;
      this.data.classes[cls]._cb = cb;
      this.data.classes[cls]._form = (new Form({
        data: this.data.classes[cls],
        fields: this.getClassFields(cls, (function(_this) {
          return function() {
            return _this.setStateForm();
          };
        })(this))
      })).start();
      this.data.classes[cls]._form.DOM.appendTo($td().appendTo(cls_tr));
    }
    if (form_classes_table.children.length) {
      block_filetypes = new CUI.Block({
        "class": "ez5-export-manager-block ez5-export-manager-block-filetypes",
        text: $$("export.manager.group.filetypes"),
        content: form_classes
      });
    }
    sf_checkbox = new Checkbox({
      text: $$("export.manager.form.select_fields"),
      name: "select_fields"
    });
    sf_btn = new FormButton({
      text: ez5.loca.text("export.manager.form.select_fields.button"),
      tooltip: ez5.loca.tooltip("export.manager.form.select_fields.button"),
      disabled: !this.data.select_fields,
      onClick: (function(_this) {
        return function() {
          return _this.showFieldSelector(sf_checkbox);
        };
      })(this)
    });
    check_fields = (function(_this) {
      return function() {
        var l, len2, len3, m, ref2, ref3;
        if (_this.data.xml || _this.data.csv || _this.data.json) {
          sf_checkbox.enable();
          if (_this.data.select_fields) {
            sf_btn.enable();
          } else {
            sf_btn.disable();
          }
        } else {
          sf_checkbox.disable();
          sf_btn.disable();
        }
        ref2 = ["mapping", "xml_one_file_per_object"];
        for (l = 0, len2 = ref2.length; l < len2; l++) {
          k = ref2[l];
          if (_this.data.xml) {
            data_form.getFieldsByName(k)[0].enable();
          } else {
            data_form.getFieldsByName(k)[0].disable();
          }
        }
        ref3 = ["json_one_file_per_object"];
        for (m = 0, len3 = ref3.length; m < len3; m++) {
          k = ref3[m];
          if (_this.data.json) {
            data_form.getFieldsByName(k)[0].enable();
          } else {
            data_form.getFieldsByName(k)[0].disable();
          }
        }
        if (eas_form_fields) {
          if (_this.data._template === "custom") {
            advanced_form.getFieldsByName("_template_custom")[0].enable();
          } else {
            advanced_form.getFieldsByName("_template_custom")[0].disable();
          }
        }
        if (_this.data._batch_size === "custom") {
          return advanced_form.getFieldsByName("_batch_size_custom")[0].enable();
        } else {
          return advanced_form.getFieldsByName("_batch_size_custom")[0].disable();
        }
      };
    })(this);
    mapping_opts = ez5.metadata.getMappingOpts([
      {
        text: $$("export.manager.xml_profile.easydb"),
        value: "easydb"
      }, {
        text: $$("export.manager.xml_profile.easydb_flat"),
        value: "easydb_flat"
      }
    ], {
      xml_export: true
    });
    mapping_opts.push({
      divider: true
    });
    xslts = this.__getXSLTs();
    if (xslts.length > 0) {
      for (l = 0, len2 = xslts.length; l < len2; l++) {
        xslt = xslts[l];
        tt_txt = ez5.loca.getBestFrontendValue(xslt.description);
        if (!isEmpty(tt_txt)) {
          tooltip = {
            text: tt_txt
          };
        } else {
          tooltip = void 0;
        }
        mapping_opts.push({
          value: xslt,
          text: ez5.loca.getBestFrontendValue(xslt.displayname),
          tooltip: tooltip
        });
      }
    } else {
      mapping_opts.push({
        label: new EmptyLabel({
          text: $$("export.manager.no_xslts")
        })
      });
    }
    form_fields = [
      {
        type: Checkbox,
        form: {
          label: $$("export.manager.form.csv.label")
        },
        name: "csv",
        text: $$("export.manager.form.csv")
      }, {
        type: Checkbox,
        name: "json",
        text: $$("export.manager.form.json")
      }, {
        type: Checkbox,
        name: "json_one_file_per_object",
        text: $$("export.manager.form.json_one_file_per_object")
      }, {
        type: Checkbox,
        name: "xml",
        text: $$("export.manager.form.xml")
      }, {
        type: Checkbox,
        name: "xml_one_file_per_object",
        text: $$("export.manager.form.xml_one_file_per_object")
      }, {
        type: Select,
        form: {
          label: $$("export.manager.xml_profile.label")
        },
        name: "mapping",
        options: mapping_opts
      }, sf_checkbox, sf_btn
    ];
    data_form = new Form({
      fields: form_fields,
      onDataChanged: check_fields,
      data: this.data
    });
    block_data = new CUI.Block({
      "class": "ez5-export-manager-block ez5-export-manager-block-data",
      text: $$("export.manager.group.data"),
      content: data_form.start()
    });
    advanced_fields = [
      {
        type: Form,
        form: {
          label: $$("export.manager.form.batch_size.label")
        },
        fields: [
          {
            type: Checkbox,
            name: "_batch_size",
            value: "default",
            radio: "batch",
            text: $$("export.manager.form.batch_size.default", {
              batch_size: ez5.session.getDefaults().server.exporter.batch_size
            })
          }, {
            type: Checkbox,
            name: "_batch_size",
            value: "unlimited",
            radio: "batch",
            text: $$("export.manager.form.batch_size.unlimited")
          }, {
            type: Form,
            horizontal: true,
            fields: [
              {
                type: Checkbox,
                name: "_batch_size",
                value: "custom",
                radio: "batch"
              }, {
                type: NumberInput,
                name: "_batch_size_custom",
                placeholder: $$("export.manager.form.placeholder.custom")
              }
            ]
          }
        ]
      }, eas_form_fields ? this.getFilenameTemplateField() : void 0, {
        type: Checkbox,
        name: "_export_incremental",
        form: {
          label: $$("export.manager.form.export_incremental.label")
        },
        text: $$("export.manager.form.export_incremental.text")
      }
    ];
    advanced_form = new Form({
      fields: advanced_fields,
      onDataChanged: check_fields,
      data: this.data
    });
    block_advanced = new CUI.Block({
      "class": "ez5-export-manager-block ez5-export-manager-block-advanded",
      text: $$("export.manager.group.advanced"),
      content: advanced_form.start()
    });
    tabs = [];
    if (block_filetypes || block_fields) {
      tabs.push({
        text: $$('export.manager.tab.files'),
        content: [
          new LocaLabel({
            padded: true,
            appearance: 'secondary',
            multiline: true,
            markdown: true,
            loca_key: 'export.manager.tab.files.explain'
          }), block_fields, block_filetypes
        ]
      });
    }
    if (block_data || block_urls) {
      tabs.push({
        text: $$('export.manager.tab.data'),
        content: [
          new LocaLabel({
            padded: true,
            appearance: 'secondary',
            multiline: true,
            markdown: true,
            loca_key: 'export.manager.tab.data.explain'
          }), block_data, block_urls
        ]
      });
    }
    if (block_advanced) {
      tabs.push({
        text: $$('export.manager.tab.advanced'),
        content: [
          new LocaLabel({
            padded: true,
            appearance: 'secondary',
            multiline: true,
            markdown: true,
            loca_key: 'export.manager.tab.advanced.explain'
          }), block_advanced
        ]
      });
    }
    console.debug("tabs:", tabs);
    this.content.append(new CUI.Tabs({
      tabs: tabs
    }), "left");
    check_fields();
    this.setStateForm();
  };

  ExportManager.prototype.generateFieldsFormData = function(data) {
    var div, fields_form;
    fields_form = new FieldsForm({
      otm: this.EASColumnsInfo.otm,
      data: data,
      treeNodeClass: ExportManagerFieldTreeNode,
      treeOpts: {
        "class": 'cui-lv--has-datafields',
        maximize: false,
        rowMove: false,
        cols: ["auto"]
      }
    });
    div = fields_form.renderForm();
    fields_form.open();
    return div;
  };

  ExportManager.prototype.generateFieldsFormEAS = function() {
    var _field, _fields, blocks, field, get_field, i, j, len, len1, ot, ref, ref1;
    get_field = (function(_this) {
      return function(field) {
        var cbfn, cls, count, ctext, data, ext, fname, i, len, ref, ref1, ref2;
        fname = field.fullName();
        if (!(cbfn = _this.EASColumnsInfo.counts.by_field_name[fname])) {
          return;
        }
        if (!_this.data.fields[fname]) {
          _this.data.fields[fname] = {
            _enabled: !_this["export"].getId()
          };
        }
        if (!_this.data.fields[fname]._counts_per_class) {
          _this.data.fields[fname]._counts_per_class = {};
        }
        data = _this.data.fields[fname];
        ctext = [];
        ref = Asset.fileclasses();
        for (i = 0, len = ref.length; i < len; i++) {
          cls = ref[i];
          if (data._counts_per_class[cls] === void 0) {
            data._counts_per_class[cls] = 0;
          }
          if (!((ref1 = cbfn[cls]) != null ? ref1.total : void 0)) {
            continue;
          }
          data._counts_per_class[cls] = data._counts_per_class[cls] + cbfn[cls].total;
          ref2 = cbfn[cls].by_extension;
          for (ext in ref2) {
            count = ref2[ext];
            ctext.push("<span class='ez5-count-filetype'>" + count + " × <span class=\"ez5-filetype\">" + ext + "</span></span>");
          }
        }
        return {
          type: Checkbox,
          name: "_enabled",
          content: $div('ez5-filetypes').append(CUI.DOM.htmlToNodes(ctext.join(", "))),
          form: {
            label: field.fullNameLocalized()
          },
          onDataChanged: function() {
            _this.setStateForm();
          },
          data: data
        };
      };
    })(this);
    blocks = [];
    ref = this.EASColumnsInfo.otm.objecttypes;
    for (i = 0, len = ref.length; i < len; i++) {
      ot = ref[i];
      _fields = [];
      ref1 = ot.getEASFields("index");
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        field = ref1[j];
        _field = get_field(field);
        if (!_field) {
          continue;
        }
        _fields.push(_field);
      }
      if (_fields.length) {
        blocks.push(new CUI.Block({
          level: 2,
          text: ot.nameLocalized(),
          "class": "ez5-export-manager-block-fields-objecttype",
          content: new Form({
            fields: _fields
          }).start()
        }));
      }
    }
    if (blocks.length) {
      return blocks;
    } else {
      return null;
    }
  };

  ExportManager.prototype.getFilenameTemplateField = function() {
    return {
      type: Form,
      form: {
        label: $$("export.manager.form.filename.label")
      },
      fields: [
        {
          type: Checkbox,
          name: "_template",
          value: "default",
          radio: "template",
          text: $$("export.manager.form.filename.default")
        }, {
          type: Checkbox,
          name: "_template",
          value: "original",
          radio: "template",
          text: $$("export.manager.form.filename.original")
        }, {
          type: Form,
          horizontal: true,
          fields: [
            {
              type: Checkbox,
              name: "_template",
              value: "custom",
              radio: "template"
            }, {
              type: Input,
              name: "_template_custom",
              placeholder: $$("export.manager.form.filename.prefix")
            }
          ]
        }
      ]
    };
  };

  ExportManager.prototype.getMetadataField = function() {
    var i, k, keys, len, mapping, mapping_opts;
    if (ez5.session.hasSystemRight("root")) {
      mapping = "remove";
    } else {
      mapping = ez5.session.getSystemRight("frontend_features[metadata_export]");
    }
    if (!mapping) {
      return null;
    }
    mapping_opts = [];
    keys = ["standard"];
    if (mapping === "keep" || mapping === "remove") {
      keys.push("keep");
    }
    if (mapping === "remove") {
      keys.push("remove");
    }
    for (i = 0, len = keys.length; i < len; i++) {
      k = keys[i];
      mapping_opts.push({
        text: $$("export.manager.asset_profile." + k),
        value: k
      });
    }
    return {
      type: Select,
      name: "_metadata",
      form: {
        label: $$("export.manager.asset_profile.profile")
      },
      options: ez5.metadata.getMappingOpts(mapping_opts, {
        exiftool_export: true
      })
    };
  };

  ExportManager.prototype.getClassFields = function(cls, data_changed, for_assets) {
    var custom_fields, f, field, fields, i, idx, j, k, key, l, len, len1, len2, len3, len4, m, mf, n, name1, opt, options, ref, ref1, ref2, version_name, version_names;
    assert(cls, "ExportManager.getClassFields", "cls needs to be set", {
      cls: cls
    });
    fields = [];
    if (for_assets) {
      fields.push({
        type: Checkbox,
        form: {
          label: $$("export.manager.asset_custom_setting.label")
        },
        name: "_asset_custom_setting"
      });
    }
    options = [
      {
        text: $$("export.manager.form.url.no"),
        value: null
      }
    ];
    ref = this.__getOriginalKeys(cls);
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      k = ref[idx];
      options.push({
        text: $$("export.manager.original." + k),
        value: idx
      });
    }
    fields.push({
      type: Select,
      name: "_original",
      form: {
        label: $$("export.manager.original.label")
      },
      options: options
    });
    version_names = Asset.getExportVersionNamesForClass(cls, false);
    if (version_names.length) {
      options = [
        {
          text: $$("export.manager.form.url.no"),
          value: null
        }
      ];
      for (j = 0, len1 = version_names.length; j < len1; j++) {
        version_name = version_names[j];
        options.push({
          value: version_name,
          text: Asset.getPrintSizeForVersion(cls, version_name)
        });
      }
      fields.push({
        type: Select,
        name: "_version",
        form: {
          label: $$("export.manager.version.label")
        },
        options: options
      });
    }
    if (cls === "image" || cls === "audio" || cls === "video") {
      mf = this.getMetadataField();
      if (mf) {
        fields.push(mf);
      }
    }
    custom_fields = typeof this[name1 = "getClassFields_" + cls] === "function" ? this[name1]() : void 0;
    if (custom_fields != null ? custom_fields.length : void 0) {
      for (l = 0, len2 = custom_fields.length; l < len2; l++) {
        field = custom_fields[l];
        key = (ref1 = field.form) != null ? ref1.csv_key : void 0;
        if (key) {
          field.form.label = $$("export.manager.form." + key);
        }
        if (field.options) {
          ref2 = field.options;
          for (m = 0, len3 = ref2.length; m < len3; m++) {
            opt = ref2[m];
            if (isEmpty(opt.text)) {
              opt.text = $$("export.manager.option." + opt.value);
            }
          }
        }
      }
      fields.push({
        type: Checkbox,
        name: "_custom",
        form: {
          label: $$("export.manager.custom.label")
        }
      });
      fields.push.apply(fields, custom_fields);
    }
    for (n = 0, len4 = fields.length; n < len4; n++) {
      f = fields[n];
      f.onDataChanged = data_changed;
    }
    return fields;
  };

  ExportManager.prototype.showFieldSelector = function() {
    var data_copy, fieldSelector, form_fields;
    data_copy = copyObject(this.data.data_fields, true);
    form_fields = this.generateFieldsFormData(data_copy);
    fieldSelector = new Modal({
      "class": "ez5-export-manager-field-selector",
      cancel: true,
      pane: {
        header_left: new LocaLabel({
          loca_key: "export.manager.form.select_fields"
        }),
        content: form_fields,
        footer_right: (function(_this) {
          return function() {
            return new Buttonbar({
              buttons: [
                new LocaButton({
                  loca_key: "export.manager.field.selector.button.done",
                  onClick: function(ev) {
                    var saved_data_fields;
                    if (ev.hasModifierKey()) {
                      saved_data_fields = _this.data.data_fields;
                      _this.data.data_fields = data_copy;
                      CUI.debug(dump(_this.getExportData()));
                      _this.data.data_fields = saved_data_fields;
                      return;
                    }
                    _this.data.data_fields = data_copy;
                    _this.__updateSaveButton();
                    return fieldSelector.destroy();
                  }
                })
              ]
            });
          };
        })(this)
      }
    });
    return fieldSelector.show();
  };

  ExportManager.prototype.getClassFields_image = function() {
    var sizes;
    sizes = [
      {
        value: "keep"
      }
    ];
    sizes.push({
      value: "custom"
    });
    return [
      {
        form: {
          label: $$("export.manager.form.watermark")
        },
        type: Checkbox,
        name: "watermark"
      }, {
        form: {
          csv_key: "format"
        },
        name: "format",
        type: Select,
        options: [
          {
            value: "keep"
          }, {
            value: "jpeg"
          }, {
            value: "tiff"
          }, {
            value: "png"
          }, {
            value: "bmp"
          }
        ]
      }, {
        form: {
          csv_key: "jpeg_quality"
        },
        name: "jpeg_quality",
        type: Select,
        options: [
          {
            value: "small"
          }, {
            value: "medium"
          }, {
            value: "maximum"
          }
        ]
      }, {
        form: {
          csv_key: "colorspace"
        },
        name: "colorspace",
        type: Select,
        options: [
          {
            value: "keep"
          }, {
            value: "rgb"
          }, {
            value: "cmyk"
          }, {
            value: "gray"
          }
        ]
      }, {
        form: {
          csv_key: "size"
        },
        name: "size",
        type: Select,
        options: sizes
      }, {
        form: {
          csv_key: "custom_size"
        },
        name: "custom_size",
        type: Select,
        options: [
          {
            value: "dimension_max"
          }, {
            value: "dimension_min"
          }, {
            value: "height"
          }, {
            value: "width"
          }
        ]
      }, {
        form: {
          csv_key: "custom_size_pixel"
        },
        name: "custom_size_pixel",
        type: Input
      }
    ];
  };

  ExportManager.prototype.setStateForm = function() {
    var cls, cls_data, count, count_per_cls, i, len, ref, ref1, total;
    count_per_cls = (function(_this) {
      return function(cls) {
        var count, fn, info, ref;
        count = 0;
        ref = _this.data.fields;
        for (fn in ref) {
          info = ref[fn];
          if (info._enabled) {
            count = count + (info._counts_per_class[cls] || 0);
          }
        }
        return count;
      };
    })(this);
    ref = Asset.fileclasses();
    for (i = 0, len = ref.length; i < len; i++) {
      cls = ref[i];
      if (!((ref1 = this.data.classes[cls]) != null ? ref1._form : void 0)) {
        continue;
      }
      cls_data = this.data.classes[cls];
      total = this.EASColumnsInfo.counts.by_class[cls].total;
      if (total === 0) {
        cls_data._form_outer.hide();
        continue;
      }
      cls_data._class = cls;
      count = count_per_cls(cls);
      cls_data._form_outer.show();
      if (cls_data._enabled && count > 0) {
        cls_data._form.show();
        this.setClassState(cls_data);
      } else {
        cls_data._form.hide();
      }
      if (count > 0) {
        cls_data._cb.enable();
      } else {
        cls_data._cb.disable();
      }
    }
  };

  ExportManager.prototype.setClassState = function(version_data) {
    var disable, f, form, i, j, l, len, len1, len2, len3, m, name1, opt, original, original_pulldown, ref, ref1, ref2, ref3, ref4, show, version, version_name, version_names, version_pulldown;
    form = version_data._form;
    show = ["_asset_custom_setting", "_version", "_original", "_custom", "_metadata"];
    disable = [];
    version_names = Asset.getExportVersionNamesForClass(version_data._class, false);
    if (typeof this[name1 = "setClassState_" + version_data._class] === "function") {
      this[name1](version_data, show, disable);
    }
    original_pulldown = form.getFieldsByName("_original")[0];
    if (!(version_data._version !== null || version_data._original !== null || version_data._custom)) {
      disable.push("_metadata");
    }
    version_pulldown = form.getFieldsByName("_version")[0];
    if (version_pulldown) {
      for (i = 0, len = version_names.length; i < len; i++) {
        version_name = version_names[i];
        ref = version_pulldown.getOptions();
        for (j = 0, len1 = ref.length; j < len1; j++) {
          opt = ref[j];
          if (opt.value !== version_name.value) {
            continue;
          }
          if (version_data._value) {
            version = version_data._value.versions[version_name.value];
            if (!version || version._not_allowed) {
              opt.disabled = true;
              opt.text = $$("tool.asset.download." + version_data._class + "." + version_name.value, ["[nicht verfügbar]"]);
            } else {
              opt.disabled = false;
              opt.text = $$("tool.asset.download." + version_data._class + "." + version_name.value, [Asset.getLabelForVersion(version)]);
            }
          } else {
            opt.disabled = false;
            opt.text = Asset.getPrintSizeForVersion(version_data._class, version_name);
          }
        }
      }
      original = (ref1 = version_data._value) != null ? (ref2 = ref1.versions) != null ? ref2.original : void 0 : void 0;
      ref3 = version_pulldown.getOptions();
      for (l = 0, len2 = ref3.length; l < len2; l++) {
        opt = ref3[l];
        if (opt.value !== 0) {
          continue;
        }
        if (original) {
          opt.text = $$("export.manager.version.current") + " " + Asset.getLabelForVersion(original);
        } else {
          opt.text = $$("export.manager.version.current");
        }
      }
      version_pulldown.displayValue();
    }
    if (version_data.hasOwnProperty("_asset_custom_setting")) {
      if (version_data._asset_custom_setting) {

      } else {
        show = ["_asset_custom_setting"];
      }
    }
    ref4 = form.getDataFields();
    for (m = 0, len3 = ref4.length; m < len3; m++) {
      f = ref4[m];
      if (show.indexOf(f.getName()) > -1) {
        f.show(true);
      } else {
        f.hide(true);
      }
      if (disable.indexOf(f.getName()) > -1) {
        f.disable();
      } else {
        f.enable();
      }
    }
  };

  ExportManager.prototype.setClassState_image = function(data, show, disable) {
    var ref;
    if ((ref = data._value) != null ? ref.transform.length : void 0) {
      disable.push("_asset_custom_setting");
      disable.push("_custom");
    }
    if (!data._custom) {
      return;
    }
    show.push("format");
    show.push("watermark");
    switch (data.format) {
      case "jpeg":
        show.push("colorspace", "jpeg_quality", "size");
        break;
      case "keep":
      case "tiff":
      case "png":
      case "bmp":
        show.push("colorspace", "size");
    }
    switch (data.size) {
      case "custom":
        if (show.indexOf("size") > -1) {
          show.push("custom_size", "custom_size_pixel");
        }
    }
  };

  ExportManager.prototype.getClassFields_video = function() {
    return [];
  };

  ExportManager.prototype.getClassFields_audio = function() {
    return [];
  };

  ExportManager.prototype.getClassFields_office = function() {
    return [];
  };

  ExportManager.prototype.setClassState_office = function(data, show) {
    if (!data._custom) {
      return;
    }
    return show.push("format");
  };

  ExportManager.prototype.getClassFields_unknown = function() {
    return [];
  };

  ExportManager.prototype.destroy = function() {
    var ref;
    ExportManager.__super__.destroy.call(this);
    delete this.data;
    if ((ref = this.layout) != null) {
      ref.destroy();
    }
    return this.layout = null;
  };

  ExportManager.prototype.__getVersionSaveData = function(cdata) {
    var cls, custom, i, key, len, metadata, ref, ref1, versions;
    cls = cdata._class;
    assert(cls, "ExportManager.__getVersionSaveData", "Class not set in cdata, unable to save.", {
      cdata: cdata
    });
    metadata = getIntOrString(cdata._metadata);
    versions = [];
    if (!isNull(cdata._original)) {
      ref = this.__getOriginalKeys(cls)[cdata._original].split(/\+/);
      for (i = 0, len = ref.length; i < len; i++) {
        key = ref[i];
        versions.push({
          type: key,
          metadata: metadata
        });
      }
    }
    if (!isNull(cdata._version)) {
      versions.push({
        type: "version",
        version: cdata._version,
        metadata: metadata
      });
    }
    if (cdata._custom) {
      custom = this.getMapWithoutUnderscoreKeys(cdata);
      if ((ref1 = cdata._value) != null ? ref1.transform.length : void 0) {
        custom.transform = copyObject(cdata._value.transform, true);
      }
      versions.push({
        type: "custom",
        metadata: metadata,
        custom: custom
      });
    }
    return versions;
  };

  ExportManager.prototype.getExportData = function() {
    var asset, cdata, cls, dt, eas_config, fdata, fname, group, groups, i, info, infos, j, k, key, l, len, len1, len2, len3, m, map, odata, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, req, sd, uid, v, vdata, versions, vid;
    sd = {
      classes: {},
      eas_fields: {},
      assets: {},
      search: {}
    };
    req = this.addToRequest();
    ref = ["objecttypes", "sort", "search"];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      if (req.hasOwnProperty(k)) {
        sd.search[k] = req[k];
      }
    }
    ref1 = this.data.classes;
    for (cls in ref1) {
      cdata = ref1[cls];
      if (!cdata._enabled) {
        continue;
      }
      if (!sd.classes[cls]) {
        sd.classes[cls] = {};
      }
      cdata._class = cls;
      versions = this.__getVersionSaveData(cdata);
      sd.classes[cls] = versions;
    }
    eas_config = ez5.session.getEASConfig() || {};
    ref2 = this.data.fields;
    for (fname in ref2) {
      fdata = ref2[fname];
      if (!fdata._enabled) {
        continue;
      }
      dt = [];
      if (this.data["_url_original"] !== null) {
        ref3 = this.__getOriginalKeys()[this.data["_url_original"]].split(/\+/);
        for (j = 0, len1 = ref3.length; j < len1; j++) {
          key = ref3[j];
          dt.push({
            type: key,
            format: "short"
          });
        }
      }
      groups = Asset.getExportVersionGroups();
      for (group in groups) {
        infos = groups[group];
        if (!this.data["_url_group_" + group]) {
          continue;
        }
        for (l = 0, len2 = infos.length; l < len2; l++) {
          info = infos[l];
          dt.push({
            type: "version",
            format: "short",
            version: info.__full_version
          });
        }
      }
      sd.eas_fields[fname] = {
        files: true,
        data: dt
      };
    }
    if (this.data.show_details) {
      sd.assets = copyObject(this.data.assets, true);
      ref4 = this.data.objects;
      for (uid in ref4) {
        odata = ref4[uid];
        ref5 = odata.fields;
        for (fname in ref5) {
          fdata = ref5[fname];
          if (!((ref6 = this.data.fields[fname]) != null ? ref6._enabled : void 0)) {
            continue;
          }
          ref7 = fdata.assets;
          for (m = 0, len3 = ref7.length; m < len3; m++) {
            asset = ref7[m];
            ref8 = asset.versions;
            for (vid in ref8) {
              vdata = ref8[vid];
              if (!vdata._value) {
                continue;
              }
              if (vdata._value._export === true && !vdata._asset_custom_setting && vdata._value.preferred) {
                delete sd.assets[vid];
                continue;
              }
              if (!vdata._value._export) {
                if (vdata._value.preferred) {
                  sd.assets[vid] = false;
                }
                continue;
              }
              if (vdata._asset_custom_setting) {
                map = {
                  eas_parent_id: vdata._value.eas_parent_id,
                  versions: this.__getVersionSaveData(vdata)
                };
                sd.assets[vid] = map;
              } else if (vdata._value._in_object === false) {
                sd.assets[vid] = {
                  eas_parent_id: vdata._value.eas_parent_id
                };
              } else {
                sd.assets[vid] = true;
              }
            }
          }
        }
      }
    }
    if (this.data.csv) {
      sd.csv = {
        delimiter: ";",
        quote: '"',
        escape: '"'
      };
    } else {
      sd.csv = false;
    }
    sd.xml = !!this.data.xml;
    sd.xml_one_file_per_object = !!this.data.xml_one_file_per_object;
    sd.json = !!this.data.json;
    sd.json_one_file_per_object = !!this.data.json_one_file_per_object;
    if (CUI.isPlainObject(this.data.mapping)) {
      sd.mapping = "easydb";
      sd.xslt_xml_post_processing = {
        _id: this.data.mapping.xslt._id
      };
    } else {
      sd.mapping = getIntOrString(this.data.mapping);
      sd.xslt_xml_post_processing = null;
    }
    if (!isEmpty(this.data.name)) {
      sd.name = this.data.name;
    }
    sd.batch_size = null;
    switch (this.data._batch_size) {
      case "unlimited":
        sd.batch_size = 0;
        sd.flat = true;
        break;
      case "custom":
        sd.batch_size = this.data._batch_size_custom;
        sd.flat = false;
    }
    if (this.data._export_incremental) {
      sd.type = "export_incremental";
    } else {
      sd.type = "export";
    }
    sd.filename_template = null;
    sd.filename_original = null;
    switch (this.data._template) {
      case "original":
        sd.filename_original = true;
        break;
      case "custom":
        sd.filename_template = this.data._template_custom;
    }
    if (this.data.select_fields) {
      sd.fields = {};
      ref9 = this.data.data_fields;
      for (fname in ref9) {
        fdata = ref9[fname];
        if (!fdata._enabled) {
          continue;
        }
        sd.fields[fname] = this.getMapWithoutUnderscoreKeys(fdata);
        if (v = sd.fields[fname].version) {
          delete sd.fields[fname].version;
          sd.fields[fname].versions = [v];
        }
      }
      if (jQuery.isEmptyObject(sd.fields)) {
        sd.fields = null;
      }
    } else {
      sd.fields = null;
    }
    return sd;
  };

  ExportManager.prototype.getMapWithoutUnderscoreKeys = function(map) {
    var dt, field, k, ref, v;
    dt = {};
    for (k in map) {
      v = map[k];
      if (k.substr(0, 1) === "_") {
        continue;
      }
      field = (ref = map._form) != null ? ref.getFieldsByName(k)[0] : void 0;
      if (field != null ? field.isHidden() : void 0) {
        continue;
      }
      dt[k] = v;
    }
    return dt;
  };

  ExportManager.prototype.__findOriginalInVersions = function(versions) {
    var found, i, idx, len, ref, version;
    found = [];
    for (i = 0, len = versions.length; i < len; i++) {
      version = versions[i];
      if ((ref = version.type) === "original" || ref === "current") {
        found.push(version.type);
      }
    }
    if (found.length === 0) {
      return null;
    }
    found.sort();
    idx = idxInArray(found.join("+"), this.__getOriginalKeys());
    assert(idx > -1, "ExportManager.__findOriginalInVersions: could not match original / current version data");
    return idx;
  };

  ExportManager.prototype.__getMapFromVersions = function(versions) {
    var _k, cdata, found, i, j, k, l, len, len1, len2, len3, m, ref, ref1, ref2, ref3, v, version;
    if (versions == null) {
      versions = [];
    }
    cdata = {};
    ref = ["metadata"];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      _k = "_" + k;
      for (j = 0, len1 = versions.length; j < len1; j++) {
        version = versions[j];
        if (!version[k]) {
          continue;
        }
        assert(!cdata[_k] || cdata[_k] === version[k], "ExportManager.__getMapFromVersions: \"" + k + "\" mismatch in versions.");
        cdata[_k] = version[k];
      }
    }
    cdata._original = this.__findOriginalInVersions(versions);
    found = [];
    for (l = 0, len2 = versions.length; l < len2; l++) {
      version = versions[l];
      if ((ref1 = version.type) === "version") {
        found.push(version.version);
      }
    }
    if (found.length > 0) {
      assert(found.length === 1, "ExportManager.getFormData: could not match second type == version");
      cdata._version = found[0];
    }
    for (m = 0, len3 = versions.length; m < len3; m++) {
      version = versions[m];
      if ((ref2 = version.type) === "custom") {
        assert(!cdata._custom, "ExportManager.getFormData: Only one \"custom\" version is supported.");
        cdata._custom = true;
        ref3 = version.custom;
        for (k in ref3) {
          v = ref3[k];
          cdata[k] = v;
        }
      }
    }
    return cdata;
  };

  ExportManager.prototype.getFormData = function() {
    var cdata, cls, data, dt, fdata, fname, group, groups, i, info, infos, j, l, len, len1, len2, ref, ref1, ref2, ref3, ref4, ref5, version, versions, xslt;
    dt = {
      classes: {},
      fields: {},
      data_fields: {},
      objects: {},
      assets: {},
      name: "",
      _template: "default",
      _template_custom: "",
      _batch_size: "default",
      _export_incremental: false,
      _batch_size_custom: null,
      _url_original: null
    };
    groups = Asset.getExportVersionGroups();
    for (group in groups) {
      dt["_url_group_" + group] = false;
    }
    if (!this["export"].getId()) {
      return dt;
    }
    data = this["export"].data;
    ref = data["export"].eas_fields;
    for (fname in ref) {
      info = ref[fname];
      if (info.files) {
        dt.fields[fname] = {
          _enabled: true
        };
      }
      if (!((ref1 = info.data) != null ? ref1.length : void 0)) {
        continue;
      }
      dt._url_original = this.__findOriginalInVersions(info.data);
      ref2 = info.data;
      for (i = 0, len = ref2.length; i < len; i++) {
        version = ref2[i];
        if (version.type === "version") {
          for (group in groups) {
            infos = groups[group];
            for (j = 0, len1 = infos.length; j < len1; j++) {
              info = infos[j];
              if (info.__full_version === version.version) {
                dt["_url_group_" + group] = true;
              }
            }
          }
        }
      }
    }
    ref3 = data["export"].classes;
    for (cls in ref3) {
      versions = ref3[cls];
      cdata = this.__getMapFromVersions(versions);
      cdata._enabled = true;
      dt.classes[cls] = cdata;
    }
    if (data["export"].xml) {
      dt.xml = true;
    }
    if (data["export"].xml_one_file_per_object) {
      dt.xml_one_file_per_object = true;
    }
    if (data["export"].json) {
      dt.json = true;
    }
    if (data["export"].json_one_file_per_object) {
      dt.json_one_file_per_object = true;
    }
    if (data["export"].xslt_xml_post_processing) {
      ref4 = this.__getXSLTs();
      for (l = 0, len2 = ref4.length; l < len2; l++) {
        xslt = ref4[l];
        if (xslt.xslt._id === data["export"].xslt_xml_post_processing._id) {
          dt.mapping = xslt;
        }
      }
    } else if (data["export"].mapping) {
      dt.mapping = "" + data["export"].mapping;
    }
    if (data["export"].csv) {
      dt.csv = true;
    }
    if (data["export"].batch_size === 0) {
      dt._batch_size = "unlimited";
    } else if (data["export"].batch_size > 0) {
      dt._batch_size = "custom";
      dt._batch_size_custom = data["export"].batch_size;
    }
    if (data["export"].type === "export_incremental") {
      dt._export_incremental = true;
    } else {
      dt._export_incremental = false;
    }
    if (data["export"].filename_original) {
      dt._template = "original";
    } else if (!isEmpty(data["export"].filename_template)) {
      dt._template = "custom";
      dt._template_custom = data["export"].filename_template;
    }
    dt.name = data["export"].name;
    if (data["export"].fields) {
      dt.select_fields = true;
      ref5 = data["export"].fields;
      for (fname in ref5) {
        fdata = ref5[fname];
        dt.data_fields[fname] = fdata;
        fdata._enabled = true;
        if (fdata.versions) {
          fdata.version = fdata.versions[0];
          delete fdata.versions;
        }
      }
    }
    if ($.isEmptyObject(data["export"].assets)) {
      dt.show_details = false;
    } else {
      dt.show_details = true;
      dt.assets = copyObject(data["export"].assets, true);
    }
    return dt;
  };

  return ExportManager;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var PrintManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PrintManager = (function(superClass) {
  extend(PrintManager, superClass);

  function PrintManager() {
    return PrintManager.__super__.constructor.apply(this, arguments);
  }

  PrintManager.prototype.initOpts = function() {
    PrintManager.__super__.initOpts.call(this);
    return this.addOpts({
      search: {
        check: Search
      },
      collection: {
        check: Collection
      },
      result_object: {
        check: ResultObject
      },
      mode: {
        mandatory: true,
        "default": "window",
        check: ["modal", "iframe", "window"]
      }
    });
  };

  PrintManager.prototype.readOpts = function() {
    var col;
    PrintManager.__super__.readOpts.call(this);
    assert(xor(xor(this._result_object, this._collection), this._search), "new PrintManager", "opts.collection, opts.result_object, opts.search are mutually exclusive.", {
      opts: this.opts
    });
    if (this._search) {
      this.__search = this._search;
    } else if (this._collection) {
      this.__search = new SearchCollectionHeadless({
        collection: this._collection
      });
    } else {
      col = new CollectionTemporary();
      col.insertObjects([this._result_object.getCollectionObject()]).done((function(_this) {
        return function() {
          return _this.__search = new SearchCollectionHeadless({
            collection: col
          });
        };
      })(this)).fail((function(_this) {
        return function() {
          return CUI.problem({
            text: $$("print.manager.generic_error")
          });
        };
      })(this));
    }
    this.__limit = parseInt(ez5.session.getClientDefault("print_limit")) || 250;
  };

  PrintManager.prototype.print = function(ev) {
    var dfr, open_window, sm, spinner, win;
    dfr = new CUI.Deferred();
    win = null;
    open_window = (function(_this) {
      return function() {
        var asset, img, tmpl;
        win = PrintManager.windowOpen();
        tmpl = new Template({
          name: "print-manager-header",
          map: {
            logo: true,
            easydb: true,
            date_time: true
          }
        });
        img = ez5.session.getConfigPicture("logo");
        if (img) {
          asset = new AssetPlain({
            value: img
          });
          tmpl.map.logo.appendChild(asset.getImgElement(null, "original"));
        }
        tmpl.map.date_time.textContent = ez5.format_date_and_time(new Date());
        tmpl.map.easydb.textContent = ez5.session.getSystemName();
        return win.document.body.innerHTML += tmpl.DOM.outerHTML;
      };
    })(this);
    open_window();
    spinner = CUI.spinner({
      text: $$("print.manager.collecting_data")
    });
    sm = new PrintManagerResult({
      proxy_self: !!this._search,
      limit: this.__limit
    });
    this.__search.execute(new Request({
      searchManagers: [sm],
      exclusive: true,
      exclusive_show: true
    })).always((function(_this) {
      return function() {
        return spinner.destroy();
      };
    })(this)).fail(dfr.reject).done((function(_this) {
      return function() {
        var count, data, idx, next_object, objs, spinner2;
        window.focus();
        data = _this.__search.getLastData();
        count = data.count;
        idx = -1;
        objs = data.objects;
        spinner2 = null;
        next_object = function() {
          var ro;
          if (idx === -1) {
            spinner2 = CUI.spinner({
              text: $$("print.manager.collecting_data")
            });
          }
          idx = idx + 1;
          if (idx === objs.length) {
            spinner2.destroy();
            dfr.resolve();
            return;
          }
          spinner2.updateText($$("print.manager.preparing_data", {
            total: objs.length,
            count: idx + 1
          }));
          ro = new ResultObject().setData(objs[idx]);
          return ro.renderPrint().fail(dfr.reject).done(function(div) {
            win.document.body.innerHTML += div.outerHTML;
            return next_object();
          });
        };
        if (count === 0) {
          return CUI.problem($$("print.manager.no_objects.message", {
            count: count,
            limit: _this.__limit
          }));
        } else if (count > _this.__limit) {
          return CUI.confirm({
            button_text_ok: $$("print.manager.too_many_objects.button.print"),
            text: $$("print.manager.too_many_objects.message", {
              count: count,
              limit: _this.__limit
            })
          }).done(function() {
            return next_object();
          }).fail(function() {
            win.close();
            return win = null;
          });
        } else {
          return next_object();
        }
      };
    })(this));
    dfr.done((function(_this) {
      return function() {
        return PrintManager.loadCSS(win, Start.getCSSUrl("print", "static")).done(function() {
          return setTimeout((function() {
            return win.print();
          }), 500);
        });
      };
    })(this));
    dfr.fail((function(_this) {
      return function() {
        return CUI.problem({
          text: $$("print.manager.generic_error")
        });
      };
    })(this));
  };

  PrintManager.windowOpen = function(opts) {
    var func, unload, win;
    if (opts == null) {
      opts = {};
    }
    win = window.open("", "_blank", "width=600,height=400,scrollbars=1,resizable=1");
    unload = (function(_this) {
      return function() {
        var func;
        win.removeEventListener("unload", func);
        win.close();
        func = null;
        return win = null;
      };
    })(this);
    func = (function(_this) {
      return function() {
        window.removeEventListener("unload", unload);
        return func = null;
      };
    })(this);
    window.addEventListener("unload", unload);
    win.addEventListener("unload", func);
    win.document.title = opts.title || ez5.session.getSystemName();
    win.document.head.innerHTML += CUI.DOM.element("meta", {
      charset: "utf-8"
    }).outerHTML;
    return win;
  };

  PrintManager.loadCSS = function(win, css_href) {
    var css_html, dfr;
    dfr = new CUI.Deferred();
    css_html = '<LINK rel="stylesheet" charset="utf-8" href="' + ez5.getAbsoluteURL(css_href) + '"/>';
    win.document.head.innerHTML += css_html;
    win.document.head.lastElementChild.addEventListener("load", (function(_this) {
      return function() {
        if (dfr.state() === "pending") {
          return dfr.resolve();
        }
      };
    })(this));
    return dfr.promise();
  };

  return PrintManager;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var PrintManagerResult,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PrintManagerResult = (function(superClass) {
  extend(PrintManagerResult, superClass);

  function PrintManagerResult() {
    return PrintManagerResult.__super__.constructor.apply(this, arguments);
  }

  PrintManagerResult.prototype.initOpts = function() {
    PrintManagerResult.__super__.initOpts.call(this);
    return this.addOpts({
      proxy_self: {
        check: Boolean
      },
      limit: {
        "default": 250,
        check: (function(_this) {
          return function(v) {
            return v >= 0;
          };
        })(this)
      }
    });
  };

  PrintManagerResult.prototype.addToRequest = function(request) {
    var k, req, v;
    if (!request.exclusive) {
      return;
    }
    if (this._proxy_self) {
      req = {};
      this.getSearch().addToRequest(req);
      for (k in req) {
        v = req[k];
        request[k] = v;
      }
    }
    request.offset = 0;
    request.limit = this._limit;
    request.format = "long";
    request.generate_rights = false;
    request.best_mask = true;
    return delete request.event_log;
  };

  PrintManagerResult.prototype.showResult = function(data, request) {
    return console.error("data returned", data, request);
  };

  return PrintManagerResult;

})(SearchManager);
// Generated by CoffeeScript 1.10.0
var DownloadManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DownloadManager = (function(superClass) {
  extend(DownloadManager, superClass);

  function DownloadManager(opts) {
    DownloadManager.__super__.constructor.call(this, opts);
    this.form_data = {
      _template: "default"
    };
  }

  DownloadManager.prototype.initOpts = function() {
    DownloadManager.__super__.initOpts.call(this);
    this.addOpts({
      result_object: {
        check: function(v) {
          return v instanceof ResultObject;
        }
      },
      collection: {
        check: Collection
      },
      zip_download_name: {
        check: String
      }
    });
    return this.mergeOpts({
      search: {
        mandatory: false
      }
    });
  };

  DownloadManager.prototype.readOpts = function() {
    DownloadManager.__super__.readOpts.call(this);
    return assert(xor(this._search, xor(this._collection, this._result_object)), "new DownloadManager", "One of opts.collection, opts.search, or opts.result_object must be set.", {
      opts: this.opts
    });
  };

  DownloadManager.prototype.init = function() {
    var col, dfr, go_on;
    dfr = new CUI.Deferred();
    go_on = (function(_this) {
      return function() {
        return DownloadManager.__super__.init.call(_this).done(dfr.resolve).fail(dfr.reject);
      };
    })(this);
    if (this._collection) {
      col = this._collection;
      this.__search = new SearchCollectionHeadless({
        collection: col
      });
      go_on();
    } else if (this._search) {
      this.__search = this._search;
      go_on();
    } else {
      col = new CollectionTemporary();
      col.insertObjects([this._result_object.getCollectionObject()]).done((function(_this) {
        return function() {
          _this.__search = new SearchCollectionHeadless({
            collection: col
          });
          return go_on();
        };
      })(this)).fail(dfr.reject);
    }
    return dfr.promise();
  };

  DownloadManager.prototype.gatherBaseData = function() {
    var count, dfr, eas_info, lbl, limit, offset, search_more, set_percent, sm, toaster;
    eas_info = {
      total: 0,
      assets: [],
      counts: {
        by_class: {},
        by_field_name: {}
      }
    };
    this.setEASColumnsInfo(eas_info);
    sm = new DownloadManagerResult({
      manager: this,
      eas_info: eas_info
    });
    offset = 0;
    limit = 1000;
    toaster = null;
    count = -1;
    lbl = new LocaLabel({
      loca_key: 'download.manager.collecting_data',
      multiline: true,
      loca_key_attrs: {
        percent: 0
      }
    });
    set_percent = function(percent) {
      if (!toaster) {
        toaster = CUI.toaster({
          content: lbl,
          show_ms: 0
        });
      }
      lbl.setText($$('download.manager.collecting_data|text', {
        percent: Math.ceil(offset / count * 100)
      }));
    };
    dfr = new CUI.Deferred();
    dfr.always((function(_this) {
      return function() {
        return toaster != null ? toaster.destroy() : void 0;
      };
    })(this));
    search_more = (function(_this) {
      return function() {
        var req;
        req = new Request({
          searchManagers: [sm],
          offset: offset,
          limit: limit,
          exclusive: true
        });
        return _this.__search.execute(req).done(function(req, data) {
          if (offset + limit < data.count) {
            offset = offset + limit;
            count = data.count;
            set_percent();
            return search_more();
          } else {
            return dfr.resolve();
          }
        }).fail(dfr.reject);
      };
    })(this);
    search_more();
    return dfr.promise();
  };

  DownloadManager.prototype.hasDownloadableVersion = function() {
    var asset, assets, i, idx, len, value;
    assets = this._result_object.getAssetsForBrowser("detail");
    if (assets.length === 0) {
      return false;
    }
    for (idx = i = 0, len = assets.length; i < len; idx = ++i) {
      asset = assets[idx];
      value = asset.getValue();
      if (value._incomplete_versions) {
        return true;
      }
      if (Asset.getDownloadVersions(value).length > 0) {
        return true;
      }
    }
    return false;
  };

  DownloadManager.prototype.getButton = function(button_opts) {
    var download_btn;
    if (button_opts == null) {
      button_opts = {};
    }
    if (!this.hasDownloadableVersion()) {
      return null;
    }
    button_opts.onClick = (function(_this) {
      return function() {
        download_btn.disable();
        return _this.startExport().always(function() {
          return download_btn.enable();
        });
      };
    })(this);
    download_btn = new CUI.defaults["class"].Button(button_opts);
    return download_btn;
  };

  DownloadManager.prototype.getTitle = function() {
    return $$("download.manager.modal.title");
  };

  DownloadManager.prototype.getDownloadPrepareError = function() {
    return $$('download.manager.error.prepare.explain');
  };

  DownloadManager.prototype.getButtonStartLocaKey = function() {
    return 'download.manager.modal.button.start';
  };

  DownloadManager.prototype.showUserAdminMessages = function() {
    var dfr, obj, repl_rec, ro, run_messages;
    dfr = new CUI.Deferred();
    repl_rec = {};
    if (this.__search.getLastData().count === 1) {
      obj = this.__search.getLastData().objects[0];
      if (obj) {
        ro = new ResultObject().setData(obj);
        repl_rec = ro.getReplacementRecord();
      }
    }
    run_messages = (function(_this) {
      return function(msgs) {
        var fn1, funcs, i, len, msg;
        if (msgs.length === 0) {
          dfr.resolve();
          return;
        }
        funcs = [];
        fn1 = function(msg) {
          return funcs.push(function() {
            var _msg;
            _msg = ez5.replaceMap(msg.getMessageLocalized(), repl_rec, $$("download.manager.default.replacement"));
            return msg.showMessage(_msg);
          });
        };
        for (i = 0, len = msgs.length; i < len; i++) {
          msg = msgs[i];
          fn1(msg);
        }
        return CUI.chainedCall.apply(CUI, funcs).done(dfr.resolve).fail(dfr.reject);
      };
    })(this);
    ez5.defaults["class"].AdminMessage.load("download").done((function(_this) {
      return function(adminMessages) {
        var am, has_tagfilters, i, len, sm;
        has_tagfilters = false;
        for (i = 0, len = adminMessages.length; i < len; i++) {
          am = adminMessages[i];
          if (am.getTagfilter()) {
            has_tagfilters = true;
            break;
          }
        }
        if (has_tagfilters) {
          sm = new DownloadManagerTagFilter({
            manager: _this,
            messages: adminMessages
          });
          return _this.__search.execute(new Request({
            searchManagers: [sm],
            exclusive: true
          })).fail(dfr.reject).done(function() {
            return run_messages(sm.getMatchingMessages());
          });
        } else {
          return run_messages(adminMessages);
        }
      };
    })(this));
    return dfr.promise();
  };

  DownloadManager.prototype.startExport = function() {
    var dfr;
    dfr = new CUI.Deferred();
    this.init().fail(dfr.reject).done((function(_this) {
      return function() {
        return _this.gatherBaseData().fail(dfr.reject).done(function() {
          return _this.showUserAdminMessages().fail(dfr.reject).done(function() {
            var content, mod, show_error;
            mod = null;
            _this.saveButton = new LocaButton({
              loca_key: _this.getButtonStartLocaKey(),
              left: true,
              onClick: function(ev) {
                mod.disableAllButtons();
                _this.saveButton.setIcon("spinner");
                return _this.saveExport(ev).done(function() {
                  dfr.resolve();
                  return mod.destroy();
                }).fail(function() {
                  _this.saveButton.setIcon();
                  return mod.enableAllButtons();
                });
              }
            });
            content = _this.getContent();
            show_error = function() {
              return CUI.problem({
                text: _this.getDownloadPrepareError()
              }).done(dfr.reject);
            };
            if (!content) {
              show_error();
              return;
            }
            return CUI.chainedCall(content).done(function(_content) {
              mod = new CUI.ConfirmationDialog({
                icon: $$("download.manager.modal.icon"),
                title: _this.getTitle(),
                "class": "ez5-download-manager-confirmation-dialog ez5-event-poller",
                cancel: true,
                onCancel: function() {
                  dfr.reject("user_rejected");
                },
                content: _content,
                buttons: function() {
                  return [_this.saveButton];
                }
              }).show();
              return dfr.notify("modal_open");
            }).fail(function() {
              return show_error();
            });
          });
        });
      };
    })(this));
    return dfr.promise();
  };

  DownloadManager.prototype.getContent = function() {
    var add_metadata, bottom, cls, eas_info, i, label, label_txt, len, loca_key, mf, opts, ref, ref1, size, stat, stat_warning, stats, version_stat, vn, vprint;
    this.form_fields = [];
    label_txt = [];
    eas_info = this.getEASColumnsInfo();
    stats = eas_info.counts;
    stat_warning = false;
    ref = stats.by_class;
    for (cls in ref) {
      stat = ref[cls];
      if (!stat.total) {
        continue;
      }
      if (cls === "image" || cls === "audio" || cls === "video") {
        add_metadata = true;
      }
      label_txt.push(stat.total + "x " + $$("server.eas.fileclass." + cls));
      opts = [];
      ref1 = Asset.getExportVersionNamesForClass(cls, true);
      for (i = 0, len = ref1.length; i < len; i++) {
        vn = ref1[i];
        if (stat.versions) {
          version_stat = stat.versions[vn];
          if (!(version_stat != null ? version_stat.total : void 0)) {
            continue;
          }
        } else {
          stat_warning = true;
          if (vn === "original") {
            version_stat = stat;
          } else {
            version_stat = null;
          }
        }
        if (!this.form_data[cls]) {
          this.form_data[cls] = vn;
        }
        if (version_stat) {
          size = ez5.format_filesize(version_stat.acc_filesize);
          loca_key = "download.manager.version.with_size";
        } else {
          loca_key = "download.manager.version.without_size";
        }
        if (vn === "original") {
          vprint = $$("download.manager.format.original");
        } else {
          vprint = Asset.getPrintSizeForVersion(cls, vn);
        }
        opts.push({
          text: $$(loca_key, {
            size: size,
            version: vprint,
            count: version_stat != null ? version_stat.total : void 0
          }),
          value: vn
        });
      }
      this.form_fields.push({
        form: {
          label: $$("server.eas.fileclass." + cls)
        },
        name: cls,
        type: Options,
        radio: true,
        min_checked: 0,
        options: opts,
        undo_support: false
      });
    }
    if (this.form_fields.length === 0) {
      return false;
    }
    mf = this.getMetadataField();
    if (add_metadata && mf) {
      this.form_fields.push(mf);
    } else {
      this.form_data._metadata = "standard";
    }
    this.form_fields.push(this.getFilenameTemplateField());
    label = new Label({
      "class": "ez5-download-manager-status",
      text: "Status",
      multiline: true
    });
    label.setText(label_txt.join(", "));
    bottom = DOM.space();
    bottom.appendChild(label.DOM);
    if (stat_warning) {
      bottom.appendChild(new EmptyLabel({
        text: $$("download.manager.no_stats_hint")
      }).DOM);
    }
    return [
      new Form({
        fields: this.form_fields,
        onDataChanged: (function(_this) {
          return function() {
            var ref2, v;
            ref2 = _this.form_data;
            for (cls in ref2) {
              v = ref2[cls];
              if (cls.startsWith("_")) {
                continue;
              }
              if (v !== false) {
                _this.saveButton.enable();
                return;
              }
            }
            return _this.saveButton.disable();
          };
        })(this),
        data: this.form_data
      }).start(), bottom
    ];
  };

  DownloadManager.prototype.getExportSaveData = function() {
    var cls, data, fn, metadata, ref, stats, vn;
    stats = this.getEASColumnsInfo().counts;
    data = {
      search: this.addToRequest(),
      xml: false,
      eas_fields: {},
      classes: {},
      type: "download",
      filename_template: null,
      filename_original: null
    };
    for (fn in stats.by_field_name) {
      data.eas_fields[fn] = {
        files: true
      };
    }
    metadata = getIntOrString(this.form_data._metadata);
    switch (this.form_data._template) {
      case "original":
        data.filename_original = true;
        break;
      case "custom":
        data.filename_template = this.form_data._template_custom;
    }
    ref = this.form_data;
    for (cls in ref) {
      vn = ref[cls];
      if (cls.startsWith("_")) {
        continue;
      }
      if (!vn) {
        continue;
      }
      if (vn === "original") {
        data.classes[cls] = [
          {
            type: "current",
            metadata: metadata
          }
        ];
      } else {
        data.classes[cls] = [
          {
            type: "version",
            version: vn,
            metadata: metadata
          }
        ];
      }
    }
    return {
      "export": data
    };
  };

  DownloadManager.prototype.filterDownloadableFiles = function(files) {
    return files;
  };

  DownloadManager.prototype.acceptVersionForDownload = function(version) {
    return true;
  };

  DownloadManager.prototype.getWaitDialogLocaKey = function() {
    return 'download.manager.preparing_download';
  };

  DownloadManager.prototype.downloadFiles = function(files) {
    var file, i, len;
    if (files.length === 1) {
      for (i = 0, len = files.length; i < len; i++) {
        file = files[i];
        this.sendFile("file/" + Export.encodeURIFilePath(file.path));
      }
    } else {
      this.sendFile("zip/", this._zip_download_name);
    }
    return CUI.resolvedPromise();
  };

  DownloadManager.prototype.getDownloadUrl = function(url) {
    return ez5.api.getFullBase() + '/export/' + this["export"].getId() + "/" + url + "?token=" + ez5.session.token + "&disposition=attachment";
  };

  DownloadManager.prototype.sendFile = function(url, zip_download_name) {
    var load_url;
    load_url = this.getDownloadUrl(url);
    if (zip_download_name) {
      load_url = load_url + "&filename=" + encodeURIComponent(zip_download_name);
    }
    return $element("iframe", "", {
      style: "display:none;",
      src: load_url
    }).appendTo(document.body);
  };

  DownloadManager.prototype.saveExport = function(ev) {
    var cc, data, dfr, loca_key, mypoll, set_failed, tell_failed, tell_warning;
    dfr = new CUI.Deferred();
    data = this.getExportSaveData();
    if (ev.hasModifierKey()) {
      console.debug(dump(data));
      return dfr.reject().promise();
    }
    loca_key = this.getWaitDialogLocaKey();
    if (loca_key) {
      cc = new CUI.ConfirmationChoice({
        content: new LocaLabel({
          loca_key: loca_key + '.message'
        }),
        choices: [
          {
            loca_key: loca_key + '.button.cancel'
          }
        ]
      });
      cc.open().done((function(_this) {
        return function() {
          Events.ignore(mypoll);
          return _this["export"]["delete"]().always(function() {
            return dfr.reject();
          });
        };
      })(this));
    } else {
      cc = null;
    }
    this["export"].data = data;
    mypoll = EventPoller.listen({
      instance: this,
      filter: (function(_this) {
        return function(ev) {
          return ev.type === 'OBJECT_UPDATE' && ev.basetype === 'export' && ev.object_id === _this["export"].getId();
        };
      })(this),
      call: (function(_this) {
        return function(events) {
          if (cc != null) {
            cc.disableAllButtons();
          }
          _this["export"].load(true).done(function() {
            var files;
            switch (_this["export"].getState()) {
              case "done":
              case "done_with_warnings":
                if (cc != null) {
                  cc.destroy();
                }
                files = _this.filterDownloadableFiles(_this["export"].getFiles());
                if (!(files != null ? files.length : void 0)) {
                  return tell_failed();
                }
                Events.ignore(mypoll);
                if (_this["export"].getState() === "done_with_warnings") {
                  tell_warning();
                }
                _this.downloadFiles(files).fail(dfr.reject).done(dfr.resolve);
                return;
              case "failed":
                if (cc != null) {
                  cc.destroy();
                }
                tell_failed();
                return;
            }
            if (cc != null) {
              cc.enableAllButtons();
            }
          });
        };
      })(this)
    });
    tell_warning = (function(_this) {
      return function() {
        return CUI.problem({
          text: $$("download.manager.warning.export.explain", {
            name: _this["export"].getName()
          })
        });
      };
    })(this);
    tell_failed = (function(_this) {
      return function() {
        CUI.problem({
          text: $$("download.manager.error.export.explain", {
            name: _this["export"].getName()
          })
        });
        return dfr.reject();
      };
    })(this);
    set_failed = (function(_this) {
      return function() {};
    })(this);
    dfr.always(function() {
      if (cc != null) {
        cc.destroy();
      }
      return Events.ignore(mypoll);
    });
    this["export"].save().done((function(_this) {
      return function() {
        return _this["export"].start().fail(dfr.reject);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  return DownloadManager;

})(ExportManager);
// Generated by CoffeeScript 1.10.0
var DownloadManagerResult,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DownloadManagerResult = (function(superClass) {
  extend(DownloadManagerResult, superClass);

  function DownloadManagerResult() {
    return DownloadManagerResult.__super__.constructor.apply(this, arguments);
  }

  DownloadManagerResult.prototype.initOpts = function() {
    DownloadManagerResult.__super__.initOpts.call(this);
    return this.addOpts({
      manager: {
        mandatory: true,
        check: DownloadManager
      },
      eas_info: {
        mandatory: true,
        check: 'PlainObject'
      }
    });
  };

  DownloadManagerResult.prototype.addToRequest = function(request) {
    var exf, i, len, ot_name, ref;
    this._manager.addToRequest(request);
    exf = request.exclude_fields = [];
    ref = request.objecttypes || [];
    for (i = 0, len = ref.length; i < len; i++) {
      ot_name = ref[i];
      exf.push.apply(exf, Objecttype.getExcludeFieldsForEASFields(ot_name));
    }
    request.format = "long";
    return this;
  };

  DownloadManagerResult.prototype.showResult = function(request, data) {
    var asset, cls, fn, i, idx, j, k, len, len1, len2, obj, ref, ref1, ref2, ro, value, version, vname;
    ref = data.objects;
    for (i = 0, len = ref.length; i < len; i++) {
      obj = ref[i];
      ro = new ResultObject().setData(obj);
      ref1 = ro.getAssetsForBrowser("detail");
      for (idx = j = 0, len1 = ref1.length; j < len1; idx = ++j) {
        asset = ref1[idx];
        value = asset.getValue();
        if (value._incomplete_versions) {
          continue;
        }
        fn = value._field.fullName();
        cls = value["class"];
        this._eas_info.total += 1;
        if (!this._eas_info.counts.by_class[cls]) {
          this._eas_info.counts.by_class[cls] = {
            total: 0,
            acc_filesize: 0,
            versions: {}
          };
        }
        this._eas_info.counts.by_class[cls].total += 1;
        this._eas_info.counts.by_class[cls].acc_filesize += value.filesize;
        asset.__object_data = obj;
        this._eas_info.assets.push(asset);
        ref2 = Asset.getDownloadVersions(value);
        for (k = 0, len2 = ref2.length; k < len2; k++) {
          version = ref2[k];
          vname = version.version;
          if (!this._manager.acceptVersionForDownload(version)) {
            continue;
          }
          if (!this._eas_info.counts.by_class[cls].versions[vname]) {
            this._eas_info.counts.by_class[cls].versions[vname] = {
              total: 0,
              acc_filesize: 0
            };
          }
          this._eas_info.counts.by_class[cls].versions[vname].total += 1;
          this._eas_info.counts.by_class[cls].versions[vname].acc_filesize += version.filesize;
        }
        if (!this._eas_info.counts.by_field_name[fn]) {
          this._eas_info.counts.by_field_name[fn] = {
            total: 0
          };
        }
        this._eas_info.counts.by_field_name[fn].total += 1;
      }
    }
  };

  return DownloadManagerResult;

})(SearchManager);
// Generated by CoffeeScript 1.10.0
var DownloadManagerTagFilter,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DownloadManagerTagFilter = (function(superClass) {
  extend(DownloadManagerTagFilter, superClass);

  function DownloadManagerTagFilter() {
    return DownloadManagerTagFilter.__super__.constructor.apply(this, arguments);
  }

  DownloadManagerTagFilter.prototype.initOpts = function() {
    DownloadManagerTagFilter.__super__.initOpts.call(this);
    return this.addOpts({
      manager: {
        mandatory: true,
        check: DownloadManager
      },
      messages: {
        mandatory: true,
        check: Array
      }
    });
  };

  DownloadManagerTagFilter.prototype.addToRequest = function(request) {
    this._manager.addToRequest(request);
    request.format = "short";
    request.offset = 0;
    request.limit = 1000;
    this.__matching = [];
    return this;
  };

  DownloadManagerTagFilter.prototype.getMatchingMessages = function() {
    return this.__matching;
  };

  DownloadManagerTagFilter.prototype.showResult = function(request, data) {
    var i, j, k, len, len1, len2, msg, obj, ref, ref1, tagfilter, tagfilters, tf;
    if (data.count > 1000) {
      this.__matching = this._messages;
      return;
    }
    tagfilters = [];
    ref = this._messages;
    for (i = 0, len = ref.length; i < len; i++) {
      msg = ref[i];
      tf = msg.getTagfilter();
      if (tf) {
        tf.__msg = msg;
        tagfilters.push(tf);
      } else {
        console.info("add message:", msg);
        this.__matching.push(msg);
      }
    }
    console.error("showResult", request, data, this._messages);
    ref1 = data.objects;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      obj = ref1[j];
      for (k = 0, len2 = tagfilters.length; k < len2; k++) {
        tagfilter = tagfilters[k];
        if (idxInArray(tagfilter.__msg, this.__matching) > -1) {
          continue;
        }
        console.warn("Matches?", tagfilter, obj._tags);
        if (TagFilter.matchesTags(tagfilter, obj._tags)) {
          this.__matching.push(tagfilter.__msg);
          console.info("add message:", tagfilter.__msg);
          if (this.__matching.length === this._messages.length) {
            return;
          }
        }
      }
    }
  };

  return DownloadManagerTagFilter;

})(SearchManager);
// Generated by CoffeeScript 1.10.0
var ExportManagerFieldTreeNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ExportManagerFieldTreeNode = (function(superClass) {
  extend(ExportManagerFieldTreeNode, superClass);

  function ExportManagerFieldTreeNode() {
    return ExportManagerFieldTreeNode.__super__.constructor.apply(this, arguments);
  }

  ExportManagerFieldTreeNode.prototype.setChildren = function(enable_disable) {
    var c, i, len, ref, results;
    if (!this.children) {
      return;
    }
    ref = this.children;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      c = ref[i];
      c.setCheckbox(enable_disable);
      results.push(c.setChildren(enable_disable));
    }
    return results;
  };

  ExportManagerFieldTreeNode.prototype.setCheckbox = function(enable_disable) {
    var ref;
    this.data._enabled = enable_disable;
    if ((ref = this.checkbox) != null) {
      ref.displayValue();
    }
    return this;
  };

  ExportManagerFieldTreeNode.prototype.getModeForNested = function() {
    return "detail";
  };

  ExportManagerFieldTreeNode.prototype.removeFromDOM = function(remove_self) {
    if (remove_self == null) {
      remove_self = true;
    }
    ExportManagerFieldTreeNode.__super__.removeFromDOM.call(this, remove_self);
    this.checkbox = null;
    return this;
  };

  ExportManagerFieldTreeNode.prototype.renderContent = function() {
    var input;
    this.checkbox = new Checkbox({
      name: "_enabled",
      undo_and_changed_support: false,
      data: this.data,
      onDataChanged: (function(_this) {
        return function() {
          _this.setCheckbox(_this.data._enabled);
          return _this.setChildren(_this.data._enabled);
        };
      })(this)
    }).start();
    this.setCheckbox(this.data._enabled);
    input = new Input({
      undo_and_changed_support: false,
      name: "display_name",
      data: this.data
    }).start();
    return $table_one_row(this.checkbox, input);
  };

  return ExportManagerFieldTreeNode;

})(FieldsFormNode);
// Generated by CoffeeScript 1.10.0
var ExportManagerResultForm,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

ExportManagerResultForm = (function(superClass) {
  extend(ExportManagerResultForm, superClass);

  function ExportManagerResultForm() {
    this.showResult = bind(this.showResult, this);
    return ExportManagerResultForm.__super__.constructor.apply(this, arguments);
  }

  ExportManagerResultForm.prototype.initOpts = function() {
    ExportManagerResultForm.__super__.initOpts.call(this);
    return this.addOpts({
      exportManager: {
        check: ExportManager
      }
    });
  };

  ExportManagerResultForm.prototype.readOpts = function() {
    ExportManagerResultForm.__super__.readOpts.call(this);
    return this.exportManager = this._exportManager;
  };

  ExportManagerResultForm.prototype.addToRequest = function(request) {
    var _otm, col, eas_columns, i, len, mask_names, ref;
    this.exportManager.addToRequest(request);
    _otm = new ObjecttypeManager();
    mask_names = (ref = this.getSearch().getSearchBasics()) != null ? ref.getMaskNames() : void 0;
    _otm.addObjecttypes(function(table, mask) {
      var ref1, ref2;
      if (request.objecttypes && (ref1 = table.name(), indexOf.call(request.objecttypes, ref1) < 0)) {
        return false;
      } else if (mask_names && (ref2 = mask.name(), indexOf.call(mask_names, ref2) < 0)) {
        return false;
      } else {
        return true;
      }
    });
    _otm.initCommonFields("index", true, function(f) {
      return !(f instanceof MaskSplitter);
    });
    eas_columns = _otm.getEASFields("index");
    request.offset = 0;
    request.limit = 0;
    request.aggregations = {
      _mask: {
        field: "_mask",
        limit: 100000,
        type: "term"
      }
    };
    for (i = 0, len = eas_columns.length; i < len; i++) {
      col = eas_columns[i];
      request.aggregations[col.fullName()] = {
        field: (col.fullName()) + ".class_extension",
        limit: 10000,
        value_field: (col.fullName()) + ".filesize",
        type: "term_stats"
      };
    }
    this.eas_info = {
      total: 0,
      counts: {
        by_class: {},
        by_field_name: {}
      }
    };
    return request;
  };

  ExportManagerResultForm.prototype.showResult = function(request, data) {
    var cls, ext, facet, fname, i, inc_counts, j, len, len1, ref, ref1, ref2, ref3, term;
    CUI.debug("ExportManagerResutlForm.showResult", request, data);
    ref = data.aggregations;
    for (fname in ref) {
      facet = ref[fname];
      if (fname === "_mask") {
        this.eas_info.otm = new ObjecttypeManager();
        ref1 = facet.terms;
        for (i = 0, len = ref1.length; i < len; i++) {
          term = ref1[i];
          this.eas_info.otm.addMask(ez5.mask.CURRENT._mask_instance_by_name[term.term]);
        }
        this.eas_info.otm.initCommonFields("all", true, function(f) {
          return !(f instanceof MaskSplitter);
        });
        this.eas_info.eas_fields = this.eas_info.otm.getEASFields("index");
        continue;
      }
      ref2 = facet.terms;
      for (j = 0, len1 = ref2.length; j < len1; j++) {
        term = ref2[j];
        ref3 = term.term.split("."), cls = ref3[0], ext = ref3[1];
        if (indexOf.call(Asset.fileclasses(), cls) < 0) {
          cls = "unknown";
        }
        this.eas_info.total += term.count;
        inc_counts = function(map) {
          if (!map.total) {
            map.total = 0;
          }
          map.total += term.count;
          if (!map[cls]) {
            map[cls] = {
              total: 0,
              acc_filesize: 0,
              by_extension: {}
            };
          }
          if (!map[cls].by_extension[ext]) {
            map[cls].by_extension[ext] = 0;
          }
          map[cls].total += term.count;
          map[cls].acc_filesize += term.sum;
          return map[cls].by_extension[ext] += term.count;
        };
        inc_counts(this.eas_info.counts.by_class);
        if (!this.eas_info.counts.by_field_name[fname]) {
          this.eas_info.counts.by_field_name[fname] = {};
        }
        inc_counts(this.eas_info.counts.by_field_name[fname]);
      }
    }
    return this.exportManager.setEASColumnsInfo(this.eas_info);
  };

  return ExportManagerResultForm;

})(SearchManager);
// Generated by CoffeeScript 1.10.0
var ExportManagerResultMain,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ExportManagerResultMain = (function(superClass) {
  extend(ExportManagerResultMain, superClass);

  function ExportManagerResultMain() {
    return ExportManagerResultMain.__super__.constructor.apply(this, arguments);
  }

  ExportManagerResultMain.prototype.initOpts = function() {
    ExportManagerResultMain.__super__.initOpts.call(this);
    return this.addOpts({
      exportManager: {
        check: ExportManager
      }
    });
  };

  ExportManagerResultMain.prototype.readOpts = function() {
    ExportManagerResultMain.__super__.readOpts.call(this);
    return this.exportManager = this._exportManager;
  };

  ExportManagerResultMain.prototype.getName = function() {
    return "export-manager-result-main";
  };

  ExportManagerResultMain.prototype.getRenderType = function() {
    return "none";
  };

  ExportManagerResultMain.prototype.addToRequest = function(request) {
    var cdata, cls, fdata, fname, in_cls, nested_search, ref, ref1;
    ExportManagerResultMain.__super__.addToRequest.call(this, request);
    this.exportManager.addToRequest(request);
    nested_search = [];
    ref = this.exportManager.data.fields;
    for (fname in ref) {
      fdata = ref[fname];
      if (fdata._enabled) {
        in_cls = [];
        ref1 = this.exportManager.data.classes;
        for (cls in ref1) {
          cdata = ref1[cls];
          if (cdata._enabled) {
            in_cls.push(cls);
          }
        }
        if (in_cls.length === 0) {
          break;
        }
        nested_search.push({
          type: "in",
          fields: [fname + ".class"],
          "in": in_cls,
          bool: "should"
        });
      }
    }
    if (nested_search.length === 0) {
      request.search.push(false);
    } else {
      request.search.push({
        type: "complex",
        bool: "must",
        search: nested_search
      });
    }
    return request.limit = this.__page_size;
  };

  ExportManagerResultMain.prototype.addToResultDiv = function(request, result_object, div) {
    return div.append(this.exportManager.renderFormForObject(result_object, parseInt(div.attr("offset"))));
  };

  return ExportManagerResultMain;

})(ResultSimple);
// Generated by CoffeeScript 1.10.0
var Export,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Export = (function(superClass) {
  extend(Export, superClass);

  function Export(data) {
    this.data = data != null ? data : {};
    if (!this.getId()) {
      this.initData();
    }
  }

  Export.prototype.initData = function() {
    var i, k, len, ref;
    ref = ["_transports", "_schedules"];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      if (!this.data.hasOwnProperty(k)) {
        this.data[k] = [];
      }
    }
    if (!this.data["export"].assets) {
      this.data["export"].assets = {};
    }
    if (!this.data["export"].eas_fields) {
      this.data["export"].eas_fields = [];
    }
    return this.__fullyLoaded = true;
  };

  Export.prototype.save = function(ev) {
    var sd, sdfr;
    sd = this.getSaveData();
    if (ev != null ? ev.hasModifierKey(true) : void 0) {
      CUI.debug("save export", "data:", this.data, dump(sd));
      return;
    }
    if (!sd["export"]._version) {
      sd["export"]._version = 1;
      sdfr = ez5.api["export"]({
        type: "PUT",
        json_data: sd
      });
    } else {
      sd["export"]._version++;
      sdfr = ez5.api["export"]({
        api: "/" + this.getId(),
        type: "POST",
        json_data: sd
      });
    }
    return sdfr.done((function(_this) {
      return function(data) {
        _this.data = data;
        return _this.initData();
      };
    })(this));
  };

  Export.prototype.getName = function() {
    return this.getData()["export"].name;
  };

  Export.prototype.getType = function() {
    return this.getData()["export"].type;
  };

  Export.prototype.getSaveData = function() {
    var i, item, j, k, len, len1, ref, ref1, ref2, sd;
    sd = copyObject(this.data, true);
    CUI.debug("Export.getSaveData", sd);
    ref = ["_transports", "_schedules"];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      if (!((ref1 = sd[k]) != null ? ref1.length : void 0)) {
        sd[k] = null;
      } else {
        ref2 = sd[k];
        for (j = 0, len1 = ref2.length; j < len1; j++) {
          item = ref2[j];
          delete item._log;
        }
      }
    }
    delete sd._log;
    delete sd._state;
    delete sd._files;
    if ($.isEmptyObject(sd["export"].assets)) {
      sd["export"].assets = {};
    }
    return sd;
  };

  Export.prototype.setExportData = function(export_data) {
    if (this.getId()) {
      export_data._id = this.getId();
      export_data._version = this.data["export"]._version;
    }
    this.data["export"] = export_data;
    return this;
  };

  Export.prototype.getDownloadButton = function() {
    var url;
    url = ez5.api.getFullBase() + "/export/" + this.getId() + "/zip/?token=" + ez5.session.token + "&disposition=attachment";
    return new LocaButtonHref({
      loca_key: "export.button.download",
      download: true,
      href: url
    });
  };

  Export.prototype.getFiles = function() {
    var ref;
    return (ref = this.data) != null ? ref._files : void 0;
  };

  Export.prototype.start = function() {
    return ez5.api["export"]({
      api: "/" + (this.getId()) + "/start",
      type: "POST"
    }).done((function(_this) {
      return function(data) {
        _this.data = data;
        return _this.initData();
      };
    })(this));
  };

  Export.prototype.stop = function() {
    return ez5.api["export"]({
      api: "/" + (this.getId()) + "/stop",
      type: "POST"
    }).done((function(_this) {
      return function(data) {
        _this.data = data;
        return _this.initData();
      };
    })(this));
  };

  Export.prototype.load = function(force) {
    if (force == null) {
      force = false;
    }
    if (this.__fullyLoaded && !force) {
      return new CUI.Deferred().resolve(this.data).promise();
    }
    if (this.__loading) {
      return this.__loading;
    }
    return this.__loading = ez5.api["export"]({
      type: "GET",
      api: "/" + this.getId()
    }).done((function(_this) {
      return function(data) {
        _this.data = data;
        return _this.initData();
      };
    })(this)).always((function(_this) {
      return function() {
        return _this.__loading = null;
      };
    })(this));
  };

  Export.prototype.getChildren = function(getNodesFunc) {
    var dfr;
    assert(CUI.isFunction(getNodesFunc), "Export.getChildren", "Parameter must be Function", {
      getNodesFunc: getNodesFunc
    });
    dfr = new CUI.Deferred();
    this.load().done((function(_this) {
      return function() {
        return dfr.resolve(getNodesFunc.call(_this));
      };
    })(this)).fail(function(xhr) {
      return dfr.reject();
    });
    return dfr.promise();
  };

  Export.prototype.getId = function() {
    return this.data["export"]._id;
  };

  Export.prototype.getState = function() {
    return this.data._state;
  };

  Export.prototype.getStateLocalized = function() {
    return $$("server.export.state." + (this.getState()));
  };

  Export.prototype.getStateColumn = function() {
    return new ListViewColumn({
      "class": "ez5-export-state-" + (this.getState()),
      text: this.getStateLocalized()
    });
  };

  Export.prototype.getData = function() {
    return this.data;
  };

  Export.prototype.getVersion = function() {
    return this.data["export"]._version;
  };

  Export.prototype["delete"] = function() {
    if (!this.getId()) {
      return CUI.resolvedPromise();
    }
    return ez5.api["export"]({
      type: 'DELETE',
      api: '/' + this.getId()
    });
  };

  Export.prototype.showInSearch = function(search) {
    return this.load().done((function(_this) {
      return function() {
        var si;
        si = search != null ? typeof search.getSearchInput === "function" ? search.getSearchInput() : void 0 : void 0;
        assert(search instanceof Search && si instanceof SearchInput, "Export.showInSearch", "Parameter needs to be instance of Search. Search needs to implement getSearchInput.", {
          search: search,
          searchInput: si
        });
        si.empty();
        si.addPlaceholder();
        si.add(new ExportQueryElement({
          "export": _this
        }));
        si.addPlaceholder();
        return search.execute();
      };
    })(this));
  };

  Export.encodeURIFilePath = function(path) {
    return encodeURIComponent(path).replace(/%2F/g, "/");
  };

  return Export;

})(CUI.Dummy);
// Generated by CoffeeScript 1.10.0
var ExportManagerList,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ExportManagerList = (function(superClass) {
  extend(ExportManagerList, superClass);

  function ExportManagerList(opts) {
    this.opts = opts != null ? opts : {};
    ExportManagerList.__super__.constructor.call(this, this.opts);
    this.exportVersions = {};
  }

  ExportManagerList.prototype.is_allowed = function() {
    return ez5.session.hasSystemRight("root", "frontend_features[export]");
  };

  ExportManagerList.prototype.limit = 20;

  ExportManagerList.prototype.getDisplay = function() {
    var container, update_display;
    container = $div("tray-item export-manager-list-tray-container");
    container.append(new LocaButton({
      loca_key: "export.manager.list.button.tray",
      "class": "ez5-export-manager-list-tray-button",
      icon: new Icon({
        "class": "fa-download"
      }),
      onClick: (function(_this) {
        return function(ev) {
          return _this.showModal(ev);
        };
      })(this)
    }).DOM);
    this.badge = $div("export-manager-list-tray-container-badge");
    this.badge.hide();
    Events.ignore({
      instance: this
    });
    update_display = (function(_this) {
      return function() {
        return _this.updateDisplay();
      };
    })(this);
    EventPoller.listen({
      instance: this,
      filter: {
        type: 'OBJECT_UPDATE',
        basetype: 'export'
      },
      call: (function(_this) {
        return function(events) {
          return CUI.scheduleCallback({
            ms: 3000,
            call: update_display
          });
        };
      })(this)
    });
    container.append(this.badge);
    this.updateDisplay(true);
    return container;
  };

  ExportManagerList.status_badge_map = {
    "new": null,
    pending: "working",
    processing: "working",
    done: "done",
    done_with_warnings: "done",
    failed: "failed"
  };

  ExportManagerList.prototype.__resetExportVersions = function() {
    var badge, id, ref, stats, version;
    ref = this.badgeStats;
    for (badge in ref) {
      stats = ref[badge];
      for (id in stats) {
        version = stats[id];
        this.exportVersions[id] = version;
      }
    }
  };

  ExportManagerList.prototype.updateDisplay = function(init) {
    if (init == null) {
      init = false;
    }
    this.badgeStats = {
      working: {},
      done: {},
      failed: {}
    };
    return this.loadExports().done((function(_this) {
      return function(exports) {
        var badge, c, exp, found, i, id, j, len, len1, ref, version;
        for (i = 0, len = exports.length; i < len; i++) {
          exp = exports[i];
          id = exp.getId();
          version = exp.getVersion();
          if (!_this.exportVersions[id]) {
            if (init) {
              _this.exportVersions[id] = version;
            } else {
              _this.exportVersions[id] = 0;
            }
          }
          badge = ExportManagerList.status_badge_map[exp.getState()];
          if (badge) {
            _this.badgeStats[badge][id] = version;
          }
          if (!_this.modal) {
            continue;
          }
          found = false;
          ref = _this.tree.getRootChildren();
          for (j = 0, len1 = ref.length; j < len1; j++) {
            c = ref[j];
            if (!(c instanceof ExportManagerListTopLevelNode)) {
              continue;
            }
            if (c.getExport().getId() === exp.getId()) {
              found = true;
              if (c.getCurrentVersion() !== exp.getVersion()) {
                c.setExport(exp);
                c.reload();
              }
            }
          }
          if (!found) {
            _this.tree.prependNode(new ExportManagerListTopLevelNode({
              "export": exp,
              manager: _this
            }));
          }
        }
        _this.updateDisplayBadge();
      };
    })(this));
  };

  ExportManagerList.prototype.updateDisplayBadge = function() {
    var badge, count, count_badge, i, len, ref;
    count_badge = (function(_this) {
      return function(type) {
        var count, id, ref, version;
        count = 0;
        ref = _this.badgeStats[type];
        for (id in ref) {
          version = ref[id];
          switch (type) {
            case "working":
              count++;
              break;
            default:
              if (version > _this.exportVersions[id]) {
                count++;
              }
          }
        }
        return count;
      };
    })(this);
    ref = ["failed", "done", "working"];
    for (i = 0, len = ref.length; i < len; i++) {
      badge = ref[i];
      count = count_badge(badge);
      if (count > 0) {
        this.badge.show().text(count);
        this.badge.attr("badge", badge);
        return;
      }
    }
    this.badge.hide();
  };

  ExportManagerList.prototype.loadExports = function(offset1, show_all) {
    var dfr, filter;
    this.offset = offset1 != null ? offset1 : this.offset;
    dfr = new CUI.Deferred();
    if (show_all) {
      filter = void 0;
    } else {
      filter = "type:download+status:failed|done_with_warnings,type:export|export_incremental";
    }
    ez5.api["export"]({
      type: "GET",
      data: {
        limit: this.limit,
        offset: this.offset,
        filter: filter
      }
    }).done((function(_this) {
      return function(__data) {
        var e, exports, i, j, k, len, len1, ref, ref1;
        _this.__data = __data;
        exports = [];
        ref = _this.__data.objects;
        for (i = 0, len = ref.length; i < len; i++) {
          e = ref[i];
          ref1 = ["_schedules", "_transports", "_files", "_downloads"];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            k = ref1[j];
            if (!e[k]) {
              e[k] = [];
            }
          }
          exports.push(new Export(e));
        }
        return dfr.resolve(exports);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  ExportManagerList.prototype.loadTree = function(offset, show_all) {
    var dfr;
    if (offset == null) {
      offset = 0;
    }
    if (show_all == null) {
      show_all = false;
    }
    this.tree.showWaitBlock();
    dfr = new CUI.Deferred();
    this.loadExports(offset, show_all).always((function(_this) {
      return function() {
        return _this.tree.hideWaitBlock();
      };
    })(this)).done((function(_this) {
      return function(__exports) {
        var exp, export_nodes, navi;
        _this.__exports = __exports;
        export_nodes = (function() {
          var i, len, ref, results;
          ref = this.__exports;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            exp = ref[i];
            results.push(new ExportManagerListTopLevelNode({
              "export": exp,
              manager: this
            }));
          }
          return results;
        }).call(_this);
        export_nodes.splice(0, 0, new ExportManagerListHeaderNode());
        navi = SystemListManager.renderNavigation({
          count: _this.__data.count,
          limit: _this.__data.limit,
          offset: _this.__data.offset,
          callback: function(offset) {
            return _this.loadTree(offset, show_all);
          }
        });
        _this.tree.replace(navi, "footer_right");
        _this.tree.root.removeFromDOM(false);
        _this.tree.root.children = export_nodes;
        return _this.tree.root.open().done(dfr.resolve).fail(dfr.reject);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  ExportManagerList.prototype.showModal = function(ev) {
    this.requestOpenModal = false;
    this.tree = new ListViewTree({
      fixedRows: 1,
      cols: ["maximize", "auto", "auto", "auto", "auto"],
      maximize: true,
      force_footer: true,
      colClasses: ["ez5-export-manager-list-column-main", "ez5-export-manager-list-column-timestamp", "ez5-export-manager-list-column-type", "ez5-export-manager-list-column-status", "ez5-export-manager-list-column-buttons"],
      "class": "export-manager-list-table cui-lv--has-datafields"
    });
    this.modal = new Modal({
      "class": "export-manager-list-modal",
      cancel: true,
      onCancel: (function(_this) {
        return function() {
          _this.modal.destroy();
          return _this.modal = null;
        };
      })(this),
      pane: {
        header_left: new LocaLabel({
          loca_key: "export.manager.list.title"
        }).DOM,
        content: this.tree.render(false),
        footer_right: {
          loca_key: "export.manager.list.button.done",
          onClick: (function(_this) {
            return function() {
              _this.modal.destroy();
              return _this.modal = null;
            };
          })(this)
        }
      }
    });
    this.__resetExportVersions();
    this.modal.show();
    return this.loadTree(0, ev.altKey()).done((function(_this) {
      return function() {
        return _this.updateDisplayBadge();
      };
    })(this));
  };

  ExportManagerList.prototype.closeModal = function() {
    this.modal.destroy();
    this.modal = null;
    return this;
  };

  return ExportManagerList;

})(TrayApp);

ez5.session_ready(function() {
  return ez5.tray.registerApp(new ExportManagerList());
});
// Generated by CoffeeScript 1.10.0
var ExportQueryElement,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ExportQueryElement = (function(superClass) {
  extend(ExportQueryElement, superClass);

  function ExportQueryElement() {
    return ExportQueryElement.__super__.constructor.apply(this, arguments);
  }

  ExportQueryElement.prototype.initOpts = function() {
    ExportQueryElement.__super__.initOpts.call(this);
    return this.addOpts({
      "export": {
        mandatory: true,
        check: Export
      }
    });
  };

  ExportQueryElement.prototype.getBadge = function() {
    return {
      name: $$("export.query.element.badge.name"),
      value: this._export.getData()["export"].name
    };
  };

  ExportQueryElement.prototype.getSearchFilter = function() {
    var filter, ref, req;
    req = copyObject(this._export.getData()["export"].search, true);
    filter = {
      type: "complex",
      bool: "must",
      search: req.search
    };
    if ((ref = req.objecttypes) != null ? ref.length : void 0) {
      filter.search.push({
        bool: "must",
        type: "in",
        fields: ["_objecttype"],
        "in": req.objecttypes
      });
    }
    return filter;
  };

  return ExportQueryElement;

})(QueryElementSpan);
// Generated by CoffeeScript 1.10.0
var ExportManagerListHeaderNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ExportManagerListHeaderNode = (function(superClass) {
  extend(ExportManagerListHeaderNode, superClass);

  function ExportManagerListHeaderNode() {
    return ExportManagerListHeaderNode.__super__.constructor.apply(this, arguments);
  }

  ExportManagerListHeaderNode.prototype.initOpts = function() {
    ExportManagerListHeaderNode.__super__.initOpts.call(this);
    return this.removeOpt("headers");
  };

  ExportManagerListHeaderNode.prototype.readOpts = function() {
    var i, k, len, ref;
    ExportManagerListHeaderNode.__super__.readOpts.call(this);
    this._headers = [];
    ref = ["name", "date", "type", "status"];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      this._headers.push({
        label: {
          text: $$("export.manager.list.header.node." + k)
        }
      });
    }
    this._headers.push();
    return this;
  };

  return ExportManagerListHeaderNode;

})(CUI.ListViewTreeHeaderNode);
// Generated by CoffeeScript 1.10.0
var ExportManagerListTopLevelNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ExportManagerListTopLevelNode = (function(superClass) {
  extend(ExportManagerListTopLevelNode, superClass);

  function ExportManagerListTopLevelNode() {
    return ExportManagerListTopLevelNode.__super__.constructor.apply(this, arguments);
  }

  ExportManagerListTopLevelNode.prototype.initOpts = function() {
    ExportManagerListTopLevelNode.__super__.initOpts.call(this);
    this.addOpts({
      manager: {
        mandatory: true,
        check: ExportManagerList
      },
      "export": {
        mandatory: true,
        check: Export
      }
    });
    return this;
  };

  ExportManagerListTopLevelNode.prototype.readOpts = function() {
    ExportManagerListTopLevelNode.__super__.readOpts.call(this);
    this.manager = this._manager;
    this.setExport(this._export);
    return this;
  };

  ExportManagerListTopLevelNode.prototype.setExport = function(_export) {
    this["export"] = _export;
    this.__currentVersion = this["export"].getVersion();
    if (this.children) {
      this.close();
      delete this.children;
    }
    return this;
  };

  ExportManagerListTopLevelNode.prototype.getCurrentVersion = function() {
    return this.__currentVersion;
  };

  ExportManagerListTopLevelNode.prototype.getExport = function() {
    return this["export"];
  };

  ExportManagerListTopLevelNode.prototype.getChildren = function() {
    return this["export"].getChildren(function() {
      var nodes;
      return nodes = [
        new ExportManagerListEventsNode({
          log: this.getData()._log
        }), new ExportManagerListTransportsNode({
          "export": this
        }), new ExportManagerListFilesNode({
          "export": this
        })
      ];
    });
  };

  ExportManagerListTopLevelNode.prototype.renderContent = function() {
    var buttons, exp, ref, ref1, search, start_stop, type;
    exp = this["export"].getData();
    this._schedules = new ScheduleEditor({
      button_type: "save",
      show_minutes: true,
      onButtonClick: (function(_this) {
        return function(ev, schedules) {
          _this["export"].getData()._schedules = schedules;
          return _this["export"].save(ev).done(function() {
            return _this.update();
          });
        };
      })(this),
      has_schedules: this["export"].getData()._has_schedules,
      loadSchedules: (function(_this) {
        return function() {
          return _this["export"].getChildren(function() {
            return this.getData()._schedules;
          });
        };
      })(this)
    });
    this._transports = new TransportsEditor({
      "export": this["export"],
      button_type: "save",
      onButtonClick: (function(_this) {
        return function(ev, transports) {
          _this["export"].getData()._transports = transports;
          return _this["export"].save().done(function() {
            return _this.update();
          });
        };
      })(this)
    });
    if ((ref = this["export"].getState()) === "pending" || ref === "processing") {
      start_stop = "stop";
    } else {
      start_stop = "start";
    }
    this.startStopButton = new LocaButton({
      loca_key: "export.manager.list.top.level.node.button." + start_stop,
      onClick: (function(_this) {
        return function(ev, df) {
          df.disable();
          return _this["export"][start_stop]().done(function(data) {
            return _this.update();
          });
        };
      })(this)
    });
    this.addColumn(new ListViewColumn({
      text: ez5.format_date_and_time(exp._date_created)
    }));
    type = $$("export.manager.list.top.level.node.type." + this["export"].getType());
    this.addColumn(new ListViewColumn({
      text: type
    }));
    this.addColumn(this["export"].getStateColumn());
    buttons = [
      this["export"].getDownloadButton(), {
        group: "edit",
        loca_key: "export.manager.list.top.level.node.button.edit",
        onClick: (function(_this) {
          return function() {
            return _this.btnEdit();
          };
        })(this)
      }, this._schedules.getButton({
        group: "edit"
      }), this._transports.getButton({
        group: "edit"
      }), this.startStopButton, {
        loca_key: "export.manager.list.top.level.node.button.trash",
        onClick: (function(_this) {
          return function(ev) {
            return CUI.confirm({
              text: $$("export.manager.list.top.level.node.button.trash.confirm")
            }).done(function() {
              return _this.removeFromServer(ev);
            });
          };
        })(this)
      }
    ];
    if ((search = Search.findByName("SearchMain")[0])) {
      if ((ref1 = this.manager.tree) != null) {
        ref1.addClass("ez5-export-manager-list--has-search-button");
      }
      buttons.splice(1, 0, {
        loca_key: "export.manager.list.top.level.node.button.search",
        onClick: (function(_this) {
          return function() {
            return _this["export"].showInSearch(search).done(function() {
              return _this.manager.closeModal();
            });
          };
        })(this)
      });
    }
    this.addColumn(new ListViewColumn({
      element: new Buttonbar({
        buttons: buttons
      })
    }));
    return new Label({
      text: this["export"].getName(),
      multiline: true
    }).DOM;
  };

  ExportManagerListTopLevelNode.prototype.btnEdit = function() {
    return this["export"].load().done((function(_this) {
      return function() {
        var s;
        CUI.debug("export manager open", _this["export"]);
        s = new SearchMain({
          container: $div(),
          collection: new CollectionTemporary()
        });
        return s.init().done(function() {
          return (new ExportManager({
            "export": _this["export"],
            search: s
          })).prepareExport();
        });
      };
    })(this));
  };

  ExportManagerListTopLevelNode.prototype.removeFromServer = function() {
    return this["export"]["delete"]().done((function(_this) {
      return function() {
        return _this.remove();
      };
    })(this));
  };

  return ExportManagerListTopLevelNode;

})(ListViewTreeNode);
// Generated by CoffeeScript 1.10.0
var ExportManagerListEventNode,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ExportManagerListEventNode = (function(superClass) {
  extend(ExportManagerListEventNode, superClass);

  function ExportManagerListEventNode() {
    this.btnLogProtocol = bind(this.btnLogProtocol, this);
    this.btnShowEvent = bind(this.btnShowEvent, this);
    return ExportManagerListEventNode.__super__.constructor.apply(this, arguments);
  }

  ExportManagerListEventNode.prototype.initOpts = function() {
    ExportManagerListEventNode.__super__.initOpts.call(this);
    return this.addOpts({
      event: {
        check: "PlainObject"
      }
    });
  };

  ExportManagerListEventNode.prototype.readOpts = function() {
    ExportManagerListEventNode.__super__.readOpts.call(this);
    this.__event = this._event.event;
    this.__info = this.__event.info || {};
    return this.__protocol = this.__info.protocol;
  };

  ExportManagerListEventNode.prototype.renderContent = function() {
    var buttons, info, state;
    this.addColumn(new ListViewColumn({
      text: ez5.format_date_and_time(this.__event.timestamp)
    }));
    this.addColumn(new ListViewColumn());
    info = this.__event.info;
    state = info != null ? info.state : void 0;
    if (isEmpty(state)) {
      switch (this.__event.type) {
        case "DOWNLOAD_EXPORT":
          if (info.bytes_loaded === info.bytes_total) {
            state = $$("export.manager.list.event.node.complete_download");
          } else {
            state = $$("export.manager.list.event.node.incomplete_download");
          }
          break;
        default:
          state = "";
      }
    } else {
      state = $$("server.export.state." + state);
    }
    this.addColumn(new ListViewColumn({
      text: state
    }));
    buttons = [];
    if (!isEmpty(this.__protocol)) {
      buttons.push({
        loca_key: "export.manager.list.event.node.button.protocol",
        onClick: (function(_this) {
          return function(ev, btn) {
            return _this.btnLogProtocol(btn, _this.__protocol);
          };
        })(this)
      });
    }
    if (ez5.session.isDebug()) {
      buttons.push({
        loca_key: "export.manager.list.event.node.button.info",
        onClick: (function(_this) {
          return function(ev, btn) {
            return _this.btnShowEvent(btn, _this.__event);
          };
        })(this)
      });
    }
    if (this.__info.exception) {
      buttons.push({
        loca_key: "export.manager.list.event.node.button.failed",
        onClick: (function(_this) {
          return function() {
            var ex;
            ex = _this.__info.exception;
            return CUI.problem({
              text: $$(ex.code, ex.parameters)
            });
          };
        })(this)
      });
    }
    if (buttons.length) {
      this.addColumn(new ListViewColumn({
        element: new Buttonbar({
          buttons: buttons
        })
      }));
    } else {
      this.addColumn(new ListViewColumnEmpty());
    }
    return new Label({
      multiline: true,
      text: $$("server.event." + this.__event.type)
    });
  };

  ExportManagerListEventNode.prototype.btnShowEvent = function(btn, event) {
    return new Popover({
      element: btn,
      pane: {
        header_left: new Label({
          text: $$("export.manager.list.event.node.show.modal.title")
        }),
        content: new CUI.ObjectDumper({
          object: event,
          do_open: true
        })
      }
    }).show();
  };

  ExportManagerListEventNode.prototype.btnLogProtocol = function(btn, txt) {
    return new Popover({
      element: btn,
      pane: {
        header_left: new Label({
          text: $$("export.manager.list.event.node.protocol.modal.title")
        }),
        padded: true,
        content: new Label({
          multiline: true,
          text: txt
        })
      }
    }).show();
  };

  return ExportManagerListEventNode;

})(ListViewTreeNode);
// Generated by CoffeeScript 1.10.0
var ExportManagerListEventsNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ExportManagerListEventsNode = (function(superClass) {
  extend(ExportManagerListEventsNode, superClass);

  function ExportManagerListEventsNode() {
    return ExportManagerListEventsNode.__super__.constructor.apply(this, arguments);
  }

  ExportManagerListEventsNode.prototype.initOpts = function() {
    ExportManagerListEventsNode.__super__.initOpts.call(this);
    return this.addOpts({
      log: {
        check: "Array"
      }
    });
  };

  ExportManagerListEventsNode.prototype.readOpts = function() {
    ExportManagerListEventsNode.__super__.readOpts.call(this);
    return this.log = this._log;
  };

  ExportManagerListEventsNode.prototype.hasChildren = function() {
    var ref;
    if (((ref = this.log) != null ? ref.length : void 0) > 0) {
      return true;
    } else {
      return false;
    }
  };

  ExportManagerListEventsNode.prototype.getChildren = function() {
    var i, le, len, ref, results;
    CUI.debug("logs node", this);
    ref = this.log;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      le = ref[i];
      results.push(new ExportManagerListEventNode({
        event: le
      }));
    }
    return results;
  };

  ExportManagerListEventsNode.prototype.renderContent = function() {
    return new LocaLabel({
      loca_key: "logs.node.name",
      multiline: true
    });
  };

  return ExportManagerListEventsNode;

})(ListViewTreeNode);
// Generated by CoffeeScript 1.10.0
var ExportManagerListTransportsNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ExportManagerListTransportsNode = (function(superClass) {
  extend(ExportManagerListTransportsNode, superClass);

  function ExportManagerListTransportsNode() {
    return ExportManagerListTransportsNode.__super__.constructor.apply(this, arguments);
  }

  ExportManagerListTransportsNode.prototype.initOpts = function() {
    ExportManagerListTransportsNode.__super__.initOpts.call(this);
    this.addOpts({
      "export": {
        check: Export
      }
    });
    return this;
  };

  ExportManagerListTransportsNode.prototype.readOpts = function() {
    ExportManagerListTransportsNode.__super__.readOpts.call(this);
    this["export"] = this._export;
    return this;
  };

  ExportManagerListTransportsNode.prototype.hasChildren = function() {
    return this["export"].getData()._transports.length > 0;
  };

  ExportManagerListTransportsNode.prototype.getChildren = function() {
    var i, len, ref, results, tr;
    ref = this["export"].getData()._transports;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      tr = ref[i];
      results.push(new ExportManagerListTransportNode({
        transport: tr
      }));
    }
    return results;
  };

  ExportManagerListTransportsNode.prototype.renderContent = function() {
    return new LocaLabel({
      loca_key: "export.manager.list.transports.node.name",
      multiline: true
    });
  };

  return ExportManagerListTransportsNode;

})(ListViewTreeNode);
// Generated by CoffeeScript 1.10.0
var ExportManagerListTransportNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ExportManagerListTransportNode = (function(superClass) {
  extend(ExportManagerListTransportNode, superClass);

  function ExportManagerListTransportNode() {
    return ExportManagerListTransportNode.__super__.constructor.apply(this, arguments);
  }

  ExportManagerListTransportNode.prototype.initOpts = function() {
    ExportManagerListTransportNode.__super__.initOpts.call(this);
    return this.addOpts({
      transport: {
        check: "PlainObject"
      }
    });
  };

  ExportManagerListTransportNode.prototype.readOpts = function() {
    ExportManagerListTransportNode.__super__.readOpts.call(this);
    return this.transport = this._transport;
  };

  ExportManagerListTransportNode.prototype.getChildren = function() {
    return [
      new ExportManagerListTransportNodeFiles({
        transport: this.transport
      })
    ];
  };

  ExportManagerListTransportNode.prototype.renderContent = function() {
    this.addColumn(new ListViewColumnEmpty());
    if (this.transport.packer) {
      this.addColumn(new ListViewColumn({
        text: $$("transports.editor.col.packer." + this.transport.packer)
      }));
    } else {
      this.addColumn(new ListViewColumnEmpty());
    }
    this.addColumn(new ListViewColumn({
      text: $$("server.export.state." + this.transport._state)
    }));
    return new Label({
      multiline: true,
      text: $$("export.manager.list.transport.node.type." + this.transport.type)
    });
  };

  return ExportManagerListTransportNode;

})(ListViewTreeNode);
// Generated by CoffeeScript 1.10.0
var ExportManagerListTransportNodeFiles,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ExportManagerListTransportNodeFiles = (function(superClass) {
  extend(ExportManagerListTransportNodeFiles, superClass);

  function ExportManagerListTransportNodeFiles() {
    return ExportManagerListTransportNodeFiles.__super__.constructor.apply(this, arguments);
  }

  ExportManagerListTransportNodeFiles.prototype.renderContent = function() {
    CUI.debug(dump(this.transport));
    return $$("export.manager.list.files.node.name");
  };

  ExportManagerListTransportNodeFiles.prototype.hasChildren = function() {
    var ref, ref1;
    if (((ref = this.transport._download) != null ? (ref1 = ref._files) != null ? ref1.length : void 0 : void 0) > 0) {
      return true;
    } else {
      return false;
    }
  };

  ExportManagerListTransportNodeFiles.prototype.getChildren = function() {
    var f, i, len, ref, ref1, results;
    ref1 = (ref = this.transport._download) != null ? ref._files : void 0;
    results = [];
    for (i = 0, len = ref1.length; i < len; i++) {
      f = ref1[i];
      results.push(new ExportManagerListTransportNodeFile({
        file: f
      }));
    }
    return results;
  };

  return ExportManagerListTransportNodeFiles;

})(ExportManagerListTransportNode);
// Generated by CoffeeScript 1.10.0
var ExportManagerListTransportNodeFile,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ExportManagerListTransportNodeFile = (function(superClass) {
  extend(ExportManagerListTransportNodeFile, superClass);

  function ExportManagerListTransportNodeFile() {
    return ExportManagerListTransportNodeFile.__super__.constructor.apply(this, arguments);
  }

  ExportManagerListTransportNodeFile.prototype.initOpts = function() {
    ExportManagerListTransportNodeFile.__super__.initOpts.call(this);
    return this.addOpts({
      file: {
        check: "PlainObject"
      }
    });
  };

  ExportManagerListTransportNodeFile.prototype.readOpts = function() {
    ExportManagerListTransportNodeFile.__super__.readOpts.call(this);
    return this.file = this._file;
  };

  ExportManagerListTransportNodeFile.prototype.renderContent = function() {
    var buttons;
    this.addColumn(new ListViewColumnEmpty());
    this.addColumn(new ListViewColumn({
      text: ez5.format_filesize(this.file.size)
    }));
    this.addColumn(new ListViewColumnEmpty());
    buttons = [
      new ButtonHref({
        icon: "download",
        target: "_blank",
        href: this.file.url
      })
    ];
    this.addColumn(new ListViewColumn({
      element: new Buttonbar({
        buttons: buttons
      })
    }));
    return ez5.basename(this.file.url);
  };

  return ExportManagerListTransportNodeFile;

})(ListViewTreeNode);
// Generated by CoffeeScript 1.10.0
var ExportManagerListFilesNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ExportManagerListFilesNode = (function(superClass) {
  extend(ExportManagerListFilesNode, superClass);

  function ExportManagerListFilesNode() {
    return ExportManagerListFilesNode.__super__.constructor.apply(this, arguments);
  }

  ExportManagerListFilesNode.prototype.initOpts = function() {
    ExportManagerListFilesNode.__super__.initOpts.call(this);
    return this.addOpts({
      "export": {
        mandatory: true,
        check: Export
      }
    });
  };

  ExportManagerListFilesNode.prototype.readOpts = function() {
    ExportManagerListFilesNode.__super__.readOpts.call(this);
    this["export"] = this._export;
    return CUI.debug("new FilesNode", this["export"].getData());
  };

  ExportManagerListFilesNode.prototype.hasChildren = function() {
    CUI.debug("hasChildren", this["export"].getData()._files.length);
    if (this["export"].getData()._files.length > 0) {
      return true;
    } else {
      return false;
    }
  };

  ExportManagerListFilesNode.prototype.getChildren = function() {
    var _f, _files, dir, dirs, f, file, files, i, idx, j, k, key, keys, l, len, len1, len2, len3, m, nodes, part, parts, path, ref, ref1;
    _files = this["export"].getData()._files;
    CUI.debug("_files", _files);
    files = [];
    ref = this["export"].getData()._files;
    for (i = 0, len = ref.length; i < len; i++) {
      _f = ref[i];
      parts = _f.path.split("/");
      files.push({
        name: parts[parts.length - 1],
        path: _f.path,
        depth: parts.length,
        type: "f",
        size: _f.size,
        date_created: _f.date_created
      });
    }
    dirs = {};
    for (j = 0, len1 = files.length; j < len1; j++) {
      file = files[j];
      path = ez5.dirname(file.path);
      if (path === "") {
        continue;
      }
      parts = [];
      ref1 = path.split("/");
      for (idx = k = 0, len2 = ref1.length; k < len2; idx = ++k) {
        part = ref1[idx];
        parts.push(part);
        dir = parts.join("/");
        if (!dirs[dir]) {
          CUI.debug("dir", dir);
          dirs[dir] = {
            path: dir,
            name: parts[parts.length - 1],
            type: "d",
            depth: parts.length
          };
        }
      }
    }
    keys = Object.keys(dirs);
    keys.sort();
    for (l = keys.length - 1; l >= 0; l += -1) {
      key = keys[l];
      files.splice(0, 0, dirs[key]);
    }
    CUI.debug("files loaded", files, dirs);
    nodes = [];
    for (m = 0, len3 = files.length; m < len3; m++) {
      f = files[m];
      if (f.depth === 1) {
        nodes.push(new ExportManagerListFileNode({
          "export": this["export"],
          file: f,
          files: files
        }));
      }
    }
    return nodes;
  };

  ExportManagerListFilesNode.prototype.renderContent = function() {
    var buttons;
    this.addColumn(new ListViewColumnEmpty());
    this.addColumn(new ListViewColumnEmpty());
    this.addColumn(new ListViewColumnEmpty());
    if (this.hasChildren()) {
      buttons = [this["export"].getDownloadButton()];
      this.addColumn(new ListViewColumn({
        element: new Buttonbar({
          buttons: buttons
        })
      }));
    } else {
      this.addColumn(new ListViewColumnEmpty());
    }
    return new LocaLabel({
      loca_key: "export.manager.list.files.node.name",
      multiline: true
    }).DOM;
  };

  return ExportManagerListFilesNode;

})(ListViewTreeNode);
// Generated by CoffeeScript 1.10.0
var ExportManagerListFileNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ExportManagerListFileNode = (function(superClass) {
  extend(ExportManagerListFileNode, superClass);

  function ExportManagerListFileNode() {
    return ExportManagerListFileNode.__super__.constructor.apply(this, arguments);
  }

  ExportManagerListFileNode.prototype.initOpts = function() {
    ExportManagerListFileNode.__super__.initOpts.call(this);
    return this.addOpts({
      "export": {
        mandatory: true,
        check: Export
      },
      file: {
        mandatory: true,
        check: "PlainObject"
      },
      files: {
        mandatory: true,
        check: "Array"
      }
    });
  };

  ExportManagerListFileNode.prototype.readOpts = function() {
    ExportManagerListFileNode.__super__.readOpts.call(this);
    this["export"] = this._export;
    this.file = this._file;
    return this.files = this._files;
  };

  ExportManagerListFileNode.prototype.isLeaf = function() {
    return this.file.type === "f";
  };

  ExportManagerListFileNode.prototype.getChildren = function() {
    var file, i, len, nodes, ref;
    nodes = [];
    ref = this.files;
    for (i = 0, len = ref.length; i < len; i++) {
      file = ref[i];
      if (file.depth !== this.file.depth + 1) {
        continue;
      }
      if (file.path.substr(0, this.file.path.length) !== this.file.path) {
        continue;
      }
      nodes.push(new ExportManagerListFileNode({
        "export": this["export"],
        file: file,
        files: this.files
      }));
    }
    return nodes;
  };

  ExportManagerListFileNode.prototype.renderContent = function() {
    var base_url, buttons, file_url, file_url_short, ref, ref1;
    if (this.file.date_created) {
      this.addColumn(new ListViewColumn({
        text: ez5.format_date_and_time(this.file.date_created)
      }));
    } else {
      this.addColumn(new ListViewColumnEmpty());
    }
    if (this.file.size >= 0) {
      this.addColumn(new ListViewColumn({
        text: ez5.format_filesize(this.file.size)
      }));
    } else {
      this.addColumn(new ListViewColumnEmpty());
    }
    this.addColumn(new ListViewColumnEmpty());
    buttons = [];
    base_url = ez5.api.getFullBase() + "/export/" + this["export"].getId();
    file_url_short = Export.encodeURIFilePath(this.file.path);
    file_url = file_url_short + "?token=" + ez5.session.token;
    if ((ref = this.file.type) === "f") {
      buttons.push(new LocaButtonHref({
        loca_key: "export.manager.file.node.button.download",
        download: true,
        href: base_url + "/file/" + file_url + "&disposition=attachment"
      }));
      buttons.push(new LocaButtonHref({
        loca_key: "export.manager.file.node.button.show",
        disabled: this.file.size > 10000000,
        target: "_blank",
        href: base_url + "/file/" + file_url + "&disposition=inline"
      }));
    }
    if ((ref1 = this.file.type) === "f" || ref1 === "d") {
      buttons.push(new LocaButtonHref({
        loca_key: "export.manager.file.node.button.download_zip",
        download: true,
        href: base_url + "/zip/" + file_url + "&disposition=attachment"
      }));
    }
    this.addColumn(new ListViewColumn({
      element: new Buttonbar({
        buttons: buttons
      })
    }));
    return new Label({
      text: this.file.name,
      multiline: true
    });
  };

  return ExportManagerListFileNode;

})(ListViewTreeNode);
// Generated by CoffeeScript 1.10.0
var TransportsEditor,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

TransportsEditor = (function(superClass) {
  extend(TransportsEditor, superClass);

  function TransportsEditor() {
    return TransportsEditor.__super__.constructor.apply(this, arguments);
  }

  TransportsEditor.prototype.initOpts = function() {
    TransportsEditor.__super__.initOpts.call(this);
    return this.addOpts({
      "export": {
        mandatory: true,
        check: Export
      },
      button_type: {
        mandatory: true,
        check: ["apply", "save"]
      },
      onButtonClick: {
        check: Function
      }
    });
  };

  TransportsEditor.prototype.getButton = function(opts) {
    if (opts == null) {
      opts = {};
    }
    CUI.mergeMap(opts, {
      loca_key: "transport.editor.button",
      onClick: (function(_this) {
        return function() {
          return _this.openPopover();
        };
      })(this)
    });
    this.openButton = new LocaButton(opts);
    this.setButtonState();
    return this.openButton;
  };

  TransportsEditor.prototype.setButtonState = function() {
    var dt, ref;
    dt = this._export.getData();
    if (((ref = dt._transports) != null ? ref.length : void 0) > 0 || dt._has_transports) {
      this.openButton.activate();
    } else {
      this.openButton.deactivate();
    }
    return this;
  };

  TransportsEditor.prototype.checkChanged = function() {
    var error, ex;
    if (this.tree.getSelectedNode()) {
      this.minusButton.enable();
    } else {
      this.minusButton.disable();
    }
    try {
      if (this.__startData !== JSON.stringify(this.getSaveData())) {
        this.saveButton.enable();
      } else {
        this.saveButton.disable();
      }
    } catch (error) {
      ex = error;
      this.saveButton.disable();
      if (!(ex instanceof InvalidSaveDataException)) {
        throw ex;
      }
    }
  };

  TransportsEditor.prototype.getPluginByType = function(type) {
    var i, len, plugin, ref;
    ref = TransportsEditor.__plugins;
    for (i = 0, len = ref.length; i < len; i++) {
      plugin = ref[i];
      if (plugin.getType() === type) {
        return plugin;
      }
    }
    return null;
  };

  TransportsEditor.prototype.openPopover = function() {
    var i, len, plugin, ref, type_opts, update_form;
    this.saveButton = new LocaButton({
      loca_key: "transport.editor." + this._button_type + ".button",
      onClick: (function(_this) {
        return function(ev) {
          var ret, saved, sd;
          sd = _this.getSaveData();
          if (ev.hasModifierKey()) {
            CUI.debug("transport save", dump(sd));
            return;
          }
          saved = function() {
            _this.setButtonState();
            return _this.modal.destroy();
          };
          ret = typeof _this._onButtonClick === "function" ? _this._onButtonClick(ev, sd) : void 0;
          if (isPromise(ret)) {
            ret.done(saved);
          } else {
            saved();
          }
        };
      })(this)
    });
    update_form = (function(_this) {
      return function(row) {
        var d, disable, i, key, keys, len, plugin;
        d = row.getData();
        keys = ["type", "options", "packer", "email"];
        switch (d.type) {
          case "download":
            disable = ["options"];
            break;
          default:
            plugin = _this.getPluginByType(d.type);
            disable = ["packer", "email"];
            if (!plugin.isAllowed()) {
              disable.push("type", "options");
            }
        }
        for (i = 0, len = keys.length; i < len; i++) {
          key = keys[i];
          if (indexOf.call(disable, key) >= 0) {
            row.getFieldsByName(key)[0].disable();
          } else {
            row.getFieldsByName(key)[0].enable();
          }
        }
      };
    })(this);
    this.minusButton = new LocaButton({
      loca_key: "transport.editor.minus.button",
      disabled: true,
      group: "plus-minus",
      onClick: (function(_this) {
        return function() {
          var ref;
          return (ref = _this.tree.getSelectedNode()) != null ? ref.remove() : void 0;
        };
      })(this)
    });
    type_opts = [
      {
        icon: ez5.loca.str_default("transports.editor.type.download|icon"),
        text: $$("transports.editor.type.download|text"),
        value: "download"
      }
    ];
    ref = TransportsEditor.__plugins;
    for (i = 0, len = ref.length; i < len; i++) {
      plugin = ref[i];
      type_opts.push({
        text: plugin.getDisplayType(),
        icon: plugin.getDisplayIcon(),
        disabled: !plugin.isAllowed(),
        value: plugin.getType()
      });
    }
    this.tree = new ListViewEditTree({
      selectableRows: true,
      "class": 'cui-lv--has-datafields',
      maximize: true,
      fixedRows: 2,
      rowMove: true,
      onSelect: (function(_this) {
        return function() {
          return _this.checkChanged();
        };
      })(this),
      onDeselect: (function(_this) {
        return function() {
          return _this.checkChanged();
        };
      })(this),
      end_add_row: function() {
        return update_form(this);
      },
      fields: [
        {
          th_label: "transports.editor.col.type",
          type: Select,
          onDataChanged: function(data, df) {
            var form, k, ref1, v;
            form = df.getForm();
            ref1 = data.options;
            for (k in ref1) {
              v = ref1[k];
              delete data.options[k];
            }
            form.getFieldsByName("options")[0].displayValue();
            return update_form(form);
          },
          options: type_opts,
          name: "type"
        }, {
          th_label: "transports.editor.col.options",
          type: FormPopover,
          name: "options",
          trigger_data_changed_while_open: true,
          undo_and_changed_support: false,
          popover: {
            pane: {
              padded: true
            }
          },
          button: {
            loca_key: "transports.editor.col.options.button"
          },
          renderDisplayContent: (function(_this) {
            return function(df) {
              var data, div, form, j, len1, tag, tags;
              form = df.getForm();
              data = form.getData();
              plugin = _this.getPluginByType(data.type);
              if (!plugin) {
                return;
              }
              tags = plugin.getOptionsDisplay(data);
              if (!(tags != null ? tags.length : void 0)) {
                return;
              }
              div = $div("ez5-tag-holder");
              for (j = 0, len1 = tags.length; j < len1; j++) {
                tag = tags[j];
                div.appendChild(new Label({
                  "class": "ez5-tag",
                  text: tag
                }).DOM);
              }
              return div;
            };
          })(this),
          fields: (function(_this) {
            return function(df) {
              var data, form;
              form = df.getForm();
              if (!form) {
                return [];
              }
              data = form.getData();
              plugin = _this.getPluginByType(data.type);
              if (plugin) {
                return plugin.getOptions(data);
              }
              console.error("TransportEditor[getOptions] Type unknown:", data.type);
              return [];
            };
          })(this)
        }, {
          type: Select,
          th_label: "transports.editor.col.packer",
          name: "packer",
          options: function() {
            var j, k, len1, ref1, results;
            ref1 = ["zip", "zip_2gb", "zip_10mb", "tar_bz2"];
            results = [];
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              k = ref1[j];
              results.push({
                text: $$("transports.editor.col.packer." + k),
                value: k
              });
            }
            return results;
          }
        }, {
          th_label: "transports.editor.col.emails",
          type: FormPopover,
          name: "email",
          button: {
            loca_key: "transports.editor.col.emails.button"
          },
          fields: [
            {
              form: {
                label: $$("transports.editor.email.form.recipients")
              },
              type: DataTable,
              no_header: true,
              name: "__recipients",
              fields: [
                {
                  type: DataFieldProxy,
                  element: (function(_this) {
                    return function(df) {
                      return (new AclWhoManager({
                        allowEmailUser: true,
                        name: "address"
                      })).getWhoSelector(df.getData());
                    };
                  })(this),
                  name: "address"
                }
              ]
            }, {
              form: {
                label: $$("transports.editor.email.form.message")
              },
              placeholder: $$("transports.editor.email.form.message_placeholder"),
              name: "message",
              type: Input,
              textarea: true
            }
          ]
        }
      ],
      footer_left: [
        {
          loca_key: "transport.editor.plus.button",
          group: "plus-minus",
          onClick: (function(_this) {
            return function() {
              var node;
              node = new ListViewEditTreeNode({
                data: {}
              });
              return _this.tree.addNode(node);
            };
          })(this)
        }, this.minusButton
      ]
    });
    Events.listen({
      node: this.tree,
      type: ["row_added", "row_removed", "row_deselected", "row_selected", "data-changed"],
      call: (function(_this) {
        return function(ev, info) {
          return _this.checkChanged();
        };
      })(this)
    });
    this.modal = new Modal({
      "class": "transports-editor-modal",
      cancel: true,
      onHide: (function(_this) {
        return function() {
          _this.tree.destroy();
          return _this.tree = null;
        };
      })(this),
      onCancel: (function(_this) {
        return function() {
          if (_this.saveButton.isDisabled()) {

          } else {
            return CUI.confirm({
              text: $$("transport.editor.confirm.close")
            });
          }
        };
      })(this),
      pane: {
        header_left: new Label({
          text: $$("transports.editor.title")
        }),
        footer_right: [this.saveButton],
        content: (function(_this) {
          return function() {
            var t;
            t = _this.tree.render();
            _this.loadTransports().done(function() {
              return _this.checkChanged();
            });
            return t;
          };
        })(this)
      }
    });
    return this.modal.show();
  };

  TransportsEditor.prototype.loadTransports = function() {
    return this._export.getChildren(function() {
      var data, i, j, len, len1, nodes, rec, ref, ref1, t;
      nodes = [];
      ref = this.getData()._transports;
      for (i = 0, len = ref.length; i < len; i++) {
        t = ref[i];
        data = copyObject(t, true);
        if (!data.email) {
          data.email = {};
        }
        data.email.__recipients = [];
        if (data.email.recipients) {
          ref1 = data.email.recipients;
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            rec = ref1[j];
            data.email.__recipients.push({
              address: rec
            });
          }
        }
        nodes.push(new ListViewEditTreeNode({
          data: data
        }));
      }
      return nodes;
    }).done((function(_this) {
      return function(nodes) {
        _this.tree.load_data(nodes);
        return _this.__startData = JSON.stringify(_this.getSaveData());
      };
    })(this));
  };

  TransportsEditor.prototype.getSaveData = function() {
    var data, i, j, len, len1, plugin, rec, ref, ref1, s, sd;
    sd = [];
    ref = this.tree.root.children;
    for (i = 0, len = ref.length; i < len; i++) {
      s = ref[i];
      data = copyObject(s.getData(), true);
      data.email.recipients = [];
      if (data.email.__recipients) {
        ref1 = data.email.__recipients;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          rec = ref1[j];
          data.email.recipients.push(rec.address);
        }
        delete data.email.__recipients;
      }
      delete data._undo;
      delete data._state;
      delete data._log;
      delete data._downloads;
      delete data.email._undo;
      if (data.type !== "download") {
        delete data.packer;
        delete data.email;
        plugin = this.getPluginByType(data.type);
        if (plugin != null) {
          plugin.getSaveData(data);
        }
      } else {
        delete data.options._undo;
      }
      sd.push(data);
    }
    return sd;
  };

  TransportsEditor.__plugins = [];

  TransportsEditor.registerPlugin = function(plugin) {
    assert(plugin instanceof ExportTransportPlugin, "TransportEditor.registerPlugin", "Needs to be instanceof ExportTransportPlugin.");
    return this.__plugins.push(plugin);
  };

  return TransportsEditor;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var ExportTransportPlugin,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ExportTransportPlugin = (function(superClass) {
  extend(ExportTransportPlugin, superClass);

  function ExportTransportPlugin() {
    return ExportTransportPlugin.__super__.constructor.apply(this, arguments);
  }

  ExportTransportPlugin.prototype.getType = function() {
    return console.error(getObjectClass(this) + ".getType needs to be implemented.");
  };

  ExportTransportPlugin.prototype.getDisplayType = function() {
    return console.error(getObjectClass(this) + ".getDisplayType needs to be implemented.");
  };

  ExportTransportPlugin.prototype.getDisplayIcon = function() {};

  ExportTransportPlugin.prototype.getOptions = function(data) {
    return console.error(getObjectClass(this) + ".getOptions needs to be implemented.");
  };

  ExportTransportPlugin.prototype.getOptionsDisplay = function(data) {
    if (!CUI.isEmptyObject(data.options)) {
      return [$$("export.transport.plugin.options_set")];
    } else {
      return [];
    }
  };

  ExportTransportPlugin.prototype.getSaveData = function(sd) {};

  return ExportTransportPlugin;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var AdminMessagesManager,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AdminMessagesManager = (function(superClass) {
  extend(AdminMessagesManager, superClass);

  function AdminMessagesManager() {
    this.loadListData = bind(this.loadListData, this);
    this.addRow = bind(this.addRow, this);
    this.getListFields = bind(this.getListFields, this);
    return AdminMessagesManager.__super__.constructor.apply(this, arguments);
  }

  AdminMessagesManager.label = function() {
    return "admin.menu.admin_messages";
  };

  AdminMessagesManager.is_allowed = function() {
    return ez5.session.hasSystemRight("root", "message");
  };

  AdminMessagesManager.group = function() {
    return "administration";
  };

  AdminMessagesManager.submenu = function() {
    return "administration";
  };

  AdminMessagesManager.path = function() {
    return ["adminmessagesmanager"];
  };

  AdminMessagesManager.prototype.getListFields = function() {
    return [
      {
        th_label: "admin.admin_messages.list.title"
      }, {
        th_label: "admin.admin_messages.list.webfrontend_type"
      }
    ];
  };

  AdminMessagesManager.prototype.getMissingName = function() {
    return $$("admin.admin_messages.missing.name");
  };

  AdminMessagesManager.prototype.addRow = function() {
    return this.tree.addNode(new ez5.defaults["class"].AdminMessage({
      manager: this
    })).done((function(_this) {
      return function(node) {
        return node.select();
      };
    })(this));
  };

  AdminMessagesManager.prototype.loadList = function(filter, opts) {
    if (opts == null) {
      opts = {};
    }
    if (!opts.searchOpts) {
      opts.searchOpts = {};
    }
    opts.searchOpts.type = "message";
    opts.newInstanceFunc = (function(_this) {
      return function(msg) {
        return new ez5.defaults["class"].AdminMessage({
          message: msg,
          manager: _this
        });
      };
    })(this);
    return AdminMessagesManager.__super__.loadList.call(this, filter, opts);
  };

  AdminMessagesManager.prototype.loadListData = function(data) {
    var i, len, msg, ref;
    this.msgs = [];
    ref = data.objects;
    for (i = 0, len = ref.length; i < len; i++) {
      msg = ref[i];
      this.msgs.push(new ez5.defaults["class"].AdminMessage({
        message: msg,
        manager: this
      }));
    }
    return this.msgs;
  };

  return AdminMessagesManager;

})(SystemListManager);

ez5.session_ready(function() {
  return ez5.rootMenu.registerApp(AdminMessagesManager);
});
// Generated by CoffeeScript 1.10.0
var XMLFormField;

XMLFormField = (function() {
  function XMLFormField(opts, data) {
    this.opts = opts != null ? opts : {};
    this.data = data;
    assert(this.opts.grid instanceof XMLFormGrid, "new XMLFormField", "grid needs to be instance of XMLFormGrid", {
      opts: this.opts
    });
    assert($.isPlainObject(this.opts.def), "new XMLFormField", "Definition is no plain Object", {
      opts: this.opts
    });
    this.__def = this.opts.def;
    this.__def.colspan = this.__def.colspan || 1;
    this.__def.rowspan = this.__def.rowspan || 1;
    this.fields = [];
  }

  XMLFormField.prototype.getText = function() {
    var ref;
    return (ref = this.__def.text) != null ? ref[ez5.loca.culture] : void 0;
  };

  XMLFormField.prototype.getPos = function() {
    assert(!isNaN(this.__def.x * this.__def.y), "XMLFormField.getPos", "Definition needs x, y", {
      opts: this.opts
    });
    return {
      x: this.__def.x,
      y: this.__def.y,
      colspan: this.__def.colspan,
      rowspan: this.__def.rowspan
    };
  };

  XMLFormField.prototype.dump = function(s, spc) {
    var key;
    key = this.getBareKey();
    if (isEmpty(key)) {
      s.push(spc + ("[" + (this.getID()) + ", " + (getObjectClass(this)) + "]"));
    } else {
      s.push(spc + (key + " [" + (this.getID()) + ", " + (getObjectClass(this)) + "]"));
    }
    return s;
  };

  XMLFormField.prototype.getID = function() {
    return (this.opts.grid.getID()) + "." + this.opts.idx;
  };

  XMLFormField.prototype.getBareKey = function() {
    if (isEmpty(this.__def.xml)) {
      return "";
    } else {
      return this.__def.xml;
    }
  };

  XMLFormField.prototype.getKey = function() {
    var key;
    key = this.getBareKey();
    if ((key != null ? key.substring(0, 1) : void 0) === "/") {
      return key;
    } else if (isEmpty(key)) {
      return this.opts.grid.getKey();
    } else {
      return (this.opts.grid.getKey()) + "/" + key;
    }
  };

  XMLFormField.prototype.renderTd = function() {
    var content, p, td, tooltip;
    p = this.getPos();
    this.wrappersDiv = $div("xml-form-wrapper-fields-div");
    td = $element("td").prop({
      colspan: p.colspan,
      rowspan: p.rowspan
    });
    td.addClass("td-xml-form-field td-xml-form-field-" + (getObjectClass(this).substr('XMLFormField'.length).toLowerCase()));
    content = this.renderContent();
    tooltip = [];
    if (this.__def.xml_export) {
      tooltip.push("Export:" + dump(this.__def.xml_export));
    }
    if (this.__def.xml_import) {
      tooltip.push("Import:" + dump(this.__def.xml_import));
    }
    if (tooltip.length > 0) {
      new CUI.Tooltip({
        element: content,
        text: tooltip.join("\n")
      });
    }
    td.append(content);
    if (this.__def.align) {
      td.addClass("td-align-" + this.__def.align);
    }
    return td;
  };

  XMLFormField.prototype.renderContent = function() {
    var p;
    p = this.getPos();
    return getObjectClass(this) + (p.x + "/" + p.y);
  };

  XMLFormField.prototype.renderDropWrapper = function(element) {
    this.drop = $div("xml-form-field-drop-wrap");
    new Droppable({
      element: this.drop,
      accept: function(ev, info) {
        var ref;
        if (!((ref = info.globalDrag) != null ? ref.dragWrapper : void 0)) {
          return false;
        } else {
          return true;
        }
      },
      drop: (function(_this) {
        return function(ev, info) {
          var dw;
          dw = new window[getObjectClass(info.globalDrag.dragWrapper)](info.globalDrag.dragWrapper);
          dw.init();
          return _this.getForm().addDragWrapper(dw, _this.getID());
        };
      })(this)
    });
    this.drop.append(element);
    this.drop.append(this.wrappersDiv);
    this.update(false);
    return $div("ez5-xml-form-field-container").append([XMLFormWrapper.getOutputSpan(this.getBareKey()), this.drop]);
  };

  XMLFormField.prototype.getForm = function() {
    return this.opts.grid.getForm();
  };

  XMLFormField.prototype.getTab = function() {
    return this.opts.grid.getTab();
  };

  XMLFormField.prototype.update = function(renderProperties) {
    var dw, dws, i, len, ref;
    if (renderProperties == null) {
      renderProperties = true;
    }
    this.wrappersDiv.empty();
    dws = (ref = this.data[this.getID()]) != null ? ref.dragWrappers : void 0;
    if (dws) {
      for (i = 0, len = dws.length; i < len; i++) {
        dw = dws[i];
        this.wrappersDiv.append(dw.renderAsTarget(this, renderProperties));
      }
    }
  };

  XMLFormField.prototype.getDef = function() {
    return this.__def;
  };

  XMLFormField.prototype.getBaseSaveData = function() {
    var def, f, i, j, len, len1, ref, ref1, sd;
    def = this.getDef();
    sd = {
      _id: this.getID(),
      type: "field",
      xml_import: [],
      xml_export: [],
      strategy_import: def.strategy_import,
      strategy_export: def.strategy_export
    };
    if (def.xml) {
      if (def.type === "Hidden") {
        sd.xml_export.push({
          type: "element",
          path: def.xml,
          attributes: def.attributes,
          text: ""
        });
      } else {
        sd.xml_import.push({
          search: def.xml,
          strategy: "replace"
        });
        sd.xml_export.push({
          type: "element",
          path: def.xml,
          attributes: def.attributes
        });
      }
    }
    if (def.xml_import) {
      ref = def.xml_import;
      for (i = 0, len = ref.length; i < len; i++) {
        f = ref[i];
        sd.xml_import.push(f);
      }
    }
    if (def.xml_export) {
      ref1 = def.xml_export;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        f = ref1[j];
        sd.xml_export.push(f);
      }
    }
    if (sd.xml_import.length === 0) {
      delete sd.xml_import;
    }
    if (sd.xml_export.length === 0) {
      delete sd.xml_export;
    }
    return sd;
  };

  return XMLFormField;

})();
// Generated by CoffeeScript 1.10.0
var XMLFormFieldMapping,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

XMLFormFieldMapping = (function(superClass) {
  extend(XMLFormFieldMapping, superClass);

  function XMLFormFieldMapping() {
    this.renderContent = bind(this.renderContent, this);
    this.getSaveData = bind(this.getSaveData, this);
    return XMLFormFieldMapping.__super__.constructor.apply(this, arguments);
  }

  XMLFormFieldMapping.prototype.getSaveData = function(save_data) {
    var dw, i, idx, len, ref, sdata, ssdata;
    ssdata = this.getBaseSaveData();
    ssdata.easydb = [];
    ref = this.data[this.getID()].dragWrappers;
    for (i = 0, len = ref.length; i < len; i++) {
      dw = ref[i];
      idx = -1;
      sdata = {};
      dw.getSaveData(sdata);
      if (!$.isEmptyObject(sdata)) {
        ssdata.easydb.push(sdata);
      }
    }
    save_data.fields.push(ssdata);
    return save_data;
  };

  XMLFormFieldMapping.prototype.renderContent = function() {
    return this.renderDropWrapper();
  };

  return XMLFormFieldMapping;

})(XMLFormField);
// Generated by CoffeeScript 1.10.0
var XMLFormFieldCheckbox,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

XMLFormFieldCheckbox = (function(superClass) {
  extend(XMLFormFieldCheckbox, superClass);

  function XMLFormFieldCheckbox() {
    this.renderContent = bind(this.renderContent, this);
    return XMLFormFieldCheckbox.__super__.constructor.apply(this, arguments);
  }

  XMLFormFieldCheckbox.prototype.renderContent = function() {
    return this.renderDropWrapper(new Checkbox({
      name: "horst",
      data: {}
    }).start().DOM);
  };

  return XMLFormFieldCheckbox;

})(XMLFormFieldMapping);
// Generated by CoffeeScript 1.10.0
var XMLFormFieldDate,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

XMLFormFieldDate = (function(superClass) {
  extend(XMLFormFieldDate, superClass);

  function XMLFormFieldDate() {
    this.renderContent = bind(this.renderContent, this);
    return XMLFormFieldDate.__super__.constructor.apply(this, arguments);
  }

  XMLFormFieldDate.prototype.renderContent = function() {
    return this.renderDropWrapper(new DateTime({
      name: "horst",
      data: {}
    }).start().DOM);
  };

  return XMLFormFieldDate;

})(XMLFormFieldMapping);
// Generated by CoffeeScript 1.10.0
var XMLFormFieldDragWrapper, XMLFormFieldDragWrapperLoader,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

XMLFormFieldDragWrapper = (function() {
  function XMLFormFieldDragWrapper(opts, data) {
    this.opts = opts;
    this.data = data != null ? data : {};
    this.getSaveData = bind(this.getSaveData, this);
    if (this.opts instanceof XMLFormFieldDragWrapper) {
      this.data = this.opts.data;
      this.opts = this.opts.opts;
    }
    assert(this.opts.formWrapper instanceof XMLFormWrapper, "new XMLFormFieldDragWrapper", "opts.formWrapper needs to be instanceof XMLFormWrapper", {
      opts: this.opts
    });
  }

  XMLFormFieldDragWrapper.prototype.renderAsSource = function() {
    var source;
    source = $div("xml-form-field-drag-wrap");
    new Draggable({
      element: source,
      create: (function(_this) {
        return function() {
          return {
            dragWrapper: _this
          };
        };
      })(this)
    });
    return source.append(this.contentSource());
  };

  XMLFormFieldDragWrapper.prototype.renderAsCondition = function() {
    var condition;
    condition = $div("xml-form-field-condition");
    return condition.append(this.contentSource());
  };

  XMLFormFieldDragWrapper.prototype.renderAsTarget = function(formField, renderProperties) {
    this.__target = $div("xml-form-field-drag-wrap-in-form");
    new Draggable({
      element: this.__target,
      create: (function(_this) {
        return function() {
          return {
            dragWrapper: _this
          };
        };
      })(this)
    });
    Events.listen({
      node: this.__target,
      type: "click",
      call: (function(_this) {
        return function() {
          if (_this.propertiesShown) {
            return _this.hideProperties();
          } else {
            return _this.showProperties();
          }
        };
      })(this)
    });
    this.__target.empty().append(this.contentTarget());
    if (this.propertiesShown) {
      this.__target.addClass("selected");
      if (renderProperties) {
        this.renderProperties();
      }
    }
    return this.__target;
  };

  XMLFormFieldDragWrapper.prototype.hideProperties = function() {
    var fw;
    fw = this.opts.formWrapper;
    assert(fw.showPropertiesOf === this, "XMLFormFieldDragWrapper.hideProperties", "Shown properties are not the one hiding...");
    this.__target.removeClass("selected");
    fw.emptyProperties();
    fw.showPropertiesOf = null;
    return this.propertiesShown = false;
  };

  XMLFormFieldDragWrapper.prototype.showProperties = function() {
    var fw;
    fw = this.opts.formWrapper;
    if (fw.showPropertiesOf) {
      fw.showPropertiesOf.hideProperties();
    }
    fw.showPropertiesOf = this;
    this.propertiesShown = true;
    return this.renderProperties();
  };

  XMLFormFieldDragWrapper.prototype.renderProperties = function() {
    var f, field, fields, form, fw, i, j, len, len1, p, pref, ref, ref1;
    fw = this.opts.formWrapper;
    this.__target.addClass("selected");
    fields = [];
    pref = "xml.form.field.drag.wrapper.label.";
    ref = this.isLinked.formFields;
    for (i = 0, len = ref.length; i < len; i++) {
      f = ref[i];
      fields.push({
        type: Output,
        form: {
          label: $$(pref + "id")
        },
        text: f.getID()
      });
      fields.push({
        type: Output,
        form: {
          label: $$(pref + "is_in")
        },
        text: getObjectClass(f)
      });
    }
    fields.push({
      type: Output,
      form: {
        label: $$(pref + "key")
      },
      text: this.isLinked.key
    });
    fields.push({
      type: Output,
      form: {
        label: $$(pref + "type")
      },
      text: getObjectClass(this)
    });
    ref1 = this.getProperties();
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      p = ref1[j];
      if ($.isPlainObject(p)) {
        field = DataField["new"](p);
      } else {
        field = p;
      }
      assert(field instanceof DataField, "XMLFormFieldDragWrapper.renderProperties", "Properties need to be of type DataField", {
        property: p
      });
      fields.push(field);
    }
    form = new Form({
      fields: fields
    });
    if (!fw.prop_drop) {
      fw.prop_drop = true;
      new Droppable({
        element: fw.properties,
        drop: (function(_this) {
          return function(ev, info) {
            return info.globalDrag.conditionItem.remove();
          };
        })(this),
        accept: (function(_this) {
          return function(ev, info) {
            if (info.globalDrag.conditionItem) {
              return true;
            } else {
              return false;
            }
          };
        })(this)
      });
    }
    fw.properties.empty().append(form.start().DOM);
  };

  XMLFormFieldDragWrapper.prototype.conditionTypes = ["any", "all", "none"];

  XMLFormFieldDragWrapper.prototype.addEmptyCondition = function(type) {
    return this.conditions.push((new XMLFormWrapperCondition()).loadCondition(this, {
      type: type
    }));
  };

  XMLFormFieldDragWrapper.prototype.getProperties = function() {
    return assert(false, "" + (getObjectClass(this)), "needs to be implemented.");
  };

  XMLFormFieldDragWrapper.prototype.init = function() {
    var c, i, j, k, len, len1, ref, ref1, types;
    if (!((ref = this.data.conditions) != null ? ref.length : void 0)) {
      return;
    }
    this.conditions = [];
    types = this.conditionTypes.slice(0);
    ref1 = this.data.conditions;
    for (i = 0, len = ref1.length; i < len; i++) {
      c = ref1[i];
      removeFromArray(c.type, types);
      this.conditions.push((new XMLFormWrapperCondition()).loadCondition(this, c));
    }
    for (j = 0, len1 = types.length; j < len1; j++) {
      k = types[j];
      this.addEmptyCondition(k);
    }
    this.conditions.sort((function(_this) {
      return function(a, b) {
        var a_idx, b_idx;
        a_idx = _this.conditionTypes.indexOf(a.getType());
        b_idx = _this.conditionTypes.indexOf(b.getType());
        if (a_idx < b_idx) {
          return -1;
        } else if (a_idx > b_idx) {
          return 1;
        } else {
          return 0;
        }
      };
    })(this));
    return this;
  };

  XMLFormFieldDragWrapper.prototype.getSaveData = function(save_data) {
    var c, i, len, ref, ref1, sdata;
    if ((ref = this.conditions) != null ? ref.length : void 0) {
      save_data.conditions = [];
      ref1 = this.conditions;
      for (i = 0, len = ref1.length; i < len; i++) {
        c = ref1[i];
        sdata = c.getSaveData();
        if (!sdata) {
          continue;
        }
        save_data.conditions.push(sdata);
      }
      if (!save_data.conditions.length) {
        delete save_data.conditions;
      }
    }
    return save_data;
  };

  return XMLFormFieldDragWrapper;

})();

XMLFormFieldDragWrapperLoader = (function() {
  function XMLFormFieldDragWrapperLoader() {
    this.getInstanceFromSaveData = bind(this.getInstanceFromSaveData, this);
  }

  XMLFormFieldDragWrapperLoader.prototype.getInstanceFromSaveData = function(formWrapper, save_data) {
    return null;
  };

  return XMLFormFieldDragWrapperLoader;

})();
// Generated by CoffeeScript 1.10.0
var XMLFormFieldDragWrapperField, XMLFormFieldDragWrapperFieldLoader,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

XMLFormFieldDragWrapperField = (function(superClass) {
  extend(XMLFormFieldDragWrapperField, superClass);

  function XMLFormFieldDragWrapperField() {
    return XMLFormFieldDragWrapperField.__super__.constructor.apply(this, arguments);
  }

  XMLFormFieldDragWrapperField.prototype.getName = function() {
    return this.opts.field.fullNameLocalized();
  };

  XMLFormFieldDragWrapperField.prototype.contentSource = function() {
    if (this.opts.field instanceof LinkedObject) {
      return $text((this.getName()) + " [Standard]");
    } else {
      return $text(this.getName());
    }
  };

  XMLFormFieldDragWrapperField.prototype.contentTarget = function() {
    return $text(this.getName());
  };

  XMLFormFieldDragWrapperField.prototype.getID = function() {
    return this.opts.treeNode.fullFieldName();
  };

  XMLFormFieldDragWrapperField.prototype.init = function() {
    return XMLFormFieldDragWrapperField.__super__.init.call(this);
  };

  XMLFormFieldDragWrapperField.prototype.getProperties = function() {
    var df, f, i, len, props, ref;
    props = [
      {
        type: Output,
        form: {
          label: "internal_name"
        },
        text: this.opts.field.fullName()
      }, {
        type: Output,
        form: {
          label: "full_field_name"
        },
        text: this.opts.treeNode.fullFieldName()
      }, {
        type: Output,
        form: {
          label: "field_type"
        },
        text: getObjectClass(this.opts.field)
      }
    ];
    if (this.opts.field.mask.nestedTableField) {
      props.push({
        type: Output,
        form: {
          label: "nested_field"
        },
        text: this.opts.field.mask.nestedTableField.fullName()
      });
    }
    ref = this.opts.field.getXMLFormWrapperFields();
    for (i = 0, len = ref.length; i < len; i++) {
      f = ref[i];
      df = DataField["new"](f, [], {
        data: this.data
      });
      props.push(df);
    }
    return props;
  };

  XMLFormFieldDragWrapperField.prototype.getSaveData = function(save_data) {
    var f, i, len, ref, results;
    XMLFormFieldDragWrapperField.__super__.getSaveData.call(this, save_data);
    save_data.type = this.opts.field.getXMLFormWrapperType();
    save_data.field = this.opts.treeNode.fullFieldName();
    ref = this.opts.field.getXMLFormWrapperFields();
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      f = ref[i];
      results.push(save_data[f.name] = this.data[f.name]);
    }
    return results;
  };

  return XMLFormFieldDragWrapperField;

})(XMLFormFieldDragWrapper);

XMLFormFieldDragWrapperFieldLoader = (function(superClass) {
  extend(XMLFormFieldDragWrapperFieldLoader, superClass);

  function XMLFormFieldDragWrapperFieldLoader() {
    this.getInstanceFromSaveData = bind(this.getInstanceFromSaveData, this);
    return XMLFormFieldDragWrapperFieldLoader.__super__.constructor.apply(this, arguments);
  }

  XMLFormFieldDragWrapperFieldLoader.prototype.getInstanceFromSaveData = function(formWrapper, save_data) {
    var dw, ref, ref1, ref2, type;
    if (!(save_data.field && save_data.type)) {
      return null;
    }
    dw = formWrapper.wrapperFields[save_data.field];
    if (!dw) {
      return null;
    }
    type = (ref = dw.opts) != null ? (ref1 = ref.field) != null ? typeof ref1.getXMLFormWrapperType === "function" ? ref1.getXMLFormWrapperType() : void 0 : void 0 : void 0;
    assert(save_data.type === type, (getObjectClass(this)) + ".getInstanceFromSaveData", "Loading failed, type mismatch: stored: " + save_data.type + " != field: " + type, {
      save_data: save_data,
      dragWrapper: dw,
      field: (ref2 = dw.opts) != null ? ref2.field : void 0
    });
    dw = new window[getObjectClass(dw)](dw.opts, save_data);
    dw.init();
    return dw;
  };

  return XMLFormFieldDragWrapperFieldLoader;

})(XMLFormFieldDragWrapperLoader);
// Generated by CoffeeScript 1.10.0
var XMLFormFieldDragWrapperFixedValue, XMLFormFieldDragWrapperFixedValueLoader,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

XMLFormFieldDragWrapperFixedValue = (function(superClass) {
  extend(XMLFormFieldDragWrapperFixedValue, superClass);

  function XMLFormFieldDragWrapperFixedValue() {
    this.getSaveData = bind(this.getSaveData, this);
    this.contentTarget = bind(this.contentTarget, this);
    return XMLFormFieldDragWrapperFixedValue.__super__.constructor.apply(this, arguments);
  }

  XMLFormFieldDragWrapperFixedValue.prototype.contentSource = function() {
    return $text($$("xml.form.field.drag.wrapper.fixed.value.empty_text"));
  };

  XMLFormFieldDragWrapperFixedValue.prototype.contentTarget = function() {
    if (isEmpty(this.data.text)) {
      return $$("xml.form.field.drag.wrapper.fixed.value.empty_text");
    } else {
      return this.data.text;
    }
  };

  XMLFormFieldDragWrapperFixedValue.prototype.getSaveData = function(save_data) {
    XMLFormFieldDragWrapperFixedValue.__super__.getSaveData.call(this, save_data);
    save_data.type = "text_fixed";
    return save_data.text = this.data.text;
  };

  XMLFormFieldDragWrapperFixedValue.prototype.getID = function() {
    return "fixed-value";
  };

  XMLFormFieldDragWrapperFixedValue.prototype.getProperties = function() {
    return [
      {
        type: Input,
        form: {
          label: $$("xml.form.field.drag.wrapper.fixed.value.text")
        },
        name: "text",
        data: this.data,
        onDataChanged: (function(_this) {
          return function() {
            var f, i, len, ref, results;
            ref = _this.isLinked.formFields;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              f = ref[i];
              results.push(f.update(false));
            }
            return results;
          };
        })(this)
      }
    ];
  };

  return XMLFormFieldDragWrapperFixedValue;

})(XMLFormFieldDragWrapper);

XMLFormFieldDragWrapperFixedValueLoader = (function(superClass) {
  extend(XMLFormFieldDragWrapperFixedValueLoader, superClass);

  function XMLFormFieldDragWrapperFixedValueLoader() {
    this.getInstanceFromSaveData = bind(this.getInstanceFromSaveData, this);
    return XMLFormFieldDragWrapperFixedValueLoader.__super__.constructor.apply(this, arguments);
  }

  XMLFormFieldDragWrapperFixedValueLoader.prototype.getInstanceFromSaveData = function(formWrapper, save_data) {
    if (save_data.type === "text_fixed") {
      return new XMLFormFieldDragWrapperFixedValue({
        formWrapper: formWrapper
      }, save_data);
    }
    return null;
  };

  return XMLFormFieldDragWrapperFixedValueLoader;

})(XMLFormFieldDragWrapperLoader);
// Generated by CoffeeScript 1.10.0
var XMLFormFieldGroup,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

XMLFormFieldGroup = (function(superClass) {
  extend(XMLFormFieldGroup, superClass);

  function XMLFormFieldGroup(opts, data) {
    this.opts = opts;
    this.data = data;
    this.getSaveData = bind(this.getSaveData, this);
    this.update = bind(this.update, this);
    this.dump = bind(this.dump, this);
    this.renderContent = bind(this.renderContent, this);
    XMLFormFieldGroup.__super__.constructor.call(this, this.opts, this.data);
    this.grid = new XMLFormGrid({
      father_field: this,
      fields: this.opts.def.fields
    }, this.data);
  }

  XMLFormFieldGroup.prototype.renderContent = function() {
    return this.grid.render();
  };

  XMLFormFieldGroup.prototype.dump = function(s, spc) {
    XMLFormFieldGroup.__super__.dump.call(this, s, spc);
    this.grid.dump(s, spc + "  ");
    return s;
  };

  XMLFormFieldGroup.prototype.update = function() {
    XMLFormFieldGroup.__super__.update.call(this);
    return this.grid.update();
  };

  XMLFormFieldGroup.prototype.getSaveData = function(save_data) {
    var sdata;
    sdata = {
      type: "list",
      path: this.getBareKey(),
      fields: []
    };
    this.grid.getSaveData(sdata);
    if (sdata.fields.length) {
      save_data.fields.push(sdata);
    }
    return save_data;
  };

  return XMLFormFieldGroup;

})(XMLFormField);
// Generated by CoffeeScript 1.10.0
var XMLFormFieldForm,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

XMLFormFieldForm = (function(superClass) {
  extend(XMLFormFieldForm, superClass);

  function XMLFormFieldForm() {
    return XMLFormFieldForm.__super__.constructor.apply(this, arguments);
  }

  return XMLFormFieldForm;

})(XMLFormFieldGroup);
// Generated by CoffeeScript 1.10.0
var XMLFormFieldSkip,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

XMLFormFieldSkip = (function(superClass) {
  extend(XMLFormFieldSkip, superClass);

  function XMLFormFieldSkip() {
    return XMLFormFieldSkip.__super__.constructor.apply(this, arguments);
  }

  XMLFormFieldSkip.prototype.renderTd = function() {};

  XMLFormFieldSkip.prototype.update = function() {};

  return XMLFormFieldSkip;

})(XMLFormField);
// Generated by CoffeeScript 1.10.0
var XMLFormFieldHidden,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

XMLFormFieldHidden = (function(superClass) {
  extend(XMLFormFieldHidden, superClass);

  function XMLFormFieldHidden() {
    return XMLFormFieldHidden.__super__.constructor.apply(this, arguments);
  }

  XMLFormFieldHidden.prototype.getSaveData = function(save_data) {
    var def, f, i, len, ref, sdata;
    sdata = this.getBaseSaveData();
    def = this.getDef();
    if (def.easydb) {
      if (!sdata.easydb) {
        sdata.easydb = [];
      }
      ref = def.easydb;
      for (i = 0, len = ref.length; i < len; i++) {
        f = ref[i];
        sdata.easydb.push(f);
      }
    }
    save_data.fields.push(sdata);
    return save_data;
  };

  XMLFormFieldHidden.prototype.getPos = function() {};

  return XMLFormFieldHidden;

})(XMLFormFieldSkip);
// Generated by CoffeeScript 1.10.0
var XMLFormFieldInput,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

XMLFormFieldInput = (function(superClass) {
  extend(XMLFormFieldInput, superClass);

  function XMLFormFieldInput() {
    return XMLFormFieldInput.__super__.constructor.apply(this, arguments);
  }

  return XMLFormFieldInput;

})(XMLFormFieldMapping);
// Generated by CoffeeScript 1.10.0
var XMLFormFieldList,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

XMLFormFieldList = (function(superClass) {
  extend(XMLFormFieldList, superClass);

  function XMLFormFieldList() {
    return XMLFormFieldList.__super__.constructor.apply(this, arguments);
  }

  return XMLFormFieldList;

})(XMLFormFieldGroup);
// Generated by CoffeeScript 1.10.0
var XMLFormFieldOutput,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

XMLFormFieldOutput = (function(superClass) {
  extend(XMLFormFieldOutput, superClass);

  function XMLFormFieldOutput() {
    return XMLFormFieldOutput.__super__.constructor.apply(this, arguments);
  }

  XMLFormFieldOutput.prototype.renderContent = function() {
    var span;
    return span = $span("xml-form-field-output").text(this.getText());
  };

  XMLFormFieldOutput.prototype.dump = function() {};

  return XMLFormFieldOutput;

})(XMLFormField);
// Generated by CoffeeScript 1.10.0
var XMLFormFieldSelect,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

XMLFormFieldSelect = (function(superClass) {
  extend(XMLFormFieldSelect, superClass);

  function XMLFormFieldSelect() {
    this.renderContent = bind(this.renderContent, this);
    return XMLFormFieldSelect.__super__.constructor.apply(this, arguments);
  }

  XMLFormFieldSelect.prototype.renderContent = function() {
    var i, idx, len, opt, options, ref;
    options = [];
    ref = this.opts.def.options;
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      opt = ref[idx];
      options.push({
        text: opt.text[ez5.loca.culture],
        value: idx,
        selected: idx === 0
      });
    }
    return this.renderDropWrapper(new Select({
      name: "dummy",
      options: options,
      data: {}
    }).start().DOM);
  };

  return XMLFormFieldSelect;

})(XMLFormField);
// Generated by CoffeeScript 1.10.0
var XMLFormFieldSplitter,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

XMLFormFieldSplitter = (function(superClass) {
  extend(XMLFormFieldSplitter, superClass);

  function XMLFormFieldSplitter() {
    return XMLFormFieldSplitter.__super__.constructor.apply(this, arguments);
  }

  XMLFormFieldSplitter.prototype.renderContent = function() {
    return $span("xml-form-field-splitter").text(this.getText());
  };

  XMLFormFieldSplitter.prototype.dump = function() {};

  return XMLFormFieldSplitter;

})(XMLFormField);
// Generated by CoffeeScript 1.10.0
var XMLFormFieldTextarea,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

XMLFormFieldTextarea = (function(superClass) {
  extend(XMLFormFieldTextarea, superClass);

  function XMLFormFieldTextarea() {
    return XMLFormFieldTextarea.__super__.constructor.apply(this, arguments);
  }

  return XMLFormFieldTextarea;

})(XMLFormFieldMapping);
// Generated by CoffeeScript 1.10.0
var XMLFormForm;

XMLFormForm = (function() {
  function XMLFormForm(opts, data) {
    var i, idx, len, ref, t;
    this.opts = opts;
    this.data = data;
    this.__injectedTabs = this.opts.tabs;
    this.tabs = [];
    ref = this.opts.profile.tabs;
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      t = ref[idx];
      this.tabs.push(new XMLFormTab({
        form: this,
        tab: t,
        idx: idx
      }, this.data));
    }
    return;
  }

  XMLFormForm.prototype.dump = function() {
    var i, len, ref, s, tab;
    s = ["Form"];
    ref = this.tabs;
    for (i = 0, len = ref.length; i < len; i++) {
      tab = ref[i];
      tab.dump(s, "  ");
    }
    return s.join("\n");
  };

  XMLFormForm.prototype.render = function(__container) {
    var $tabs, tabs;
    this.__container = __container;
    tabs = this.__injectedTabs || [];
    tabs.push.apply(tabs, this.getTabs());
    $tabs = new Tabs({
      tabs: tabs,
      "class": "xml-form-wrapper"
    });
    this.__container.empty().append($tabs.DOM);
    return $tabs.activate(tabs[0].name);
  };

  XMLFormForm.prototype.getTabs = function() {
    var i, len, ref, results, t;
    ref = this.tabs;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      t = ref[i];
      results.push(t.getTab());
    }
    return results;
  };

  XMLFormForm.prototype.update = function() {
    var i, len, ref, t;
    ref = this.tabs;
    for (i = 0, len = ref.length; i < len; i++) {
      t = ref[i];
      t.update();
    }
    if (this.__container) {
      CUI.Events.trigger({
        node: this.__container,
        type: 'data-changed'
      });
    }
  };

  XMLFormForm.prototype.removeDragWrapper = function(dragWrapper, update) {
    if (update == null) {
      update = true;
    }
    removeFromArray(dragWrapper, dragWrapper.isLinked.dragWrappers);
    return this.update();
  };

  XMLFormForm.prototype.addDragWrapper = function(dragWrapper, fieldKey, update) {
    if (update == null) {
      update = true;
    }
    assert(dragWrapper instanceof XMLFormFieldDragWrapper, "XMLFormForm.addDragWrapper", "dragWrapper must be instance of XMLFormFieldDragWrapper", {
      dragWrapper: dragWrapper
    });
    if (!(fieldKey && this.data[fieldKey])) {
      CUI.warn("XMLFormForm.addDragWrapper", "fieldKey not found in data", {
        fieldKey: fieldKey,
        data: this.data
      });
      return false;
    }
    if (dragWrapper.isLinked) {
      this.removeDragWrapper(dragWrapper, false);
    }
    this.data[fieldKey].dragWrappers.push(dragWrapper);
    dragWrapper.isLinked = this.data[fieldKey];
    if (update) {
      this.update();
    }
    return true;
  };

  XMLFormForm.prototype.getBaseKey = function() {
    return this.opts.profile.xml_base || "/";
  };

  XMLFormForm.prototype.getSaveData = function(save_data) {
    var i, len, ref, t;
    save_data.fields = [];
    ref = this.tabs;
    for (i = 0, len = ref.length; i < len; i++) {
      t = ref[i];
      t.getSaveData(save_data);
    }
    return save_data;
  };

  return XMLFormForm;

})();
// Generated by CoffeeScript 1.10.0
var XMLFormGrid;

XMLFormGrid = (function() {
  function XMLFormGrid(opts, data) {
    this.opts = opts;
    this.data = data;
    this.grid = [];
    this.max = {
      x: -1,
      y: -1
    };
    this.generateGrid();
  }

  XMLFormGrid.prototype.generateGrid = function() {
    var classname, ef, f, f_def, i, idx, key, len, pos, ref, results, x, y;
    this.formFields = [];
    ref = this.opts.fields;
    results = [];
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      f_def = ref[idx];
      if (!f_def.type) {
        CUI.error("XMLFormGrid.generateGrid: Definition has not 'type' attribute, skipping.", {
          definition: f_def
        });
        continue;
      }
      classname = "XMLFormField" + (toCamel(f_def.type, true));
      assert(window[classname] instanceof Function, "XMLFormWrapper.showForm", classname + " not found", {
        definition: f_def,
        classname: classname
      });
      f_def.form = this;
      f = new window[classname]({
        def: f_def,
        idx: idx,
        grid: this
      }, this.data);
      this.formFields[idx] = f;
      key = f.getID();
      if (f.getSaveData) {
        if (!this.data[key]) {
          this.data[key] = {
            formFields: [],
            key: key,
            dragWrappers: []
          };
        }
        this.data[key].formFields.push(f);
      }
      pos = f.getPos();
      if (!pos) {
        continue;
      }
      results.push((function() {
        var j, ref1, ref2, results1;
        results1 = [];
        for (y = j = ref1 = pos.y, ref2 = pos.rowspan + pos.y; j < ref2; y = j += 1) {
          results1.push((function() {
            var k, ref3, ref4, results2;
            results2 = [];
            for (x = k = ref3 = pos.x, ref4 = pos.colspan + pos.x; k < ref4; x = k += 1) {
              if (pos.x === x && pos.y === y) {
                results2.push(this.setCell(pos.x, pos.y, f));
              } else {
                ef = new XMLFormFieldSkip({
                  def: {
                    x: x,
                    y: y
                  },
                  idx: this,
                  grid: this,
                  father_field: f
                });
                results2.push(this.setCell(x, y, ef));
              }
            }
            return results2;
          }).call(this));
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  XMLFormGrid.prototype.dump = function(s, spc) {
    var ff, i, len, ref;
    ref = this.formFields;
    for (i = 0, len = ref.length; i < len; i++) {
      ff = ref[i];
      ff.dump(s, spc + "  ");
    }
    return s;
  };

  XMLFormGrid.prototype.setCell = function(x, y, f) {
    if (!this.grid[x]) {
      this.grid[x] = [];
    }
    assert(!this.grid[x][y], "XMLFormWrapper.showForm", "Position " + x + "/" + y + " is already taken", {
      existingField: this.grid[x][y],
      offendingField: f,
      tabs: this.tabs
    });
    this.grid[x][y] = f;
    if (x > this.max.x) {
      this.max.x = x;
    }
    if (y > this.max.y) {
      this.max.y = y;
    }
  };

  XMLFormGrid.prototype.render = function() {
    var f, i, j, ref, ref1, ref2, t, tr, x, y;
    t = $element("table", "xml-form-wrapper-main");
    for (y = i = 0, ref = this.max.y; 0 <= ref ? i <= ref : i >= ref; y = 0 <= ref ? ++i : --i) {
      for (x = j = 0, ref1 = this.max.x; 0 <= ref1 ? j <= ref1 : j >= ref1; x = 0 <= ref1 ? ++j : --j) {
        if (x === 0) {
          tr = $element("tr").appendTo(t);
        }
        f = (ref2 = this.grid[x]) != null ? ref2[y] : void 0;
        if (!f) {
          tr.append($element("td"));
        } else {
          tr.append(f.renderTd());
        }
      }
    }
    return t;
  };

  XMLFormGrid.prototype.update = function() {
    var i, j, ref, ref1, ref2, ref3, x, y;
    for (y = i = 0, ref = this.max.y; 0 <= ref ? i <= ref : i >= ref; y = 0 <= ref ? ++i : --i) {
      for (x = j = 0, ref1 = this.max.x; 0 <= ref1 ? j <= ref1 : j >= ref1; x = 0 <= ref1 ? ++j : --j) {
        if ((ref2 = this.grid[x]) != null) {
          if ((ref3 = ref2[y]) != null) {
            ref3.update();
          }
        }
      }
    }
    return this;
  };

  XMLFormGrid.prototype.getID = function() {
    if (!this.opts.father_field) {
      return this.opts.tab.getID();
    } else {
      return this.opts.father_field.getID();
    }
  };

  XMLFormGrid.prototype.getForm = function() {
    if (this.opts.father_field) {
      return this.opts.father_field.getForm();
    } else {
      return this.opts.tab.getForm();
    }
  };

  XMLFormGrid.prototype.getTab = function() {
    if (this.opts.father_field) {
      return this.opts.father_field.getTab();
    } else {
      return this.opts.tab;
    }
  };

  XMLFormGrid.prototype.getKey = function() {
    if (this.opts.father_field) {
      return this.opts.father_field.getKey();
    } else {
      return this.getTab().getBaseKey();
    }
  };

  XMLFormGrid.prototype.getSaveData = function(save_data) {
    var ff, i, len, ref;
    ref = this.formFields;
    for (i = 0, len = ref.length; i < len; i++) {
      ff = ref[i];
      if (typeof ff.getSaveData === "function") {
        ff.getSaveData(save_data);
      }
    }
    return save_data;
  };

  return XMLFormGrid;

})();
// Generated by CoffeeScript 1.10.0
var XMLFormTab;

XMLFormTab = (function() {
  function XMLFormTab(opts, data) {
    var ref;
    this.opts = opts != null ? opts : {};
    this.data = data;
    assert(CUI.isArray((ref = this.opts.tab) != null ? ref.fields : void 0), 'new XMLFormTab', 'tab.fields must be an Array', {
      tab: this.tab
    });
    this.grid = new XMLFormGrid({
      tab: this,
      fields: this.opts.tab.fields
    }, this.data);
  }

  XMLFormTab.prototype.dump = function(s, spc) {
    s.push(spc + this.getName());
    this.grid.dump(s, spc + '  ');
    return s;
  };

  XMLFormTab.prototype.getForm = function() {
    return this.opts.form;
  };

  XMLFormTab.prototype.getTab = function() {
    var ref;
    return {
      name: this.getName(),
      text: ((ref = this.opts.tab.text) != null ? ref[ez5.loca.culture] : void 0) || this.getName(),
      content: (function(_this) {
        return function() {
          var d;
          d = $div('ez5-xml-form-tab-tab');
          d.append(_this.grid.render());
          return d;
        };
      })(this)
    };
  };

  XMLFormTab.prototype.getName = function() {
    return this.opts.tab.tab || '<no name>';
  };

  XMLFormTab.prototype.getID = function() {
    return this.opts.tab.tab || '<no id>';
  };

  XMLFormTab.prototype.getBaseKey = function() {
    return this.opts.form.getBaseKey();
  };

  XMLFormTab.prototype.update = function() {
    return this.grid.update();
  };

  XMLFormTab.prototype.getSaveData = function(save_data) {
    return this.grid.getSaveData(save_data);
  };

  return XMLFormTab;

})();
// Generated by CoffeeScript 1.10.0
var XMLFormWrapper,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

XMLFormWrapper = (function(superClass) {
  extend(XMLFormWrapper, superClass);

  function XMLFormWrapper() {
    return XMLFormWrapper.__super__.constructor.apply(this, arguments);
  }

  XMLFormWrapper.prototype.initOpts = function() {
    XMLFormWrapper.__super__.initOpts.call(this);
    return this.addOpts({
      pane: {
        mandatory: true,
        check: BorderLayout
      },
      tabs: {
        mandatory: true,
        check: Array
      },
      mapping: {
        mandatory: true,
        check: "PlainObject"
      },
      profile: {
        mandatory: true,
        check: String
      }
    });
  };

  XMLFormWrapper.prototype.readOpts = function() {
    var fields_pane, mapping_pane;
    XMLFormWrapper.__super__.readOpts.call(this);
    this.pane = this._pane;
    this.__tabs = this._tabs;
    this.loaders = [new XMLFormFieldDragWrapperFieldLoader(), new XMLFormFieldDragWrapperFixedValueLoader()];
    this.data = {};
    this.__prop_pane = new SimplePane({
      header_left: [
        {
          loca_key: "base.help.flex_handle.close",
          icon: "east",
          onClick: (function(_this) {
            return function() {
              return DOM.data(_this.pane.east(), "flexHandle").close();
            };
          })(this)
        }, new Label({
          text: $$("xml.form.wrapper.pane.properties")
        })
      ]
    });
    fields_pane = new SimplePane({
      header_left: new Label({
        text: $$("xml.form.wrapper.pane.fields")
      })
    });
    mapping_pane = new SimplePane({
      header_left: new Label({
        text: $$("xml.form.wrapper.pane.mapping")
      })
    });
    this.pane.replace(this.__prop_pane, "east");
    this.pane.replace(fields_pane, "west");
    this.pane.replace(mapping_pane, "center");
    this.properties = this.__prop_pane.center();
    this.fields = fields_pane.center();
    this.content = mapping_pane.center();
    this.emptyProperties();
    return new Droppable({
      element: this.content,
      drop: (function(_this) {
        return function(ev, info) {
          return _this.form.removeDragWrapper(info.globalDrag.dragWrapper);
        };
      })(this),
      accept: (function(_this) {
        return function(ev, info) {
          var ref;
          if ((ref = info.globalDrag.dragWrapper) != null ? ref.isLinked : void 0) {
            return true;
          } else {
            return false;
          }
        };
      })(this)
    });
  };

  XMLFormWrapper.prototype.init = function() {
    var dfr;
    dfr = new CUI.Deferred();
    ez5.api.xmlmapping({
      api: "/profile/" + this._profile,
      dataType: "json"
    }).fail(dfr.reject).done((function(_this) {
      return function(profile_data) {
        var ref, ref1, ref2;
        _this.profile_data = profile_data;
        _this.__required_field_type = {};
        if ((ref = _this.profile_data.profile_type) != null ? ref.exiftool_import : void 0) {
          _this.__required_field_type["import"] = true;
        }
        if ((ref1 = _this.profile_data.profile_type) != null ? ref1.exiftool_export : void 0) {
          _this.__required_field_type["export"] = true;
        }
        if ((ref2 = _this.profile_data.profile_type) != null ? ref2.xml_export : void 0) {
          _this.__required_field_type["export"] = true;
        }
        return _this.showFields().fail(dfr.reject).done(function() {
          _this.showForm();
          return dfr.resolve();
        });
      };
    })(this));
    return dfr.promise();
  };

  XMLFormWrapper.prototype.emptyProperties = function() {
    return this.__prop_pane.replace(new EmptyLabel({
      text: $$("xml.form.wrapper.pane.no_field_selected"),
      centered: true
    }), "center");
  };

  XMLFormWrapper.prototype.loadMappingData = function() {
    return this.loadFieldsData(this._mapping.fields, this._mapping.xml_base);
  };

  XMLFormWrapper.prototype.loadFieldsData = function(fields) {
    var f, i, inst, j, k, len, len1, len2, loader, loaders, ref, ref1, ref2, save_data;
    if (!fields) {
      return;
    }
    loaders = [XMLFormFieldDragWrapperField, XMLFormFieldDragWrapperFixedValue];
    for (i = 0, len = fields.length; i < len; i++) {
      f = fields[i];
      assert(!f.easydb || $.isArray(f.easydb), "XMLFormWrapper.loadFieldsData", "Cannot load old style easydb String value", {
        field: f
      });
      if (((ref = f.easydb) != null ? ref.length : void 0) > 0) {
        ref1 = f.easydb;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          save_data = ref1[j];
          ref2 = this.loaders;
          for (k = 0, len2 = ref2.length; k < len2; k++) {
            loader = ref2[k];
            inst = loader.getInstanceFromSaveData(this, save_data);
            if (inst) {
              if (this.form.addDragWrapper(inst, f._id, false)) {

              }
              break;
            }
          }
        }
      }
      if (f.fields) {
        this.loadFieldsData(f.fields);
      }
    }
  };

  XMLFormWrapper.prototype.getSaveData = function(save_data) {
    if (save_data == null) {
      save_data = {};
    }
    save_data.xml_base = this.profile_data.xml_base;
    return this.form.getSaveData(save_data);
  };

  XMLFormWrapper.prototype.registerWrapperField = function(wrapperField) {
    var key;
    key = wrapperField.opts.treeNode.fullFieldName();
    assert(!this.wrapperFields[key], "XMLFormWrapper.registerWrapperField", "Cannot register " + (getObjectClass(wrapperField)) + "." + key + " more than once", {
      key: key,
      wrapperField: wrapperField,
      wrapperTreeNodes: this.wrapperFields
    });
    return this.wrapperFields[key] = wrapperField;
  };

  XMLFormWrapper.prototype.showFields = function() {
    var _ot, div, form, i, j, len, len1, m, ot, otm, ref, ref1;
    otm = new ObjecttypeManager();
    ref = ez5.schema.CURRENT._objecttypes;
    for (i = 0, len = ref.length; i < len; i++) {
      ot = ref[i];
      _ot = new Objecttype(new Table("CURRENT", ot.table_id));
      if (!_ot.inMainSearch()) {
        continue;
      }
      ref1 = ez5.mask.CURRENT._masks_by_table_id[ot.table_id];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        m = ref1[j];
        otm.addMask(ez5.mask.CURRENT._mask_instance_by_name[m.name]);
      }
    }
    otm.initCommonFields("all", true, (function(_this) {
      return function(f) {
        return f.isSourceForMapping(_this.__required_field_type);
      };
    })(this));
    this.wrapperFields = {};
    this.fields.empty();
    form = new FieldsForm({
      otm: otm,
      data: {},
      acceptField: (function(_this) {
        return function(field) {
          return field.isSourceForMapping(_this.__required_field_type);
        };
      })(this),
      treeOpts: {
        cols: ["auto", "maximize"],
        maximize: true,
        rowMove: false
      },
      treeNodeClass: XMLFormWrapperTreeNode,
      formWrapper: this
    });
    div = form.renderForm();
    this.fields.append(new XMLFormFieldDragWrapperFixedValue({
      formWrapper: this
    }).renderAsSource());
    this.fields.append(div);
    return form.open();
  };

  XMLFormWrapper.prototype.dump = function() {
    if (this.form) {
      return console.debug(this.form.dump());
    }
  };

  XMLFormWrapper.prototype.showForm = function() {
    this.form = new XMLFormForm({
      profile: this.profile_data,
      wrapper: this,
      tabs: this.__tabs
    }, this.data);
    this.loadMappingData();
    return this.form.render(this.content);
  };

  XMLFormWrapper.prototype.destroy = function() {
    return this.pane.remove();
  };

  XMLFormWrapper.getOutputSpan = function(key) {
    var span;
    span = $span("xml-form-field-key");
    if (key) {
      span.prop({
        title: key
      }).text(key.replace(/\[.*?\]/g, ""));
    }
    return span;
  };

  return XMLFormWrapper;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var XMLFormWrapperCondition, XMLFormWrapperConditionItem,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

XMLFormWrapperCondition = (function() {
  function XMLFormWrapperCondition() {
    this.getSaveData = bind(this.getSaveData, this);
    this.addConditionItem = bind(this.addConditionItem, this);
    this.removeConditionItem = bind(this.removeConditionItem, this);
    this.renderDropArea = bind(this.renderDropArea, this);
    this.getType = bind(this.getType, this);
    this.type = null;
    this.list = [];
  }

  XMLFormWrapperCondition.prototype.getType = function() {
    return this.type;
  };

  XMLFormWrapperCondition.prototype.loadCondition = function(dragWrapperTarget, condition) {
    var data, dragWrapper, dw, j, len, ref, ref1, save_data;
    CUI.debug("XMLFormWrapperCondition loading", condition);
    this.type = condition.type;
    if (!((ref = condition.list) != null ? ref.length : void 0)) {
      return this;
    }
    ref1 = condition.list;
    for (j = 0, len = ref1.length; j < len; j++) {
      save_data = ref1[j];
      dragWrapper = dragWrapperTarget.opts.formWrapper.wrapperFields[save_data.field];
      dw = new window[getObjectClass(dragWrapper)](dragWrapper);
      CUI.debug(save_data, dw);
      data = copyObject(save_data);
      delete data.field;
      this.addConditionItem(new XMLFormWrapperConditionItem({
        condition: this,
        dragWrapper: dw
      }, data));
    }
    CUI.debug("loading done", this.list);
    return this;
  };

  XMLFormWrapperCondition.prototype.renderDropArea = function() {
    var i, j, len, ref;
    this.dropArea = $div("xml-form-wrapper-condition-drop-area");
    this.dropArea.append($text(this.type));
    new Droppable({
      element: this.dropArea,
      drop: (function(_this) {
        return function(ev, info) {
          CUI.debug("dropped element", ev, info);
          if (info.globalDrag.conditionItem) {
            if ($.inArray(info.globalDrag.conditionItem, _this.list) > -1) {
              return;
            } else {
              _this.addConditionItem(info.globalDrag.conditionItem.remove());
            }
            return;
          }
          return _this.addConditionItem(new XMLFormWrapperConditionItem({
            dragWrapper: info.globalDrag.dragWrapper
          }));
        };
      })(this),
      accept: (function(_this) {
        return function(ev, info) {
          if (info.globalDrag.dragWrapper instanceof XMLFormFieldDragWrapperField) {
            return true;
          } else if (info.globalDrag.conditionItem) {
            return true;
          } else {
            return false;
          }
        };
      })(this)
    });
    ref = this.list;
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      this.dropArea.append(i.render());
    }
    return this.dropArea;
  };

  XMLFormWrapperCondition.prototype.removeConditionItem = function(conditionItem) {
    var c;
    c = removeFromArray(conditionItem, this.list);
    assert(c === 0, (getObjectClass(this)) + ".removeConditionItem", "conditionItem not found in list", {
      list: this.list,
      conditionItem: conditionItem
    });
    return idx;
  };

  XMLFormWrapperCondition.prototype.addConditionItem = function(conditionItem) {
    assert(conditionItem instanceof XMLFormWrapperConditionItem, (getObjectClass(this)) + ".addCondition", "conditionItem needs to be instance of XMLFormWrapperConditionItem", {
      conditionIten: conditionItem
    });
    this.list.push(conditionItem);
    conditionItem.setCondition(this);
    if (this.dropArea) {
      return this.dropArea.append(conditionItem.render());
    }
  };

  XMLFormWrapperCondition.prototype.getSaveData = function() {
    var i, j, len, ref, sdata;
    if (!this.list.length) {
      return;
    }
    sdata = {
      type: this.type,
      list: []
    };
    ref = this.list;
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      sdata.list.push(i.getSaveData());
    }
    return sdata;
  };

  return XMLFormWrapperCondition;

})();

XMLFormWrapperConditionItem = (function() {
  function XMLFormWrapperConditionItem(opts, data1) {
    this.opts = opts != null ? opts : {};
    this.data = data1 != null ? data1 : {};
    this.getSaveData = bind(this.getSaveData, this);
    this.remove = bind(this.remove, this);
    this.setCondition = bind(this.setCondition, this);
    CUI.debug("XMLFormWrapperConditionItem", this.opts);
  }

  XMLFormWrapperConditionItem.prototype.setCondition = function(condition1) {
    this.condition = condition1;
  };

  XMLFormWrapperConditionItem.prototype.render = function() {
    this.t = $table_one_row(this.opts.dragWrapper.renderAsCondition(), new Select({
      name: "type",
      options: [
        {
          text: "eq_no_case",
          value: "eq_no_case"
        }, {
          text: "eq",
          value: "eq"
        }
      ],
      data: this.data
    }).start(), new Input({
      name: "value",
      data: this.data
    }).start());
    new Draggable({
      element: this.t,
      create: (function(_this) {
        return function() {
          return {
            conditionItem: _this
          };
        };
      })(this)
    });
    return this.t;
  };

  XMLFormWrapperConditionItem.prototype.remove = function() {
    this.condition.removeConditionItem(this);
    this.t.remove();
    return this;
  };

  XMLFormWrapperConditionItem.prototype.getSaveData = function() {
    var sdata;
    sdata = {
      field: this.opts.dragWrapper.getID(),
      type: this.data.type,
      value: this.data.value
    };
    return sdata;
  };

  return XMLFormWrapperConditionItem;

})();
// Generated by CoffeeScript 1.10.0
var XMLFormWrapperTreeNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

XMLFormWrapperTreeNode = (function(superClass) {
  extend(XMLFormWrapperTreeNode, superClass);

  function XMLFormWrapperTreeNode() {
    return XMLFormWrapperTreeNode.__super__.constructor.apply(this, arguments);
  }

  XMLFormWrapperTreeNode.prototype.nodeAdded = function() {
    XMLFormWrapperTreeNode.__super__.nodeAdded.call(this);
    if (!(this.field instanceof NestedTable)) {
      this.dragWrapperField = new XMLFormFieldDragWrapperField({
        formWrapper: this._formWrapper,
        treeNode: this,
        field: this.field
      });
      return this._formWrapper.registerWrapperField(this.dragWrapperField);
    }
  };

  XMLFormWrapperTreeNode.prototype.getModeForNested = function() {
    return "all";
  };

  XMLFormWrapperTreeNode.prototype.renderContent = function() {
    var source_div;
    if (!(this.field instanceof NestedTable)) {
      source_div = this.dragWrapperField.renderAsSource();
      this.addColumn(new ListViewColumn({
        element: source_div
      }));
    }
    return new Label({
      text: this.data.display_name,
      multiline: true
    });
  };

  XMLFormWrapperTreeNode.prototype.isSelectable = function() {
    return false;
  };

  return XMLFormWrapperTreeNode;

})(FieldsFormNode);
// Generated by CoffeeScript 1.10.0
var XMLFormWrapperCondition, XMLFormWrapperConditionItem,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

XMLFormWrapperCondition = (function() {
  function XMLFormWrapperCondition() {
    this.getSaveData = bind(this.getSaveData, this);
    this.addConditionItem = bind(this.addConditionItem, this);
    this.removeConditionItem = bind(this.removeConditionItem, this);
    this.renderDropArea = bind(this.renderDropArea, this);
    this.getType = bind(this.getType, this);
    this.type = null;
    this.list = [];
  }

  XMLFormWrapperCondition.prototype.getType = function() {
    return this.type;
  };

  XMLFormWrapperCondition.prototype.loadCondition = function(dragWrapperTarget, condition) {
    var data, dragWrapper, dw, j, len, ref, ref1, save_data;
    CUI.debug("XMLFormWrapperCondition loading", condition);
    this.type = condition.type;
    if (!((ref = condition.list) != null ? ref.length : void 0)) {
      return this;
    }
    ref1 = condition.list;
    for (j = 0, len = ref1.length; j < len; j++) {
      save_data = ref1[j];
      dragWrapper = dragWrapperTarget.opts.formWrapper.wrapperFields[save_data.field];
      dw = new window[getObjectClass(dragWrapper)](dragWrapper);
      CUI.debug(save_data, dw);
      data = copyObject(save_data);
      delete data.field;
      this.addConditionItem(new XMLFormWrapperConditionItem({
        condition: this,
        dragWrapper: dw
      }, data));
    }
    CUI.debug("loading done", this.list);
    return this;
  };

  XMLFormWrapperCondition.prototype.renderDropArea = function() {
    var i, j, len, ref;
    this.dropArea = $div("xml-form-wrapper-condition-drop-area");
    this.dropArea.append($text(this.type));
    new Droppable({
      element: this.dropArea,
      drop: (function(_this) {
        return function(ev, info) {
          CUI.debug("dropped element", ev, info);
          if (info.globalDrag.conditionItem) {
            if ($.inArray(info.globalDrag.conditionItem, _this.list) > -1) {
              return;
            } else {
              _this.addConditionItem(info.globalDrag.conditionItem.remove());
            }
            return;
          }
          return _this.addConditionItem(new XMLFormWrapperConditionItem({
            dragWrapper: info.globalDrag.dragWrapper
          }));
        };
      })(this),
      accept: (function(_this) {
        return function(ev, info) {
          if (info.globalDrag.dragWrapper instanceof XMLFormFieldDragWrapperField) {
            return true;
          } else if (info.globalDrag.conditionItem) {
            return true;
          } else {
            return false;
          }
        };
      })(this)
    });
    ref = this.list;
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      this.dropArea.append(i.render());
    }
    return this.dropArea;
  };

  XMLFormWrapperCondition.prototype.removeConditionItem = function(conditionItem) {
    var c;
    c = removeFromArray(conditionItem, this.list);
    assert(c === 0, (getObjectClass(this)) + ".removeConditionItem", "conditionItem not found in list", {
      list: this.list,
      conditionItem: conditionItem
    });
    return idx;
  };

  XMLFormWrapperCondition.prototype.addConditionItem = function(conditionItem) {
    assert(conditionItem instanceof XMLFormWrapperConditionItem, (getObjectClass(this)) + ".addCondition", "conditionItem needs to be instance of XMLFormWrapperConditionItem", {
      conditionIten: conditionItem
    });
    this.list.push(conditionItem);
    conditionItem.setCondition(this);
    if (this.dropArea) {
      return this.dropArea.append(conditionItem.render());
    }
  };

  XMLFormWrapperCondition.prototype.getSaveData = function() {
    var i, j, len, ref, sdata;
    if (!this.list.length) {
      return;
    }
    sdata = {
      type: this.type,
      list: []
    };
    ref = this.list;
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      sdata.list.push(i.getSaveData());
    }
    return sdata;
  };

  return XMLFormWrapperCondition;

})();

XMLFormWrapperConditionItem = (function() {
  function XMLFormWrapperConditionItem(opts, data1) {
    this.opts = opts != null ? opts : {};
    this.data = data1 != null ? data1 : {};
    this.getSaveData = bind(this.getSaveData, this);
    this.remove = bind(this.remove, this);
    this.setCondition = bind(this.setCondition, this);
    CUI.debug("XMLFormWrapperConditionItem", this.opts);
  }

  XMLFormWrapperConditionItem.prototype.setCondition = function(condition1) {
    this.condition = condition1;
  };

  XMLFormWrapperConditionItem.prototype.render = function() {
    this.t = $table_one_row(this.opts.dragWrapper.renderAsCondition(), new Select({
      name: "type",
      options: [
        {
          text: "eq_no_case",
          value: "eq_no_case"
        }, {
          text: "eq",
          value: "eq"
        }
      ],
      data: this.data
    }).start(), new Input({
      name: "value",
      data: this.data
    }).start());
    new Draggable({
      element: this.t,
      create: (function(_this) {
        return function() {
          return {
            conditionItem: _this
          };
        };
      })(this)
    });
    return this.t;
  };

  XMLFormWrapperConditionItem.prototype.remove = function() {
    this.condition.removeConditionItem(this);
    this.t.remove();
    return this;
  };

  XMLFormWrapperConditionItem.prototype.getSaveData = function() {
    var sdata;
    sdata = {
      field: this.opts.dragWrapper.getID(),
      type: this.data.type,
      value: this.data.value
    };
    return sdata;
  };

  return XMLFormWrapperConditionItem;

})();
// Generated by CoffeeScript 1.10.0
var MetadataApp,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

MetadataApp = (function(superClass) {
  extend(MetadataApp, superClass);

  function MetadataApp() {
    return MetadataApp.__super__.constructor.apply(this, arguments);
  }

  MetadataApp.label = function() {
    return "admin.menu.metadata.mappings";
  };

  MetadataApp.path = function() {
    return ["metadata"];
  };

  MetadataApp.group = function() {
    return "administration";
  };

  MetadataApp.submenu = function() {
    return "administration";
  };

  MetadataApp.is_allowed = function() {
    return ez5.session.hasSystemRight("root", "profile");
  };

  MetadataApp.prototype.load = function() {
    var wb;
    MetadataApp.__super__.load.call(this);
    this.metadata_menu = {
      items: []
    };
    this.tree = new ListViewTree({
      cols: ["maximize"],
      selectableRows: true,
      footer_left: [
        {
          icon: "plus",
          group: "plus-minus",
          menu: this.metadata_menu
        }, {
          icon: "minus",
          group: "plus-minus",
          onClick: (function(_this) {
            return function() {
              var ref;
              return (ref = _this.tree.getSelectedNode()) != null ? ref.remove(true) : void 0;
            };
          })(this)
        }
      ]
    });
    this.pane = new BorderLayout({
      west: {
        flexHandle: {
          hidden: false,
          state_name: "metdata-list",
          label: {
            text: $$("metadata.app.pane.title")
          }
        },
        content: new SimplePane({
          header_left: new Label({
            text: $$("metadata.app.pane.title")
          }),
          header_right: new LocaButton({
            loca_key: "base.help.flex_handle.close",
            icon: "west",
            onClick: (function(_this) {
              return function() {
                return DOM.data(_this.pane.west(), "flexHandle").close();
              };
            })(this)
          }),
          content: this.tree.render(false)
        })
      }
    });
    ez5.rootLayout.replace(this.pane, "center");
    wb = new WaitBlock({
      element: this.pane
    }).show();
    this.empty();
    return this.loadList().done((function(_this) {
      return function() {
        return wb.destroy();
      };
    })(this));
  };

  MetadataApp.prototype.allow_unload = function() {
    var node;
    node = this.tree.getSelectedNode();
    if (node) {
      return node.check_deselect();
    } else {
      return CUI.resolvedPromise();
    }
  };

  MetadataApp.prototype.unload = function() {
    MetadataApp.__super__.unload.call(this);
    this.pane.destroy();
    return CUI.resolvedPromise();
  };

  MetadataApp.prototype.empty = function() {
    return this.pane.replace(new EmptyLabel({
      centered: true,
      text: $$("metadata.app.no_profile_selected")
    }), "center");
  };

  MetadataApp.prototype.loadList = function() {
    var dfr;
    this.__list = new MetadataProfileList();
    dfr = new CUI.Deferred();
    this.__list.load().done((function(_this) {
      return function() {
        var i, len, p, prof, ref;
        _this.metadata_menu.items.splice(0);
        _this.tree.root.removeFromDOM(false);
        _this.tree.root.children = [];
        ref = _this.__list.getProfiles();
        for (i = 0, len = ref.length; i < len; i++) {
          p = ref[i];
          prof = new MetadataProfile({
            profile: p,
            metadata: _this
          });
          _this.metadata_menu.items.push(prof.getMenuItem());
          _this.tree.root.addChild(prof);
        }
        return _this.tree.root.open().done(dfr.resolve).fail(dfr.reject);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  return MetadataApp;

})(RootMenuApp);

ez5.session_ready(function() {
  return ez5.rootMenu.registerApp(MetadataApp);
});
// Generated by CoffeeScript 1.10.0
var MetadataProfileList,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

MetadataProfileList = (function(superClass) {
  extend(MetadataProfileList, superClass);

  function MetadataProfileList() {
    return MetadataProfileList.__super__.constructor.apply(this, arguments);
  }

  MetadataProfileList.prototype.readOpts = function() {
    MetadataProfileList.__super__.readOpts.call(this);
    return this.__profiles = null;
  };

  MetadataProfileList.prototype.load = function() {
    return ez5.api.xmlmapping({
      api: "/list"
    }).done((function(_this) {
      return function(__profiles) {
        _this.__profiles = __profiles;
      };
    })(this));
  };

  MetadataProfileList.prototype.getProfiles = function() {
    assert(CUI.isArray(this.__profiles), this.__cls + ".getProfiles", "Profiles not loaded yet. Use .load() first.");
    return this.__profiles;
  };

  MetadataProfileList.prototype.getMappingOpts = function(injectOpts, filter_profile_type, filter_profile) {
    var divider, i, j, k, l, len, len1, map, ok, opt, opts, prof, ref, ref1, t, v;
    if (injectOpts == null) {
      injectOpts = null;
    }
    assert(CUI.isArray(this.__profiles), this.__cls + ".getMetadataMappings", "Profiles not loaded yet. Use .load() first.");
    opts = [];
    divider = false;
    ref = this.__profiles;
    for (i = 0, len = ref.length; i < len; i++) {
      prof = ref[i];
      if (filter_profile && prof.profile !== filter_profile) {
        continue;
      }
      if (filter_profile_type && prof.profile_type) {
        if (CUI.isEmptyObject(filter_profile_type)) {
          ok = false;
        } else {
          ok = true;
        }
        for (k in filter_profile_type) {
          v = filter_profile_type[k];
          if (prof.profile_type[k] !== v) {
            ok = false;
            break;
          }
        }
      } else {
        ok = !!prof.profile_type;
      }
      if (!ok) {
        continue;
      }
      ref1 = prof.mappings;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        map = ref1[j];
        t = map.displayname[ez5.loca.getLanguage()];
        if (isEmpty(t)) {
          t = "Mapping " + map.id;
        }
        t += " [" + ez5.loca.getBestFrontendValue(prof.displayname) + "]";
        opts.push({
          text: t,
          value: map.id
        });
      }
    }
    if (injectOpts) {
      if (injectOpts.length) {
        if (opts.length && injectOpts.length > 1) {
          opts.splice(0, 0, {
            divider: true
          });
        }
        for (l = injectOpts.length - 1; l >= 0; l += -1) {
          opt = injectOpts[l];
          opts.splice(0, 0, opt);
        }
      }
    } else if (opts.length === 0) {
      opts.push({
        text: $$("metadata.profile.list.no_profiles"),
        disabled: true,
        value: null
      });
    }
    return opts;
  };

  return MetadataProfileList;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var MetadataProfile,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

MetadataProfile = (function(superClass) {
  extend(MetadataProfile, superClass);

  function MetadataProfile() {
    return MetadataProfile.__super__.constructor.apply(this, arguments);
  }

  MetadataProfile.prototype.initOpts = function() {
    MetadataProfile.__super__.initOpts.call(this);
    return this.addOpts({
      metadata: {
        mandatory: true,
        check: MetadataApp
      },
      profile: {
        mandatory: true,
        check: "PlainObject"
      }
    });
  };

  MetadataProfile.prototype.readOpts = function() {
    var i, len, mapping_short, ref;
    MetadataProfile.__super__.readOpts.call(this);
    this.profile = this._profile;
    if (!this.profile.profile_type) {
      this.profile.profile_type = {};
    }
    this.metadata = this._metadata;
    this.children = [];
    ref = this.profile.mappings;
    for (i = 0, len = ref.length; i < len; i++) {
      mapping_short = ref[i];
      this.children.push(new MetadataProfileMapping({
        mapping_short: mapping_short,
        metadata: this.metadata
      }));
    }
    return this.children.sort(function(a, b) {
      return a.getDisplayName().localeCompare(b.getDisplayName());
    });
  };

  MetadataProfile.prototype.getName = function() {
    return ez5.loca.getBestFrontendValue(this.profile.displayname) || this.profile.profile;
  };

  MetadataProfile.prototype.renderContent = function() {
    var lbl, types;
    types = this.getProfileTypes();
    if (types.length > 0) {
      lbl = new Label({
        "class": "ez5-metadata-profile-type",
        text: types.join(", ")
      });
    } else {
      lbl = new EmptyLabel({
        "class": "ez5-metadata-profile-type",
        text: $$("metadata.profile.no_profile_type")
      });
    }
    return [
      new Label({
        text: this.getName()
      }), lbl
    ];
  };

  MetadataProfile.prototype.getProfileTypes = function() {
    var on_off, ref, type, types;
    types = [];
    ref = this.profile.profile_type;
    for (type in ref) {
      on_off = ref[type];
      if (on_off) {
        types.push(type);
      }
    }
    return types;
  };

  MetadataProfile.prototype.getMenuItem = function() {
    return {
      value: this.profile.profile,
      text: this.getName(),
      onClick: (function(_this) {
        return function() {
          var mapping;
          mapping = new MetadataProfileMapping({
            metadata: _this.metadata
          });
          _this.profile.mappings.push(mapping);
          _this.addNode(mapping);
          return mapping.select();
        };
      })(this)
    };
  };

  MetadataProfile.prototype.isSelectable = function() {
    return false;
  };

  return MetadataProfile;

})(ListViewTreeNode);
// Generated by CoffeeScript 1.10.0
var MetadataProfileMapping,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

MetadataProfileMapping = (function(superClass) {
  extend(MetadataProfileMapping, superClass);

  function MetadataProfileMapping(opts) {
    this.opts = opts != null ? opts : {};
    MetadataProfileMapping.__super__.constructor.call(this, this.opts);
  }

  MetadataProfileMapping.prototype.initOpts = function() {
    MetadataProfileMapping.__super__.initOpts.call(this);
    return this.addOpts({
      metadata: {
        mandatory: true,
        check: MetadataApp
      },
      mapping_short: {
        check: "PlainObject"
      }
    });
  };

  MetadataProfileMapping.prototype.readOpts = function() {
    var ref;
    MetadataProfileMapping.__super__.readOpts.call(this);
    this.metadata = this._metadata;
    return this.__id = (ref = this.opts.mapping_short) != null ? ref.id : void 0;
  };

  MetadataProfileMapping.prototype.renderContent = function() {
    var dn;
    dn = this.getDisplayName();
    if (dn !== null) {
      return new Label({
        text: dn
      });
    } else {
      return new EmptyLabel({
        text: $$("admin.metadata.list.mapping.new")
      });
    }
  };

  MetadataProfileMapping.prototype.getDisplayName = function() {
    var dn, ref, ref1;
    dn = ez5.loca.getBestFrontendValue((ref = this.mapping) != null ? ref.displayname : void 0);
    if (!isEmpty(dn)) {
      return dn;
    }
    dn = ez5.loca.getBestFrontendValue((ref1 = this._mapping_short) != null ? ref1.displayname : void 0);
    if (!isEmpty(dn)) {
      return dn;
    }
    if (this.__id) {
      return this.__id + "";
    }
    return null;
  };

  MetadataProfileMapping.prototype.isSelectable = function() {
    return ListViewTreeNode.prototype.isSelectable.call(this);
  };

  MetadataProfileMapping.prototype.select = function() {
    return MetadataProfileMapping.__super__.select.call(this).done((function(_this) {
      return function() {
        return _this.load();
      };
    })(this));
  };

  MetadataProfileMapping.prototype.deselect = function() {
    return MetadataProfileMapping.__super__.deselect.call(this).done((function(_this) {
      return function() {
        return _this.metadata.empty();
      };
    })(this));
  };

  MetadataProfileMapping.prototype.load = function() {
    if (this.__id) {
      return ez5.api.xmlmapping({
        api: "/mapping/" + this.__id
      }).done((function(_this) {
        return function(mapping) {
          _this.mapping = mapping;
          return _this.show();
        };
      })(this));
    } else {
      this.mapping = {};
      return this.show();
    }
  };

  MetadataProfileMapping.prototype.remove = function(keep) {
    var key;
    if (keep == null) {
      keep = false;
    }
    if (this.__id) {
      key = "metadata.profile.mapping.confirm.remove";
    } else {
      key = "metadata.profile.mapping.confirm.remove.new";
    }
    CUI.confirm({
      text: $$(key, {
        name: this.getDisplayName()
      }),
      button_text_ok: $$("metadata.profile.mapping.confirm.remove.button.ok")
    }).done((function(_this) {
      return function() {
        if (!_this.__id) {
          return MetadataProfileMapping.__super__.remove.call(_this, keep);
        } else {
          return ez5.api.xmlmapping({
            type: 'DELETE',
            api: '/mapping/' + _this.__id
          }).done(function() {
            ez5.metadata.load();
            return ListViewTreeNode.prototype.remove.call(_this, keep);
          });
        }
      };
    })(this));
    return this;
  };

  MetadataProfileMapping.prototype.show = function() {
    var pane, save_data;
    save_data = null;
    this.__saveButton = new LocaButton({
      loca_key: "metadata.profile.mapping.button.save",
      disabled: true,
      onClick: (function(_this) {
        return function(ev) {
          _this.__saveButton.disable();
          return _this.save(ev).done(function() {
            return _this.load();
          }).fail(function() {
            return _this.__saveButton.enable();
          });
        };
      })(this)
    });
    pane = new BorderLayout({
      west: {
        flexHandle: {
          state_name: "metadata-profile-west"
        },
        "class": "ez5-metadata-profile-mapping-west"
      },
      center: {},
      east: {
        flexHandle: {
          state_name: "metadata-profile-east",
          closed: true,
          label: {
            text: $$("xml.form.wrapper.pane.properties")
          }
        },
        "class": "ez5-metadata-profile-mapping-east"
      },
      south: {
        content: new PaneToolbar({
          right: {
            content: this.__saveButton
          }
        })
      }
    });
    this.metadata.pane.replace(pane, "center");
    Events.listen({
      node: pane,
      type: "data-changed",
      call: (function(_this) {
        return function(ev) {
          if (save_data === JSON.stringify(_this.getSaveData())) {
            return _this.__saveButton.disable();
          } else {
            return _this.__saveButton.enable();
          }
        };
      })(this)
    });
    this.xmlForm = new XMLFormWrapper({
      pane: pane,
      profile: this.father.profile.profile,
      mapping: this.mapping,
      tabs: this.getTabs()
    });
    this.xmlForm.init().done((function(_this) {
      return function() {
        return save_data = JSON.stringify(_this.getSaveData());
      };
    })(this));
    this.update();
  };

  MetadataProfileMapping.prototype.check_deselect = function(ev) {
    var dfr;
    dfr = new CUI.Deferred();
    if (this.__saveButton.isEnabled()) {
      new CUI.ConfirmationChoice({
        text: $$("metadata.profile.mapping.unsaved_changes.text"),
        choices: [
          {
            _value: "discard",
            text: $$("metadata.profile.mapping.unsaved_changes.button.discard")
          }, {
            _value: "cancel",
            text: $$("base.cancel")
          }, {
            _value: "save",
            primary: true,
            text: $$("metadata.profile.mapping.unsaved_changes.button.save")
          }
        ]
      }).open().done((function(_this) {
        return function(choice, btn, ev) {
          switch (choice._value) {
            case "discard":
              return dfr.resolve();
            case "cancel":
              return dfr.reject();
            case "save":
              return _this.save().done(dfr.resolve).fail(dfr.reject);
          }
        };
      })(this));
    } else {
      dfr.resolve();
    }
    return dfr.promise();
  };

  MetadataProfileMapping.prototype.getSaveData = function() {
    var save_data;
    save_data = {
      id: this.mapping.id,
      displayname: this.mapping.displayname,
      profile: this.father.profile.profile,
      profile_type: copyObject(this.father.profile.profile_type, true)
    };
    this.xmlForm.getSaveData(save_data);
    return save_data;
  };

  MetadataProfileMapping.prototype.save = function(ev) {
    var req, save_data;
    save_data = this.getSaveData();
    if (ev != null ? ev.hasModifierKey() : void 0) {
      this.xmlForm.dump();
      console.debug(dump(save_data));
      return CUI.rejectedPromise();
    }
    ez5.splash.show('system.list.manager.item.saving');
    req = {
      api: "/xmlmapping/mapping",
      json_data: save_data
    };
    if (!this.__id) {
      req.type = "PUT";
    } else {
      req.type = "POST";
      req.api += "/" + this.__id;
    }
    return ez5.server(req).done((function(_this) {
      return function(data) {
        _this.__id = data.id;
        return ez5.metadata.load().done(function() {
          return ez5.splash.done('system.list.manager.item.saved');
        }).fail(function() {
          return ez5.splash.hide();
        });
      };
    })(this)).fail((function(_this) {
      return function() {
        return ez5.splash.hide();
      };
    })(this));
  };

  MetadataProfileMapping.prototype.getTabs = function() {
    var types;
    types = this.father.getProfileTypes();
    return [
      {
        name: "general",
        text: $$("admin.metadata.tab.general"),
        content: (function(_this) {
          return function() {
            return new Form({
              onDataChanged: function() {
                return _this.update();
              },
              fields: [
                {
                  type: MultiInput,
                  control: ez5.loca.getLanguageControlAdmin(),
                  form: {
                    label: $$("admin.metadata.mapping.name")
                  },
                  name: "displayname"
                }, {
                  type: Output,
                  form: {
                    label: $$("metadata.profile.mapping.profile_type.label")
                  },
                  text: types.join(", "),
                  placeholder: $$("metadata.profile.mapping.profile_type.placeholder")
                }
              ],
              data: _this.mapping
            }).start();
          };
        })(this)
      }
    ];
  };

  return MetadataProfileMapping;

})(ListViewTreeNode);
// Generated by CoffeeScript 1.10.0
var MainList,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

MainList = (function(superClass) {
  extend(MainList, superClass);

  function MainList() {
    return MainList.__super__.constructor.apply(this, arguments);
  }

  MainList.is_allowed = function() {
    return ez5.session.hasSystemRight("root", "objectadmineditor");
  };

  MainList.label = function() {
    return "admin.menu.main_list";
  };

  MainList.path = function() {
    return ["lists"];
  };

  MainList.prototype.loadLayout = function() {
    var dbInfo, waitBlock;
    this.__loadLayout = new CUI.Deferred();
    this.mainLayout = new HorizontalLayout({
      "class": "ez5-main-layout ez5-event-poller",
      absolute: true,
      left: {
        "class": "ez5-main-list-objecttypes",
        flexHandle: {
          state_name: "lists-left",
          label: {
            text: $$("main.list.objecttypes.title")
          },
          hidden: false
        }
      },
      right: {
        "class": "ez5-main-right",
        flexHandle: {
          state_name: "lists-right",
          label: {
            text: ""
          },
          hidden: false,
          closed: true
        }
      }
    });
    ez5.rootLayout.replace(this.mainLayout, "center");
    this.empty();
    this.__pane = new Pane({
      "class": "ez5-main-list-pane cui-pane--window",
      absolute: true,
      top: {
        content: [
          new PaneHeader({
            left: {
              content: new Label({
                text: $$("main.list.objecttypes.title")
              })
            },
            right: {
              content: {
                loca_key: "base.help.flex_handle.close",
                icon: "west",
                onClick: (function(_this) {
                  return function() {
                    var fh;
                    fh = CUI.DOM.data(_this.__pane.DOM.closest("[flex-handled-pane]")).flexHandle;
                    return fh.close();
                  };
                })(this)
              }
            }
          })
        ]
      },
      bottom: {
        content: new PaneFooter({
          right: {
            content: this.getExtraButton()
          }
        })
      }
    });
    this.mainLayout.replace(this.__pane, "left");
    this.sidebar = new Sidebar({
      mainLayout: this.mainLayout,
      getSearch: (function(_this) {
        return function() {
          return _this.search;
        };
      })(this)
    });
    this.__loadLayout.done((function(_this) {
      return function() {
        return waitBlock.destroy();
      };
    })(this));
    this.tree = new ListViewEditTree({
      cols: ["maximize", "auto"],
      "class": "ez5-main-list-tree",
      colClasses: ["ez5-main-list-tree-column-main", "ez5-main-list-tree-column-count"],
      absolute: true,
      no_header: true,
      no_hierarchy: true,
      rowMove: false,
      selectableRows: true,
      onSelect: (function(_this) {
        return function(ev, info) {
          return _this.pushState();
        };
      })(this)
    });
    this.__pane.replace(this.tree.render(), "center");
    waitBlock = new WaitBlock({
      element: this.__pane.center()
    }).show();
    if (ez5.schema.CURRENT.tables.length === 0) {
      this.__nodes = [];
      this.tree.load_data(this.__nodes);
      this.__loadLayout.resolve();
      return this.__loadLayout;
    }
    dbInfo = new DbInfo();
    dbInfo.load().done((function(_this) {
      return function() {
        var ot, ot_id, ot_names_create, search;
        ot_names_create = (function() {
          var ref, results;
          ref = dbInfo.getAvailableObjecttypes();
          results = [];
          for (ot_id in ref) {
            ot = ref[ot_id];
            results.push(ot.name);
          }
          return results;
        })();
        search = [];
        return ez5.api.search({
          data: {
            debug: "MainList.init"
          },
          json_data: {
            aggregations: {
              _objecttype: {
                type: "term",
                limit: 10000,
                field: "_objecttype",
                sort: "term"
              }
            },
            search: search,
            limit: 0
          }
        }).done(function(data) {
          var i, j, len, len1, ot_counts, ot_names_read, ref, ref1, ref2, ref3, term;
          ot_names_read = [];
          ot_counts = {};
          ref = data.aggregations._objecttype.terms;
          for (i = 0, len = ref.length; i < len; i++) {
            term = ref[i];
            ot_names_read.push(term.term);
            ot_counts[term.term] = term.count;
          }
          _this.__nodes = [];
          ref1 = ez5.schema.CURRENT._objecttypes;
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            ot = ref1[j];
            if ((ref2 = ot.name, indexOf.call(ot_names_read, ref2) >= 0) || (ref3 = ot.name, indexOf.call(ot_names_create, ref3) >= 0)) {
              (function(ot) {
                var node;
                node = new MainListNode({
                  mainList: _this,
                  count: ot_counts[ot.name] || 0,
                  objecttype: ot,
                  text: ot._name_localized
                });
                _this.__nodes.push(node);
                if (!_this.__startNode) {
                  return _this.__startNode = node;
                } else if (_this.__startObjecttype === ot.name) {
                  return _this.__startNode = node;
                }
              })(ot);
            }
          }
          _this.__nodes.sort(function(a, b) {
            return compareIndex(a.getSort(), b.getSort());
          });
          _this.tree.load_data(_this.__nodes);
          return _this.__loadLayout.resolve();
        });
      };
    })(this));
    return this.__loadLayout;
  };

  MainList.prototype.getExtraButton = function() {
    return new LocaButton({
      loca_key: "main.list.button.extra",
      menu: {
        items: [
          {
            loca_key: "main.list.extra.upload_csv",
            onClick: (function(_this) {
              return function() {
                return _this.showCsvImport();
              };
            })(this)
          }
        ]
      }
    });
  };

  MainList.prototype.showCsvImport = function() {
    var importer;
    importer = new ObjecttypeCSVImporter();
    return importer.start();
  };

  MainList.prototype.empty = function() {
    if (!this.mainLayout.isDestroyed()) {
      this.mainLayout.replace(new EmptyLabel({
        centered: true,
        text: $$("main.list.empty")
      }), "center");
    }
    return this.__empty = true;
  };

  MainList.prototype.pushState = function() {
    var ref, sel_node;
    sel_node = (ref = this.tree) != null ? ref.getSelectedNode() : void 0;
    if (!sel_node) {
      return MainList.__super__.pushState.call(this);
    } else if (this.__load_sid) {
      MainList.__super__.pushState.call(this, [sel_node.getObjecttype().name, this.__load_sid]);
      return this.__load_sid = null;
    } else {
      return MainList.__super__.pushState.call(this, [sel_node.getObjecttype().name]);
    }
  };

  MainList.prototype.update_path = function(path) {
    var i, len, load_gid, node, ref;
    load_gid = (function(_this) {
      return function() {
        var gid;
        gid = Main.getGlobalObjectIdFromLocation(document.location);
        if (!gid) {
          return;
        }
        return _this.collection.loadInSidebar({
          global_object_id: gid,
          push_state: false
        });
      };
    })(this);
    ref = this.tree.root.children;
    for (i = 0, len = ref.length; i < len; i++) {
      node = ref[i];
      if (path[1] !== node.getObjecttype().name) {
        continue;
      }
      if (node.isSelected()) {
        load_gid();
      } else {
        node.select().done(load_gid).fail((function(_this) {
          return function() {
            return _this.pushState();
          };
        })(this));
      }
      return;
    }
  };

  MainList.prototype.load = function(path) {
    if (path[1]) {
      this.__startObjecttype = path[1];
    }
    this.__startNode = null;
    return MainList.__super__.load.call(this, path).done((function(_this) {
      return function() {
        var ref;
        _this.__load_sid = document.location.pathname.split("/")[3];
        return (ref = _this.__startNode) != null ? ref.select().done(function() {
          return _this.loadDeepLink(_this.collection);
        }) : void 0;
      };
    })(this));
  };

  MainList.prototype.unload = function() {
    this.unloadSearch();
    return MainList.__super__.unload.call(this);
  };

  MainList.prototype.unloadSearch = function() {
    if (this.collection) {
      this.collection.destroy();
      this.collection = null;
    }
    if (this.search) {
      this.search.destroy();
      this.search = null;
    }
    this.sidebar.empty().hideSidebar();
    return this.empty();
  };

  MainList.prototype.loadSearch = function(node) {
    this.__objecttype = new Objecttype(node.getObjecttype());
    if (this.mainLayout.isDestroyed()) {
      return CUI.rejectedPromise();
    }
    this.unloadSearch();
    this.collection = new CollectionMemory({
      sidebar: this.sidebar
    });
    this.search = new SearchList({
      objecttype: this.getObjecttype().name(),
      container: this.mainLayout.center(),
      collection: this.collection,
      sidebar: this.sidebar
    });
    this.collection.setSearch(this.search);
    return this.search.init().done((function(_this) {
      return function() {
        if (!_this.search) {
          return;
        }
        _this.search.execute();
        return _this.__empty = false;
      };
    })(this));
  };

  MainList.prototype.getObjecttype = function() {
    return this.__objecttype;
  };

  return MainList;

})(Main);

ez5.session_ready(function() {
  return ez5.rootMenu.registerApp(MainList);
});
// Generated by CoffeeScript 1.10.0
var MainListNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

MainListNode = (function(superClass) {
  extend(MainListNode, superClass);

  function MainListNode() {
    return MainListNode.__super__.constructor.apply(this, arguments);
  }

  MainListNode.prototype.initOpts = function() {
    MainListNode.__super__.initOpts.call(this);
    return this.addOpts({
      mainList: {
        mandatory: true,
        check: MainList
      },
      count: {
        check: function(v) {
          return v >= 0;
        }
      },
      text: {
        check: String
      },
      objecttype: {
        check: "PlainObject"
      }
    });
  };

  MainListNode.prototype.getText = function() {
    return this._text;
  };

  MainListNode.prototype.getSort = function() {
    return this._text.toUpperCase();
  };

  MainListNode.prototype.getObjecttype = function() {
    return this._objecttype;
  };

  MainListNode.prototype.renderContent = function() {
    this.addColumn(new ListViewColumn({
      element: new Label({
        text: ez5.format_number(this._count)
      })
    }));
    return new Label({
      text: this.getText()
    });
  };

  MainListNode.prototype.deselect = function(ev, row) {
    if (ev && row === this) {
      return CUI.rejectedPromise();
    }
    return MainListNode.__super__.deselect.call(this, ev);
  };

  MainListNode.prototype.select = function(ev) {
    return CUI.chainedCall(MainListNode.__super__.select.call(this, ev), (function(_this) {
      return function() {
        return _this._mainList.loadSearch(_this);
      };
    })(this));
  };

  return MainListNode;

})(ListViewEditTreeNode);
// Generated by CoffeeScript 1.10.0
var ResultList,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ResultList = (function(superClass) {
  extend(ResultList, superClass);

  function ResultList() {
    return ResultList.__super__.constructor.apply(this, arguments);
  }

  ResultList.prototype.__page_size = 50;

  ResultList.prototype.__page_sizes = [10, 25, 50, 100];

  ResultList.prototype.getName = function() {
    return "result-list";
  };

  ResultList.prototype.__getColsAndHeaders = function(data, standard_only) {
    if (standard_only == null) {
      standard_only = false;
    }
    return ResultList.__super__.__getColsAndHeaders.call(this, data, true);
  };

  ResultList.prototype.getAdditionalViewFields = function() {
    return [];
  };

  ResultList.prototype.getObjectFormatNeeded = function() {
    return "standard";
  };

  ResultList.prototype.renderStandard = function(result_object) {
    return result_object.renderCard3(false, true, true);
  };

  ResultList.prototype.filterTopLevel = function() {
    return true;
  };

  ResultList.prototype.getNodesFromData = function(data) {
    return this.getNodesFromDataTree(data);
  };

  ResultList.prototype.addToRequest = function(request) {
    ResultList.__super__.addToRequest.call(this, request);
    request.highlight = {};
    return this;
  };

  return ResultList;

})(ResultTable);
// Generated by CoffeeScript 1.10.0
var SearchList,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SearchList = (function(superClass) {
  extend(SearchList, superClass);

  function SearchList() {
    return SearchList.__super__.constructor.apply(this, arguments);
  }

  SearchList.prototype.initOpts = function() {
    SearchList.__super__.initOpts.call(this);
    return this.addOpts({
      collection: {
        mandatory: true,
        check: Collection
      },
      container: {
        mandatory: true,
        check: function(v) {
          return isElement(v);
        }
      },
      sidebar: {
        check: Sidebar
      },
      objecttype: {
        mandatory: true,
        check: String
      },
      create_button: {
        "default": true,
        check: Boolean
      }
    });
  };

  SearchList.prototype.readOpts = function() {
    SearchList.__super__.readOpts.call(this);
    this.otm = new ObjecttypeManager();
    return this.otm.addObjecttypes((function(_this) {
      return function(table) {
        return table.name() === _this._objecttype;
      };
    })(this));
  };

  SearchList.prototype.init = function() {
    var bottomToolbar, i, len, ot, ot_names, paneHeader, plusButton, ref, sts;
    paneHeader = new PaneHeader({
      left: {
        content: new Label({
          text: $$("search.list.title", {
            objecttype: this.getSearchObjecttypes()[0].nameLocalized()
          })
        })
      }
    });
    this.__buttonToolbar = new PaneToolbar();
    ot_names = [];
    ref = this.getSearchObjecttypes();
    for (i = 0, len = ref.length; i < len; i++) {
      ot = ref[i];
      if (ot.poolLink()) {
        ot_names.push(ot.name());
      }
    }
    if (ot_names.length) {
      sts = new SearchTypeSelector({
        pref_name: "search_type_selector_" + ot_names.join("_"),
        objecttypes: this.getSearchObjecttypes()
      });
      this.addSearchManager(sts);
    } else {
      sts = null;
    }
    this.__searchInput = new SearchInput({
      expert: this,
      searchTypeSelector: sts
    });
    bottomToolbar = new PaneToolbar();
    if (this._create_button && this._sidebar) {
      plusButton = new LocaButton({
        "class": "ez5-search-list-button-new-objects",
        loca_key: "search.list.button.new_objects",
        disabled: true,
        onClick: (function(_this) {
          return function() {
            return _this._sidebar.loadEditor({
              table_id: _this.getSearchObjecttypes()[0].id()
            }).done(function() {
              return _this._sidebar.showSidebar();
            });
          };
        })(this)
      });
    }
    this.__pane = new Pane({
      "class": "ez5-search-list-pane cui-pane--window",
      absolute: true,
      top: {
        content: [paneHeader, this.__searchInput.getInputLayout(), this.__buttonToolbar]
      },
      bottom: false
    });
    this._container.empty().append(this.__pane.DOM);
    this.rc = this.__pane.center();
    this.addSearchManager(this.__searchInput);
    this.__searchInput.addPlaceholder();
    this.__searchInput.getInputLayout().append(this.getSearchButton(), "right", false);
    Events.listen({
      node: this.rc,
      type: "toolbox",
      call: (function(_this) {
        return function(ev, info) {
          return info.tools.push.apply(info.tools, _this.getCurrentTools());
        };
      })(this)
    });
    this.registerResultContainer(this.rc);
    this._collection.on({
      type: ["remove", "insert", "select"],
      instance: this,
      call: (function(_this) {
        return function(ev, info) {
          if (info.skip_update) {
            return;
          }
          return _this.updateFlyoutButtonbar();
        };
      })(this)
    });
    this.addSearchManager(new ResultManager({
      pref: "search_list_view_data",
      managers: [
        new ResultList({
          container: this.rc,
          navigation_buttons_left: [plusButton],
          selectable_opts: {
            draggable: false,
            collection: this._collection
          }
        })
      ]
    }));
    this.addSearchManager(new CollectionSearchManager({
      collection: this._collection
    }));
    this.addSearchManager(new SortManager({
      pref: "search_list_sort_data"
    }));
    return Search.prototype.init.call(this).done((function(_this) {
      return function() {
        Events.trigger({
          type: "content-resize",
          node: _this.__pane.top()
        });
        if (!plusButton) {
          return;
        }
        return _this.canCreateSearchObjecttypes().done(function() {
          return plusButton.enable();
        });
      };
    })(this));
  };

  SearchList.prototype.getSharePath = function() {
    return "/lists/" + encodeURI(this.getObjecttype().name());
  };

  SearchList.prototype.getDetailShareUrl = function(sid) {
    return this.getSharePath() + "/" + sid;
  };

  SearchList.prototype.addToRequest = function(request) {
    SearchHierarchyManager.addTopLevelFilter(this, request);
    return SearchList.__super__.addToRequest.call(this, request);
  };

  SearchList.prototype.getSearchObjecttypes = function() {
    return this.otm.objecttypes;
  };

  SearchList.prototype.getObjecttype = function() {
    return this.getSearchObjecttypes()[0];
  };

  SearchList.prototype.getPane = function() {
    return this.__pane;
  };

  SearchList.prototype.getSearchInput = function() {
    return this.__searchInput;
  };

  SearchList.prototype.getButtonToolbar = function() {
    return this.__buttonToolbar;
  };

  SearchList.prototype.hasUserInput = function() {
    return !this.__searchInput.isEmpty();
  };

  SearchList.prototype.getDefaultSortFilter = function() {
    if (this.getObjecttype().inMainSearch()) {
      return SearchMain.prototype.getDefaultSortFilter.call(this);
    }
    return [
      {
        "field": "_standard.1.text",
        "order": "ASC"
      }
    ];
  };

  SearchList.prototype.getDefaultSortKey = function() {
    if (this.getObjecttype().inMainSearch()) {
      return SearchMain.prototype.getDefaultSortKey.call(this);
    }
    return "main.search.sort.standard";
  };

  SearchList.prototype.getShareUrl = function() {};

  return SearchList;

})(SearchMain);
// Generated by CoffeeScript 1.10.0
var PoolManager,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PoolManager = (function(superClass) {
  extend(PoolManager, superClass);

  function PoolManager() {
    this.loadList = bind(this.loadList, this);
    this.getNewNode = bind(this.getNewNode, this);
    return PoolManager.__super__.constructor.apply(this, arguments);
  }

  PoolManager.is_allowed = function() {
    return ez5.session.hasSystemRight("root", "poolmanager");
  };

  PoolManager.label = function() {
    return "admin.menu.pools";
  };

  PoolManager.group = function() {
    return "rightsmanagement";
  };

  PoolManager.submenu = function() {
    return "rightsmanagement";
  };

  PoolManager.path = function() {
    return ["poolmanager"];
  };

  PoolManager.prototype.getListFields = function() {
    return [
      {
        th_label: "admin.easydb.pool.list.name"
      }
    ];
  };

  PoolManager.prototype.getMissingName = function() {
    return $$("admin.easydb.pool.missing.name");
  };

  PoolManager.prototype.getNewRootText = function() {
    return $$("admin.easydb.pool.new");
  };

  PoolManager.prototype.getNewNode = function() {
    return new this.poolClass({
      manager: this
    });
  };

  PoolManager.prototype.rootCanHaveChildren = function() {
    return false;
  };

  PoolManager.prototype.loadList = function(filter, opts) {
    var dfr;
    if (opts == null) {
      opts = {};
    }
    CUI.mergeMap(opts, {
      objectKey: "pool",
      objectKeyId: "_id",
      newInstanceFunc: (function(_this) {
        return function(pool) {
          return new _this.poolClass({
            pool: pool,
            manager: _this
          });
        };
      })(this),
      parentField: "pool._id_parent",
      parentId: null,
      doOpen: true,
      searchOpts: {}
    });
    CUI.mergeMap(opts.searchOpts, {
      type: "pool",
      format: void 0,
      limit: 10000,
      sort: [
        {
          field: "_level"
        }, {
          field: "pool.name"
        }
      ]
    });
    dfr = new CUI.Deferred();
    PoolManager.__super__.loadList.call(this, filter, opts).done((function(_this) {
      return function(objects, data) {
        if (!filter && !opts.parentId && objects.length) {
          objects[0].do_open = true;
        }
        _this.data = data;
        return dfr.resolve(objects, data);
      };
    })(this)).fail((function(_this) {
      return function() {
        return dfr.fail();
      };
    })(this));
    return dfr.promise();
  };

  PoolManager.prototype.poolClass = Pool;

  return PoolManager;

})(SystemListHierarchyManager);

ez5.session_ready(function() {
  return ez5.rootMenu.registerApp(PoolManager);
});
// Generated by CoffeeScript 1.10.0
var PoolManagerList,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PoolManagerList = (function(superClass) {
  extend(PoolManagerList, superClass);

  function PoolManagerList() {
    return PoolManagerList.__super__.constructor.apply(this, arguments);
  }

  PoolManagerList.prototype.__root_pool = null;

  PoolManagerList.prototype.loadList = function() {
    return PoolManagerList.__super__.loadList.call(this, null, {
      parentField: null,
      buildTree: true
    }).done((function(_this) {
      return function(objects, data) {
        var _p, i, j, len, len1, p, ref;
        _this.__pools = [];
        for (i = 0, len = objects.length; i < len; i++) {
          p = objects[i];
          ref = p.find();
          for (j = 0, len1 = ref.length; j < len1; j++) {
            _p = ref[j];
            _this.__pools.push(_p);
            if (_p.isRootPool()) {
              _this.__root_pool = _p;
            }
          }
        }
      };
    })(this));
  };

  PoolManagerList.prototype.getList = function() {
    return this.__pools || [];
  };

  PoolManagerList.prototype.getRootPool = function() {
    return this.__root_pool;
  };

  PoolManagerList.prototype.findPoolById = function(pool_id) {
    var i, len, pool, ref;
    ref = this.__pools;
    for (i = 0, len = ref.length; i < len; i++) {
      pool = ref[i];
      if (pool.id === pool_id) {
        return pool;
      }
    }
    return null;
  };

  PoolManagerList.prototype.findPoolByDisplayname = function(display_name) {
    var i, len, pool, ref;
    ref = this.__pools;
    for (i = 0, len = ref.length; i < len; i++) {
      pool = ref[i];
      if (pool.getDisplayText() === display_name) {
        return pool;
      }
    }
    return null;
  };

  return PoolManagerList;

})(PoolManager);
// Generated by CoffeeScript 1.10.0
var PoolManagerPoolField,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PoolManagerPoolField = (function(superClass) {
  extend(PoolManagerPoolField, superClass);

  function PoolManagerPoolField() {
    this.loadList = bind(this.loadList, this);
    return PoolManagerPoolField.__super__.constructor.apply(this, arguments);
  }

  PoolManagerPoolField.prototype.initOpts = function() {
    PoolManagerPoolField.__super__.initOpts.call(this);
    return this.addOpts({
      "class": {
        check: String
      },
      onSelect: {
        check: Function
      }
    });
  };

  PoolManagerPoolField.prototype.readOpts = function() {
    PoolManagerPoolField.__super__.readOpts.call(this);
    return this.tree = new ListViewEditTree({
      fields: this.getListFields(),
      no_header: true,
      selectableRows: true,
      rowMove: false,
      onSelect: this._onSelect,
      "class": this._class,
      maximize: false
    });
  };

  PoolManagerPoolField.prototype.empty = function() {};

  PoolManagerPoolField.prototype.getTree = function() {
    return this.tree;
  };

  PoolManagerPoolField.prototype.loadList = function(filter, opts) {
    if (opts == null) {
      opts = {};
    }
    Events.trigger({
      node: this.tree.DOM[0],
      type: "content-resize"
    });
    return PoolManagerPoolField.__super__.loadList.call(this, filter, opts);
  };

  PoolManagerPoolField.prototype.poolClass = PoolForPoolManagerPoolField;

  return PoolManagerPoolField;

})(PoolManager);
// Generated by CoffeeScript 1.10.0
var TagManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TagManager = (function(superClass) {
  extend(TagManager, superClass);

  function TagManager() {
    return TagManager.__super__.constructor.apply(this, arguments);
  }

  TagManager.is_allowed = function() {
    return ez5.session.hasSystemRight("root", "tagmanager");
  };

  TagManager.label = function() {
    return "admin.menu.tagmanager";
  };

  TagManager.group = function() {
    return "rightsmanagement";
  };

  TagManager.submenu = function() {
    return "rightsmanagement";
  };

  TagManager.path = function() {
    return ["tagmanager"];
  };

  TagManager.prototype.load = function() {
    var wb;
    TagManager.__super__.load.call(this);
    this.tagForm = new TagForm({
      context: this
    });
    this.transitionForm = new TransitionForm({
      tagForm: this.tagForm
    });
    this.saveButton = new Button({
      text: $$("base.save"),
      disabled: true,
      onClick: (function(_this) {
        return function(ev) {
          return _this.save(ev).done(function() {
            return _this.resetDataChangedListener();
          });
        };
      })(this)
    });
    wb = new WaitBlock({
      element: ez5.rootLayout.center()
    }).show();
    return CUI.when(this.tagForm.load(), this.transitionForm.load()).done((function(_this) {
      return function() {
        _this.tabs = new Tabs({
          "class": "tag-manager-tabs",
          tabs: [
            {
              name: "tags",
              text: $$("admin.tags.tab.tags"),
              content: function() {
                return _this.tagForm.getTree();
              }
            }, {
              name: "transitions",
              text: $$("admin.tags.tab.transitions"),
              content: function() {
                return _this.transitionForm.renderEditor();
              }
            }
          ],
          footer_right: new Buttonbar({
            buttons: [_this.saveButton]
          })
        });
        _this.registerDataChangedListener(_this.tabs.DOM);
        ez5.rootLayout.replace(_this.tabs, "center");
        return wb.destroy();
      };
    })(this));
  };

  TagManager.prototype.unload = function() {
    var ref, ref1;
    ez5.rootLayout.empty("center");
    if ((ref = this.tagForm) != null) {
      ref.destroy();
    }
    if ((ref1 = this.transitionForm) != null) {
      ref1.destroy();
    }
    delete this.tabs;
    delete this.tagForm;
    delete this.transitionForm;
    return TagManager.__super__.unload.call(this);
  };

  TagManager.prototype.hasChanges = function() {
    return SystemListManagerItem.prototype.hasChanges.apply(this, arguments);
  };

  TagManager.prototype.setStatus = function() {
    return SystemListManagerItem.prototype.setStatus.apply(this, arguments);
  };

  TagManager.prototype.registerDataChangedListener = function(div) {
    return SystemListManagerItem.prototype.registerDataChangedListener.apply(this, arguments);
  };

  TagManager.prototype.resetDataChangedListener = function(div) {
    return SystemListManagerItem.prototype.resetDataChangedListener.apply(this, arguments);
  };

  TagManager.prototype.allow_unload = function() {
    var dfr;
    dfr = new CUI.Deferred();
    if (this.saveButton.isEnabled()) {
      new CUI.ConfirmationChoice({
        text: $$("tag.manager.unsaved_changes.text"),
        choices: [
          {
            _value: "discard",
            text: $$("tag.manager.unsaved_changes.button.discard")
          }, {
            _value: "cancel",
            text: $$("base.cancel")
          }, {
            _value: "save",
            primary: true,
            text: $$("tag.manager.unsaved_changes.button.save")
          }
        ]
      }).open().done((function(_this) {
        return function(choice, btn, ev) {
          switch (choice._value) {
            case "discard":
              return dfr.resolve();
            case "cancel":
              return dfr.reject();
            case "save":
              return _this.save().done(dfr.resolve).fail(dfr.reject);
          }
        };
      })(this));
    } else {
      dfr.resolve();
    }
    return dfr.promise();
  };

  TagManager.prototype.getSaveData = function() {
    return [this.tagForm.getSaveData(), this.transitionForm.getSaveData()];
  };

  TagManager.prototype.save = function(ev) {
    var acl_by_idx, dfr, i, idx_by_pseudo_id, j, len, len1, ref, save_data, tag, taggroup;
    this.saveButton.disable();
    ez5.splash.show('system.list.manager.item.saving');
    dfr = new CUI.Deferred();
    dfr.always((function(_this) {
      return function() {
        return _this.saveButton.enable();
      };
    })(this));
    dfr.fail((function(_this) {
      return function() {
        return ez5.splash.hide();
      };
    })(this));
    dfr.done((function(_this) {
      return function() {
        return ez5.splash.done('system.list.manager.item.saved');
      };
    })(this));
    save_data = this.tagForm.getSaveData();
    if (ev != null ? ev.hasModifierKey() : void 0) {
      CUI.debug("tags:", save_data);
      CUI.debug("transitions:", this.transitionForm.getSaveData());
      return dfr.reject().promise();
    }
    acl_by_idx = [];
    idx_by_pseudo_id = {};
    for (i = 0, len = save_data.length; i < len; i++) {
      taggroup = save_data[i];
      ref = taggroup._tags;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        tag = ref[j];
        acl_by_idx.push(tag._acl);
        idx_by_pseudo_id[tag._pseudo_id] = acl_by_idx.length - 1;
        delete tag._acl;
        delete tag._pseudo_id;
      }
    }
    ez5.api.tags({
      type: "POST",
      json_data: save_data
    }).done((function(_this) {
      return function(data) {
        var _acl, id_by_idx, idx, item, k, key, l, len2, len3, len4, len5, len6, len7, m, n, o, p, ref1, ref2, ref3, tag_idx, v, value;
        id_by_idx = [];
        for (k = 0, len2 = data.length; k < len2; k++) {
          taggroup = data[k];
          ref1 = taggroup._tags;
          for (l = 0, len3 = ref1.length; l < len3; l++) {
            tag = ref1[l];
            id_by_idx.push(tag.tag._id);
          }
        }
        tag_idx = 0;
        for (m = 0, len4 = data.length; m < len4; m++) {
          taggroup = data[m];
          ref2 = taggroup._tags;
          for (n = 0, len5 = ref2.length; n < len5; n++) {
            tag = ref2[n];
            _acl = acl_by_idx[tag_idx];
            for (o = 0, len6 = _acl.length; o < len6; o++) {
              item = _acl[o];
              if (item.tagfilter) {
                ref3 = item.tagfilter;
                for (key in ref3) {
                  value = ref3[key];
                  for (idx = p = 0, len7 = value.length; p < len7; idx = ++p) {
                    v = value[idx];
                    if (v < 0) {
                      value[idx] = id_by_idx[idx_by_pseudo_id[v]];
                    }
                  }
                }
              }
            }
            tag._acl = _acl;
            tag.tag = {
              _id: tag.tag._id
            };
            tag_idx++;
          }
          taggroup.taggroup = {
            _id: taggroup.taggroup._id
          };
        }
        return ez5.api.tags({
          type: "POST",
          json_data: data
        }).done(function() {
          return _this.tagForm.load(_this).done(function() {
            var transition_data;
            transition_data = _this.transitionForm.getSaveData();
            return ez5.api.transitions({
              type: "POST",
              json_data: transition_data
            }).done(function(data) {
              _this.load();
              return ez5.tagForm.load().done(dfr.resolve).fail(dfr.reject);
            }).fail(dfr.reject);
          });
        }).fail(dfr.reject);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  return TagManager;

})(RootMenuApp);

ez5.session_ready(function() {
  return ez5.rootMenu.registerApp(TagManager);
});
// Generated by CoffeeScript 1.10.0
var SearchPopover,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SearchPopover = (function(superClass) {
  extend(SearchPopover, superClass);

  function SearchPopover() {
    return SearchPopover.__super__.constructor.apply(this, arguments);
  }

  SearchPopover.prototype.initOpts = function() {
    SearchPopover.__super__.initOpts.call(this);
    this.addOpts({
      popover_element: {
        mandatory: true,
        check: function(v) {
          return isElement(v) || isElement(v != null ? v.DOM : void 0);
        }
      },
      link_mask: {
        mandatory: true,
        check: Mask
      },
      onDone: {
        check: Function
      },
      onShow: {
        check: Function
      },
      onHide: {
        check: Function
      },
      collection: {
        mandatory: true,
        check: Collection
      },
      searchManagers: {
        check: Array,
        "default": []
      },
      isSelectable: {
        check: Function
      }
    });
    return this.removeOpt("container");
  };

  SearchPopover.prototype.readOpts = function() {
    SearchPopover.__super__.readOpts.call(this);
    this.__popover_element = this._popover_element;
    return this.link_objecttype = new Objecttype(this._link_mask).addAllMasks();
  };

  SearchPopover.prototype.refresh = function() {
    this.__init = false;
    this.popover.destroy();
    return SearchPopover.__super__.refresh.call(this).done((function(_this) {
      return function() {
        return _this.popover.show();
      };
    })(this));
  };

  SearchPopover.prototype.init = function() {
    var cls, i, len, ref, reload_search, selectable_opts, sm, sts;
    if (this.__init) {
      return CUI.resolvedPromise();
    }
    this.__init = true;
    this.__header = new PaneHeader({
      left: {
        content: new Label({
          text: this._link_mask.table.nameLocalized()
        })
      }
    });
    this.__buttonToolbar = new PaneToolbar();
    this.applyButton = new LocaButton({
      loca_key: "search.popover.button.apply",
      onClick: (function(_this) {
        return function() {
          _this.closePopover();
          return typeof _this._onDone === "function" ? _this._onDone() : void 0;
        };
      })(this)
    });
    this.applyButtonSetStatus();
    this.plusButton = new LocaButton({
      loca_key: "search.popover.button.plus",
      icon: "plus",
      disabled: true,
      onClick: (function(_this) {
        return function() {
          return _this.openEditor({
            popover_element: _this.__pane
          });
        };
      })(this)
    });
    this.canCreateSearchObjecttypes().done((function(_this) {
      return function() {
        return _this.plusButton.enable();
      };
    })(this));
    this.__footer = new PaneFooter({
      right: {
        content: this.applyButton
      }
    });
    if (this.link_objecttype.poolLink()) {
      sts = new SearchTypeSelector({
        pref_name: "search_type_selector_" + this.link_objecttype.name(),
        objecttypes: [this.link_objecttype],
        ignoreSelection: (function(_this) {
          return function() {
            var ref;
            if (_this.__searchInput.ignoreSearchManager(_this.__searchTypeSelector)) {
              return true;
            }
            if ((ref = _this.hierarchyManager) != null ? ref.isActive() : void 0) {
              return true;
            }
            return false;
          };
        })(this)
      });
      this.addSearchManager(sts);
    } else {
      sts = null;
    }
    this.__searchInput = new SearchInput({
      expert: this,
      searchTypeSelector: sts
    });
    this.__pane = new Pane({
      "class": "ez5-search-popover-pane",
      absolute: false,
      top: {
        content: [this.__header, this.__searchInput.getInputLayout(), this.__buttonToolbar]
      },
      bottom: {
        content: [this.__footer]
      }
    });
    this.__searchInput.addPlaceholder();
    this.rc = this.__pane.center();
    this.registerResultContainer(this.rc);
    Events.listen({
      type: "toolbox",
      node: this.rc,
      call: (function(_this) {
        return function(ev, info) {
          return info.tools.push.apply(info.tools, _this.getCurrentTools());
        };
      })(this)
    });
    this._collection.on({
      type: ["remove", "insert", "select"],
      instance: this,
      call: (function(_this) {
        return function(ev, info) {
          if (info.skip_update) {
            return;
          }
          return _this.updateFlyoutButtonbar();
        };
      })(this)
    });
    selectable_opts = {
      collection: this._collection,
      draggable: false,
      lasso: !this._collection.isSingleMode(),
      select_with_modifier: false,
      fullscreen: false,
      isSelectable: this._isSelectable
    };
    if (this.link_objecttype.inMainSearch()) {
      this.addSearchManager(new ResultManager({
        pref: "search_popover_view_data",
        managers: [
          new ResultStandard({
            container: this.rc,
            pane_absolute: false,
            navigation_buttons_left: [this.plusButton],
            selectable_opts: selectable_opts
          }), new ResultText({
            container: this.rc,
            pane_absolute: false,
            navigation_buttons_left: [this.plusButton],
            selectable_opts: selectable_opts
          }), new ResultTable({
            container: this.rc,
            navigation_buttons_left: [this.plusButton],
            selectable_opts: selectable_opts
          })
        ]
      }));
    } else {
      this.addSearchManager(new ResultManager({
        pref: "search_popover_list_view_data",
        managers: [
          new ResultList({
            container: this.rc,
            pane_absolute: false,
            navigation_buttons_left: [this.plusButton],
            selectable_opts: selectable_opts
          })
        ]
      }));
    }
    reload_search = false;
    Events.listen({
      type: "event-poller",
      node: this.__pane,
      call: (function(_this) {
        return function(ev, info) {
          var event;
          if (info.batch_done && reload_search) {
            reload_search = false;
            _this.execute();
          }
          event = info.event;
          if (!event) {
            return;
          }
          if (event.type === "OBJECT_INDEX" && event.object_version === 1 && _this._collection.objectIdx(new CollectionObject({
            _global_object_id: event.global_object_id
          })) > -1) {
            reload_search = true;
          }
        };
      })(this)
    });
    this.addSearchManager(this.__searchInput);
    this.__searchInput.getInputLayout().append(this.getSearchButton(), "right", false);
    if (this._link_mask.isHierarchy()) {
      this.hierarchyManager = new SearchHierarchyManager({
        container: this.__pane.top(),
        searchInput: this.__searchInput
      });
      this.addSearchManager(this.hierarchyManager);
    }
    this.addSearchManager(new SortManager({
      pref: "search_popover_sort_data"
    }));
    this._collection.off({
      instance: this
    });
    this._collection.on({
      type: ["insert", "remove"],
      instance: this,
      call: (function(_this) {
        return function(ev, info) {
          _this.applyButtonSetStatus();
        };
      })(this)
    });
    cls = "ez5-search-popover ";
    this.addSearchManager(new CollectionSearchManager({
      collection: this._collection
    }));
    if (this._searchManagers) {
      ref = this._searchManagers;
      for (i = 0, len = ref.length; i < len; i++) {
        sm = ref[i];
        this.addSearchManager(sm);
      }
    }
    this.popover = new Popover({
      "class": cls + this.link_objecttype.getCapabilityClasses("ez5-search-"),
      element: this.__popover_element,
      onShow: this._onShow,
      onHide: this._onHide,
      pane: this.__pane
    });
    return Search.prototype.init.call(this);
  };

  SearchPopover.prototype.applyButtonSetStatus = function() {
    var c;
    if ((c = this._collection.getCount()) > 0) {
      this.applyButton.setText($$("base.apply.count", {
        count: c
      }));
      this.applyButton.enable();
    } else {
      this.applyButton.setText($$("base.apply.count.none"));
      this.applyButton.disable();
    }
    return this;
  };

  SearchPopover.prototype.openEditor = function(_opts) {
    var done_save, ed, global_object_id, link_mask, mode, object_list, onDone, opts, params, popover_element, result_object;
    opts = CUI.Element.readOpts(_opts, "SearchPopover.openEditor", {
      result_object: {
        check: ResultObject
      },
      popover_element: {
        mandatory: true
      },
      onDone: {
        check: Function
      },
      collection: {
        mandatory: true,
        "default": this._collection,
        check: Collection
      },
      link_mask: {
        check: Mask
      }
    });
    if (opts.link_mask) {
      link_mask = opts.link_mask;
    } else {
      link_mask = this._link_mask;
    }
    result_object = opts.result_object;
    popover_element = opts.popover_element;
    onDone = opts.onDone;
    global_object_id = void 0;
    object_list = void 0;
    if (result_object) {
      if (result_object.id()) {
        mode = "single";
        global_object_id = result_object.id();
      } else {
        object_list = new ObjectList();
        object_list.push(result_object);
        mode = "new";
      }
    } else {
      mode = "new";
    }
    params = {
      table_id: link_mask.table.id(),
      popover_element: popover_element,
      global_object_id: global_object_id,
      object_list: object_list,
      mode: mode,
      format: "long",
      onSave: (function(_this) {
        return function() {
          return done_save();
        };
      })(this),
      onSaveReadOnly: (function(_this) {
        return function() {
          return done_save();
        };
      })(this),
      onCopy: (function(_this) {
        return function() {
          return result_object.getCopyFromSaveData().done(function(ro) {
            ed.getObjectList().setObject(ro, 0);
            ed.setMode("new");
            return ed.open();
          });
        };
      })(this)
    };
    ed = new EditorPopover(params);
    ed.open();
    done_save = (function(_this) {
      return function() {
        var i, idx, obj, ol, ref;
        ol = ed.getObjectList();
        for (idx = i = 0, ref = ol.getCount(); 0 <= ref ? i < ref : i > ref; idx = 0 <= ref ? ++i : --i) {
          obj = ol.getObject(idx);
          if (obj instanceof TemplateObject) {
            continue;
          }
          if (obj.version() > 1) {
            continue;
          }
          opts.collection.insertObjects([obj.getCollectionObject()]);
        }
        return onDone != null ? onDone.call(_this) : void 0;
      };
    })(this);
    return this;
  };

  SearchPopover.prototype.getButtonToolbar = function() {
    return this.__buttonToolbar;
  };

  SearchPopover.prototype.getSearchObjecttypes = function() {
    return [this.link_objecttype];
  };

  SearchPopover.prototype.getObjecttype = function() {
    return this.link_objecttype;
  };

  SearchPopover.prototype.getDefaultSortFilter = function() {
    return SearchList.prototype.getDefaultSortFilter.call(this);
  };

  SearchPopover.prototype.getDefaultSortKey = function() {
    return SearchList.prototype.getDefaultSortKey.call(this);
  };

  SearchPopover.prototype.destroy = function() {
    SearchPopover.__super__.destroy.call(this);
    this.popover.destroy();
    this.popover = null;
    return this.__init = false;
  };

  SearchPopover.prototype.openPopover = function() {
    this.init().done((function(_this) {
      return function() {
        var ret;
        _this.popover.show();
        ret = _this.execute();
        return ret.done(function() {
          return _this.__searchInput.focusQueryContainer();
        });
      };
    })(this));
  };

  SearchPopover.prototype.closePopover = function() {
    return this.popover.hide();
  };

  SearchPopover.prototype.hasUserInput = function() {
    return !this.__searchInput.isEmpty();
  };

  SearchPopover.prototype.getShareUrl = function() {};

  return SearchPopover;

})(SearchMain);
// Generated by CoffeeScript 1.10.0
var SearchMini,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SearchMini = (function(superClass) {
  extend(SearchMini, superClass);

  function SearchMini() {
    return SearchMini.__super__.constructor.apply(this, arguments);
  }

  SearchMini.prototype.initOpts = function() {
    SearchMini.__super__.initOpts.call(this);
    this.addOpts({
      element: {
        mandatory: true,
        check: function(v) {
          return isElement(v);
        }
      },
      popover_element: {
        mandatory: true,
        check: function(v) {
          return isElement(v) || isElement(v != null ? v.DOM : void 0);
        }
      },
      link_mask: {
        mandatory: true,
        check: Mask
      },
      link_mask_inline: {
        mandatory: true,
        check: ["standard", "short", "text"]
      },
      collection: {
        mandatory: true,
        check: Collection
      },
      onUpdate: {
        check: Function
      },
      searchManagers: {
        "default": [],
        check: Array
      },
      placeholder_text: {
        check: String
      },
      search_managers_for_popover: {
        "default": true,
        check: Boolean
      },
      isSelectable: {
        check: Function
      }
    });
    return this.mergeOpts({
      request_format: {
        "default": "standard"
      }
    });
  };

  SearchMini.prototype.readOpts = function() {
    var btn, i, len, ref, sm;
    SearchMini.__super__.readOpts.call(this);
    this.collection = this._collection;
    this.mini_container = new HorizontalLayout({
      center: {},
      right: {}
    });
    this._element.empty().append(this.mini_container.DOM);
    this.link_objecttype = new Objecttype(this._link_mask);
    btn = new LocaButton({
      icon: "ellipsis_v",
      loca_key: "search.mini.button.open_search",
      onClick: (function(_this) {
        return function() {
          _this.collection.setCheckGeneratedRights(true);
          return _this.openSearch();
        };
      })(this)
    });
    this.mini_container.append(btn, "right");
    this.queryElementInput = new QueryElementInputSearch({
      manager: this,
      placeholder_text: this.opts.placeholder_text
    });
    this.mini_container.append(this.queryElementInput.render(), "center");
    this.autocompletion = new AutocompletionPopup({
      element: this.queryElementInput.getElement(),
      onHide: (function(_this) {
        return function() {
          return _this.queryElementInput.triggerFocus();
        };
      })(this)
    });
    this.__ignore_events = false;
    this.collection.on({
      type: ["insert", "remove"],
      call: (function(_this) {
        return function(ev, info) {
          if (_this.__ignore_events) {
            return;
          }
          return _this.update();
        };
      })(this)
    });
    this.autocompletion.addContainer("all");
    this.autocompletion.addContainer("status");
    this.autocompletion.onHide = (function(_this) {
      return function() {
        return _this.collection.removeObjects(_this.collection.getObjects());
      };
    })(this);
    Events.listen({
      type: "click",
      selector: "[global-object-id]",
      node: this.autocompletion,
      call: (function(_this) {
        return function(ev) {
          var co, obj;
          ev.stopPropagation();
          obj = DOM.data(ev.getCurrentTarget(), "object");
          if (_this._isSelectable && !_this._isSelectable(obj)) {
            return;
          }
          co = new CollectionObject(obj);
          _this.collection.insertObjects([co]).done(function() {
            return _this.autocompletion.hide();
          });
        };
      })(this)
    });
    this.addSearchManager(new SearchMiniResultManager({
      autocompletion: this.autocompletion,
      link_mask_inline: this._link_mask_inline
    }));
    ref = this._searchManagers;
    for (i = 0, len = ref.length; i < len; i++) {
      sm = ref[i];
      this.addSearchManager(sm);
    }
    return this.init().done((function(_this) {
      return function() {
        return _this.update({
          init: true
        });
      };
    })(this));
  };

  SearchMini.prototype.insertOnTheFly = function() {
    var co, ro;
    ro = this.getResultObjectFromCurrentValue();
    ro.getData()._mapped_metadata_created = true;
    co = ro.getCollectionObject();
    this.autocompletion.hide();
    this.queryElementInput.triggerBlur();
    return this.collection.insertObjects([co]);
  };

  SearchMini.prototype.update = function(opts) {
    if (opts == null) {
      opts = {};
    }
    CUI.mergeMap(opts, {
      init: false,
      callback: true
    });
    return this.collection.getBadgeText().always((function(_this) {
      return function(value) {
        _this.queryElementInput.value(value);
        opts.value = value;
        if (opts.callback) {
          return typeof _this._onUpdate === "function" ? _this._onUpdate(opts) : void 0;
        }
      };
    })(this)).done((function(_this) {
      return function(value) {
        if (opts.init) {
          return;
        }
        return _this.queryElementInput.selectAll();
      };
    })(this));
  };

  SearchMini.prototype.hasSearchBasics = function() {
    return false;
  };

  SearchMini.prototype.destroy = function() {
    var ref;
    if ((ref = this.popover_search) != null) {
      ref.destroy();
    }
    this.popover_search = null;
    return SearchMini.__super__.destroy.call(this);
  };

  SearchMini.prototype.__initSearchPopover = function() {
    if (this.popover_search) {
      return;
    }
    this.__col_copy = this.collection.copy();
    this.popover_search = new SearchPopover({
      link_mask: this._link_mask,
      searchManagers: this._search_managers_for_popover ? this._searchManagers : null,
      popover_element: this._popover_element,
      isSelectable: this._isSelectable,
      collection: this.__col_copy,
      request_format: this._request_format,
      onAddToRequest: this._onAddToRequest,
      onShow: (function(_this) {
        return function() {
          return _this.__ignore_events = true;
        };
      })(this),
      onHide: (function(_this) {
        return function() {
          _this.__ignore_events = false;
          _this.popover_search.destroy();
          return _this.popover_search = null;
        };
      })(this),
      onDone: (function(_this) {
        return function() {
          return _this.onDonePopoverSearch();
        };
      })(this)
    });
  };

  SearchMini.prototype.onDonePopoverSearch = function() {
    this.__ignore_events = true;
    return this.collection.removeObjects(null, {
      skip_update: true
    }).done((function(_this) {
      return function() {
        return _this.collection.insertObjects(_this.__col_copy.getObjects()).done(function() {
          return _this.__col_copy = _this.collection.copy();
        }).always(function() {
          _this.update();
          return _this.__ignore_events = false;
        });
      };
    })(this)).fail((function(_this) {
      return function() {
        return _this.__ignore_events = false;
      };
    })(this));
  };

  SearchMini.prototype.openSearch = function(element) {
    this.__initSearchPopover();
    return this.popover_search.openPopover(element);
  };

  SearchMini.prototype.getResultObjectFromCurrentValue = function() {
    var data, f, ot_name, ref, ro, textFields, value;
    ro = new ResultObject();
    ot_name = this._link_mask.table.name();
    data = {
      _mask: this._link_mask.name(),
      _format: 'long'
    };
    ro.initData(ot_name, data);
    value = this.queryElementInput.value();
    if (!isEmpty(value)) {
      textFields = this._link_mask.getStandardTextFields([1]);
      f = (ref = textFields[0]) != null ? ref.field : void 0;
      if (f instanceof LocaTextColumn) {
        data[ot_name][f.name()] = {};
        data[ot_name][f.name()][ez5.loca.getDatabaseLanguages()[0]] = value;
      } else if (f) {
        data[ot_name][f.name()] = value;
      }
    }
    CUI.debug(dump(ro.getData()));
    return ro;
  };

  SearchMini.prototype.openEditor = function() {
    this.__initSearchPopover();
    this.autocompletion.hide();
    this.queryElementInput.triggerBlur();
    return this.popover_search.openEditor({
      popover_element: this.mini_container,
      result_object: this.getResultObjectFromCurrentValue(),
      onDone: (function(_this) {
        return function() {
          return _this.onDonePopoverSearch();
        };
      })(this)
    });
  };

  SearchMini.prototype.inputEmptied = function() {
    return this.collection.removeObjects();
  };

  SearchMini.prototype.addToRequest = function(request) {
    var sf;
    SearchMini.__super__.addToRequest.call(this, request);
    sf = this.queryElementInput.getSearchFilter();
    if (sf) {
      request.search = [sf];
    }
  };

  SearchMini.prototype.getSearchObjecttypes = function() {
    return [this.link_objecttype];
  };

  SearchMini.prototype.getCollection = function() {
    return null;
  };

  return SearchMini;

})(Search);
// Generated by CoffeeScript 1.10.0
var SearchMiniResultManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SearchMiniResultManager = (function(superClass) {
  extend(SearchMiniResultManager, superClass);

  function SearchMiniResultManager() {
    return SearchMiniResultManager.__super__.constructor.apply(this, arguments);
  }

  SearchMiniResultManager.prototype.initOpts = function() {
    SearchMiniResultManager.__super__.initOpts.call(this);
    return this.addOpts({
      autocompletion: {
        mandatory: true,
        check: AutocompletionPopup
      },
      link_mask_inline: {
        mandatory: true,
        check: ["standard", "short", "text"]
      }
    });
  };

  SearchMiniResultManager.prototype.readOpts = function() {
    SearchMiniResultManager.__super__.readOpts.call(this);
    this.autocompletion = this._autocompletion;
    return this.__hasPlusButton = null;
  };

  SearchMiniResultManager.prototype.getName = function() {
    return "searchmini";
  };

  SearchMiniResultManager.prototype.addToRequest = function(request) {
    request.limit = 100;
    request.highlight = {};
    this.autocompletion.getContainer("status").replace(new LocaLabel({
      loca_key: "autocompletion.loading"
    }));
    return this.autocompletion.show();
  };

  SearchMiniResultManager.prototype.showResult = function(request, data) {
    var append_onthefly, i, item, len, o, plusButton, ref, ro;
    this.autocompletion.emptyContainer("all");
    if (data.count === 0) {
      append_onthefly = (function(_this) {
        return function() {
          var item, table;
          table = _this.getSearch().getSearchObjecttypes()[0].table;
          if (table.isHierarchy() || table.poolLink()) {
            return;
          }
          item = _this.autocompletion.appendItem("all", new Label({
            "class": "ez5-search-mini-result-manager-onthefly-create",
            text: $$("search.mini.result.manager.onthefly_object", {
              value: _this.getSearch().queryElementInput.value()
            })
          }));
          return Events.listen({
            type: "click",
            node: item,
            call: function(ev) {
              ev.stopPropagation();
              _this.getSearch().insertOnTheFly();
            }
          });
        };
      })(this);
      this.autocompletion.getContainer("status").replace([
        new LocaLabel({
          loca_key: "autocompletion.nothing_found"
        }), plusButton = new LocaButton({
          loca_key: "search.mini.result.manager.new_object",
          size: "mini",
          hidden: true,
          onClick: (function(_this) {
            return function() {
              return _this.getSearch().openEditor();
            };
          })(this)
        })
      ]);
      if (this.__hasPlusButton === null) {
        this.getSearch().canCreateSearchObjecttypes().done((function(_this) {
          return function() {
            _this.__hasPlusButton = true;
            plusButton.show();
            append_onthefly();
            return _this.autocompletion.autoSize();
          };
        })(this)).fail((function(_this) {
          return function() {
            return _this.__hasPlusButton = false;
          };
        })(this));
      } else if (this.__hasPlusButton) {
        plusButton.show();
        append_onthefly();
      }
    } else {
      if (data.limit < data.count) {
        this.autocompletion.getContainer("status").replace(new LocaLabel({
          loca_key: "autocompletion.found_objects_limited",
          loca_key_attrs: {
            limit: data.limit,
            count: data.count
          }
        }));
      } else {
        this.autocompletion.getContainer("status").replace(new LocaLabel({
          loca_key: "autocompletion.found_objects",
          loca_key_attrs: {
            count: data.count
          }
        }));
      }
      ref = data.objects;
      for (i = 0, len = ref.length; i < len; i++) {
        o = ref[i];
        ro = new ResultObject().setData(o);
        if (this._link_mask_inline === "short") {
          item = this.autocompletion.appendItem("all", ro.renderCard2(null, null, true));
        } else {
          item = this.autocompletion.appendItem("all", ro.renderCard1(null, null, true));
        }
        item.DOM.attr("global-object-id", o._global_object_id);
        DOM.data(item.DOM[0], "object", o);
      }
    }
    this.autocompletion.autoSize();
    return this;
  };

  return SearchMiniResultManager;

})(SearchManager);
// Generated by CoffeeScript 1.10.0
var FacetManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

FacetManager = (function(superClass) {
  extend(FacetManager, superClass);

  function FacetManager() {
    return FacetManager.__super__.constructor.apply(this, arguments);
  }

  FacetManager.prototype.init = function() {
    var has_pool_ot, i, len, ot, ref;
    this.facet_container = this.getSearch().getFacetsContainer();
    this.initPane();
    has_pool_ot = false;
    ref = this.getSearch().getSearchObjecttypes();
    for (i = 0, len = ref.length; i < len; i++) {
      ot = ref[i];
      if (ot.poolLink()) {
        has_pool_ot = true;
      }
    }
    return this.facets = this.getAvailableFacets();
  };

  FacetManager.prototype.isActiveFirst = function() {
    return true;
  };

  FacetManager.prototype.getRootPoolId = function() {
    var ref;
    return (ref = ez5.pools.getRootPool()) != null ? ref.getId() : void 0;
  };

  FacetManager.prototype.getAvailableFacets = function() {
    var addField, append_append_facets, append_facets, eas_fields, f, facets, has_pool_ot, i, j, k, l, len, len1, len2, len3, len4, len5, len6, link_objecttype_names, m, mask, n, ot, otm, p, q, ref, ref1, ref2, ref3, ref4, ref5, ref6, searchObjecttypeIds;
    facets = [];
    if (this.getSearch().getSearchObjecttypes(true).length > 1) {
      facets.push(new ObjecttypeFacet({
        facetManager: this
      }));
    }
    searchObjecttypeIds = [];
    otm = new ObjecttypeManager();
    has_pool_ot = false;
    ref = this.getSearch().getSearchObjecttypes();
    for (i = 0, len = ref.length; i < len; i++) {
      ot = ref[i];
      searchObjecttypeIds.push(ot.id());
      if (ot.poolLink()) {
        has_pool_ot = true;
      }
      ref1 = ot.masks;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        m = ref1[j];
        otm.addMask(m);
      }
    }
    if (has_pool_ot && this.getRootPoolId()) {
      facets.push(new PoolFacet({
        facetManager: this
      }));
    }
    otm.initCommonFields("facet", true, function(f) {
      return f.supportsFacet();
    });
    eas_fields = otm.getEASFields("facet", function(o) {
      var ref2;
      return ref2 = o.id(), indexOf.call(searchObjecttypeIds, ref2) >= 0;
    });
    if (eas_fields.length) {
      facets.push(new EASFacet({
        facetManager: this
      }));
    }
    this.link_otm = new ObjecttypeManager();
    this.link_otm.addLinkedObjectFields(this.getSearch().getLinkedObjectFields("facet", true));
    link_objecttype_names = {};
    append_append_facets = (function(_this) {
      return function() {
        append_facets.sort(function(a, b) {
          return a.nameLocalized().localeCompare(b.nameLocalized());
        });
        return facets.push.apply(facets, append_facets);
      };
    })(this);
    append_facets = [];
    ref2 = this.link_otm.objecttypes;
    for (k = 0, len2 = ref2.length; k < len2; k++) {
      ot = ref2[k];
      if (ot._linked_object_fields.length > 1) {
        link_objecttype_names[ot.name()] = true;
        append_facets.push(new LinkedObjecttypeFacet({
          facetManager: this,
          objecttype: ot
        }));
      }
    }
    append_append_facets();
    addField = (function(_this) {
      return function(f) {
        return append_facets.push(f.getFacet({
          facetManager: _this
        }));
      };
    })(this);
    ref3 = otm.objecttypes;
    for (l = 0, len3 = ref3.length; l < len3; l++) {
      ot = ref3[l];
      append_facets = [];
      ref4 = ot.commonFields;
      for (n = 0, len4 = ref4.length; n < len4; n++) {
        f = ref4[n];
        addField(f);
      }
      ref5 = ot.masks;
      for (p = 0, len5 = ref5.length; p < len5; p++) {
        mask = ref5[p];
        ref6 = mask.uniqueFields;
        for (q = 0, len6 = ref6.length; q < len6; q++) {
          f = ref6[q];
          addField(f);
        }
      }
      append_append_facets();
    }
    return facets;
  };

  FacetManager.prototype.executeSearch = function() {
    this.facet_container.addClass("ez5-loading");
    return this.getSearch().execute();
  };

  FacetManager.prototype.getFacets = function() {
    return this.facets;
  };

  FacetManager.prototype.hasUserInput = function() {
    var facet, i, len, ref;
    if (!this.getSearch().hasFacets()) {
      return false;
    }
    ref = this.getFacets();
    for (i = 0, len = ref.length; i < len; i++) {
      facet = ref[i];
      if (facet.hasFilter()) {
        return true;
      }
    }
    return false;
  };

  FacetManager.prototype.addToRequest = function(request) {
    var _f, current_facets, f, facet_by_key, i, j, k, len, len1, len2, ref, ref1;
    if (!this.getSearch().hasFacets()) {
      return;
    }
    current_facets = this.facets;
    facet_by_key = {};
    for (i = 0, len = current_facets.length; i < len; i++) {
      f = current_facets[i];
      facet_by_key[f.getFacetKey()] = f;
    }
    this.facets = [];
    ref = this.getAvailableFacets();
    for (j = 0, len1 = ref.length; j < len1; j++) {
      f = ref[j];
      if (_f = facet_by_key[f.getFacetKey()]) {
        f.setFilter(_f.getFilter());
      }
      this.facets.push(f);
    }
    if (!request.aggregations) {
      request.aggregations = {};
    }
    ref1 = this.facets;
    for (k = 0, len2 = ref1.length; k < len2; k++) {
      f = ref1[k];
      f.addToRequest(request);
    }
    if (request.execute && !request.page_request) {
      this.__waitBlock = new WaitBlock({
        element: this.facet_container
      }).show();
    }
    return this;
  };

  FacetManager.prototype.resetFacets = function() {
    var f, i, len, ref;
    if (this.facets) {
      ref = this.facets;
      for (i = 0, len = ref.length; i < len; i++) {
        f = ref[i];
        f.setFilter();
      }
    }
    return this;
  };

  FacetManager.prototype.getPane = function() {
    return new SimplePane({
      content: new EmptyLabel({
        centered: true,
        text: $$("facet.manager.init_text")
      }),
      footer_right: $div()
    });
  };

  FacetManager.prototype.initPane = function() {
    this.facet_container.empty();
    this.__pane = this.getPane();
    return this.facet_container.append(this.__pane.DOM);
  };

  FacetManager.prototype.showResult = function(request, data) {
    var f, fb, get_grouping, i, idx, itemsActive, j, last_grouping_text, len, len1, ref, ref1, ref2, shc, vl;
    this.facet_container.removeClass("ez5-loading");
    if (request.page_request) {
      return;
    }
    if ((ref = this.__waitBlock) != null) {
      ref.destroy();
    }
    delete this.__waitBlock;
    this.initPane();
    if (!this.getSearch().hasFacets()) {
      return;
    }
    if (data.count === 0) {
      this.__pane.replace(new EmptyLabel({
        centered: true,
        text: $$("facet.manager.no_further_filters")
      }), "center");
      return;
    }
    last_grouping_text = null;
    get_grouping = (function(_this) {
      return function(facet) {
        var grouping_text, ref1;
        grouping_text = facet != null ? (ref1 = facet.getGroupingText()) != null ? ref1.trim() : void 0 : void 0;
        if (!isEmpty(grouping_text) && grouping_text !== last_grouping_text) {
          last_grouping_text = grouping_text;
          return new StickyHeader({
            "class": "ez5-facet-manager-sticky-header",
            control: shc,
            level: 0,
            content: new Label({
              text: grouping_text
            })
          });
        } else {
          return null;
        }
      };
    })(this);
    itemsActive = [];
    this.__pane.empty("center");
    shc = new StickyHeaderControl({
      element: this.__pane.center()
    });
    ref1 = this.facets;
    for (idx = i = 0, len = ref1.length; i < len; idx = ++i) {
      f = ref1[idx];
      f.data(data.aggregations);
      if (this.isActiveFirst()) {
        if (!f.hasFilter()) {
          continue;
        }
        if (!vl) {
          vl = new VerticalList({
            "class": "ez5-facet-manager-active-container",
            maximize_horizontal: true,
            maximize_vertical: false
          });
          this.__pane.append(vl, "center");
        }
        vl.append(get_grouping(f), "center");
        vl.append(f.getFacetActiveBlock(), "center");
      } else {
        if (f.hasFilter()) {
          fb = f.getFacetActiveBlock();
        } else {
          fb = f.getFacetBlock();
        }
        if (!fb) {
          continue;
        }
        this.__pane.append(get_grouping(f), "center");
        this.__pane.append(fb, "center");
      }
    }
    if (this.isActiveFirst()) {
      ref2 = this.facets;
      for (idx = j = 0, len1 = ref2.length; j < len1; idx = ++j) {
        f = ref2[idx];
        fb = f.getFacetBlock();
        if (!fb) {
          continue;
        }
        this.__pane.append(get_grouping(f), "center");
        this.__pane.append(fb, "center");
      }
    }
    return this;
  };

  return FacetManager;

})(SearchManager);
// Generated by CoffeeScript 1.10.0
var FacetManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

FacetManager = (function(superClass) {
  extend(FacetManager, superClass);

  function FacetManager() {
    return FacetManager.__super__.constructor.apply(this, arguments);
  }

  FacetManager.prototype.init = function() {
    var has_pool_ot, i, len, ot, ref;
    this.facet_container = this.getSearch().getFacetsContainer();
    this.initPane();
    has_pool_ot = false;
    ref = this.getSearch().getSearchObjecttypes();
    for (i = 0, len = ref.length; i < len; i++) {
      ot = ref[i];
      if (ot.poolLink()) {
        has_pool_ot = true;
      }
    }
    return this.facets = this.getAvailableFacets();
  };

  FacetManager.prototype.isActiveFirst = function() {
    return true;
  };

  FacetManager.prototype.getRootPoolId = function() {
    var ref;
    return (ref = ez5.pools.getRootPool()) != null ? ref.getId() : void 0;
  };

  FacetManager.prototype.getAvailableFacets = function() {
    var addField, append_append_facets, append_facets, eas_fields, f, facets, has_pool_ot, i, j, k, l, len, len1, len2, len3, len4, len5, len6, link_objecttype_names, m, mask, n, ot, otm, p, q, ref, ref1, ref2, ref3, ref4, ref5, ref6, searchObjecttypeIds;
    facets = [];
    if (this.getSearch().getSearchObjecttypes(true).length > 1) {
      facets.push(new ObjecttypeFacet({
        facetManager: this
      }));
    }
    searchObjecttypeIds = [];
    otm = new ObjecttypeManager();
    has_pool_ot = false;
    ref = this.getSearch().getSearchObjecttypes();
    for (i = 0, len = ref.length; i < len; i++) {
      ot = ref[i];
      searchObjecttypeIds.push(ot.id());
      if (ot.poolLink()) {
        has_pool_ot = true;
      }
      ref1 = ot.masks;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        m = ref1[j];
        otm.addMask(m);
      }
    }
    if (has_pool_ot && this.getRootPoolId()) {
      facets.push(new PoolFacet({
        facetManager: this
      }));
    }
    otm.initCommonFields("facet", true, function(f) {
      return f.supportsFacet();
    });
    eas_fields = otm.getEASFields("facet", function(o) {
      var ref2;
      return ref2 = o.id(), indexOf.call(searchObjecttypeIds, ref2) >= 0;
    });
    if (eas_fields.length) {
      facets.push(new EASFacet({
        facetManager: this
      }));
    }
    this.link_otm = new ObjecttypeManager();
    this.link_otm.addLinkedObjectFields(this.getSearch().getLinkedObjectFields("facet", true));
    link_objecttype_names = {};
    append_append_facets = (function(_this) {
      return function() {
        append_facets.sort(function(a, b) {
          return a.nameLocalized().localeCompare(b.nameLocalized());
        });
        return facets.push.apply(facets, append_facets);
      };
    })(this);
    append_facets = [];
    ref2 = this.link_otm.objecttypes;
    for (k = 0, len2 = ref2.length; k < len2; k++) {
      ot = ref2[k];
      if (ot._linked_object_fields.length > 1) {
        link_objecttype_names[ot.name()] = true;
        append_facets.push(new LinkedObjecttypeFacet({
          facetManager: this,
          objecttype: ot
        }));
      }
    }
    append_append_facets();
    addField = (function(_this) {
      return function(f) {
        return append_facets.push(f.getFacet({
          facetManager: _this
        }));
      };
    })(this);
    ref3 = otm.objecttypes;
    for (l = 0, len3 = ref3.length; l < len3; l++) {
      ot = ref3[l];
      append_facets = [];
      ref4 = ot.commonFields;
      for (n = 0, len4 = ref4.length; n < len4; n++) {
        f = ref4[n];
        addField(f);
      }
      ref5 = ot.masks;
      for (p = 0, len5 = ref5.length; p < len5; p++) {
        mask = ref5[p];
        ref6 = mask.uniqueFields;
        for (q = 0, len6 = ref6.length; q < len6; q++) {
          f = ref6[q];
          addField(f);
        }
      }
      append_append_facets();
    }
    return facets;
  };

  FacetManager.prototype.executeSearch = function() {
    this.facet_container.addClass("ez5-loading");
    return this.getSearch().execute();
  };

  FacetManager.prototype.getFacets = function() {
    return this.facets;
  };

  FacetManager.prototype.hasUserInput = function() {
    var facet, i, len, ref;
    if (!this.getSearch().hasFacets()) {
      return false;
    }
    ref = this.getFacets();
    for (i = 0, len = ref.length; i < len; i++) {
      facet = ref[i];
      if (facet.hasFilter()) {
        return true;
      }
    }
    return false;
  };

  FacetManager.prototype.addToRequest = function(request) {
    var _f, current_facets, f, facet_by_key, i, j, k, len, len1, len2, ref, ref1;
    if (!this.getSearch().hasFacets()) {
      return;
    }
    current_facets = this.facets;
    facet_by_key = {};
    for (i = 0, len = current_facets.length; i < len; i++) {
      f = current_facets[i];
      facet_by_key[f.getFacetKey()] = f;
    }
    this.facets = [];
    ref = this.getAvailableFacets();
    for (j = 0, len1 = ref.length; j < len1; j++) {
      f = ref[j];
      if (_f = facet_by_key[f.getFacetKey()]) {
        f.setFilter(_f.getFilter());
      }
      this.facets.push(f);
    }
    if (!request.aggregations) {
      request.aggregations = {};
    }
    ref1 = this.facets;
    for (k = 0, len2 = ref1.length; k < len2; k++) {
      f = ref1[k];
      f.addToRequest(request);
    }
    if (request.execute && !request.page_request) {
      this.__waitBlock = new WaitBlock({
        element: this.facet_container
      }).show();
    }
    return this;
  };

  FacetManager.prototype.resetFacets = function() {
    var f, i, len, ref;
    if (this.facets) {
      ref = this.facets;
      for (i = 0, len = ref.length; i < len; i++) {
        f = ref[i];
        f.setFilter();
      }
    }
    return this;
  };

  FacetManager.prototype.getPane = function() {
    return new SimplePane({
      content: new EmptyLabel({
        centered: true,
        text: $$("facet.manager.init_text")
      }),
      footer_right: $div()
    });
  };

  FacetManager.prototype.initPane = function() {
    this.facet_container.empty();
    this.__pane = this.getPane();
    return this.facet_container.append(this.__pane.DOM);
  };

  FacetManager.prototype.showResult = function(request, data) {
    var f, fb, get_grouping, i, idx, itemsActive, j, last_grouping_text, len, len1, ref, ref1, ref2, shc, vl;
    this.facet_container.removeClass("ez5-loading");
    if (request.page_request) {
      return;
    }
    if ((ref = this.__waitBlock) != null) {
      ref.destroy();
    }
    delete this.__waitBlock;
    this.initPane();
    if (!this.getSearch().hasFacets()) {
      return;
    }
    if (data.count === 0) {
      this.__pane.replace(new EmptyLabel({
        centered: true,
        text: $$("facet.manager.no_further_filters")
      }), "center");
      return;
    }
    last_grouping_text = null;
    get_grouping = (function(_this) {
      return function(facet) {
        var grouping_text, ref1;
        grouping_text = facet != null ? (ref1 = facet.getGroupingText()) != null ? ref1.trim() : void 0 : void 0;
        if (!isEmpty(grouping_text) && grouping_text !== last_grouping_text) {
          last_grouping_text = grouping_text;
          return new StickyHeader({
            "class": "ez5-facet-manager-sticky-header",
            control: shc,
            level: 0,
            content: new Label({
              text: grouping_text
            })
          });
        } else {
          return null;
        }
      };
    })(this);
    itemsActive = [];
    this.__pane.empty("center");
    shc = new StickyHeaderControl({
      element: this.__pane.center()
    });
    ref1 = this.facets;
    for (idx = i = 0, len = ref1.length; i < len; idx = ++i) {
      f = ref1[idx];
      f.data(data.aggregations);
      if (this.isActiveFirst()) {
        if (!f.hasFilter()) {
          continue;
        }
        if (!vl) {
          vl = new VerticalList({
            "class": "ez5-facet-manager-active-container",
            maximize_horizontal: true,
            maximize_vertical: false
          });
          this.__pane.append(vl, "center");
        }
        vl.append(get_grouping(f), "center");
        vl.append(f.getFacetActiveBlock(), "center");
      } else {
        if (f.hasFilter()) {
          fb = f.getFacetActiveBlock();
        } else {
          fb = f.getFacetBlock();
        }
        if (!fb) {
          continue;
        }
        this.__pane.append(get_grouping(f), "center");
        this.__pane.append(fb, "center");
      }
    }
    if (this.isActiveFirst()) {
      ref2 = this.facets;
      for (idx = j = 0, len1 = ref2.length; j < len1; idx = ++j) {
        f = ref2[idx];
        fb = f.getFacetBlock();
        if (!fb) {
          continue;
        }
        this.__pane.append(get_grouping(f), "center");
        this.__pane.append(fb, "center");
      }
    }
    return this;
  };

  return FacetManager;

})(SearchManager);
// Generated by CoffeeScript 1.10.0
var Facet,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Facet = (function(superClass) {
  extend(Facet, superClass);

  function Facet() {
    return Facet.__super__.constructor.apply(this, arguments);
  }

  Facet.prototype.initOpts = function() {
    Facet.__super__.initOpts.call(this);
    this.addOpts({
      facetManager: {
        mandatory: true,
        check: FacetManager
      }
    });
    return this.setFilter();
  };

  Facet.prototype.getLimit = function() {
    return 10;
  };

  Facet.prototype.name = function() {
    return "facet-name-missing";
  };

  Facet.prototype.data = function(data) {
    if (isUndef(data)) {
      return this._data;
    }
    return this._data = data;
  };

  Facet.prototype.getFacets = function() {
    return this._facetManager.getFacets();
  };

  Facet.prototype.getSearch = function() {
    return this._facetManager.getSearch();
  };

  Facet.prototype.getObjects = function(key, data) {
    var ref;
    if (key == null) {
      key = this.name();
    }
    if (data == null) {
      data = this.data();
    }
    return (ref = data[key]) != null ? ref.linked_objects : void 0;
  };

  Facet.prototype.getFacetKey = function(path) {
    var key;
    key = this.name();
    if ((path != null ? path.length : void 0) > 0) {
      key += ":" + path.join(".");
    }
    return key;
  };

  Facet.prototype.getObjectPath = function(obj) {
    var i, len, ref, results, s;
    if (this.isHierarchy()) {
      ref = obj._path;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        s = ref[i];
        results.push(s._id);
      }
      return results;
    } else {
      return [obj._id];
    }
  };

  Facet.prototype.getObjectPathString = function(obj) {
    return this.getObjectPath(obj).join(".") + ".";
  };

  Facet.prototype.getFacetBlock = function() {
    var bl, btn, cbs, ref, ref1;
    if (((ref = this.getObjects()) != null ? ref.length : void 0) > 0 && !this.hasFilter()) {
      bl = new CUI.Block({
        header: this.blockHeader(),
        "class": "ez5-facet-block",
        appearance: "subtitle"
      });
      cbs = this.getCheckboxesFromItems(this.getItemsForObjects(this.getObjects()));
      if ((ref1 = this.data()[this.name()]) != null ? ref1.has_more : void 0) {
        btn = new LocaButton({
          loca_key: "facet.button.more",
          onClick: (function(_this) {
            return function() {
              return _this.openPopover(btn);
            };
          })(this)
        });
        cbs.push(btn);
      }
      if (!CUI.__ng__) {
        bl.setContent(new VerticalList({
          maximize_horizontal: true,
          maximize_vertical: false,
          content: cbs
        }).DOM);
      } else {
        bl.setContent(cbs);
      }
      return bl;
    } else {

    }
  };

  Facet.prototype.nameLocalized = function() {
    return getObjectClass(this) + ".nameLocalized not implemented.";
  };

  Facet.prototype.blockHeader = function() {
    return new Label({
      text: this.nameLocalized()
    });
  };

  Facet.prototype.getGroupingText = function() {
    console.error(getObjectClass(this) + ".getGroupingText needs to be implemented.");
    return null;
  };

  Facet.prototype.renderItemContent = function(object) {
    var content;
    if (CUI.__ng__) {
      content = CUI.DOM.element("DIV", {
        "class": " ez5-facet-content"
      });
      content.appendChild($text(this.renderObjectText(object)));
      content.appendChild($text(object.count));
    } else {
      content = $text(this.renderObjectText(object) + " " + "(" + object.count + ")");
    }
    return content;
  };

  Facet.prototype.getItem = function(object) {
    return {
      content: this.renderItemContent(object),
      "class": "ez5-facet-item",
      active: false,
      onClick: (function(_this) {
        return function() {
          _this.addFilter(object);
          _this.closePopover();
          return _this._facetManager.executeSearch();
        };
      })(this)
    };
  };

  Facet.prototype.getFacetActiveBlock = function() {
    var cbs, items;
    items = [];
    this.getFilterItemsInner(items, []);
    cbs = this.getCheckboxesFromItems(items);
    return new CUI.Block({
      header: this.blockHeader(),
      content: new VerticalList({
        maximize_horizontal: true,
        maximize_vertical: false,
        content: cbs
      }),
      "class": "ez5-facet-block ez5-facet-active-block",
      appearance: "subtitle"
    });
  };

  Facet.prototype.isActiveFirst = function() {
    return this._facetManager.isActiveFirst();
  };

  Facet.prototype.getFilterItemsInner = function(items, path) {
    var btn, fkey, fn, i, len, obj, objects, ref;
    fkey = this.getFacetKey(path);
    objects = this.getObjects(fkey);
    if (!objects) {
      return;
    }
    fn = (function(_this) {
      return function(obj) {
        var _path;
        items.push({
          active: true,
          content: _this.renderItemContent(obj),
          "class": "ez5-facet-active ez5-facet-item ez5-facet-active-depth-" + _this.__getPathLength(path),
          onClick: function() {
            _this.removeFilter(obj);
            return _this._facetManager.executeSearch();
          }
        });
        if (_this.isHierarchy()) {
          _path = _this.getObjectPath(obj);
          if (_path.join(".") === path.join(".")) {
            return CUI.error("Facet.getFilterItemsInner: Recursion Detected, stopping.", obj);
          } else {
            return _this.getFilterItemsInner(items, _this.getObjectPath(obj));
          }
        }
      };
    })(this);
    for (i = 0, len = objects.length; i < len; i++) {
      obj = objects[i];
      if (!this.isFiltered(obj)) {
        if (!this.isActiveFirst()) {
          items.push(this.getItemForObject(obj, path));
        }
        continue;
      }
      fn(obj);
    }
    if (this.isActiveFirst()) {
      items.push.apply(items, this.getItemsForObjects(objects, path));
    }
    if ((ref = this.data()[fkey]) != null ? ref.has_more : void 0) {
      btn = new LocaButton({
        loca_key: "facet.button.more",
        onClick: (function(_this) {
          return function() {
            return _this.openPopover(btn, path);
          };
        })(this)
      });
      items.push(btn);
    }
    return items;
  };

  Facet.prototype.getPathLengthOffset = function() {
    return 0;
  };

  Facet.prototype.__getPathLength = function(path) {
    return Math.max(0, path.length - this.getPathLengthOffset());
  };

  Facet.prototype.getItemForObject = function(obj, path) {
    var item;
    item = this.getItem(obj);
    if (path) {
      item["class"] += " ez5-facet-active-item-depth-" + this.__getPathLength(path);
    }
    return item;
  };

  Facet.prototype.getItemsForObjects = function(objects, path) {
    var i, items, len, obj;
    items = [];
    for (i = 0, len = objects.length; i < len; i++) {
      obj = objects[i];
      if (this.isFiltered(obj)) {
        continue;
      }
      items.push(this.getItemForObject(obj, path));
    }
    return items;
  };

  Facet.prototype.getCheckboxesFromItems = function(items) {
    var cbs, i, item, len;
    cbs = [];
    for (i = 0, len = items.length; i < len; i++) {
      item = items[i];
      if (CUI.isPlainObject(item)) {
        item.undo_and_changed_support = false;
        item.multiline = true;
        cbs.push((new Checkbox(item)).start());
      } else {
        cbs.push(item);
      }
    }
    return cbs;
  };

  Facet.prototype.addToRequest = function(request) {
    var facet, i, len, obj, ref;
    ref = this.getFilter();
    for (i = 0, len = ref.length; i < len; i++) {
      obj = ref[i];
      request.search.push(this.requestSearchFilter(obj));
    }
    if (request.page_request) {
      return this;
    }
    facet = this.requestFacetWithLimit();
    if (facet) {
      facet._cls = getObjectClass(this);
      request.aggregations[this.name()] = facet;
    }
    if (this.isHierarchy()) {
      this.addToRequestHierarchy(request);
    }
    return this;
  };

  Facet.prototype.requestFacetWithLimit = function(obj) {
    var rFacet;
    rFacet = this.requestFacet(obj);
    rFacet.limit = this.getLimit();
    rFacet.sort = "count";
    return rFacet;
  };

  Facet.prototype.addToRequestHierarchy = function(request) {
    var fac_req, fac_req2, i, idx, len, obj, path, ref, s;
    fac_req = request.aggregations[this.name()];
    fac_req.filter_parent = null;
    fac_req.limit = this.getLimit() + this.getFilter().length;
    ref = this.getFilter();
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      obj = ref[idx];
      path = (function() {
        var j, len1, ref1, results;
        ref1 = obj._path;
        results = [];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          s = ref1[j];
          results.push(s._id);
        }
        return results;
      })();
      fac_req2 = this.requestFacetWithLimit(obj);
      fac_req2.limit = fac_req2.limit + this.getFilter().length;
      fac_req2.filter_parent = path[path.length - 1];
      request.aggregations[((this.name()) + ":") + path.join(".")] = fac_req2;
    }
    return this;
  };

  Facet.prototype.requestFacet = function() {
    return assert(false, (getObjectClass(this)) + ".requestFacet", "Needs implementation");
  };

  Facet.prototype.renderObjectText = function(object, idx) {
    if (this.isHierarchy()) {
      if (isNull(idx)) {
        idx = object._path.length - 1;
      }
      return object._path[idx].text;
    } else {
      return object.text;
    }
  };

  Facet.prototype.renderObjectTitle = function(obj) {
    var s;
    if (this.isHierarchy()) {
      return ((function() {
        var i, len, ref, results;
        ref = obj._path;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          s = ref[i];
          results.push(s._id);
        }
        return results;
      })()).join(".");
    } else {
      return "" + obj._id;
    }
  };

  Facet.prototype.hasFilter = function() {
    return this.getFilter().length > 0;
  };

  Facet.prototype.clearFilter = function() {
    return this._filter.splice(0);
  };

  Facet.prototype.getFilter = function() {
    return this._filter;
  };

  Facet.prototype.setFilter = function(_filter) {
    this._filter = _filter != null ? _filter : [];
  };

  Facet.prototype.addFilter = function(obj) {
    return this._filter.push(obj);
  };

  Facet.prototype.isFiltered = function(obj) {
    var _obj, i, idx, len, ref;
    ref = this.getFilter();
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      _obj = ref[idx];
      if (this.isFilterOf(_obj, obj)) {
        return true;
      }
    }
    return false;
  };

  Facet.prototype.isFilterOf = function(obj1, obj2) {
    var path1, path2;
    path1 = this.getObjectPathString(obj1);
    path2 = this.getObjectPathString(obj2);
    return path2 === path1.substr(0, path2.length);
  };

  Facet.prototype.removeFilter = function(obj) {
    removeFromArray(null, this._filter, (function(_this) {
      return function(f) {
        return _this.isFilterOf(f, obj);
      };
    })(this));
  };

  Facet.prototype.getPathLocalized = function(path) {
    var f, i, len, path1, ref, s;
    ref = this.getFilter();
    for (i = 0, len = ref.length; i < len; i++) {
      f = ref[i];
      path1 = ((function() {
        var j, len1, ref1, results;
        ref1 = f._path;
        results = [];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          s = ref1[j];
          results.push(s._id);
        }
        return results;
      })()).join(".");
      if (path.join(".") === path1) {
        return ((function() {
          var j, len1, ref1, results;
          ref1 = f._path;
          results = [];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            s = ref1[j];
            results.push(s.rendered.html);
          }
          return results;
        })()).join(" > ");
      }
    }
  };

  Facet.prototype.closePopover = function() {
    if (this.popover) {
      this.popover.destroy();
      this.__popoverElement.enable();
      return this.popover = null;
    }
  };

  Facet.prototype.openPopover = function(__popoverElement, path) {
    var btn, do_search, facetPopoverHeaderLabel, footer, inp, input_data, pane, sort, tb;
    this.__popoverElement = __popoverElement;
    input_data = {
      filter: "",
      path: path,
      offset: 0,
      sort: "term"
    };
    do_search = (function(_this) {
      return function() {
        input_data.offset = 0;
        return _this.doPopoverSearch({
          result_div: pane.center(),
          navi_div: footer.center(),
          input_data: input_data
        });
      };
    })(this);
    this.__popoverElement.disable();
    footer = new PaneFooter();
    inp = new Input({
      placeholder: $$("facet.popover.placeholder"),
      name: "filter",
      "class": "ez5-quicksearch-input",
      data: input_data,
      onKeyup: (function(_this) {
        return function(df, ev) {
          if (ev.keyCode() === 13) {
            return do_search();
          }
        };
      })(this)
    }).start();
    sort = new Select({
      name: "sort",
      data: input_data,
      onDataChanged: (function(_this) {
        return function() {
          return do_search();
        };
      })(this),
      options: [
        {
          text: $$("facet.popover.sort_by.term"),
          value: "term"
        }, {
          text: $$("facet.popover.sort_by.count"),
          value: "count"
        }
      ]
    }).start();
    btn = new LocaButton({
      loca_key: "facet.more.button.search",
      onClick: (function(_this) {
        return function() {
          return do_search();
        };
      })(this)
    });
    tb = new Toolbar({
      center: {
        content: inp
      },
      right: {
        content: new Buttonbar({
          buttons: [sort, btn]
        })
      }
    });
    facetPopoverHeaderLabel = this.blockHeader();
    facetPopoverHeaderLabel.addClass("cui-label");
    pane = new Pane({
      padded: true,
      top: {
        content: [
          new PaneHeader({
            left: {
              content: facetPopoverHeaderLabel
            }
          }), tb
        ]
      },
      bottom: {
        content: footer
      }
    });
    this.popover = new Popover({
      "class": "ez5-facet-popover",
      element: this.__popoverElement,
      onHide: (function(_this) {
        return function() {
          return _this.__popoverElement.enable();
        };
      })(this),
      backdrop: {
        policy: "click"
      },
      placement: "e",
      pane: pane
    });
    this.popover.show();
    return do_search();
  };

  Facet.prototype.popoverChunkSize = 10;

  Facet.prototype.doPopoverSearch = function(opts) {
    var _key, facet, facet_browse_request, input_data, key, navi_div, next_btn, position_lbl, prev_btn, ref, request, result_div, search_request, str;
    result_div = opts.result_div;
    navi_div = opts.navi_div;
    input_data = opts.input_data;
    search_request = new Request();
    this.getSearch().addToRequest(search_request);
    request = {
      aggregations: {},
      search: []
    };
    key = this.getFacetKey(input_data.path);
    this.addToRequest(request);
    ref = request.aggregations;
    for (_key in ref) {
      facet = ref[_key];
      if (key !== _key) {
        delete request.aggregations[_key];
        continue;
      }
      facet.limit = this.popoverChunkSize;
      facet.offset = input_data.offset;
      facet.sort = input_data.sort;
    }
    facet_browse_request = {
      limit: 0,
      search: search_request.search,
      objecttypes: search_request.objecttypes,
      aggregations: request.aggregations
    };
    str = input_data.filter.trim();
    if (str.length > 0) {
      facet_browse_request.aggregations[key].include = ".*" + (RegExp.escape(str)) + ".*";
    }
    prev_btn = new LocaButton({
      loca_key: "facet.more.button.prev",
      disabled: true,
      onClick: (function(_this) {
        return function() {
          input_data.offset = Math.max(0, input_data.offset - _this.popoverChunkSize);
          return _this.doPopoverSearch(opts);
        };
      })(this)
    });
    position_lbl = new Label({
      icon: "spinner"
    });
    next_btn = new LocaButton({
      loca_key: "facet.more.button.next",
      disabled: true,
      onClick: (function(_this) {
        return function() {
          input_data.offset += _this.popoverChunkSize;
          return _this.doPopoverSearch(opts);
        };
      })(this)
    });
    navi_div.empty().append(new Buttonbar({
      "class": "ez5-facet-popover-navigatin",
      buttons: [prev_btn, position_lbl, next_btn]
    }).DOM);
    return ez5.api.search({
      json_data: facet_browse_request
    }).done((function(_this) {
      return function(data) {
        var cbs, i, items, last, len, obj, objects, offset;
        objects = _this.getObjects(key, data.aggregations);
        facet = data.aggregations[key];
        offset = facet.offset || 0;
        last = offset + objects.length - 1;
        items = [];
        for (i = 0, len = objects.length; i < len; i++) {
          obj = objects[i];
          items.push(_this.getItem(obj));
        }
        position_lbl.setText((offset + 1) + " - " + (last + 1));
        position_lbl.setIcon();
        if (offset > 0) {
          prev_btn.enable();
        }
        if (facet.has_more) {
          next_btn.enable();
        }
        cbs = _this.getCheckboxesFromItems(items);
        result_div.empty();
        result_div.append(new VerticalList({
          "class": "ez5-facet-more-form",
          maximize_horizontal: true,
          maximize_vertical: false,
          content: cbs
        }).DOM);
        return Events.trigger({
          type: "content-resize",
          node: result_div
        });
      };
    })(this));
  };

  Facet.prototype.facetFilterFields = function() {
    console.error(this.__cls + ".facetFilterFields needs implemntation.");
    return [];
  };

  Facet.prototype.requestSearchFilter = function(obj) {
    return {
      bool: "must",
      fields: this.facetFilterFields(),
      type: "in",
      "in": [obj._id]
    };
  };

  Facet.prototype.isHierarchy = function() {
    return false;
  };

  return Facet;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var FieldFacet,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FieldFacet = (function(superClass) {
  extend(FieldFacet, superClass);

  function FieldFacet() {
    return FieldFacet.__super__.constructor.apply(this, arguments);
  }

  FieldFacet.prototype.initOpts = function() {
    FieldFacet.__super__.initOpts.call(this);
    return this.addOpts({
      field: {
        mandatory: true,
        check: Field
      }
    });
  };

  FieldFacet.prototype.name = function() {
    return this._field.fullName();
  };

  FieldFacet.prototype.nameLocalized = function() {
    return this._field.nameLocalized();
  };

  FieldFacet.prototype.getGroupingText = function() {
    return this._field.getMainMask().table.nameLocalized();
  };

  return FieldFacet;

})(Facet);
// Generated by CoffeeScript 1.10.0
var TermFacet,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TermFacet = (function(superClass) {
  extend(TermFacet, superClass);

  function TermFacet() {
    return TermFacet.__super__.constructor.apply(this, arguments);
  }

  TermFacet.prototype.getObjects = function(key, data) {
    var ref;
    if (key == null) {
      key = this.name();
    }
    if (data == null) {
      data = this.data();
    }
    return ((ref = data[key]) != null ? ref.terms : void 0) || [];
  };

  TermFacet.prototype.renderObjectText = function(object) {
    return object.term;
  };

  TermFacet.prototype.getObjectPath = function(obj) {
    return [obj.term];
  };

  return TermFacet;

})(Facet);
// Generated by CoffeeScript 1.10.0
var EASFacet,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

EASFacet = (function(superClass) {
  extend(EASFacet, superClass);

  function EASFacet() {
    return EASFacet.__super__.constructor.apply(this, arguments);
  }

  EASFacet.prototype.isHierarchy = function() {
    return true;
  };

  EASFacet.prototype.name = function() {
    return "_eas";
  };

  EASFacet.prototype.nameLocalized = function() {
    return $$("eas.facet.name");
  };

  EASFacet.prototype.addToRequestHierarchy = function(request) {
    var i, idx, len, obj, ref;
    ref = this.getFilter();
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      obj = ref[idx];
      if (idx === 0) {
        CUI.debug("addToRequestHierarchy", obj);
        request.aggregations[(this.name()) + ":" + obj.term] = this.requestFacetWithLimit(obj);
      }
    }
    return this;
  };

  EASFacet.prototype.getGroupingText = function() {
    return $$("facet.grouping.base_fields");
  };

  EASFacet.prototype.renderObjectText = function(obj) {
    var loca_key;
    if (obj._facet_key === "_eas") {
      loca_key = "server.eas.fileclass." + obj.term;
      if (ez5.loca.has(loca_key)) {
        return $$(loca_key);
      } else {
        return obj.term;
      }
    } else {
      return obj.term.substr(obj._facet_key.length - "_eas:".length + 1).toUpperCase();
    }
  };

  EASFacet.prototype.getObjectPath = function(obj) {
    if (obj._facet_key === "_eas") {
      return [obj.term];
    } else {
      return [obj._facet_key.substr("_eas".length + 1), obj.term];
    }
  };

  EASFacet.prototype.getObjects = function(key, data) {
    var i, len, obj, objs;
    if (key == null) {
      key = this.name();
    }
    if (data == null) {
      data = this.data();
    }
    objs = EASFacet.__super__.getObjects.call(this, key, data);
    for (i = 0, len = objs.length; i < len; i++) {
      obj = objs[i];
      obj._facet_key = key;
    }
    return objs;
  };

  EASFacet.prototype.requestFacet = function(obj) {
    var facet;
    if ((obj != null ? obj.term : void 0)) {
      facet = {
        type: "asset",
        field: "class_extension",
        include: obj.term + ".*"
      };
    } else {
      facet = {
        type: "asset",
        field: "class"
      };
    }
    return facet;
  };

  EASFacet.prototype.requestSearchFilter = function(obj) {
    var field_name, filter;
    field_name = obj._facet_key.startsWith("_eas:") ? "_linked._asset.class_extension" : "_linked._asset.class";
    filter = {
      bool: "must",
      fields: [field_name],
      type: "in",
      "in": [obj.term]
    };
    return filter;
  };

  EASFacet.prototype.renderObjectTitle = function(object) {
    return "empty";
  };

  return EASFacet;

})(TermFacet);
// Generated by CoffeeScript 1.10.0
var LinkedObjectFieldFacet,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LinkedObjectFieldFacet = (function(superClass) {
  extend(LinkedObjectFieldFacet, superClass);

  function LinkedObjectFieldFacet() {
    return LinkedObjectFieldFacet.__super__.constructor.apply(this, arguments);
  }

  LinkedObjectFieldFacet.prototype.name = function() {
    return this._field.fullName() + "/" + this._field.linkMask().table.name();
  };

  LinkedObjectFieldFacet.prototype.getGroupingText = function() {
    var f, i, len, ref, show;
    show = false;
    if (this.getSearch().getSearchObjecttypes().length > 1) {
      show = true;
    } else {
      ref = this.getFacets();
      for (i = 0, len = ref.length; i < len; i++) {
        f = ref[i];
        if (f instanceof LinkedObjecttypeFacet) {
          show = true;
          break;
        }
      }
    }
    if (show) {
      return this._field.getMainMask().table.nameLocalized();
    } else {
      return null;
    }
  };

  LinkedObjectFieldFacet.prototype.blockHeader = function() {
    return ResultObject.renderPath([this._field.nameLocalized()]);
  };

  LinkedObjectFieldFacet.prototype.requestFacet = function() {
    return {
      type: "linked_object",
      field: this._field.fullName()
    };
  };

  LinkedObjectFieldFacet.prototype.facetFilterFields = function() {
    if (this.isHierarchy()) {
      return [(this._field.fullName()) + "._path." + (this._field.linkMask().table.name()) + "._id"];
    } else {
      return [(this._field.fullName()) + "." + (this._field.linkMask().table.name()) + "._id"];
    }
  };

  LinkedObjectFieldFacet.prototype.isHierarchy = function() {
    return this._field.linkMask().isHierarchy();
  };

  return LinkedObjectFieldFacet;

})(FieldFacet);
// Generated by CoffeeScript 1.10.0
var LinkedObjecttypeFacet,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LinkedObjecttypeFacet = (function(superClass) {
  extend(LinkedObjecttypeFacet, superClass);

  function LinkedObjecttypeFacet() {
    return LinkedObjecttypeFacet.__super__.constructor.apply(this, arguments);
  }

  LinkedObjecttypeFacet.prototype.initOpts = function() {
    LinkedObjecttypeFacet.__super__.initOpts.call(this);
    return this.addOpts({
      objecttype: {
        mandatory: true,
        check: Objecttype
      }
    });
  };

  LinkedObjecttypeFacet.prototype.name = function() {
    return this._objecttype.table.name();
  };

  LinkedObjecttypeFacet.prototype.nameLocalized = function() {
    return this._objecttype.table.nameLocalized();
  };

  LinkedObjecttypeFacet.prototype.getGroupingText = function() {
    return $$("linked.objecttype.facet.grouping_text");
  };

  LinkedObjecttypeFacet.prototype.blockHeader = function() {
    return ResultObject.renderPath([this.nameLocalized()]);
  };

  LinkedObjecttypeFacet.prototype.requestFacet = function() {
    return {
      type: "linked_object",
      objecttype: this.name()
    };
  };

  LinkedObjecttypeFacet.prototype.requestSearchFilter = function(obj) {
    return {
      bool: "must",
      type: "in",
      objecttype: this.name(),
      include_path: true,
      "in": [obj._id]
    };
  };

  LinkedObjecttypeFacet.prototype.isHierarchy = function() {
    return this._objecttype.isHierarchy();
  };

  return LinkedObjecttypeFacet;

})(Facet);
// Generated by CoffeeScript 1.10.0
var ObjecttypeFacet,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ObjecttypeFacet = (function(superClass) {
  extend(ObjecttypeFacet, superClass);

  function ObjecttypeFacet() {
    return ObjecttypeFacet.__super__.constructor.apply(this, arguments);
  }

  ObjecttypeFacet.prototype.requestFacet = function() {
    return {
      type: "term",
      field: "_objecttype"
    };
  };

  ObjecttypeFacet.prototype.facetFilterFields = function() {
    return ["_objecttype"];
  };

  ObjecttypeFacet.prototype.name = function() {
    return "_objecttype";
  };

  ObjecttypeFacet.prototype.getGroupingText = function() {
    return $$("facet.grouping.base_fields");
  };

  ObjecttypeFacet.prototype.renderObjectText = function(obj) {
    return ez5.schema.CURRENT._objecttype_by_name[obj.term]._name_localized;
  };

  ObjecttypeFacet.prototype.requestSearchFilter = function(obj) {
    return {
      bool: "must",
      fields: this.facetFilterFields(),
      type: "in",
      "in": [obj.term]
    };
  };

  ObjecttypeFacet.prototype.nameLocalized = function() {
    return $$("objecttype.facet.name");
  };

  return ObjecttypeFacet;

})(TermFacet);
// Generated by CoffeeScript 1.10.0
var PoolFacet,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PoolFacet = (function(superClass) {
  extend(PoolFacet, superClass);

  function PoolFacet() {
    this.requestSearchFilter = bind(this.requestSearchFilter, this);
    return PoolFacet.__super__.constructor.apply(this, arguments);
  }

  PoolFacet.prototype.name = function() {
    return "_pool";
  };

  PoolFacet.prototype.requestFacet = function() {
    return {
      type: "linked_object",
      field: "_pool"
    };
  };

  PoolFacet.prototype.getPathLengthOffset = function() {
    return 1;
  };

  PoolFacet.prototype.getGroupingText = function() {
    return $$("facet.grouping.base_fields");
  };

  PoolFacet.prototype.addToRequestHierarchy = function(request) {
    var fac_req;
    PoolFacet.__super__.addToRequestHierarchy.call(this, request);
    fac_req = request.aggregations[this.name()];
    return fac_req.filter_parent = this._facetManager.getRootPoolId();
  };

  PoolFacet.prototype.nameLocalized = function() {
    return $$("main.search.pool");
  };

  PoolFacet.prototype.requestSearchFilter = function(obj) {
    var ot;
    return {
      bool: "must",
      fields: (function() {
        var i, len, ref, results;
        ref = this._facetManager.getSearch().getSearchObjecttypes(true, true);
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          ot = ref[i];
          results.push((ot.name()) + "._pool._path.pool._id");
        }
        return results;
      }).call(this),
      type: "in",
      "in": [obj._id]
    };
  };

  PoolFacet.prototype.isHierarchy = function() {
    return true;
  };

  return PoolFacet;

})(Facet);
// Generated by CoffeeScript 1.10.0
var DateFacet,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DateFacet = (function(superClass) {
  extend(DateFacet, superClass);

  function DateFacet() {
    return DateFacet.__super__.constructor.apply(this, arguments);
  }

  DateFacet.prototype.readOpts = function() {
    var from, i, idx, len, m, mom, range, ref, to;
    DateFacet.__super__.readOpts.call(this);
    this.__ranges = [];
    this.__format_search = "date_time";
    this.__format_moment = "YYYY-MM-DD";
    mom = moment();
    ref = this.getRanges();
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      range = ref[idx];
      m = mom.clone();
      from = range.from(m).toISOString();
      m = mom.clone();
      to = range.to(m).toISOString();
      this.__ranges.push({
        idx: idx,
        name: range.name,
        key: from + "-" + to,
        from: from,
        to: to
      });
    }
  };

  DateFacet.prototype.requestFacet = function(obj) {
    var i, len, range, ranges, ref;
    ranges = [];
    ref = this.__ranges;
    for (i = 0, len = ref.length; i < len; i++) {
      range = ref[i];
      ranges.push({
        from: range.from,
        to: range.to
      });
    }
    return {
      type: "date_range",
      field: this._field.fullName(),
      format: this.__format_search,
      ranges: ranges
    };
  };

  DateFacet.prototype.isActiveFirst = function() {
    return false;
  };

  DateFacet.prototype.getRanges = function() {
    return [
      {
        name: "today",
        from: (function(_this) {
          return function(m) {
            return m.startOf("day");
          };
        })(this),
        to: (function(_this) {
          return function(m) {
            return m.add(1, "day").startOf("day");
          };
        })(this)
      }, {
        name: "yesterday",
        from: (function(_this) {
          return function(m) {
            return m.subtract(1, "day").startOf("day");
          };
        })(this),
        to: (function(_this) {
          return function(m) {
            return m.startOf("day");
          };
        })(this)
      }, {
        name: "this_week",
        from: (function(_this) {
          return function(m) {
            return m.startOf("week");
          };
        })(this),
        to: (function(_this) {
          return function(m) {
            return m.add(1, "week").startOf("week");
          };
        })(this)
      }, {
        name: "last_week",
        from: (function(_this) {
          return function(m) {
            return m.subtract(1, "week").startOf("week");
          };
        })(this),
        to: (function(_this) {
          return function(m) {
            return m.startOf("week");
          };
        })(this)
      }, {
        name: "this_month",
        from: (function(_this) {
          return function(m) {
            return m.startOf("month");
          };
        })(this),
        to: (function(_this) {
          return function(m) {
            return m.add(1, "month").startOf("month");
          };
        })(this)
      }, {
        name: "last_month",
        from: (function(_this) {
          return function(m) {
            return m.subtract(1, "month").startOf("month");
          };
        })(this),
        to: (function(_this) {
          return function(m) {
            return m.startOf("month");
          };
        })(this)
      }, {
        name: "this_year",
        from: (function(_this) {
          return function(m) {
            return m.startOf("year");
          };
        })(this),
        to: (function(_this) {
          return function(m) {
            return m.add(1, "year").startOf("year");
          };
        })(this)
      }, {
        name: "last_year",
        from: (function(_this) {
          return function(m) {
            return m.subtract(1, "year").startOf("year");
          };
        })(this),
        to: (function(_this) {
          return function(m) {
            return m.startOf("year");
          };
        })(this)
      }
    ];
  };

  DateFacet.prototype.getObjects = function(key, data) {
    var bucket, buckets, find_range, i, idx, len, objects, ref;
    if (key == null) {
      key = this.name();
    }
    if (data == null) {
      data = this.data();
    }
    buckets = (ref = data[key]) != null ? ref.buckets : void 0;
    if (!buckets) {
      return;
    }
    objects = [];
    find_range = (function(_this) {
      return function(key) {
        return findInArray(null, _this.__ranges, function(v) {
          return v.key === key;
        });
      };
    })(this);
    for (idx = i = 0, len = buckets.length; i < len; idx = ++i) {
      bucket = buckets[idx];
      if (bucket.doc_count === 0) {
        continue;
      }
      objects.push({
        range: find_range(bucket.key),
        bucket: bucket,
        count: bucket.doc_count
      });
    }
    objects.sort(function(a, b) {
      return compareIndex(a.range.idx, b.range.idx);
    });
    return objects;
  };

  DateFacet.prototype.renderObjectText = function(object) {
    return $$("date.facet.range." + object.range.name);
  };

  DateFacet.prototype.getObjectPath = function(object) {
    return [object.range.name];
  };

  DateFacet.prototype.requestSearchFilter = function(object) {
    console.debug("requestSearchFilter", dump(object));
    return {
      bool: "must",
      field: this._field.getSearchField(),
      type: "range",
      from: object.bucket.from_as_string,
      to: object.bucket.to_as_string
    };
  };

  DateFacet.prototype.isHierarchy = function() {
    return false;
  };

  return DateFacet;

})(FieldFacet);
// Generated by CoffeeScript 1.10.0
var CollectionManager, CollectionManagerLoader,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

CollectionManager = (function(superClass) {
  extend(CollectionManager, superClass);

  function CollectionManager() {
    return CollectionManager.__super__.constructor.apply(this, arguments);
  }

  CollectionManager.prototype.initOpts = function() {
    CollectionManager.__super__.initOpts.call(this);
    return this.addOpts({
      detailDiv: {
        check: function(v) {
          return isElement(v);
        }
      },
      mainLayout: {
        mandatory: true,
        check: CUI.Layout
      },
      sidebar: {
        check: Sidebar
      }
    });
  };

  CollectionManager.prototype.hasFixedCollections = function() {
    return ez5.session.hasSystemRight("root", "search[show_fixed_searches]");
  };

  CollectionManager.prototype.hasEmptyStoredSearches = function() {
    return ez5.session.hasSystemRight("root", "frontend_features[stored_searches]");
  };

  CollectionManager.prototype.hasStoredSearches = function() {
    return true;
  };

  CollectionManager.prototype.hasButtons = function() {
    return true;
  };

  CollectionManager.prototype.hasCollectionSelection = function() {
    return true;
  };

  CollectionManager.prototype.allowsDeselect = function() {
    return false;
  };

  CollectionManager.prototype.hasProMode = function() {
    return true;
  };

  CollectionManager.prototype.hasFillScreenButton = function() {
    return true;
  };

  CollectionManager.prototype.hasSearchCollection = function() {
    if (ez5.session.hasSystemRight("root")) {
      return true;
    } else if (ez5.session.hasSystemRight("search[collection_only]")) {
      return false;
    } else {
      return true;
    }
  };

  CollectionManager.prototype.getSidebar = function() {
    return this._sidebar;
  };

  CollectionManager.prototype.hasCollectionInfoBlock = function() {
    return true;
  };

  CollectionManager.prototype.getCollectionWorkfolderClass = function() {
    return ez5.defaults["class"].CollectionWorkfolder;
  };

  CollectionManager.prototype.getDownloadManagerClass = function() {
    return this.getSearch().getDownloadManagerClass();
  };

  CollectionManager.prototype.getSearchCollection = function() {
    return this.__searchCollection;
  };

  CollectionManager.prototype.getSearchCollectionClass = function() {
    return ez5.defaults["class"].SearchCollection;
  };

  CollectionManager.prototype.getTreeFilter = function() {
    return (function(_this) {
      return function(filter) {
        return _this.loadCollections(filter);
      };
    })(this);
  };

  CollectionManager.prototype.destroy = function() {
    var i, len, node, ref, ref1, ref2;
    ref1 = (ref = this.tree) != null ? ref.root.find() : void 0;
    for (i = 0, len = ref1.length; i < len; i++) {
      node = ref1[i];
      node.destroy();
    }
    this.tree.destroy();
    this.tree = null;
    if ((ref2 = this.__collectionSelection) != null) {
      ref2.destroy();
    }
    Events.ignore({
      instance: this
    });
    return CollectionManager.__super__.destroy.call(this);
  };

  CollectionManager.prototype.getAddToCollectionMenuItems = function(opts) {
    var add_to_collection, fn, i, item, items, len, menu_items, selCol;
    CUI.Element.readOpts(opts, "CollectionManager.getAddToCollectionTool", {
      collection: {
        mandatory: true,
        check: function(v) {
          return v instanceof Collection || $.isFunction(v);
        }
      }
    });
    add_to_collection = (function(_this) {
      return function(to_collection) {
        var add_now, col;
        add_now = function(__col) {
          CUI.debug("add_to_collection:", to_collection, __col.getObjects());
          return to_collection.insertObjects(__col.getObjects()).done(function() {
            return __col.removeObjects();
          });
        };
        if (opts.collection instanceof Collection) {
          add_now(opts.collection);
        } else {
          col = opts.collection();
          if (isPromise(col)) {
            col.done(function(_col) {
              return add_now(_col);
            });
          } else {
            add_now(col);
          }
        }
      };
    })(this);
    items = this.getMenuItems();
    menu_items = [];
    fn = (function(_this) {
      return function(item) {
        return menu_items.push({
          text: item.text,
          disabled: item.disabled,
          onClick: function(ev, btn) {
            return item.onClick(ev, btn).done(function(new_collection) {
              return add_to_collection(new_collection);
            }).fail(function() {
              return CUI.debug("collection nicht erzeugt");
            });
          }
        });
      };
    })(this);
    for (i = 0, len = items.length; i < len; i++) {
      item = items[i];
      if (item.label) {
        menu_items.push(item);
        continue;
      }
      fn(item);
    }
    selCol = this.getSelectedCollection();
    if (selCol && selCol !== opts.collection) {
      menu_items.push({
        divider: true
      });
      menu_items.push({
        label: $$("collection.manager.add_to_collection.existing_collection")
      });
      menu_items.push({
        text: selCol.renderNameAsText(),
        onClick: (function(_this) {
          return function() {
            return add_to_collection(selCol);
          };
        })(this)
      });
    }
    if (menu_items.length === 1) {
      return [];
    }
    return menu_items;
  };

  CollectionManager.prototype.render = function() {
    var mf;
    this.proModeButtons = [];
    this.__pane = this.getCollectionPane();
    this.registerDOMElement(this.__pane.DOM);
    if (this.hasCollectionSelection()) {
      this.__collectionSelection = new CollectionSelection({
        manager: this,
        sidebar: this._sidebar
      });
    }
    this.resetCollectionDetailDiv();
    if (this.hasFixedCollections()) {
      mf = new CollectionFixedSearchAnyToday({
        manager: this,
        getSearchObjecttypes: (function(_this) {
          return function() {
            return _this.getSearchObjectypes();
          };
        })(this)
      });
      mf.addChild(new CollectionFixedSearchInsertToday({
        manager: this,
        getSearchObjecttypes: (function(_this) {
          return function() {
            return _this.getSearchObjectypes();
          };
        })(this)
      }));
      mf.addChild(new CollectionFixedSearchUpdateToday({
        manager: this,
        getSearchObjecttypes: (function(_this) {
          return function() {
            return _this.getSearchObjectypes();
          };
        })(this)
      }));
      this.__fixedCollections = [mf];
    }
    if (this.hasButtons()) {
      this.plusButton = new LocaButton({
        icon: "plus",
        loca_key: "collection.manager.button.add",
        group: "plus-minus",
        menu: {
          items: (function(_this) {
            return function() {
              return _this.getMenuItems();
            };
          })(this)
        }
      });
      this.minusButton = new LocaButton({
        icon: "minus",
        loca_key: "collection.manager.button.delete",
        group: "plus-minus",
        onClick: (function(_this) {
          return function() {
            return _this.tree.getSelectedNode()["delete"]().done(function() {
              return Events.trigger({
                node: _this.tree,
                type: "data-changed"
              });
            });
          };
        })(this)
      });
      this.refreshButton = new LocaButton({
        loca_key: "collection.manager.button.refresh",
        onClick: (function(_this) {
          return function() {
            _this.refreshButton.disable();
            return _this.loadCollections().done(function() {
              return _this.refreshButton.enable();
            });
          };
        })(this)
      });
    }
    EventPoller.listen({
      instance: this,
      filter: {
        type: ["OBJECT_DELETE", "OBJECT_INDEX"],
        basetype: "collection"
      },
      call: (function(_this) {
        return function(events) {
          var event, i, j, len, len1, node, node_action, remove_nodes;
          remove_nodes = [];
          node_action = function(node) {
            if (node instanceof CollectionStorable && node.getId() === event.object_id) {
              if (event.type === "OBJECT_DELETE") {
                remove_nodes.push(node);
                CUI.toaster({
                  show_ms: 3000,
                  text: $$("collection.manager.collection_deleted_elsewhere", {
                    collection: node.renderNameAsText()
                  }),
                  markdown: true
                });
              } else {
                node.refresh();
              }
            }
            return true;
          };
          for (i = 0, len = events.length; i < len; i++) {
            event = events[i];
            if (event.session_self) {
              continue;
            }
            _this.tree.root.find(node_action);
          }
          for (j = 0, len1 = remove_nodes.length; j < len1; j++) {
            node = remove_nodes[j];
            node.remove();
          }
        };
      })(this)
    });
    this.tree = new ListViewEditTree({
      cols: ["maximize", "auto"],
      "class": "ez5-collection-manager-tree",
      absolute: true,
      no_header: true,
      rowMove: false,
      colClasses: ["ez5-collection-manager-column-main", "ez5-collection-manager-column-utils"],
      filter: this.getTreeFilter(),
      selectableRows: "multiple",
      onSelect: (function(_this) {
        return function() {
          _this.onSelect();
          _this.setStatus();
          return _this.__triggerResizePaneEvents();
        };
      })(this),
      onDeselect: (function(_this) {
        return function() {
          _this.onDeselect();
          _this.setStatus();
          return _this.__triggerResizePaneEvents();
        };
      })(this),
      footer_left: (function(_this) {
        return function() {
          if (!_this.hasButtons()) {
            return;
          }
          return [_this.plusButton, _this.minusButton];
        };
      })(this),
      footer_right: (function(_this) {
        return function() {
          if (!_this.hasButtons()) {
            return;
          }
          return [_this.refreshButton];
        };
      })(this)
    });
    this.addTreeToCollectionPane(this.tree);
    this.__promise = this.loadCollections(null);
    this.__promise.done((function(_this) {
      return function() {
        var ref;
        if ((ref = _this.findCollectionByLocation()) != null) {
          ref.selectOnLoad();
        }
      };
    })(this));
    return this.__pane;
  };

  CollectionManager.prototype.onSelect = function() {};

  CollectionManager.prototype.onDeselect = function() {};

  CollectionManager.prototype.objecttypesUpdated = function() {
    var ref;
    return (ref = this.__searchCollection) != null ? ref.updateCounter() : void 0;
  };

  CollectionManager.prototype.findCollectionByLocation = function() {
    var m, node, nodes;
    m = document.location.pathname.match("^/collection/(.*)$");
    if (m != null ? m[1] : void 0) {
      node = this.findCollectionByLocator(m[1]);
    }
    if (!node) {
      nodes = this.tree.root.find((function(_this) {
        return function(node) {
          return node.isSelectable();
        };
      })(this));
      node = nodes[0];
    }
    return node;
  };

  CollectionManager.prototype.findCollectionByLocator = function(locator) {
    var nodes;
    if (isEmpty(locator)) {
      return;
    }
    nodes = this.tree.root.find(function(node) {
      return typeof node.matchesLocator === "function" ? node.matchesLocator(locator) : void 0;
    });
    return nodes[0];
  };

  CollectionManager.prototype.findCollectionByName = function(name) {
    var nodes;
    nodes = this.tree.root.find(function(node) {
      if (!(node instanceof CollectionStorable)) {
        return;
      }
      return node.renderNameAsText() === name;
    });
    return nodes[0];
  };

  CollectionManager.prototype.getSelectedCollection = function() {
    return this.tree.getSelectedNode();
  };

  CollectionManager.prototype.getTopCreateCollection = function() {
    return this.tree.root.find(function(c) {
      return typeof c.isCreateChildAllowed === "function" ? c.isCreateChildAllowed() : void 0;
    })[0];
  };

  CollectionManager.prototype.getMenuItems = function() {
    var c, fn, i, items, len, node, ref;
    if (!this.plusButton) {
      return null;
    }
    items = [];
    node = this.tree.getSelectedNode();
    if (!node && this.tree.root.children) {
      node = this.getTopCreateCollection();
    }
    if (!node) {
      this.plusButton.disable();
      return items;
    }
    ref = node.getPath(true).splice(1);
    fn = (function(_this) {
      return function(c) {
        return items.push({
          text: c.renderNameAsText(),
          disabled: !node.isCreateChildAllowed(),
          onClick: function(ev, btn) {
            var root_btn;
            root_btn = btn.getMenuRootButton();
            if (!root_btn) {
              root_btn = btn;
            }
            root_btn.disable();
            return _this.newCollection(_this.getCollectionWorkfolderClass(), c).always(function() {
              return root_btn.enable();
            });
          }
        });
      };
    })(this);
    for (i = 0, len = ref.length; i < len; i++) {
      c = ref[i];
      if (!c.isCreateChildAllowed()) {
        continue;
      }
      fn(c);
    }
    if (items.length) {
      items.splice(0, 0, {
        label: $$("collection.manager.add_to_collection.new_collection")
      });
      this.plusButton.enable();
    } else {
      this.plusButton.disable();
    }
    return items;
  };

  CollectionManager.prototype.setStatus = function() {
    var node;
    node = this.tree.getSelectedNode();
    if (node && node.isShowingInSearch && !node.isShowingInSearch()) {
      this._mainLayout.addClass("ez5-finder--folder-selected");
    } else {
      this._mainLayout.removeClass("ez5-finder--folder-selected");
    }
    this.minusButton.disable();
    if (!node) {
      return this;
    }
    node.prepareCurrentTools().done((function(_this) {
      return function() {
        _this.getMenuItems();
        if (node.isDeletable()) {
          return _this.minusButton.enable();
        }
      };
    })(this));
    return this;
  };

  CollectionManager.prototype.__getClosePaneButton = function() {
    return new LocaButton({
      loca_key: "base.help.flex_handle.close",
      icon: "west",
      "class": "ez5-collection-manager-close-pane-button",
      onClick: (function(_this) {
        return function() {
          return _this.getPaneFlexHandle().close();
        };
      })(this)
    });
  };

  CollectionManager.prototype.getClosePaneButtonCenter = function() {
    return this.__getClosePaneButton();
  };

  CollectionManager.prototype.getClosePaneButtonList = function() {
    return this.__getClosePaneButton();
  };

  CollectionManager.prototype.getPaneFlexHandle = function() {
    return DOM.data(this.__pane.DOM.closest("[flex-handled-pane]")[0], "flexHandle");
  };

  CollectionManager.prototype.__triggerResizePaneEvents = function() {
    if (!this.__pane) {
      return;
    }
    Events.trigger({
      type: "viewport-resize"
    });
    return Events.trigger({
      node: this.__pane,
      type: "content-resize"
    });
  };

  CollectionManager.prototype.__getProModeButton = function(btn_mode) {
    var btn, cls, loca_key;
    if (!this.hasProMode()) {
      return;
    }
    loca_key = "collection.manager.finder." + btn_mode + ".split_button";
    cls = "ez5-finder-split-button";
    btn = new LocaButton({
      "switch": true,
      "class": cls,
      loca_key: loca_key,
      active: this.isProModeActive(),
      active_css_class: null,
      activate_initial: false,
      onActivate: (function(_this) {
        return function(btn, flags) {
          if (flags.dont_set) {
            return;
          }
          _this.__setProMode(true, btn_mode);
          return Events.trigger({
            type: "viewport-resize"
          });
        };
      })(this),
      onDeactivate: (function(_this) {
        return function(btn, flags) {
          if (flags.dont_set) {
            return;
          }
          _this.__setProMode(false, btn_mode);
          return Events.trigger({
            type: "viewport-resize"
          });
        };
      })(this)
    });
    this.proModeButtons[btn_mode] = btn;
    return btn;
  };

  CollectionManager.prototype.getProModeButtonForCollection = function() {
    if (this.hasSearchCollection()) {
      return this.__getProModeButton("collection");
    } else {
      return null;
    }
  };

  CollectionManager.prototype.getProModeButtonForSearch = function() {
    return this.__getProModeButton("search");
  };

  CollectionManager.prototype.isProModeActive = function() {
    return this._mainLayout.hasClass("ez5-finder--split-pane");
  };

  CollectionManager.prototype.__setProMode = function(on_off, btn_mode) {
    var _btn_mode, btn, pro_mode_active, ref, ref1, ref2, ref3;
    ref = this.proModeButtons;
    for (_btn_mode in ref) {
      btn = ref[_btn_mode];
      if (on_off) {
        btn.activate({
          dont_set: true
        });
      } else {
        btn.deactivate({
          dont_set: true
        });
      }
    }
    pro_mode_active = this.isProModeActive();
    if (pro_mode_active) {
      switch (btn_mode) {
        case "collection":
          if ((ref1 = this.tree.getSelectedNode("selectedNode")) != null) {
            ref1.deselect();
          }
          break;
        case "search":
          if ((ref2 = this.tree.getSelectedNode("selectedNodeSearch")) != null) {
            ref2.deselect();
          }
      }
    }
    if (on_off) {
      this._mainLayout.addClass("ez5-finder--split-pane");
      this._mainLayout.removeClass("ez5-finder--single-pane");
      this.__triggerResizePaneEvents();
    } else {
      this._mainLayout.removeClass("ez5-finder--split-pane");
      this._mainLayout.addClass("ez5-finder--single-pane");
      this.__triggerResizePaneEvents();
    }
    if (!pro_mode_active) {
      switch (btn_mode) {
        case "collection":
          if ((ref3 = this.__searchCollection) != null) {
            ref3.select();
          }
      }
    }
    return this;
  };

  CollectionManager.prototype.getTitleLocaKey = function() {
    return "collection.manager.title";
  };

  CollectionManager.prototype.getCollectionPane = function(tree) {
    this.__paneCollectionList = new SimplePane({
      "class": "cui-pane--window",
      header_left: [
        new LocaLabel({
          loca_key: this.getTitleLocaKey()
        })
      ],
      header_right: [this.getClosePaneButtonList()]
    });
    if (!this._detailDiv) {
      return new HorizontalLayout({
        "class": "ez5-collection-manager-pane",
        left: {
          "class": "ez5-collection-manager-list",
          content: this.__paneCollectionList,
          flexHandle: {
            "class": "ez5-collection-manager-list-flex-handle",
            state_name: "collection-manager-left",
            closable: false,
            hidden: false
          }
        },
        center: {
          "class": "ez5-collection-manager-detail"
        }
      });
    } else {
      return this.__paneCollectionList;
    }
  };

  CollectionManager.prototype.addTreeToCollectionPane = function(tree) {
    return this.__paneCollectionList.replace(tree.render(), "center");
  };

  CollectionManager.prototype.getCollectionDetailDiv = function() {
    if (this._detailDiv) {
      return this._detailDiv;
    } else {
      return this.__pane.center();
    }
  };

  CollectionManager.prototype.resetCollectionDetailDiv = function(collection) {
    var key, sp;
    if (collection) {
      key = collection.getEmptyLabelLocaKey();
    } else {
      key = "collection.manager.no_collection.empty_label";
    }
    sp = new SimplePane({
      "class": "cui-pane--window",
      header_right: [this.getProModeButtonForCollection()],
      content: new LocaLabel({
        "class": "cui-empty-label",
        centered: true,
        multiline: true,
        loca_key: key
      })
    });
    this.getCollectionDetailDiv().empty().append(sp.DOM);
    return sp;
  };

  CollectionManager.prototype.setSearch = function(search1) {
    this.search = search1;
  };

  CollectionManager.prototype.getSearch = function() {
    return this.search;
  };

  CollectionManager.prototype.getCollectionSearchFilter = function() {
    var search;
    return search = [
      {
        type: "complex",
        bool: "must",
        search: [
          {
            type: "in",
            bool: "should",
            fields: ["_owner.user._id"],
            "in": [ez5.session.getUser().getId()]
          }, {
            type: "in",
            bool: "should",
            fields: ["_owner.group._id"],
            "in": ez5.session.getGroupIds()
          }, {
            type: "in",
            bool: "should",
            fields: ["_has_acl"],
            "in": [true]
          }
        ]
      }
    ];
  };

  CollectionManager.prototype.getCollectionSortFilter = function() {
    return [
      {
        field: "_level"
      }, {
        field: "collection.displayname"
      }
    ];
  };

  CollectionManager.prototype.hasOwnCollections = function() {
    return true;
  };

  CollectionManager.prototype.loadCollections = function(loadFilter) {
    var dfr, input, is_search, node, phrase, ref, search, sel_hash_ids, str;
    dfr = new CUI.Deferred();
    if (loadFilter !== void 0) {
      this.__loadFilter = loadFilter;
    }
    sel_hash_ids = (function() {
      var i, len, ref, results;
      ref = this.tree.root.find((function(_this) {
        return function(node) {
          return node.isSelected();
        };
      })(this));
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        node = ref[i];
        results.push(node.getHashId());
      }
      return results;
    }).call(this);
    if (sel_hash_ids.length > 0) {
      dfr.done((function(_this) {
        return function() {
          return _this.tree.root.find(function(_node) {
            var ref;
            if (ref = typeof _node.getHashId === "function" ? _node.getHashId() : void 0, indexOf.call(sel_hash_ids, ref) >= 0) {
              return _node.select();
            }
          });
        };
      })(this));
    }
    if (this.hasSearchCollection()) {
      this.__searchCollection = new CollectionSearchMainNode({
        manager: this
      });
    }
    search = this.getCollectionSearchFilter();
    input = this.tree.getFilterInput();
    input.removeClass("ez5-collection-manager-nothing-found");
    if (!isEmpty(this.__loadFilter)) {
      is_search = true;
      ref = Search.getPhrase(this.__loadFilter), str = ref[0], phrase = ref[1];
      search.push({
        type: "match",
        bool: "must",
        mode: "fulltext",
        phrase: phrase,
        string: str
      });
    }
    ez5.api.search({
      data: {
        debug: "CollectionManager"
      },
      json_data: {
        type: "collection",
        limit: 100000,
        search: search,
        generate_rights: false,
        sort: this.getCollectionSortFilter(),
        highlight: {}
      }
    }).always((function(_this) {
      return function() {
        return input.enable();
      };
    })(this)).fail((function(_this) {
      return function() {
        return input.addClass("ez5-collection-manager-nothing-found");
      };
    })(this)).done((function(_this) {
      return function(data) {
        var _own, _root, _search, _searches, _shared, c, collections, i, idx, j, k, l, len, len1, len2, len3, obj, own_collections, owner, ref1, ref2, ref3, ref4, root_collections, search_collections, shared_collections;
        if (data.count === 0 && !isEmpty(_this.__loadFilter)) {
          input.addClass("ez5-collection-manager-nothing-found");
        }
        if (_this.tree.isDestroyed()) {
          CUI.warn("CollectionManager: finished loading but tree already destroyed.");
          dfr.reject();
          return;
        }
        ref1 = data.objects;
        for (i = 0, len = ref1.length; i < len; i++) {
          obj = ref1[i];
          if (obj._owner.group) {
            owner = "group: " + obj._owner.group._id;
          } else {
            owner = "user: " + obj._owner.user._id;
          }
        }
        _root = [];
        _own = [];
        _searches = [];
        _shared = [];
        ref2 = data.objects;
        for (idx = j = 0, len1 = ref2.length; j < len1; idx = ++j) {
          obj = ref2[idx];
          if (obj.collection.is_system_collection && !obj.collection._id_parent) {
            _root.push(obj);
          } else if (obj.collection.type === "search") {
            _searches.push(obj);
          } else if (obj._owner.user._id === ez5.session.getUser().getId()) {
            _own.push(obj);
          } else {
            _shared.push(obj);
          }
        }
        root_collections = ez5.buildObjectTree({
          objects: _root,
          "class": "ez5-folder-header",
          objectKey: "collection",
          doOpen: is_search,
          newInstanceFunc: function(collection) {
            return _this.getCollectionWorkfolderClass().newInstance({
              collection: collection,
              manager: _this
            });
          }
        });
        own_collections = ez5.buildObjectTree({
          objects: _own,
          objectKey: "collection",
          filter: true,
          doOpen: is_search,
          newInstanceFunc: function(collection) {
            collection = _this.getCollectionWorkfolderClass().newInstance({
              collection: collection,
              manager: _this
            });
            if (!is_search && collection instanceof CollectionSystemUser) {
              collection.do_open = true;
            }
            return collection;
          }
        });
        shared_collections = ez5.buildObjectTree({
          objects: _shared,
          objectKey: "collection",
          filter: true,
          doOpen: is_search,
          newInstanceFunc: function(collection) {
            return _this.getCollectionWorkfolderClass().newInstance({
              collection: collection,
              manager: _this
            });
          }
        });
        collections = [];
        if (_this.hasSearchCollection()) {
          collections.push(_this.__searchCollection);
        }
        if ((ref3 = _this.__fixedCollections) != null ? ref3.length : void 0) {
          ref4 = _this.__fixedCollections;
          for (k = 0, len2 = ref4.length; k < len2; k++) {
            c = ref4[k];
            if (_this.hasSearchCollection()) {
              _this.__searchCollection.addChild(c);
            } else {
              collections.push(c);
            }
          }
        }
        search_collections = [];
        for (l = 0, len3 = _searches.length; l < len3; l++) {
          _search = _searches[l];
          search_collections.push(new CollectionStoredSearch({
            collection: _search,
            manager: _this
          }));
        }
        if ((search_collections.length > 0 || _this.hasEmptyStoredSearches()) && _this.hasStoredSearches()) {
          _this.__searchCollectionsRoot = new CollectionStructure({
            icon: "search",
            displayname: $$("collection.manager.structure.saved_searches"),
            open: is_search,
            children: search_collections
          });
          if (_this.hasSearchCollection()) {
            _this.__searchCollection.addChild(_this.__searchCollectionsRoot);
          } else {
            collections.push(_this.__searchCollectionsRoot);
          }
        }
        if (root_collections[0] instanceof CollectionSystemRoot) {
          root_collections[0].setClass("ez5-folder-header");
        }
        if (own_collections[0] instanceof CollectionSystemUser) {
          own_collections[0].setClass("ez5-folder-header");
        }
        collections.push.apply(collections, root_collections);
        if (_this.hasOwnCollections()) {
          collections.push.apply(collections, own_collections);
        }
        if (shared_collections.length) {
          collections.push(new CollectionStructure({
            displayname: $$(_this.getDisplayNameKeyForSharedCollections()),
            "class": "ez5-folder-header",
            open: is_search || own_collections.length === 0,
            children: shared_collections
          }));
        }
        return CUI.chunkWork.call(_this, {
          chunk_size: 1,
          items: own_collections,
          call: function(items) {
            return items[0].prepareCurrentTools();
          }
        }).done(function() {
          return _this.tree.load_data(collections).done(function() {
            _this.setStatus();
            return dfr.resolve();
          });
        }).fail(dfr.reject);
      };
    })(this));
    return dfr.promise();
  };

  CollectionManager.prototype.getSearchObjectypes = function() {
    return this.getSearch().getSearchObjecttypes(false);
  };

  CollectionManager.prototype.getDisplayNameKeyForSharedCollections = function() {
    return "collection.manager.shared_collections";
  };

  CollectionManager.prototype.getDisplayNameKeyForOwnCollections = function() {
    return "collection.manager.own_collections";
  };

  CollectionManager.prototype.getCollectionSelection = function() {
    assert(this.__collectionSelection, "CollectionManager.getCollectionSelection", "There is no selection collection.", {
      opts: this.opts
    });
    return this.__collectionSelection;
  };

  CollectionManager.prototype.addCollection = function(c, father_node) {
    if (father_node == null) {
      father_node = this.getTopCreateCollection();
    }
    assert(father_node instanceof CollectionStorable, "CollectionManager.addCollection", "Father needs to be instance of CollectionStorable, and have an ID.", {
      father_node: father_node
    });
    assert(c instanceof CollectionStorable, "CollectionManager.addCollection", "Collection needs to be instance of CollectionStorable.", {
      collection: c
    });
    c.getData().collection._id_parent = father_node.getId();
    c.setManager(this);
    return this.__callFuncOnNode("openUpwards", father_node.addChild(c));
  };

  CollectionManager.prototype.__callFuncOnNode = function(func, promise) {
    var dfr;
    dfr = new CUI.Deferred();
    promise.fail(dfr.reject).done((function(_this) {
      return function(node) {
        return node[func]().fail(dfr.reject).done(function(node) {
          return dfr.resolve(node);
        });
      };
    })(this));
    return dfr.promise();
  };

  CollectionManager.prototype.newCollection = function(cls, father_node) {
    var c;
    c = new cls({
      manager: this
    });
    c.setData({
      collection: {}
    });
    return this.__callFuncOnNode("edit", this.addCollection(c, father_node));
  };

  CollectionManager.prototype.addStoredSearch = function(c) {
    var father_node;
    father_node = this.getTopCreateCollection();
    assert(c instanceof CollectionStoredSearch, "CollectionManager.addStoredSearch", "Collection needs to be instance of CollectionStoredSearch, and have an ID.", {
      father_node: father_node
    });
    assert(father_node instanceof CollectionStorable, "CollectionManager.addCollection", "Father needs to be instance of CollectionStorable, and have an ID.", {
      father_node: father_node
    });
    c.getData().collection._id_parent = father_node.getId();
    c.setManager(this);
    return this.__callFuncOnNode("edit", this.__searchCollectionsRoot.addChild(c));
  };

  return CollectionManager;

})(CUI.DOM);

ez5.session_ready((function(_this) {
  return function() {
    return ez5.rootMenu.registerAppLoader(new CollectionManagerLoader());
  };
})(this));

CollectionManagerLoader = (function(superClass) {
  extend(CollectionManagerLoader, superClass);

  function CollectionManagerLoader() {
    return CollectionManagerLoader.__super__.constructor.apply(this, arguments);
  }

  CollectionManagerLoader.prototype.findAppByLocation = function(location, apps) {
    var app, i, len;
    if (location.pathname.match("^/collection/(.*)")) {
      for (i = 0, len = apps.length; i < len; i++) {
        app = apps[i];
        if ((typeof app.getPathname === "function" ? app.getPathname() : void 0) === "/main") {
          return CUI.resolvedPromise(app);
        }
      }
    }
    return CUI.rejectedPromise();
  };

  return CollectionManagerLoader;

})(RootMenuAppLoader);
// Generated by CoffeeScript 1.10.0
var SearchCollection,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SearchCollection = (function(superClass) {
  extend(SearchCollection, superClass);

  function SearchCollection() {
    return SearchCollection.__super__.constructor.apply(this, arguments);
  }

  SearchCollection.prototype.initOpts = function() {
    SearchCollection.__super__.initOpts.call(this);
    return this.addOpts({
      collection: {
        mandatory: true,
        check: CollectionWithDetail
      },
      container: {
        check: function(v) {
          return isElement(v);
        }
      }
    });
  };

  SearchCollection.prototype.readOpts = function() {
    SearchCollection.__super__.readOpts.call(this);
    this.collection = this._collection;
    this.container = this._container;
    return this.tempCollection = this.getNewTempCollection();
  };

  SearchCollection.prototype.hasSearchBasics = function() {
    return false;
  };

  SearchCollection.prototype.updateInfo = function() {
    var btns, info;
    if (this.collection.getManager().hasCollectionInfoBlock()) {
      info = this.collection.getInfo();
      if (info) {
        this.__infoBlock.setContent(info);
        CUI.DOM.showElement(this.__infoBlock.DOM);
      } else {
        CUI.DOM.hideElement(this.__infoBlock.DOM);
      }
    }
    this.__title.setText(this.collection.renderNameAsText());
    btns = Toolbox.mergeFlyoutButtons(this.tempCollection.getButtons(), this.collection.getButtons());
    this.getButtonToolbar().replace(btns, "right");
    return this;
  };

  SearchCollection.prototype.getSearchInput = function() {};

  SearchCollection.prototype.getNewTempCollection = function() {
    return new CollectionMemory({
      sidebar: this._collection.getManager().getSidebar(),
      search: this,
      manager: this._collection.getManager(),
      parent_collection: this._collection
    });
  };

  SearchCollection.prototype.init = function() {
    var buttonbar, closePaneButton, proModeButton;
    if (this.collection.getManager().hasCollectionInfoBlock()) {
      this.__infoBlock = new Block({
        text: ""
      });
      CUI.DOM.hideElement(this.__infoBlock.DOM);
    }
    this.__title = new Label({
      icon: this.collection.icon(),
      text: this.collection.renderNameAsText()
    });
    closePaneButton = this.collection.getManager().getClosePaneButtonCenter();
    proModeButton = this.collection.getManager().getProModeButtonForCollection();
    if (closePaneButton || proModeButton) {
      buttonbar = new Buttonbar({
        buttons: [closePaneButton, proModeButton]
      });
    } else {
      buttonbar = null;
    }
    this.__pane = new Pane({
      "class": "ez5-search-collection-pane cui-pane--window",
      top: {
        "class": "ez5-search-collection-pane-top",
        content: [
          new PaneHeader({
            auto_buttonbar: false,
            left: {
              content: [this.__title]
            },
            right: {
              content: buttonbar
            }
          }), this.__infoBlock, this.__buttonToolbar = new PaneToolbar({
            "class": "ez5-search-collection-toolbar"
          })
        ]
      },
      center: {
        "class": "ez5-search-collection-center"
      }
    });
    this.rc = this.__pane.center();
    Events.listen({
      node: this.__pane,
      type: "toolbox",
      call: (function(_this) {
        return function(ev, info) {
          info.tools.push.apply(info.tools, _this._collection.getCurrentTools());
          return ev.stopPropagation();
        };
      })(this)
    });
    this.container.append(this.__pane.DOM);
    this.registerResultContainer(this.rc);
    this.addResultSearchManager();
    return CUI.chainedCall(SearchCollection.__super__.init.call(this), (function(_this) {
      return function() {
        return _this.execute();
      };
    })(this), (function(_this) {
      return function() {
        _this.updateInfo();
        return _this.collection.on({
          type: ["insert", "remove", "update"],
          call: function(ev, info) {
            if (info.skip_update) {
              _this.updateInfo();
            }
          }
        });
      };
    })(this), (function(_this) {
      return function() {
        Events.trigger({
          node: _this.rc,
          type: "content-resize"
        });
        return _this.tempCollection.on({
          type: ["insert", "remove", "update"],
          call: function(ev, info) {
            _this.updateInfo();
          }
        });
      };
    })(this));
  };

  SearchCollection.prototype.CSSVariants = function() {
    return [
      {
        type: "choice",
        classes: [
          {
            label: "main.search.view.result.mini",
            "class": "result-standard-mini"
          }, {
            label: "main.search.view.result.midi",
            "class": "result-standard-midi"
          }
        ]
      }
    ];
  };

  SearchCollection.prototype.addResultSearchManager = function() {
    var sel_opts;
    if (this.tempCollection) {
      sel_opts = {
        collection: this.tempCollection
      };
    }
    this.addSearchManager(new ResultManager({
      pref: "search_collection_view_data",
      managers: [
        this.__resultStandard = new ResultStandard({
          container: this.getResultContainer(),
          page_size: 10,
          selectable_opts: sel_opts
        })
      ]
    }));
    return this;
  };

  SearchCollection.prototype.getButtonToolbar = function() {
    return this.__buttonToolbar;
  };

  SearchCollection.prototype.getDetailShareUrl = function(sid) {
    return "/detail/" + sid;
  };

  SearchCollection.prototype.destroy = function() {
    if (this.__pane) {
      Events.ignore({
        node: this.__pane
      });
    }
    return SearchCollection.__super__.destroy.call(this);
  };

  SearchCollection.prototype.getExportObjecttypes = function(request) {
    var dfr, req;
    req = {
      type: "object",
      search: request.cleanRequestForSearch().search,
      limit: 0,
      aggregations: {
        _mask: {
          type: "term",
          limit: 100000,
          field: "_mask"
        }
      }
    };
    dfr = new CUI.Deferred();
    ez5.api.search({
      json_data: req
    }).done((function(_this) {
      return function(data) {
        var i, len, otm, ref, term;
        otm = new ObjecttypeManager();
        ref = data.aggregations._mask.terms;
        for (i = 0, len = ref.length; i < len; i++) {
          term = ref[i];
          otm.addMask(Mask.getMaskByMaskName(term.term));
        }
        console.debug("gathered export datatypes...", otm, data);
        return dfr.resolve(otm.getObjecttypes());
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  SearchCollection.prototype.getSearchObjecttypes = function() {
    return assert(false, (getObjectClass(this)) + ".getSearchObjecttypes", "Unsupported by most Collections, thats why this is not implemented.");
  };

  SearchCollection.prototype.getSearchCollection = function() {
    return this._collection;
  };

  SearchCollection.prototype.getCollection = function() {
    return this.tempCollection;
  };

  SearchCollection.prototype.addToRequest = function(request) {
    request.objecttypes = void 0;
    this.collection.addToRequest(request);
    SearchCollection.__super__.addToRequest.call(this, request);
  };

  SearchCollection.prototype.executeSearch = function(req_data) {
    if (CUI.isFunction(this.collection.executeSearch)) {
      return this.collection.executeSearch(req_data);
    } else {
      return SearchCollection.__super__.executeSearch.call(this, req_data);
    }
  };

  return SearchCollection;

})(Search);
// Generated by CoffeeScript 1.10.0
var SearchCollectionHeadless,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SearchCollectionHeadless = (function(superClass) {
  extend(SearchCollectionHeadless, superClass);

  function SearchCollectionHeadless() {
    return SearchCollectionHeadless.__super__.constructor.apply(this, arguments);
  }

  SearchCollectionHeadless.prototype.readOpts = function() {
    SearchCollectionHeadless.__super__.readOpts.call(this);
    return this.init();
  };

  SearchCollectionHeadless.prototype.getNewTempCollection = function() {};

  SearchCollectionHeadless.prototype.init = function() {
    return Search.prototype.init.call(this);
  };

  SearchCollectionHeadless.prototype.executeSearch = function() {
    return Search.prototype.executeSearch.apply(this, arguments);
  };

  return SearchCollectionHeadless;

})(SearchCollection);
// Generated by CoffeeScript 1.10.0
var DetailHierarchyList,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DetailHierarchyList = (function(superClass) {
  extend(DetailHierarchyList, superClass);

  function DetailHierarchyList() {
    return DetailHierarchyList.__super__.constructor.apply(this, arguments);
  }

  DetailHierarchyList.prototype.initOpts = function() {
    DetailHierarchyList.__super__.initOpts.call(this);
    return this.addOpts({
      sidebar: {
        check: Sidebar
      },
      container: {
        mandatory: true,
        check: function(v) {
          return isElement(v);
        }
      }
    });
  };

  DetailHierarchyList.prototype.readOpts = function() {
    DetailHierarchyList.__super__.readOpts.call(this);
    return this.__collection = new DetailHierarchyListCollection({
      sidebar: this._sidebar
    });
  };

  DetailHierarchyList.prototype.hasSearchBasics = function() {
    return false;
  };

  DetailHierarchyList.prototype.init = function() {
    var resultList;
    resultList = new DetailHierarchyListResult({
      container: this._container,
      show_navigation: false,
      open_nodes: true,
      selectable_opts: {
        collection: this.__collection,
        draggable: false,
        lasso: false,
        toolbox: false,
        select: true,
        deselect: false
      }
    });
    resultList.setData(resultList.getViewDataDefault());
    this.registerResultContainer(this._container);
    this.addSearchManager(resultList);
    this.addSearchManager(new SortManagerStandard());
    return DetailHierarchyList.__super__.init.call(this);
  };

  DetailHierarchyList.prototype.loadObject = function(__object) {
    var co;
    this.__object = __object;
    co = this.__object.getCollectionObject();
    if (this.__collection.objectIdx(co) === -1) {
      this.__collection.insertObjects([co], null, {
        skip_update: true
      });
      this.otm = new ObjecttypeManager();
      this.otm.addObjecttypes((function(_this) {
        return function(table) {
          return table.name() === _this.__object.objecttype();
        };
      })(this));
      return this.execute();
    }
  };

  DetailHierarchyList.prototype.getSearchObjecttypes = function() {
    return this.otm.objecttypes;
  };

  DetailHierarchyList.prototype.getObjecttype = function() {
    return this.getSearchObjecttypes()[0];
  };

  DetailHierarchyList.prototype.addToRequest = function(request) {
    request.search = [
      {
        type: "in",
        bool: "must",
        fields: [this.getObjecttype().name() + "._id"],
        "in": [this.__object.getRootId()]
      }
    ];
    return DetailHierarchyList.__super__.addToRequest.call(this, request);
  };

  return DetailHierarchyList;

})(Search);
// Generated by CoffeeScript 1.10.0
var DetailHierarchyListCollection,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DetailHierarchyListCollection = (function(superClass) {
  extend(DetailHierarchyListCollection, superClass);

  function DetailHierarchyListCollection() {
    return DetailHierarchyListCollection.__super__.constructor.apply(this, arguments);
  }

  DetailHierarchyListCollection.prototype.isSingleMode = function() {
    return true;
  };

  return DetailHierarchyListCollection;

})(CollectionMemory);
// Generated by CoffeeScript 1.10.0
var DetailHierarchyListResult,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DetailHierarchyListResult = (function(superClass) {
  extend(DetailHierarchyListResult, superClass);

  function DetailHierarchyListResult() {
    return DetailHierarchyListResult.__super__.constructor.apply(this, arguments);
  }

  DetailHierarchyListResult.prototype.renderStandard = function(result_object) {
    return result_object.renderCard1(false, false);
  };

  return DetailHierarchyListResult;

})(ResultList);
// Generated by CoffeeScript 1.10.0
var DetailSidebar,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DetailSidebar = (function(superClass) {
  extend(DetailSidebar, superClass);

  function DetailSidebar() {
    return DetailSidebar.__super__.constructor.apply(this, arguments);
  }

  DetailSidebar.prototype.initOpts = function() {
    DetailSidebar.__super__.initOpts.call(this);
    return this.addOpts({
      asset_browser_idx: {
        "default": 0,
        check: "Integer"
      },
      sidebar: {
        mandatory: true,
        check: Sidebar
      },
      search: {
        check: Search
      },
      offset: {
        check: function(v) {
          return v >= 0;
        }
      },
      global_object_id: {
        mandatory: true,
        check: String
      }
    });
  };

  DetailSidebar.prototype.readOpts = function() {
    DetailSidebar.__super__.readOpts.call(this);
    this.detail_data = {
      mask_name: this._mask_name
    };
    this.__global_object_id = this._global_object_id;
    return this.__offset = this._offset;
  };

  DetailSidebar.prototype.getShareUrl = function() {
    if (!this.object) {
      return null;
    }
    if (!this.getSearch()) {
      return null;
    }
    return this.getSearch().getDetailShareUrl(this.object.getSystemObjectId());
  };

  DetailSidebar.prototype.render = function() {
    this.toolbar = new PaneToolbar();
    this.paneHeader = new PaneHeader();
    this.mainPane = new Pane({
      "class": "ez5-detail-main-pane",
      top: {
        "class": "ez5-detail-asset-browser",
        flexHandle: {
          hidden: false,
          closed: true,
          state_name: "detail-sidebar"
        }
      }
    });
    this.browserLayout = new HorizontalLayout({
      "class": "ez5-detail-layout",
      left: {
        "class": "ez5-detail-layout-hierarchy",
        flexHandle: {
          hidden: false,
          closed: true,
          closable: false,
          state_name: "detail-sidebar-hierarchy"
        }
      },
      center: {
        content: this.mainPane
      }
    });
    this.initHierarchyList();
    this.container = new Pane({
      "class": "ez5-detail-container cui-pane--window",
      top: {
        content: [this.paneHeader, this.toolbar]
      },
      center: {
        content: this.browserLayout
      },
      bottom: {
        content: new PaneFooter({
          "class": "ez5-detail-container-bottom",
          center: {
            content: $div()
          }
        })
      }
    });
    Events.listen({
      type: "asset-browser-show-asset",
      node: this.container,
      call: (function(_this) {
        return function(ev, info) {
          if (!_this.assetBrowserButton.isActive()) {
            _this.assetBrowserButton.activate();
          }
          return Events.trigger({
            node: _this.__assetBrowser,
            type: "show-asset",
            info: info
          });
        };
      })(this)
    });
    EventPoller.listen({
      instance: this,
      filter: (function(_this) {
        return function(event) {
          var ref;
          return event.global_object_id === ((ref = _this.getResultObject()) != null ? ref.getGlobalObjectId() : void 0) && event.type === "OBJECT_DELETE";
        };
      })(this),
      call: (function(_this) {
        return function() {
          return _this._sidebar.empty();
        };
      })(this)
    });
    Events.listen({
      type: "flex-close",
      node: this.container,
      instance: this,
      call: (function(_this) {
        return function() {
          return _this.destroyActiveTool();
        };
      })(this)
    });
    return this.container;
  };

  DetailSidebar.prototype.initHierarchyList = function() {
    this.__hierarchyList = new DetailHierarchyList({
      object: this.object,
      sidebar: this._sidebar,
      container: this.browserLayout.left()
    });
    return this.__hierarchyList.init();
  };

  DetailSidebar.prototype.load = function() {
    var dfr;
    dfr = new CUI.Deferred();
    ResultObject.loadFromData({
      _global_object_id: this.__global_object_id
    }, "long", true, false, true).done((function(_this) {
      return function(object) {
        var best;
        _this.object = object;
        if (!_this.container || _this.container.isDestroyed()) {
          dfr.reject();
          return;
        }
        best = _this.object.getBestMaskName();
        if (!_this.detail_data.mask_name) {
          _this.detail_data.mask_name = best;
        } else if (_this.detail_data.mask_name !== best) {
          _this.detail_data.mask_name = _this.object.setDataByMaskName(_this.detail_data.mask_name);
        }
        EventPoller.saveEvent({
          type: "DETAIL_VIEW",
          info: {
            global_object_id: _this.__global_object_id
          }
        });
        return _this.renderObject().done(dfr.resolve).fail(dfr.reject);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  DetailSidebar.prototype.empty = function() {
    return this.container.DOM.empty().append(new EmptyLabel({
      centered: true,
      text: $$("main.detail.content.no_data.label")
    }).DOM);
  };

  DetailSidebar.prototype.getMainSearch = function() {
    return this._sidebar.getSearch();
  };

  DetailSidebar.prototype.getSearch = function() {
    return this._search || this._sidebar.getSearch();
  };

  DetailSidebar.prototype.getResultObject = function() {
    return this.object;
  };

  DetailSidebar.prototype.destroy = function() {
    var ref, ref1;
    DetailSidebar.__super__.destroy.call(this);
    if ((ref = this.__hierarchyList) != null) {
      ref.destroy();
    }
    this.__hierarchyList = null;
    if ((ref1 = this.container) != null) {
      ref1.destroy();
    }
    this.container = null;
    this.destroyAssetBrowser();
    return Events.ignore({
      instance: this
    });
  };

  DetailSidebar.prototype.canUpdate = function() {
    if (this.container && !this.container.isDestroyed() && CUI.DOM.isInDOM(this.container.DOM)) {
      return true;
    } else {
      return false;
    }
  };

  DetailSidebar.prototype.update = function(_opts) {
    var i, k, len, opts, ref;
    opts = CUI.Element.readOpts(_opts, "DetailSidebar.update", {
      search: {
        check: Search
      },
      offset: {
        check: function(v) {
          return v >= 0;
        }
      },
      global_object_id: {
        mandatory: true,
        check: String
      }
    });
    ref = ['search', 'offset'];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      if (opts[k] !== void 0) {
        this['__' + k] = opts[k];
      }
    }
    if (this.__global_object_id === opts.global_object_id) {
      console.info("Already loaded.");
      return CUI.resolvedPromise();
    }
    this.__global_object_id = opts.global_object_id;
    return this.load();
  };

  DetailSidebar.prototype.destroyAssetBrowser = function() {
    var ref;
    if ((ref = this.__assetBrowser) != null) {
      ref.destroy();
    }
    this.__assetBrowser = null;
    if (this.__assetBrowserInfoControl) {
      this.__assetBrowserInfoControl.destroy();
      CUI.DOM.remove(this.__assetBrowserInfoControl);
      this.__assetBrowserInfoControl = null;
    }
    return this;
  };

  DetailSidebar.prototype.updateAssetBrowser = function() {
    var assets;
    this.destroyAssetBrowser();
    assets = this.object.getAssetsForBrowser("detail");
    if (assets === false || assets.length === 0) {
      this.assetBrowserButton.hide();
      this.mainPane.getFlexHandle("top").close().hide();
      this.mainPane.top().hide();
    } else if (this.assetBrowserButton.isActive()) {
      this.__assetBrowser = new AssetBrowser({
        hires: true,
        img_alt: this.object.renderAltText(),
        assets: assets,
        start_idx: this._asset_browser_idx
      });
      this.mainPane.append(this.__assetBrowser, "top");
      this.assetBrowserButton.show();
      this.__assetBrowserInfoControl = new AssetBrowserInfoControl({
        assetBrowser: this.__assetBrowser,
        show_info_button: ez5.session.hasSystemRight("root", "frontend_features[asset_browser_metadata_tool]"),
        onUpdate: (function(_this) {
          return function(control) {
            return CUI.DOM.setClass(_this.mainPane.DOM, "ez5-detail-sidebar--control-info", control.getInfoState());
          };
        })(this)
      });
      this.mainPane.prepend(this.__assetBrowserInfoControl, "center");
      this.mainPane.getFlexHandle("top").open().show();
      this.mainPane.top().show();
    } else {
      this.mainPane.getFlexHandle("top").close().hide();
      this.mainPane.top().hide();
    }
    return this;
  };

  DetailSidebar.prototype.getFieldsRendererSetStyle = function() {
    return false;
  };

  DetailSidebar.prototype.loadGlobalObjectId = function(gid) {
    return this._sidebar.allow_unload().done((function(_this) {
      return function() {
        return _this._sidebar.loadDetail({
          global_object_id: gid
        });
      };
    })(this));
  };

  DetailSidebar.prototype.renderObject = function() {
    var active, bb, buttons, card_div, detail_div, dfr, disabled, editBtn, fh, hierarchyBtn, hpref, mode, msf;
    this.paneHeader.replace(this.object.renderTitle(), "left");
    this.object.setCSSClasses(this.container);
    buttons = [];
    if (this.getResultObject().getRights().write) {
      editBtn = new LocaButton({
        "class": "ez5-detail-sidebar-editor-button",
        loca_key: "detail.sidebar.button.edit",
        onClick: (function(_this) {
          return function() {
            editBtn.startSpinner();
            return _this._sidebar.loadEditor({
              global_object_id: _this.__global_object_id
            }).fail(function() {
              return editBtn.stopSpinner();
            });
          };
        })(this)
      });
      buttons.push(editBtn);
    }
    buttons.push({
      icon: "close",
      loca_key: "detail.sidebar.button.close",
      onClick: (function(_this) {
        return function() {
          return _this._sidebar.hideSidebar();
        };
      })(this)
    });
    this.paneHeader.replace(buttons, "right");
    this.assetBrowserButton = new LocaButton({
      loca_key: "detail.sidebar.asset-browser.button",
      active: ez5.session.getPref("show_asset_browser"),
      "switch": true,
      activate_initial: false,
      onActivate: (function(_this) {
        return function(btn, flags) {
          ez5.session.saveCookiePref("show_asset_browser", true);
          return _this.updateAssetBrowser();
        };
      })(this),
      onDeactivate: (function(_this) {
        return function(btn, flags) {
          ez5.session.saveCookiePref("show_asset_browser", false);
          return _this.updateAssetBrowser();
        };
      })(this)
    });
    msf = new MaskFieldSelectorDetail({
      mask_name: this.detail_data.mask_name,
      masks: this.object.getAvailableMasks(),
      onChanged: (function(_this) {
        return function(old_mask, new_mask) {
          _this.detail_data.mask_name = _this.object.setDataByMaskName(new_mask);
          _this.renderObject();
          return CUI.resolvedPromise();
        };
      })(this)
    });
    fh = this.browserLayout.getFlexHandle("left");
    if (this.object.mask.isHierarchy()) {
      hpref = "detail_sidebar_show_hierarchy";
      if (this.object.hasChildren() || this.object.getParentId()) {
        disabled = false;
        active = ez5.session.getPref(hpref);
      } else {
        disabled = true;
        active = false;
      }
      hierarchyBtn = new LocaButton({
        loca_key: "detail.sidebar.hierarchy.button",
        active: active,
        "switch": true,
        disabled: disabled,
        onActivate: (function(_this) {
          return function(btn, flags) {
            if (!flags.initial_activate) {
              ez5.session.saveCookiePref(hpref, true);
            }
            fh.open();
            return _this.__hierarchyList.loadObject(_this.object);
          };
        })(this),
        onDeactivate: (function(_this) {
          return function(btn, flags) {
            if (!flags.initial_activate) {
              ez5.session.saveCookiePref(hpref, false);
            }
            return fh.close();
          };
        })(this)
      });
    } else {
      fh.close();
      hierarchyBtn = null;
    }
    bb = new Buttonbar({
      buttons: [hierarchyBtn, this.assetBrowserButton, msf.getSelect().start()]
    });
    this.toolbar.replace(bb, "left");
    this.toolbar.replace(Toolbox.getFlyoutButtonbar(this.getCurrentTools()), "right");
    this.mainPane.empty("center");
    this.updateAssetBrowser();
    dfr = new CUI.Deferred();
    mode = "detail";
    detail_div = this.object.renderDetail(mode, "detail-header", {
      detail: this,
      onDone: dfr.resolve,
      onFail: dfr.reject,
      maximize: false
    });
    card_div = this.object.renderCard1();
    CUI.DOM.addClass(card_div, "ez5-detail-card");
    this.mainPane.append(card_div, "center");
    this.mainPane.append(detail_div, "center");
    return dfr.promise();
  };

  DetailSidebar.prototype.destroyActiveTool = function() {
    var ref, ref1;
    return (ref = this.__assetBrowser) != null ? (ref1 = ref.getActiveTool()) != null ? ref1.destroy() : void 0 : void 0;
  };

  DetailSidebar.prototype.getCurrentTools = function() {
    var dm, tools;
    tools = [];
    if (!this.object) {
      return;
    }
    if (ez5.session.hasSystemRight("root", "frontend_features[download]")) {
      dm = new DownloadManager({
        result_object: this.object
      });
      if (dm.hasDownloadableVersion()) {
        tools.push(new ToolboxTool({
          name: "detail.download",
          favorite: true,
          loca_key: "detail.sidebar.download.button",
          run: (function(_this) {
            return function() {
              return dm.startExport();
            };
          })(this)
        }));
      }
    }
    if (ez5.session.hasSystemRight("root", "frontend_features[export]")) {
      tools.push(new ToolboxTool({
        loca_key: "detail.sidebar.export.button",
        name: "detail.export",
        run: (function(_this) {
          return function() {
            var col;
            col = new CollectionMemory();
            return col.insertObjects([_this.object.getCollectionObject()]).done(function() {
              return new ExportManager({
                search: new SearchCollectionHeadless({
                  collection: col
                })
              }).prepareExport();
            });
          };
        })(this)
      }));
    }
    if (this.object.getAssetsForBrowser("detail") !== false) {
      tools.push(new ToolboxTool({
        name: "detail.fullscreen",
        favorite: true,
        loca_key: "detail.sidebar.button.fullscreen",
        run: (function(_this) {
          return function() {
            var ref, search;
            _this.destroyActiveTool();
            if (_this.__offset >= 0) {
              search = _this.getSearch();
              if (!(search instanceof SearchCollection)) {
                if (idxInArray(null, search.getSearchObjecttypes(), function(ot) {
                  return ot.name() === _this.object.objecttype();
                }) === -1) {
                  search = null;
                }
              }
            }
            return new DetailFullscreen({
              global_object_id: _this.__global_object_id,
              search: search,
              offset: _this.__offset,
              asset_browser_idx: (ref = _this.__assetBrowser) != null ? ref.getCurrentIdx() : void 0
            });
          };
        })(this)
      }));
    }
    if (ez5.session.hasSystemRight("root", "frontend_features[print]")) {
      tools.push(new ToolboxTool({
        name: "detail.print",
        loca_key: "detail.print.button",
        run: (function(_this) {
          return function(ev, btn) {
            var pm;
            pm = new PrintManager({
              result_object: _this.object
            });
            return pm.print();
          };
        })(this)
      }));
    }
    if (ez5.session.hasSystemRight("root", "frontend_features[deep_link_sharing]")) {
      tools.push(new ToolboxTool({
        name: "detail.share",
        favorite: true,
        loca_key: "detail.sidebar.button.share",
        run: (function(_this) {
          return function() {
            return _this.object.presentShareUrls();
          };
        })(this)
      }));
    }
    tools.push.apply(tools, this.object.getDetailTools({
      search: this.getMainSearch()
    }));
    return tools;
  };

  return DetailSidebar;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var ResultDetailFullscreen,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ResultDetailFullscreen = (function(superClass) {
  extend(ResultDetailFullscreen, superClass);

  function ResultDetailFullscreen() {
    return ResultDetailFullscreen.__super__.constructor.apply(this, arguments);
  }

  ResultDetailFullscreen.prototype.readOpts = function() {
    ResultDetailFullscreen.__super__.readOpts.call(this);
    this.__containers = [this._container, this._container_thumbnails];
    this.__names = ["long", "thumbnail"];
    return this.__render_types = ["hires", "standard"];
  };

  ResultDetailFullscreen.prototype.initOpts = function() {
    ResultDetailFullscreen.__super__.initOpts.call(this);
    return this.addOpts({
      container: {
        mandatory: true,
        check: function(v) {
          return isElement(v);
        }
      },
      container_thumbnails: {
        mandatory: true,
        check: function(v) {
          return isElement(v);
        }
      },
      page_size: {
        mandatory: true,
        check: function(v) {
          return v >= 1;
        }
      }
    });
  };

  ResultDetailFullscreen.prototype.init = function() {
    var c, i, idx, len, ref, results;
    ref = this.__containers;
    results = [];
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      c = ref[idx];
      results.push(new ResultDynamicLoading({
        container: c,
        search: this.getSearch()
      }));
    }
    return results;
  };

  ResultDetailFullscreen.prototype.addToRequest = function(request) {
    request.limit = this._page_size || 100;
    if (request.offset % request.limit !== 0) {
      request.offset = Math.floor(request.offset / request.limit) * request.limit;
    }
    request.format = "short";
    return request._ignore_hierarchy = true;
  };

  ResultDetailFullscreen.prototype.showResult = function(request, data) {
    var c_idx, cnt, d, i, idx, j, len, len1, loader, o, offset, ref, ref1;
    ref = this.__containers;
    for (c_idx = i = 0, len = ref.length; i < len; c_idx = ++i) {
      cnt = ref[c_idx];
      cnt.empty();
      loader = DOM.data(cnt[0], "loader");
      ref1 = data.objects;
      for (idx = j = 0, len1 = ref1.length; j < len1; idx = ++j) {
        o = ref1[idx];
        offset = request.offset + idx;
        d = loader.getPlaceholder({
          "class": "result-detail-fullscreen-" + this.__names[c_idx],
          offset: offset,
          idx: idx,
          request: request,
          object: o,
          render_type: this.__render_types[c_idx]
        });
        cnt.append(d);
      }
      loader.markLoadMe();
    }
    return this;
  };

  return ResultDetailFullscreen;

})(SearchManager);
// Generated by CoffeeScript 1.10.0
var DetailFullscreen,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DetailFullscreen = (function(superClass) {
  extend(DetailFullscreen, superClass);

  function DetailFullscreen() {
    return DetailFullscreen.__super__.constructor.apply(this, arguments);
  }

  DetailFullscreen.prototype.initOpts = function() {
    DetailFullscreen.__super__.initOpts.call(this);
    return this.addOpts({
      global_object_id: {
        check: String
      },
      search: {
        check: Search
      },
      collection: {
        check: CollectionWithDetail
      },
      offset: {
        "default": 0,
        check: function(v) {
          return v >= 0;
        }
      },
      asset_browser_idx: {
        check: function(v) {
          return v >= 0;
        }
      }
    });
  };

  DetailFullscreen.prototype.readOpts = function() {
    DetailFullscreen.__super__.readOpts.call(this);
    this.__asset_browser_idx = parseInt(this._asset_browser_idx) || 0;
    this.__global_object_id = this._global_object_id;
    this.render();
    document.body.appendChild(this.container.DOM);
    return this.load();
  };

  DetailFullscreen.prototype.destroy = function() {
    var ref;
    if ((ref = this.container) != null) {
      ref.destroy();
    }
    this.container = null;
    Events.ignore({
      instance: this
    });
    return DetailFullscreen.__super__.destroy.call(this);
  };

  DetailFullscreen.prototype.render = function() {
    var clsBtn, fullscreenBtn;
    this.container = new Template({
      name: CUI.__ng__ ? "ng-detail-fullscreen" : "detail-fullscreen",
      map: {
        result: true,
        prev: true,
        next: true,
        info: true,
        object: true,
        header_left: true,
        header_center: true,
        header_right: true,
        bottom: true,
        bottom_left_scroll: true,
        bottom_right_scroll: true
      }
    });
    fullscreenBtn = new LocaButton({
      "switch": true,
      disabled: !DOM.fullscreenEnabled(),
      loca_key: "detail.fullscreen.button.fullscreen",
      icon_inactive: "resize_full",
      icon_active: "resize_small",
      activate_initial: false,
      onActivate: (function(_this) {
        return function(btn) {
          DOM.requestFullscreen(_this.container.DOM).done(function() {
            return btn.deactivate({
              position_only: true
            });
          });
        };
      })(this),
      onDeactivate: (function(_this) {
        return function(btn, flags, ev) {
          if (!flags.position_only) {
            DOM.exitFullscreen();
          }
        };
      })(this)
    });
    clsBtn = new LocaButton({
      loca_key: "detail.fullscreen.closed-button",
      "class": "ez5-detail-fullscreen-close-button",
      onClick: (function(_this) {
        return function() {
          return _this.destroy();
        };
      })(this)
    });
    this.container.append(new Buttonbar({
      buttons: [fullscreenBtn, clsBtn]
    }), "header_right");
    DOM.setClassOnMousemove({
      element: this.container.DOM,
      "class": "ez5-detail-fullscreen-mousemoved",
      instance: this,
      delayRemove: (function(_this) {
        return function() {
          return _this.__keep_mousemoved_class;
        };
      })(this)
    });
    Events.listen({
      type: "toolbox-before-show",
      instance: this,
      call: (function(_this) {
        return function(ev, info) {
          removeFromArray(null, info.tools, function(v) {
            var ref;
            return (ref = v.getName()) === "object.detail";
          });
        };
      })(this)
    });
    Events.listen({
      node: this.container.map.result,
      type: "click",
      instance: this,
      selector: ".result-dynamic[global-object-id]",
      call: (function(_this) {
        return function(ev) {
          var asset, div;
          div = ev.getCurrentTarget();
          asset = CUI.DOM.closestUntil(ev.getTarget(), ".ez-asset", div);
          return _this.scrollObjectIntoView(div.getAttribute("global-object-id"), parseInt(asset != null ? asset.getAttribute("asset-browser-idx") : void 0) || 0);
        };
      })(this)
    });
    Events.listen({
      type: "result-dynamic-loading-done",
      node: this.container.map.result,
      instance: this,
      call: (function(_this) {
        return function(ev) {
          if (_this.isDestroyed()) {
            return;
          }
          return _this.hideAndShowNaviButtons();
        };
      })(this)
    });
    this.initResultScroll();
    this.initObjectNavi();
    return this.container;
  };

  DetailFullscreen.prototype.scrollObjectIntoView = function(gid, asset_browser_idx) {
    var o_el, selector;
    o_el = this.container.map.object;
    selector = "div[global-object-id='" + gid + "']";
    this.__current_div = CUI.DOM.matchSelector(o_el, selector)[0];
    if (o_el.firstChild && this.__current_div) {
      CUI.DOM.setStyle(o_el.firstChild, {
        marginLeft: "-" + (parseInt(this.__current_div.attr("idx")) * 100) + "%"
      });
      CUI.DOM.data(o_el, "loader").showAsset(this.__current_div, asset_browser_idx);
      CUI.DOM.data(this.container.map.result, "loader").showAsset(gid, asset_browser_idx, true).done((function(_this) {
        return function() {
          var el;
          if (_this.isDestroyed()) {
            return;
          }
          el = CUI.DOM.matchSelector(_this.container.map.result, selector)[0];
          if (el) {
            return CUI.DOM.scrollIntoView(el);
          }
        };
      })(this));
      this.__asset_browser_idx = asset_browser_idx;
    } else {
      this.__asset_browser_idx = 0;
    }
    this.hideAndShowNaviButtons();
  };

  DetailFullscreen.prototype.getCurrent = function() {
    return this.__current_div;
  };

  DetailFullscreen.prototype.load = function() {
    var chunk, co, col, dfr, ref, start_search;
    dfr = new CUI.Deferred();
    chunk = 100;
    start_search = (function(_this) {
      return function(search) {
        return search.execute(new Request({
          offset: Math.floor(_this._offset / chunk) * chunk,
          exclusive_show: true,
          searchManagers: [
            new ResultDetailFullscreen({
              container: _this.container.map.object,
              container_thumbnails: _this.container.map.result,
              page_size: chunk
            })
          ]
        })).done(function() {
          if (_this.__global_object_id) {
            return _this.scrollObjectIntoView(_this.__global_object_id, _this.__asset_browser_idx);
          }
        }).fail(dfr.reject);
      };
    })(this);
    if (this._search) {
      chunk = ((ref = this._search.getLastData()) != null ? ref.limit : void 0) || 100;
      start_search(this._search);
    } else if (this._collection) {
      start_search(new SearchCollectionHeadless({
        collection: this._collection
      }));
    } else if (this.__global_object_id) {
      co = new CollectionObject({
        _global_object_id: this.__global_object_id
      });
      col = new CollectionMemory();
      col.insertObjects([co]).done((function(_this) {
        return function() {
          return start_search(new SearchCollectionHeadless({
            collection: col
          }));
        };
      })(this));
    }
    return dfr.promise();
  };

  DetailFullscreen.prototype.hideAndShowNaviButtons = function() {
    var ab_count, ab_idx, dim, obj;
    dim = DOM.getDimensions(this.container.map.result);
    if (dim.scrollLeft === 0) {
      this.container.map.bottom.addClass("ez5-detail-fullscreen-scroll-is-left");
    } else {
      this.container.map.bottom.removeClass("ez5-detail-fullscreen-scroll-is-left");
    }
    if (dim.scrollWidth - dim.scrollLeft - dim.clientWidth === 0) {
      this.container.map.bottom.addClass("ez5-detail-fullscreen-scroll-is-right");
    } else {
      this.container.map.bottom.removeClass("ez5-detail-fullscreen-scroll-is-right");
    }
    obj = this.getCurrent();
    if (obj) {
      ab_idx = this.__asset_browser_idx;
      ab_count = this.__getAssetCount(obj);
    }
    if ((obj != null ? obj.previousElementSibling : void 0) || ab_idx > 0) {
      this.container.removeClass("ez5-detail-fullscreen-hide-prev-button");
    } else {
      this.container.addClass("ez5-detail-fullscreen-hide-prev-button");
    }
    if ((obj != null ? obj.nextElementSibling : void 0) || ab_idx < ab_count - 1) {
      this.container.removeClass("ez5-detail-fullscreen-hide-next-button");
    } else {
      this.container.addClass("ez5-detail-fullscreen-hide-next-button");
    }
  };

  DetailFullscreen.prototype.initResultScroll = function() {
    var csTimeout, scrollContainer, stopScrollContainer;
    csTimeout = null;
    scrollContainer = (function(_this) {
      return function(diff, level) {
        if (level == null) {
          level = 0;
        }
        if (_this.isDestroyed()) {
          return;
        }
        _this.__keep_mousemoved_class = true;
        _this.container.map.result[0].scrollLeft += diff * (level + 1);
        _this.hideAndShowNaviButtons();
        return csTimeout = CUI.setTimeout(function() {
          return scrollContainer(diff, level + 1);
        }, 50);
      };
    })(this);
    this.hideAndShowNaviButtons();
    stopScrollContainer = (function(_this) {
      return function() {
        _this.__keep_mousemoved_class = false;
        CUI.clearTimeout(csTimeout);
        return csTimeout = null;
      };
    })(this);
    Events.listen({
      node: this.container.map.bottom_left_scroll,
      instance: this,
      type: "mousedown",
      call: function(ev) {
        return scrollContainer(-1);
      }
    });
    Events.listen({
      node: this.container.map.bottom_right_scroll,
      type: "mousedown",
      instance: this,
      call: function(ev) {
        return scrollContainer(1);
      }
    });
    Events.listen({
      node: this.container.map.bottom_left_scroll,
      type: "mouseup",
      instance: this,
      call: function(ev) {
        return stopScrollContainer();
      }
    });
    return Events.listen({
      node: this.container.map.bottom_right_scroll,
      type: "mouseup",
      instance: this,
      call: function(ev) {
        return stopScrollContainer();
      }
    });
  };

  DetailFullscreen.prototype.initObjectNavi = function() {
    var loadObj;
    Events.listen({
      type: "click",
      instance: this,
      node: this.container.map.prev,
      call: (function(_this) {
        return function(ev) {
          if (ev.hasModifierKey()) {
            loadObj("next");
          } else {
            loadObj("prev");
          }
        };
      })(this)
    });
    Events.listen({
      type: "click",
      instance: this,
      node: this.container.map.next,
      call: (function(_this) {
        return function(ev) {
          if (ev.hasModifierKey()) {
            loadObj("prev");
          } else {
            loadObj("next");
          }
        };
      })(this)
    });
    return loadObj = (function(_this) {
      return function(dir) {
        var ab_count, ab_idx, ab_load, gid, obj, obj_load;
        obj = _this.getCurrent();
        ab_idx = _this.__asset_browser_idx;
        if (dir === "prev") {
          if (ab_idx > 0) {
            ab_load = ab_idx - 1;
            obj_load = obj;
          } else {
            obj_load = obj.previousElementSibling;
            if (obj_load.length === 0) {
              return false;
            }
            ab_count = _this.__getAssetCount(obj_load);
            if (ab_count > 0) {
              ab_load = ab_count - 1;
            } else {
              ab_load = "";
            }
          }
        } else {
          ab_count = _this.__getAssetCount(obj);
          if (ab_idx < ab_count - 1) {
            ab_load = ab_idx + 1;
            obj_load = obj;
          } else {
            obj_load = obj.nextElementSibling;
            if (obj_load.length === 0) {
              return false;
            }
            if (_this.__getAssetCount(obj_load) > 0) {
              ab_load = 0;
            } else {
              ab_load = "";
            }
          }
        }
        gid = DOM.data(obj_load, "object")._global_object_id;
        return _this.scrollObjectIntoView(gid, ab_load);
      };
    })(this);
  };

  DetailFullscreen.prototype.__getAssetCount = function(obj) {
    var ref;
    return (ref = DOM.data(CUI.DOM.matchSelector(obj, ".cui-asset-browser")[0], "element")) != null ? ref.getAssets().length : void 0;
  };

  return DetailFullscreen;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var CSSSwitcher,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CSSSwitcher = (function(superClass) {
  extend(CSSSwitcher, superClass);

  function CSSSwitcher() {
    return CSSSwitcher.__super__.constructor.apply(this, arguments);
  }

  CSSSwitcher.prototype.initOpts = function() {
    CSSSwitcher.__super__.initOpts.call(this);
    return this.addOpts({
      variants: {
        mandatory: true,
        check: "Array"
      },
      data: {
        mandatory: true,
        check: "PlainObject"
      },
      element: {
        mandatory: true,
        check: function(v) {
          return isElement(v);
        }
      }
    });
  };

  CSSSwitcher.prototype.readOpts = function() {
    var i, len, ref, variant_group;
    CSSSwitcher.__super__.readOpts.call(this);
    ref = this._variants;
    for (i = 0, len = ref.length; i < len; i++) {
      variant_group = ref[i];
      CUI.Element.readOpts(variant_group, "new CSSSwitcher", {
        label: {
          mandatory: true,
          check: String
        },
        name: {
          mandatory: true,
          check: String
        },
        type: {
          mandatory: true,
          check: ["choice", "switch"]
        },
        classes: {
          mandatory: true,
          check: function(v) {
            return CUI.isArray(v) && v.length > 0;
          }
        }
      });
    }
    return this.setCSS();
  };

  CSSSwitcher.prototype.getVariantName = function(variant_group) {
    return "variant_" + variant_group.name;
  };

  CSSSwitcher.prototype.setCSS = function() {
    var cls, i, idx, j, len, len1, name, ref, ref1, results, variant_group;
    ref = this._variants;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      variant_group = ref[i];
      name = this.getVariantName(variant_group);
      ref1 = variant_group.classes;
      for (idx = j = 0, len1 = ref1.length; j < len1; idx = ++j) {
        cls = ref1[idx];
        this._element.removeClass(cls["class"]);
        if (!this._data.hasOwnProperty(name) || this._data[name] >= variant_group.classes.length || !variant_group.classes[this._data[name]]) {
          this._data[name] = idx;
        }
      }
      cls = variant_group.classes[this._data[name]]["class"];
      results.push(this._element.addClass(cls));
    }
    return results;
  };

  CSSSwitcher.prototype.getFields = function() {
    var cls, fields, i, idx, j, len, len1, name, opts, ref, ref1, variant_group;
    fields = [];
    ref = this._variants;
    for (i = 0, len = ref.length; i < len; i++) {
      variant_group = ref[i];
      opts = [];
      name = this.getVariantName(variant_group);
      ref1 = variant_group.classes;
      for (idx = j = 0, len1 = ref1.length; j < len1; idx = ++j) {
        cls = ref1[idx];
        opts.push({
          text: $$(cls.label),
          value: idx
        });
      }
      switch (variant_group.type) {
        case "choice":
          fields.push({
            form: {
              label: $$(variant_group.label)
            },
            type: Options,
            horizontal: false,
            radio: true,
            options: opts,
            name: name
          });
          break;
        case "switch":
          assert(variant_group.classes.length === 2, "CSSSwitcher.getFields", "variant of type 'switch' must have exactly 2 classes.", {
            variant: variant_group
          });
          fields.push({
            form: {
              label: $$(variant_group.label)
            },
            type: Checkbox,
            name: name,
            onDataChanged: function(data) {
              return CUI.debug("data changed", name, dump(data));
            },
            value_unchecked: opts[0].value,
            value: opts[1].value
          });
      }
    }
    return fields;
  };

  CSSSwitcher.prototype.render = function() {
    var btns, cls, fn, i, idx, j, len, len1, name, ref, ref1, variant_group;
    btns = [];
    ref = this._variants;
    for (i = 0, len = ref.length; i < len; i++) {
      variant_group = ref[i];
      name = this.getVariantName(variant_group);
      switch (variant_group.type) {
        case "choice":
          ref1 = variant_group.classes;
          fn = (function(_this) {
            return function(idx, name) {
              return btns.push(new Button({
                radio: name,
                group: name,
                active: parseInt(_this._data[name]) === idx,
                text: $$(cls.label) || idx + ":" + name,
                onClick: function() {
                  _this._data[name] = idx;
                  return _this.setCSS();
                }
              }));
            };
          })(this);
          for (idx = j = 0, len1 = ref1.length; j < len1; idx = ++j) {
            cls = ref1[idx];
            fn(idx, name);
          }
          break;
        case "switch":
          (function(_this) {
            return (function(variant_group, name) {
              return btns.push(new Button({
                "switch": true,
                group: name,
                active: parseInt(_this._data[name]) === 1,
                text: $$(variant_group.label),
                onDeactivate: function(btn, flags) {
                  if (flags.initial_activate) {
                    return;
                  }
                  _this._data[name] = 0;
                  return _this.setCSS();
                },
                onActivate: function(btn, flags) {
                  if (flags.initial_activate) {
                    return;
                  }
                  _this._data[name] = 1;
                  return _this.setCSS();
                }
              }));
            });
          })(this)(variant_group, name);
      }
    }
    this.setCSS();
    if (btns.length) {
      return new Buttonbar({
        buttons: btns
      });
    }
  };

  return CSSSwitcher;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var SearchTypeSelector,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

SearchTypeSelector = (function(superClass) {
  extend(SearchTypeSelector, superClass);

  function SearchTypeSelector(opts1) {
    this.opts = opts1 != null ? opts1 : {};
    SearchTypeSelector.__super__.constructor.call(this, this.opts);
    this.__update_pending = false;
    this.otm = new ObjecttypeManager();
    this.otm.addObjecttypes((function(_this) {
      return function(table) {
        var j, len, ot, ref;
        if (_this._objecttypes) {
          ref = _this._objecttypes;
          for (j = 0, len = ref.length; j < len; j++) {
            ot = ref[j];
            if (ot.id() === table.id()) {
              return true;
            }
          }
          return false;
        } else {
          return table.inMainSearch();
        }
      };
    })(this));
    this.button = new Button({
      "class": "ez5-search-type-selector-button",
      text: "",
      icon_right: "fa-angle-down",
      left: true,
      tooltip: {
        text: this.getButtonTooltip()
      },
      onClick: (function(_this) {
        return function(ev, btn) {
          if (_this.__update_pending) {
            btn.startSpinner();
            return _this.updateContent().done(function() {
              return _this.popover.show();
            }).always(function() {
              btn.stopSpinner();
              return _this.__update_pending = false;
            }).done(function() {});
          } else {
            return _this.popover.show();
          }
        };
      })(this)
    });
    return;
  }

  SearchTypeSelector.prototype.setButtonText = function() {
    var loca_key;
    if (this.showObjecttypes()) {
      loca_key = "search.type.selector.button";
    } else {
      loca_key = "search.type.selector.hidden_objecttype.button";
    }
    return this.button.setText(ez5.loca.str_default(loca_key + "|text", null));
  };

  SearchTypeSelector.prototype.getButtonTooltip = function() {
    var loca_key;
    if (this.showObjecttypes()) {
      loca_key = "search.type.selector.button";
    } else {
      loca_key = "search.type.selector.hidden_objecttype.button";
    }
    return ez5.loca.str_default(loca_key + "|tooltip", null);
  };

  SearchTypeSelector.prototype.initOpts = function() {
    SearchTypeSelector.__super__.initOpts.call(this);
    return this.addOpts({
      ignoreSelection: {
        check: Function
      },
      pref_name: {
        check: String
      },
      init_from_data: {
        check: "PlainObject"
      },
      objecttypes: {
        check: function(arr) {
          var j, len, ot;
          if (!$.isArray(arr)) {
            return false;
          }
          for (j = 0, len = arr.length; j < len; j++) {
            ot = arr[j];
            if (!(ot instanceof Objecttype)) {
              return false;
            }
          }
          return true;
        }
      }
    });
  };

  SearchTypeSelector.prototype.readOpts = function() {
    SearchTypeSelector.__super__.readOpts.call(this);
    assert(xor(this._pref_name, this._init_from_data), "new SearchTypeSelector", "One of opts.pref_name and opts.init_from_data must be set", {
      opts: this.opts
    });
    if (this._pref_name) {
      this.setState(ez5.session.getPref(this._pref_name));
    } else {
      this.setState(copyObject(this._init_from_data, true));
    }
    return this;
  };

  SearchTypeSelector.prototype.showObjecttypes = function() {
    var filled, j, len, o, ref;
    filled = 0;
    ref = this.otm.objecttypes;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      if (o.count > 0) {
        filled = filled + 1;
      }
    }
    return filled > 1;
  };

  SearchTypeSelector.prototype.getButton = function() {
    Events.ignore({
      instance: this
    });
    EventPoller.listen({
      filter: {
        type: ["OBJECT_INDEX", "OBJECT_DELETE"]
      },
      instance: this,
      call: (function(_this) {
        return function() {
          _this.__update_pending = true;
        };
      })(this)
    });
    return this.button;
  };

  SearchTypeSelector.prototype.init = function() {
    var cls, j, len, ot, pane, ref, ref1, ref2, state, tmpl;
    if (this.popover) {
      this.popover.destroy();
      this.popover = null;
    }
    this.__initContent = false;
    this.selected_pools = null;
    this.pool_rows = [];
    this.pool_by_id = null;
    state = this.getState();
    ref = this.otm.objecttypes;
    for (j = 0, len = ref.length; j < len; j++) {
      ot = ref[j];
      if ((state != null ? (ref1 = state.objecttypes) != null ? ref1.length : void 0 : void 0) > 0) {
        ot._selected = (ref2 = ot.name(), indexOf.call(state.objecttypes, ref2) >= 0);
      } else {
        ot._selected = true;
      }
    }
    this.__dataSaved = false;
    if (!this.showObjecttypes()) {
      cls = "popover-search-main-selector-hidden-objecttype";
    }
    this.popover = new Popover({
      "class": "popover-search-main-selector " + cls,
      element: this.button.DOM,
      placement: "se",
      backdrop: {
        policy: "click"
      },
      onHide: (function(_this) {
        return function() {
          if (!_this.__dataSaved) {
            return _this.init();
          }
        };
      })(this),
      pane: {
        maximize: true,
        header_left: (function(_this) {
          return function() {
            var lk;
            if (CUI.__ng__) {
              return;
            }
            if (_this.showObjecttypes()) {
              lk = "search.type.selector.title";
            } else {
              lk = "search.type.selector.hidden_objecttype.title";
            }
            return new Label({
              text: $$(lk)
            });
          };
        })(this),
        footer_right: [
          this.applyButton = new LocaButton({
            loca_key: "search.type.selector.button.apply",
            left: true,
            onClick: (function(_this) {
              return function() {
                _this.popover.disableAllButtons();
                _this.applyButton.startSpinner();
                return _this.__saveAndHidePopover().always(function() {
                  return _this.applyButton.stopSpinner();
                });
              };
            })(this)
          })
        ]
      }
    });
    if (CUI.__ng__) {
      pane = this.popover.getPane();
      tmpl = pane.getPaneAndKey("top");
      CUI.DOM.remove(tmpl[0].map[tmpl[1]]);
    }
    return this.updateContent();
  };

  SearchTypeSelector.prototype.__saveAndHidePopover = function() {
    var dfr, done;
    dfr = new CUI.Deferred();
    done = (function(_this) {
      return function() {
        _this.__dataSaved = true;
        _this.popover.enableAllButtons();
        _this.popover.hide();
        _this.__dataSaved = false;
        return dfr.resolve();
      };
    })(this);
    if (this.__saveState()) {
      this.getSearch().objecttypesUpdated(this).fail(dfr.reject).done((function(_this) {
        return function() {
          return _this.getSearch().execute().always(function() {
            return done();
          });
        };
      })(this));
    } else {
      done();
    }
    return dfr.promise();
  };

  SearchTypeSelector.prototype.setState = function(__currentState) {
    this.__currentState = __currentState;
  };

  SearchTypeSelector.prototype.getState = function() {
    return this.__currentState;
  };

  SearchTypeSelector.prototype.destroy = function() {
    SearchTypeSelector.__super__.destroy.call(this);
    return Events.ignore({
      instance: this
    });
  };

  SearchTypeSelector.prototype.restoreFromStored = function(sts) {
    return this.restoreToState(sts.getState());
  };

  SearchTypeSelector.prototype.restoreToState = function(state) {
    this.setState(state);
    this.init();
    return this.getSearch().objecttypesUpdated(this);
  };

  SearchTypeSelector.prototype.initFromUrlData = function(url_data) {
    var ref, ref1, sd, str_to_arr;
    str_to_arr = function(str, parse_int) {
      var arr, el, i, j, len, ref;
      if (parse_int == null) {
        parse_int = false;
      }
      arr = [];
      if (!isString(str)) {
        return arr;
      }
      ref = str.split(",");
      for (j = 0, len = ref.length; j < len; j++) {
        el = ref[j];
        if (isEmpty(el)) {
          continue;
        }
        if (parse_int) {
          i = parseInt(el);
          if (isNaN(i) || i <= 0) {
            continue;
          }
          arr.push(i);
        } else {
          arr.push(el);
        }
      }
      return arr;
    };
    sd = {
      objecttypes: str_to_arr((ref = url_data.ot) != null ? ref[0] : void 0),
      pool_ids: str_to_arr((ref1 = url_data.p) != null ? ref1[0] : void 0, true)
    };
    if (sd.objecttypes.length || sd.pool_ids.length) {
      return this.restoreToState(sd);
    } else {

    }
  };

  SearchTypeSelector.prototype.getStoreAsUrlData = function(url_data) {
    var k, ref, sd, v;
    sd = this.getStoreData().SearchTypeSelector;
    ref = {
      ot: sd.objecttypes.join(","),
      p: sd.pool_ids.join(",")
    };
    for (k in ref) {
      v = ref[k];
      url_data[k] = v;
    }
    return url_data;
  };

  SearchTypeSelector.prototype.getStoreData = function(sd) {
    var j, len, ot, pool, pool_id, ref, ref1, state;
    if (sd == null) {
      sd = {};
    }
    SearchTypeSelector.__super__.getStoreData.call(this, sd);
    state = {
      objecttypes: [],
      pool_ids: []
    };
    ref = this.otm.objecttypes;
    for (j = 0, len = ref.length; j < len; j++) {
      ot = ref[j];
      if (ot._selected) {
        state.objecttypes.push(ot.name());
      }
    }
    ref1 = this.pool_by_id;
    for (pool_id in ref1) {
      pool = ref1[pool_id];
      if (pool._selected) {
        state.pool_ids.push(pool.pool._id);
      }
    }
    sd.SearchTypeSelector = state;
    return sd;
  };

  SearchTypeSelector.prototype.__saveState = function() {
    var state;
    state = this.getStoreData().SearchTypeSelector;
    if (JSON.stringify(state) !== JSON.stringify(this.getState())) {
      ez5.session.savePref(this._pref_name, state);
      this.setState(state);
      return true;
    } else {
      return false;
    }
  };

  SearchTypeSelector.prototype.countRequest = function(filter_active_checkboxes) {
    var dfr, has_pool_ot, j, len, nothing_found_response, ot, ot_names, ref, request, search, sf;
    if (filter_active_checkboxes == null) {
      filter_active_checkboxes = false;
    }
    has_pool_ot = false;
    search = [];
    ot_names = [];
    dfr = new CUI.Deferred();
    nothing_found_response = (function(_this) {
      return function() {
        return dfr.resolve({
          aggregations: {
            _pool: {
              linked_objects: []
            },
            _objecttype: {
              terms: []
            }
          },
          count: 0
        });
      };
    })(this);
    ref = this.getSearch().getSearchObjecttypes(filter_active_checkboxes);
    for (j = 0, len = ref.length; j < len; j++) {
      ot = ref[j];
      if (ot.poolLink()) {
        has_pool_ot = true;
      }
      ot_names.push(ot.name());
    }
    if (ot_names.length === 0) {
      nothing_found_response();
      return dfr.promise();
    }
    request = {
      objecttypes: ot_names,
      search: search,
      limit: 0,
      aggregations: {
        _objecttype: {
          type: "term",
          limit: 100000,
          field: "_objecttype"
        }
      }
    };
    if (has_pool_ot) {
      request.aggregations._pool = {
        type: "linked_object",
        field: "_pool",
        limit: 100000,
        sort: "term"
      };
    }
    if (filter_active_checkboxes) {
      sf = this.getSearchFilter();
      if (sf) {
        search.push(sf);
      }
    }
    ez5.api.search({
      data: {
        debug: "SearchTypeSelector.countRequest"
      },
      json_data: request,
      error: function(xhr) {
        if (xhr.status === 409) {
          return nothing_found_response();
        } else {
          return ez5.error_handler(xhr).done((function(_this) {
            return function() {
              return nothing_found_response();
            };
          })(this));
        }
      }
    }).done(dfr.resolve);
    return dfr.promise();
  };

  SearchTypeSelector.prototype.getObjecttypesForSearch = function(user_selected) {
    var j, len, o, ot, ref;
    if (user_selected == null) {
      user_selected = true;
    }
    ot = [];
    ref = this.otm.objecttypes;
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      if ((o._selected && o.count > 0) || !user_selected || !this.showObjecttypes()) {
        ot.push(o);
      }
    }
    return ot;
  };

  SearchTypeSelector.prototype.ignoreSelection = function() {
    if (typeof this._ignoreSelection === "function" ? this._ignoreSelection() : void 0) {
      return true;
    } else {
      return false;
    }
  };

  SearchTypeSelector.prototype.addToRequest = function(request) {
    var filter;
    if (request == null) {
      request = {};
    }
    if (this.ignoreSelection() && !this._init_from_data) {
      delete request.objecttypes;
      return request;
    }
    if (!request.search) {
      request.search = [];
    }
    filter = this.getSearchFilter();
    if (filter) {
      request.search.push(filter);
    } else if (this.getObjecttypesForSearch().length === 0) {
      request.search.push(false);
    }
    return request;
  };

  SearchTypeSelector.prototype.getSearchFilter = function(opts) {
    var filter, j, key, len, ot, ot_name, pool_fields, pool_ids, pool_ot_names, ref, state;
    if (opts == null) {
      opts = {};
    }
    if (this._init_from_data) {
      pool_ot_names = [];
      ref = this._init_from_data.objecttypes;
      for (j = 0, len = ref.length; j < len; j++) {
        ot_name = ref[j];
        if (ez5.schema.CURRENT._objecttype_by_name[ot_name].pool_link) {
          pool_ot_names.push(ot_name);
        }
      }
    } else {
      pool_ot_names = (function() {
        var l, len1, ref1, results;
        ref1 = this.getSearch().getSearchObjecttypes(true, true);
        results = [];
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          ot = ref1[l];
          results.push(ot.name());
        }
        return results;
      }).call(this);
    }
    pool_fields = (function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = pool_ot_names.length; l < len1; l++) {
        ot_name = pool_ot_names[l];
        results.push(ot_name + "._pool.pool._id");
      }
      return results;
    })();
    if (!this._init_from_data) {
      if (!pool_fields.length) {
        return null;
      }
      if (this.selected_pools === null) {
        state = this.getState();
        if (!state) {
          return null;
        }
        pool_ids = state.pool_ids;
      } else {
        pool_ids = (function() {
          var results;
          results = [];
          for (key in this.selected_pools) {
            results.push(parseInt(key));
          }
          return results;
        }).call(this);
      }
      if (!(pool_ids != null ? pool_ids.length : void 0)) {
        pool_ids = [-1];
      }
    } else {
      pool_ids = this._init_from_data.pool_ids;
    }
    filter = {
      __filter: "SearchTypeSelector",
      type: "complex",
      bool: "must",
      search: [
        {
          bool: "should",
          type: "in",
          fields: pool_fields,
          "in": pool_ids
        }, {
          type: "complex",
          bool: "should",
          search: [
            {
              bool: "must_not",
              type: "in",
              fields: ["_objecttype"],
              "in": (function() {
                var l, len1, results;
                results = [];
                for (l = 0, len1 = pool_ot_names.length; l < len1; l++) {
                  ot_name = pool_ot_names[l];
                  results.push(ot_name);
                }
                return results;
              })()
            }
          ]
        }
      ]
    };
    if (!this._init_from_data) {
      return filter;
    }
    filter = {
      type: "complex",
      search: [
        filter, {
          bool: "must",
          type: "in",
          fields: ["_objecttype"],
          "in": this._init_from_data.objecttypes
        }
      ]
    };
    return filter;
  };

  SearchTypeSelector.prototype.prepareData = function(data) {
    var j, l, len, len1, len2, m, o, ot, pool, ref, ref1, root, state;
    state = this.getState();
    ref = this.otm.objecttypes;
    for (j = 0, len = ref.length; j < len; j++) {
      ot = ref[j];
      ot.count = 0;
    }
    ref1 = data.aggregations._objecttype.terms;
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      o = ref1[l];
      ot = this.otm.findObjecttypeByName(o.term);
      ot.count = o.count;
    }
    this.pool_by_id = {};
    this.selected_pools = {};
    if (!data.aggregations._pool) {
      this.pool_rows = [];
    } else {
      root = ez5.buildObjectTree({
        objects: data.aggregations._pool.linked_objects,
        doOpen: false,
        newInstanceFunc: (function(_this) {
          return function(pool) {
            var p, ref2;
            p = new PoolSelectorNode({
              pool: pool,
              manager: _this
            });
            _this.pool_by_id[p.id] = p;
            if ((state != null ? state.pool_ids.length : void 0) > 0) {
              if (ref2 = p.id, indexOf.call(state.pool_ids, ref2) >= 0) {
                p.set_state(true);
              }
            } else {
              p.set_state(true);
            }
            return p;
          };
        })(this)
      });
      this.pool_rows = [];
      for (m = 0, len2 = root.length; m < len2; m++) {
        pool = root[m];
        this.pool_rows.push.apply(this.pool_rows, pool.children);
      }
    }
    return this;
  };

  SearchTypeSelector.prototype.updateContent = function() {
    var dfr;
    dfr = new CUI.Deferred();
    this.__update_pending = false;
    this.countRequest().done((function(_this) {
      return function(data) {
        _this.prepareData(data);
        _this.renderContent();
        return _this.updateInfo().done(function() {
          return dfr.resolve();
        }).fail(dfr.reject);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  SearchTypeSelector.prototype.renderContent = function() {
    var container_parent, fields, fn, form, j, l, len, len1, listviews, no_hierarchy, ot, ot_list, p, ref, ref1, rootNode, sort_loca;
    this.popover.empty("content");
    listviews = [];
    sort_loca = function(a, b) {
      var ac, bc;
      ac = a.nameLocalized().toLocaleLowerCase();
      bc = b.nameLocalized().toLocaleLowerCase();
      return compareIndex(ac, bc);
    };
    if (this.showObjecttypes()) {
      ot_list = new ListViewTree({
        no_hierarchy: true,
        "class": 'cui-lv--has-datafields',
        maximize_horizontal: true,
        maximize_vertical: false,
        cols: ["maximize", "auto", "auto"],
        colClasses: ["", "ez5-column-object-count", "ez5-column-info"],
        header_left: new Label({
          text: $$("main.search.selector.objecttype.title")
        })
      });
      ref = this.otm.objecttypes;
      fn = (function(_this) {
        return function(ot) {
          if (ot.count > 0) {
            return ot_list.root.addNode(new ObjecttypeSelectorNode({
              manager: _this,
              objecttype: ot
            }));
          }
        };
      })(this);
      for (j = 0, len = ref.length; j < len; j++) {
        ot = ref[j];
        fn(ot);
      }
      if (ot_list.root.children.length > 1) {
        ot_list.root.sort(sort_loca);
        listviews.push(ot_list.render(false));
        ot_list.root.open();
      }
    }
    if (this.pool_rows.length) {
      rootNode = new PoolSelectorNode({
        children: this.pool_rows
      });
      rootNode.sort(sort_loca);
      no_hierarchy = true;
      ref1 = this.pool_rows;
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        p = ref1[l];
        if (!p.isLeaf()) {
          no_hierarchy = false;
          break;
        }
      }
      this.poolTree = new ListViewTree({
        root: rootNode,
        no_hierarchy: no_hierarchy,
        "class": 'cui-lv--has-datafields',
        maximize_horizontal: true,
        maximize_vertical: false,
        cols: ["maximize", "auto", "auto"],
        colClasses: ["", "ez5-column-object-count", "ez5-column-info"],
        header_left: new Label({
          text: $$("main.search.selector.pool.title")
        }),
        selectableRows: false
      });
      listviews.push(this.poolTree.render(false));
      this.poolTree.root.open().done((function(_this) {
        return function() {
          return _this.poolTree.root.refresh();
        };
      })(this));
    } else {
      this.poolTree = null;
      listviews.push(new SimplePane({
        title: $$("main.search.selector.pool.title"),
        padded: true,
        content: new EmptyLabel({
          "class": "ez5-main-search-selector-no-pools",
          text: $$("main.search.selector.pool.no_pools"),
          multiline: true,
          centered: true
        })
      }));
    }
    if (!CUI.__ng__) {
      container_parent = new VerticalList({
        maximize: true,
        content: new HorizontalList({
          maximize_horizontal: true,
          maximize_vertical: false,
          "class": "ez5-search-type-selector-ot-pools",
          content: listviews
        })
      });
    } else {
      container_parent = new VerticalList({
        maximize: true,
        content: new VerticalList({
          maximize_horizontal: true,
          maximize_vertical: false,
          "class": "ez5-search-type-selector-ot-pools",
          content: listviews
        })
      });
    }
    this.popover.append(container_parent.DOM, "content");
    fields = [];
    this.__countedText = new Output({
      markdown: true,
      text: ""
    });
    fields.push(this.__countedText);
    form = new Form({
      "class": "ez5-search-type-selector-form",
      maximize_vertical: false,
      maximize_horizontal: true,
      fields: fields
    }).start();
    return container_parent.append(form);
  };

  SearchTypeSelector.prototype.updateInfo = function() {
    return this.countRequest(true).done((function(_this) {
      return function(data) {
        var ref;
        _this.setButtonText();
        _this.__last_count = data.count;
        _this.__countedText.setText($$("main.search.selector.status", {
          count: ez5.format_number(_this.__last_count)
        }));
        return (ref = _this.popover) != null ? ref.position() : void 0;
      };
    })(this));
  };

  SearchTypeSelector.prototype.getLastCount = function() {
    return this.__last_count || 0;
  };

  return SearchTypeSelector;

})(SearchManager);
// Generated by CoffeeScript 1.10.0
var SearchTypeSelectorNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SearchTypeSelectorNode = (function(superClass) {
  extend(SearchTypeSelectorNode, superClass);

  function SearchTypeSelectorNode(opts) {
    this.opts = opts != null ? opts : {};
    SearchTypeSelectorNode.__super__.constructor.call(this, this.opts);
    this._selected = false;
  }

  SearchTypeSelectorNode.prototype.renderContent = function() {
    this.countSpan = new Label({
      text: ez5.format_number(this.count)
    }).DOM;
    this.addColumn(new ListViewColumn({
      element: this.countSpan
    }));
    this.addColumn(new ListViewColumn({
      element: this.getInfoButton()
    }));
    return $div("ez5-search-type-selector-node").append(this.getCheckbox().DOM).append(this.extraInfo());
  };

  SearchTypeSelectorNode.prototype.extraInfo = function() {};

  SearchTypeSelectorNode.prototype.infoButtonNeedsSpinner = function() {
    return false;
  };

  SearchTypeSelectorNode.prototype.getInfoButton = function() {
    var infoButton;
    return infoButton = new LocaButton({
      loca_key: "search.type.selector.node.button.info",
      appearance: "flat",
      onClick: (function(_this) {
        return function(ev, btn) {
          if (_this.infoButtonNeedsSpinner()) {
            btn.startSpinner();
          }
          return CUI.decide(_this.getInfoDiv()).done(function(content) {
            var pop;
            pop = new ez5.HintPopover({
              element: infoButton,
              content: content
            });
            pop.show();
            if (_this.infoButtonNeedsSpinner()) {
              return btn.stopSpinner();
            }
          });
        };
      })(this)
    });
  };

  SearchTypeSelectorNode.prototype.getTooltipTitle = function() {};

  SearchTypeSelectorNode.prototype.getInfoDiv = function() {};

  return SearchTypeSelectorNode;

})(ListViewTreeNode);
// Generated by CoffeeScript 1.10.0
var ObjecttypeSelectorNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ObjecttypeSelectorNode = (function(superClass) {
  extend(ObjecttypeSelectorNode, superClass);

  function ObjecttypeSelectorNode() {
    return ObjecttypeSelectorNode.__super__.constructor.apply(this, arguments);
  }

  ObjecttypeSelectorNode.prototype.initOpts = function() {
    ObjecttypeSelectorNode.__super__.initOpts.call(this);
    return this.addOpts({
      objecttype: {
        check: Objecttype
      },
      manager: {
        check: SearchTypeSelector
      }
    });
  };

  ObjecttypeSelectorNode.prototype.readOpts = function() {
    ObjecttypeSelectorNode.__super__.readOpts.call(this);
    this.objecttype = this._objecttype;
    this.manager = this._manager;
    return this.count = this.objecttype.count;
  };

  ObjecttypeSelectorNode.prototype.nameLocalized = function() {
    return toHtml(this.objecttype.nameLocalized());
  };

  ObjecttypeSelectorNode.prototype.infoButtonNeedsSpinner = function() {
    return true;
  };

  ObjecttypeSelectorNode.prototype.extraInfo = function() {
    var cap, caps;
    caps = [];
    if (this.objecttype.poolLink()) {
      caps.push("pool");
    }
    if (this.objecttype.isHierarchy()) {
      caps.push("hierarchy");
    }
    if (caps.length === 0) {
      return;
    }
    return new Label({
      "class": "ez5-objecttype-selector-node-has-pool",
      text: ((function() {
        var i, len, results;
        results = [];
        for (i = 0, len = caps.length; i < len; i++) {
          cap = caps[i];
          results.push($$("table.capability." + cap));
        }
        return results;
      })()).join(', ')
    });
  };

  ObjecttypeSelectorNode.prototype.getTooltipTitle = function() {
    return $$("main.search.selector.info.objecttype.title", {
      name: this.objecttype.nameLocalized()
    });
  };

  ObjecttypeSelectorNode.prototype.getCheckbox = function() {
    var set_value;
    set_value = (function(_this) {
      return function(ev) {
        var i, len, node, on_off, ref;
        if (ev.hasModifierKey()) {
          on_off = _this.checkbox.getValue();
          ref = _this.getFather().children;
          for (i = 0, len = ref.length; i < len; i++) {
            node = ref[i];
            console.debug("node:", node, on_off);
            if (node !== _this) {
              node.checkbox.setValue(on_off);
            }
          }
        }
        return _this.manager.updateInfo();
      };
    })(this);
    return this.checkbox = new Checkbox({
      mark_changed: false,
      name: "_selected",
      text: this.nameLocalized(),
      data: this.objecttype,
      onActivate: (function(_this) {
        return function(df, flags, ev) {
          return set_value(ev);
        };
      })(this),
      onDeactivate: (function(_this) {
        return function(df, flags, ev) {
          return set_value(ev);
        };
      })(this)
    }).start();
  };

  ObjecttypeSelectorNode.prototype.getInfoDiv = function() {
    return this.objecttype.getInfoDiv();
  };

  return ObjecttypeSelectorNode;

})(SearchTypeSelectorNode);
// Generated by CoffeeScript 1.10.0
var PoolSelectorNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PoolSelectorNode = (function(superClass) {
  extend(PoolSelectorNode, superClass);

  function PoolSelectorNode() {
    return PoolSelectorNode.__super__.constructor.apply(this, arguments);
  }

  PoolSelectorNode.prototype.initOpts = function() {
    PoolSelectorNode.__super__.initOpts.call(this);
    return this.addOpts({
      pool: {
        check: "PlainObject"
      },
      manager: {
        check: SearchTypeSelector
      }
    });
  };

  PoolSelectorNode.prototype.readOpts = function() {
    PoolSelectorNode.__super__.readOpts.call(this);
    if (this._pool) {
      return this.setData(this._pool);
    }
  };

  PoolSelectorNode.prototype.getCheckbox = function() {
    return this.checkbox = new Checkbox({
      name: "_selected",
      mark_changed: false,
      tooltip: {
        markdown: true,
        text: $$("pool.selector.node.tooltip")
      },
      text: this.nameLocalized(),
      onClick: (function(_this) {
        return function(event) {
          return _this.checkbox_changed(event);
        };
      })(this),
      data: this
    }).start();
  };

  PoolSelectorNode.prototype.getTooltipTitle = function() {
    return $$("main.search.selector.info.pool.title", {
      name: this.nameLocalized()
    });
  };

  PoolSelectorNode.prototype.nameLocalized = function() {
    return this.pool._path[this.pool._path.length - 1].text;
  };

  PoolSelectorNode.prototype.getInfoContent = function() {
    return $pre().append(dump(this.pool));
  };

  PoolSelectorNode.prototype.setData = function(data) {
    this.pool = data;
    this.id = this.pool.id || this.pool._id;
    return this.count = this.pool.count;
  };

  PoolSelectorNode.prototype.getCount = function() {
    return this.count;
  };

  PoolSelectorNode.prototype.getInfoDiv = function() {
    this.poolObject = ez5.pools.findPoolById(this._pool._id);
    return this.poolObject.getInfoDiv();
  };

  PoolSelectorNode.prototype.refresh = function() {
    var i, len, p, ref, ref1;
    if (this.checkbox) {
      if (this.checkbox.isDestroyed()) {
        return;
      }
      if (this._selected) {
        this.checkbox.activate();
      } else {
        this.checkbox.deactivate();
      }
      this.countSpan.text(ez5.format_number(this.count));
      this.partial = false;
      if (this.element) {
        this.element.removeClass("pool-selector-node-partial");
        if (this._selected) {
          this.element.addClass("selected");
        } else {
          this.element.removeClass("selected");
        }
      }
    }
    if (this._selected) {
      if ((ref = this.father) != null) {
        ref.set_partial();
      }
    }
    if (this.children) {
      ref1 = this.children;
      for (i = 0, len = ref1.length; i < len; i++) {
        p = ref1[i];
        p.refresh();
      }
    }
  };

  PoolSelectorNode.prototype.set_partial = function() {
    var ref, ref1;
    if (this.isRoot()) {
      return;
    }
    if (!this._selected) {
      this.partial = true;
      if ((ref = this.element) != null) {
        ref.addClass("pool-selector-node-partial");
      }
      if ((ref1 = this.father) != null) {
        ref1.set_partial();
      }
    }
    return this;
  };

  PoolSelectorNode.prototype.set_state = function(selected, goto_father, include_children) {
    var c, count, i, j, len, len1, ref, ref1, ref2, ref3;
    if (goto_father == null) {
      goto_father = true;
    }
    if (include_children == null) {
      include_children = true;
    }
    this._selected = selected;
    if (this._selected) {
      this.opts.manager.selected_pools[this.id] = true;
      if ((ref = this.checkbox) != null) {
        ref.activate();
      }
    } else {
      delete this.opts.manager.selected_pools[this.id];
      if ((ref1 = this.checkbox) != null) {
        ref1.deactivate();
      }
    }
    if (include_children && this.children) {
      ref2 = this.children;
      for (i = 0, len = ref2.length; i < len; i++) {
        c = ref2[i];
        c.set_state(this._selected, false, true);
      }
    }
    if (!this.father || !goto_father) {
      return;
    }
    count = 0;
    ref3 = this.father.children;
    for (j = 0, len1 = ref3.length; j < len1; j++) {
      c = ref3[j];
      count += c.count;
    }
    if (this.father.count === count) {
      if (!this._selected) {
        if (this.father._selected) {
          this.father.set_state(false, true, false);
        }
      } else {
        if (this.father.all_children_selected()) {
          this.father.set_state(true, true, false);
        }
      }
    }
  };

  PoolSelectorNode.prototype.all_children_selected = function() {
    var i, len, p, ref;
    if (!this.children) {
      return true;
    }
    ref = this.children;
    for (i = 0, len = ref.length; i < len; i++) {
      p = ref[i];
      if (!p._selected) {
        return false;
      }
      if (!p.all_children_selected()) {
        return false;
      }
    }
    return true;
  };

  PoolSelectorNode.prototype.checkbox_changed = function(event) {
    var i, len, p, siblings;
    if (this.partial && event.ctrlKey() && !this._selected) {
      this._selected = true;
    }
    if (!event.altKey()) {
      this.set_state(this._selected, !event.ctrlKey(), !event.ctrlKey());
    } else {
      siblings = this.father.children;
      for (i = 0, len = siblings.length; i < len; i++) {
        p = siblings[i];
        p.set_state(this._selected, !event.ctrlKey(), !event.ctrlKey());
      }
    }
    return this.opts.manager.updateInfo();
  };

  return PoolSelectorNode;

})(SearchTypeSelectorNode);
// Generated by CoffeeScript 1.10.0
var Editor,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Editor = (function(superClass) {
  extend(Editor, superClass);

  function Editor(opts1) {
    this.opts = opts1;
    Editor.__super__.constructor.call(this, this.opts);
    if (this._mode === "copy") {
      this.setMode("new");
      this.__copy = true;
    } else {
      this.setMode(this._mode);
    }
    this.__updateObject = (function(_this) {
      return function() {
        _this.triggerCallback("editor-update");
        _this.object_list.updateObjectInBrowser();
        return _this.updateSaveButton();
      };
    })(this);
  }

  Editor.prototype.initOpts = function() {
    Editor.__super__.initOpts.call(this);
    return this.addOpts({
      global_object_id: {
        check: String
      },
      object_list: {
        check: ObjectList
      },
      mode: {
        mandatory: true,
        check: ["single", "bulk", "new", "copy"]
      },
      closeButtonNoConfirm: {
        "default": false,
        check: Boolean
      },
      onCancel: {
        check: Function
      },
      onCopy: {
        check: Function
      },
      onSave: {
        check: Function
      },
      onSaveReadOnly: {
        check: Function
      },
      onDelete: {
        check: Function
      },
      table_id: {
        check: function(v) {
          return v >= 0;
        }
      },
      format: {
        check: ["short", "standard", "long", "full"]
      }
    });
  };

  Editor.prototype.readOpts = function() {
    Editor.__super__.readOpts.call(this);
    this.template_idx = null;
    this.__asset_browser_idx = 0;
    if (this._object_list) {
      this.object_list = this._object_list;
    }
    this.__updateButtonsFirstDone = false;
    this.editor_data = {};
    this.__old_pool = null;
    if (this._table_id) {
      return this.editor_data.table = new Table("CURRENT", parseInt(this._table_id));
    }
  };

  Editor.prototype.setMode = function(mode) {
    assert(mode === "single" || mode === "bulk" || mode === "new", "new " + (getObjectClass(this)), "opts.mode must be 'single', 'bulk', or 'new' but is " + (isEmpty(mode) ? getObjectClass(mode) : mode) + ".", {
      opts: this.opts,
      mode: mode
    });
    this.editor_data.mode = mode;
    return this;
  };

  Editor.prototype.getMode = function() {
    var ref;
    return ((ref = this.editor_data) != null ? ref.mode : void 0) || null;
  };

  Editor.prototype.getSearch = function() {};

  Editor.prototype.modeIs = function(arr) {
    var ref;
    assert(CUI.isArray(arr), (getObjectClass(this)) + ".modeIs", "arr needs to be Array but is " + (getObjectClass(this)), {
      arr: arr
    });
    return ref = this.editor_data.mode, indexOf.call(arr, ref) >= 0;
  };

  Editor.prototype.modeIsNot = function(arr) {
    return !this.modeIs(arr);
  };

  Editor.prototype.destroy = function() {
    var ref, ref1, ref2;
    Events.ignore({
      instance: this
    });
    this.dismissWaitModal();
    if ((ref = this.assetBrowser) != null) {
      ref.destroy();
    }
    this.assetBrowser = null;
    if ((ref1 = this.newObjects) != null) {
      ref1.destroy();
    }
    if ((ref2 = this.__pane) != null) {
      ref2.destroy();
    }
    this.__pane = null;
    return Editor.__super__.destroy.call(this);
  };

  Editor.prototype.getDbInfo = function(ignore_not_found) {
    var dbInfo, dfr, idx, load_db_info, oids, pool_id, ref, ref1, tag, tag_ids, tags;
    if (ignore_not_found == null) {
      ignore_not_found = false;
    }
    dbInfo = new DbInfo();
    dfr = new CUI.Deferred();
    if (this.editor_data.table.hasTags() && this.modeIsNot(["bulk"])) {
      tags = ((ref = this.object) != null ? ref.getData()._tags : void 0) || [];
      tag_ids = (function() {
        var i, len1, results;
        results = [];
        for (i = 0, len1 = tags.length; i < len1; i++) {
          tag = tags[i];
          results.push(tag._id);
        }
        return results;
      })();
      if (tag_ids.length === 0) {
        tag_ids = void 0;
      }
    } else {
      tag_ids = void 0;
    }
    if (this.modeIsNot(["bulk"])) {
      pool_id = (ref1 = this.editor_data._pool) != null ? ref1.pool._id : void 0;
    } else {
      pool_id = void 0;
    }
    load_db_info = (function(_this) {
      return function() {
        return dbInfo.load({
          table: _this.editor_data.table,
          pool_id: pool_id,
          tag_ids: tag_ids,
          object_ids: oids,
          ignore_not_found: !!(ignore_not_found && pool_id)
        }).done(function() {
          return dfr.resolve(dbInfo);
        }).fail(function(xhr) {
          var ref2;
          if (ignore_not_found && pool_id && (xhr != null ? (ref2 = xhr.responseJSON) != null ? ref2.code : void 0 : void 0) === "error.user.no_masks_for_create") {
            pool_id = null;
            return load_db_info();
          } else {
            return dfr.reject(xhr);
          }
        });
      };
    })(this);
    if (this.modeIs(["new"])) {
      oids = void 0;
      load_db_info();
    } else if (this.modeIs(["bulk"])) {
      oids = (function() {
        var i, ref2, results;
        results = [];
        for (idx = i = 1, ref2 = this.object_list.getCount(); 1 <= ref2 ? i < ref2 : i > ref2; idx = 1 <= ref2 ? ++i : --i) {
          results.push(this.object_list.getObject(idx).id());
        }
        return results;
      }).call(this);
      load_db_info();
    } else {
      oids = [this.object.id()];
      load_db_info();
    }
    return dfr.promise();
  };

  Editor.prototype.setPoolFromPoolId = function(pool_id) {
    var pool;
    pool = ez5.pools.findPoolById(pool_id);
    if (!pool) {
      delete this.editor_data._pool;
      return;
    }
    return this.setPoolFromObject(pool.getData());
  };

  Editor.prototype.getAssetBrowserButton = function() {
    return new LocaButton({
      loca_key: "editor.pullout.asset_browser",
      disabled: true,
      hidden: true,
      radio_allow_null: true,
      group: "pull-out",
      radio: "editor-pull-out",
      onDeactivate: (function(_this) {
        return function(btn, flags, event) {
          if (flags.initial_activate || flags.prior_activate) {
            return;
          }
          if (event) {
            ez5.session.saveCookiePref("show_asset_browser", false);
          }
          return _this.hidePullOut();
        };
      })(this),
      onActivate: (function(_this) {
        return function(btn, flags, event) {
          if (event) {
            ez5.session.saveCookiePref("show_asset_browser", true);
          }
          _this.showPullOut();
          return _this.renderAssetBrowser();
        };
      })(this)
    });
  };

  Editor.prototype.getHistoryBrowserButton = function() {
    return new LocaButton({
      loca_key: "editor.pullout.revision_history.history.button",
      disabled: true,
      group: "pull-out",
      radio_allow_null: true,
      radio: "editor-pull-out",
      onDeactivate: (function(_this) {
        return function(btn, flags) {
          if (flags.initial_activate || flags.prior_activate) {
            return;
          }
          return _this.hidePullOut();
        };
      })(this),
      onActivate: (function(_this) {
        return function() {
          _this.showPullOut();
          return _this.renderHistoryBrowser();
        };
      })(this)
    });
  };

  Editor.prototype.getPullOutSwitch = function() {
    var buttons;
    buttons = [];
    this.assetBrowserButton = this.getAssetBrowserButton();
    buttons.push(this.assetBrowserButton);
    if (this.modeIs(["single"]) && ez5.session.hasSystemRight("root", "frontend_features[changelog]")) {
      this.historyBrowserButton = this.getHistoryBrowserButton();
      if (this.historyBrowserButton) {
        buttons.push(this.historyBrowserButton);
      }
    } else {
      this.historyBrowserButton = null;
    }
    if (!this.__pullOutFlexHandle || !buttons) {
      this.__pullOutSwitch = null;
    } else {
      this.__pullOutSwitch = new Buttonbar({
        buttons: buttons
      });
    }
    return this.__pullOutSwitch;
  };

  Editor.prototype.showPullOut = function() {
    return this.__pullOutFlexHandle.open().show();
  };

  Editor.prototype.__removeAssetBrowser = function() {
    if (this.assetBrowser) {
      this.assetBrowser.destroy();
      this.assetBrowser = null;
    }
    if (this.assetBrowserInfoControl) {
      this.assetBrowserInfoControl.destroy();
      CUI.DOM.remove(this.assetBrowserInfoControl);
      this.assetBrowserInfoControl = null;
    }
    return this;
  };

  Editor.prototype.hidePullOut = function() {
    this.__removeAssetBrowser();
    return this.__pullOutFlexHandle.close().hide();
  };

  Editor.prototype.renderHistoryBrowser = function() {
    return this.__pullOutDiv.empty().append(this.object.renderHistoryBrowser());
  };

  Editor.prototype.renderAssetBrowser = function() {
    var assets, ref;
    if (!((ref = this.assetBrowserButton) != null ? ref.isActive() : void 0)) {
      return;
    }
    this.__pullOutDiv.empty();
    if (this.object instanceof TemplateObject) {
      assets = this.object.getAssetsForBrowser("editor-template") || [];
    } else {
      assets = this.object.getAssetsForBrowser("editor") || [];
    }
    this.__removeAssetBrowser();
    if (this.__asset_browser_idx >= assets.length) {
      this.__asset_browser_idx = Math.max(assets.length - 1, 0);
    }
    this.assetBrowser = new AssetBrowser({
      assets: assets,
      hires: true,
      start_idx: this.__asset_browser_idx || 0
    });
    if (CUI.__ng__) {
      this.assetBrowserInfoControl = new AssetBrowserInfoControl({
        assetBrowser: this.assetBrowser,
        onUpdate: (function(_this) {
          return function(control) {
            return CUI.DOM.setClass(_this.__mainPane.DOM, "ez5-editor--control-info", control.getInfoState());
          };
        })(this)
      });
    }
    this.appendAssetBrowser();
    return this;
  };

  Editor.prototype.appendAssetBrowser = function() {
    this.__pullOutDiv.append(this.assetBrowser);
    return this.__mainPane.prepend(this.assetBrowserInfoControl, "center");
  };

  Editor.prototype.updateAssetBrowser = function(info) {
    if (!this.assetBrowserButton) {
      return;
    }
    if (info) {
      if (!this.assetBrowserButton.isActive()) {
        this.assetBrowserButton.activate();
      }
      return Events.trigger({
        type: "show-asset",
        node: this.__pullOutDiv,
        info: info
      });
    } else {
      return Events.trigger({
        type: "eas_update",
        node: this.__pullOutDiv
      });
    }
  };

  Editor.prototype.getMainPane = function() {
    return assert(false, (getObjectClass(this)) + ".getMainPane", "Needs implementation");
  };

  Editor.prototype.render = function() {
    var mode;
    mode = toDash(getObjectClass(this));
    this.__mainPane = this.getMainPane();
    this.__paneHeader = new PaneHeader({
      left: {}
    });
    this.__toolbar = new PaneToolbar();
    this.askForCommentCheckbox = new Checkbox({
      text: $$("main.editor.require_comment"),
      mark_changed: false,
      name: "require_comment",
      data: this.editor_data
    }).start();
    this.__requiredLabel = new LocaLabel({
      "class": "ez5-editor-required-message",
      loca_key: "editor.required_input_message"
    });
    this.__toolbarBottom = new PaneToolbar({
      left: {
        content: this.__requiredLabel
      },
      right: {
        content: this.askForCommentCheckbox
      }
    });
    this.__paneFooter = new PaneFooter();
    this.__pane = new Pane({
      top: {
        content: [this.__paneHeader, this.__toolbar]
      },
      center: {
        content: this.__mainPane
      },
      bottom: {
        content: [this.__toolbarBottom, this.__paneFooter]
      }
    });
    EventPoller.listen({
      instance: this,
      filter: (function(_this) {
        return function(event) {
          var i, len1, obj, ref;
          if (!_this.object_list) {
            return false;
          }
          ref = _this.object_list.getObjects();
          for (i = 0, len1 = ref.length; i < len1; i++) {
            obj = ref[i];
            if (event.global_object_id && obj.getGlobalObjectId() === event.global_object_id) {
              return true;
            }
          }
          return false;
        };
      })(this),
      call: (function(_this) {
        return function(events) {
          var event, i, len1;
          if (_this.modeIs(["new"])) {
            return;
          }
          for (i = 0, len1 = events.length; i < len1; i++) {
            event = events[i];
            switch (event.type) {
              case "OBJECT_INSERT":
                _this.__saveInProgress = false;
                break;
              case "OBJECT_UPDATE":
                if (_this.__saveInProgress) {
                  _this.__saveInProgress = false;
                } else if (event.object_version > _this.object.version()) {
                  if (event.session_self) {
                    _this.object.loadFromDbWithMask(_this.editor_data.mask_name).done(function() {
                      return _this.load();
                    });
                  } else {
                    _this.askForVersionChanged();
                  }
                }
                break;
              case "OBJECT_DELETE":
                if (event.session_self) {
                  _this.callback("delete");
                } else {
                  _this.askForVersionDeleted();
                }
            }
          }
        };
      })(this)
    });
    Events.listen({
      type: "toolbox",
      node: this.__pane,
      call: (function(_this) {
        return function(ev, info) {};
      })(this)
    });
    Events.listen({
      node: this.__pane,
      type: "asset-browser-idx-changed",
      call: (function(_this) {
        return function(ev, info) {
          return _this.__asset_browser_idx = info.current_idx;
        };
      })(this)
    });
    Events.listen({
      node: this.__pane,
      type: "asset-browser-show-asset",
      call: (function(_this) {
        return function(ev, info) {
          if ($(ev.getTarget()).closest(".history-version").length > 0) {
            return;
          }
          return _this.updateAssetBrowser(info);
        };
      })(this)
    });
    this.__pane.addClass("ez5-editor ez5-editor-mode-" + mode);
    return this.__pane;
  };

  Editor.prototype.callback = function(status, arg1) {
    var name;
    return typeof this[name = "_on" + toCamel(status, true)] === "function" ? this[name](this, arg1) : void 0;
  };

  Editor.prototype.setPoolFromObject = function(pool_obj) {
    return this.editor_data._pool = pool_obj;
  };

  Editor.prototype.setPoolInObject = function(resultObject) {
    assert(resultObject instanceof ResultObject, "Editor.setPoolInObject", "resultObject needs to be instance of ResultObject", {
      resultObject: resultObject
    });
    return resultObject.getData()[this.editor_data.table.name()]._pool = this.editor_data._pool;
  };

  Editor.prototype.checkAndSetPoolFromDbInfo = function() {
    var current_pool_id, pool_ids, ref;
    if (!this.editor_data.table.poolLink()) {
      return;
    }
    assert(this.editor_data.dbInfo instanceof DbInfo, "Editor.checkAndSetPoolFromDbInfo", "editor_data.dbInfo not set.", {
      editor_data: this.editor_data,
      editor: this
    });
    current_pool_id = (ref = this.editor_data._pool) != null ? ref.pool._id : void 0;
    pool_ids = this.editor_data.dbInfo.getPoolIds(null, false);
    if (this.modeIs(["bulk"])) {
      if (pool_ids === false) {
        throw new UserError({
          label: "editor.load.no_pool_for_bulk_found"
        });
      }
      if (pool_ids.length === 0) {
        return false;
      }
    }
    if (pool_ids.length === 0) {
      throw new UserError({
        label: "editor.load.no_pool_found"
      });
    }
    if (!current_pool_id || indexOf.call(pool_ids, current_pool_id) < 0) {
      CUI.debug("setting pool in editor from id:", pool_ids[0], "ids:", pool_ids, this.editor_data.dbInfo);
      if (!this.setPoolFromPoolId(pool_ids[0])) {
        throw new UserError({
          label: "editor.load.no_pool_found"
        });
      }
      if (this.modeIs(["bulk"])) {
        return false;
      } else {
        return true;
      }
    } else {
      return false;
    }
  };

  Editor.prototype.load = function(dfr, level) {
    var data, ot, ref, ref1;
    if (dfr == null) {
      dfr = new CUI.Deferred();
    }
    if (level == null) {
      level = 0;
    }
    assert((this.object_list && ((ref = this.getMode()) === "bulk" || ref === "new" || ref === "single")) || (this._global_object_id && !this.object_list && (((ref1 = this.getMode()) === "single") || this.__copy)) || (this.getMode() === "new" && this._table_id && !this.object_list), "Editor.load", "One of opts.global_object_id and opts.object_list must be set, or opts.table_id and opts.mode == 'new'.", {
      opts: this.opts,
      editor: this
    });
    if (this.object_list) {
      return this.__load(dfr, level);
    }
    if (this._global_object_id || this.__copy) {
      ResultObject.loadFromGlobalObjectId(this._global_object_id).done((function(_this) {
        return function(result_object) {
          var save_data;
          _this.object_list = new ObjectList();
          if (_this.__copy) {
            save_data = result_object.getSaveData({
              copy: true
            });
            _this.editor_data.table = result_object.table();
            if (_this.supportsTemplate()) {
              _this.addNewTemplateObject(save_data);
              _this.addNewResultObject();
            } else {
              _this.addNewResultObject(save_data);
            }
            _this.__copy = false;
          } else {
            _this.object_list.push(result_object);
          }
          return _this.__load(dfr, level);
        };
      })(this)).fail(dfr.reject);
      return dfr.promise();
    }
    if (this.getMode() === "new") {
      ot = new Objecttype(ez5.schema.CURRENT._table_by_id[this._table_id]);
      data = {
        _mask: ot.getTable().preferredMask().name()
      };
      this.object_list = new ObjectList();
      this.addNewResultObject(data);
      return this.__load(dfr, level);
    }
    return assert("Editor.load", "Unsupported opts for load.", {
      opts: this.opts
    });
  };

  Editor.prototype.__load = function(dfr, level) {
    var promise, version;
    if (this.isDestroyed()) {
      return CUI.rejectedPromise();
    }
    console.time("load");
    console.time("load-total");
    assert(this.object_list.getCount(), "Editor.load", "Cannot load object, no objects in ObjectList", {
      opts: this.opts
    });
    assert(this.__pane, "Editor.load", "Cannot load, editor needs to be rendered first.");
    if (this.object_list.getCurrentIdx() === null) {
      this.object_list.setCurrentIdx(0);
    }
    this.object = this.object_list.getObject();
    assert(this.object instanceof ResultObject, (getObjectClass(this)) + ".load", "Cannot load object, object is not instance of ResultObject but \"" + (getObjectClass(this.object)) + "\".", {
      opts: this.opts,
      object: this.object
    });
    if (!this.editor_data.table) {
      this.editor_data.table = this.object.table();
      CUI.debug("table not set in editor, using object to set table:", this.editor_data.table.name());
      if (this.copyButton) {
        DbInfo.canCreate({
          objecttypes: [new Objecttype(this.editor_data.table)]
        }).done((function(_this) {
          return function() {
            return _this.copyButton.show();
          };
        })(this));
      }
    }
    dfr.notify("rights");
    dfr.always(function() {
      return console.timeEnd("load-total");
    });
    dfr.fail((function(_this) {
      return function(error) {
        return console.warn("Editor.load FAIL", _this.object_list.getCurrentIdx() + "/" + _this.object_list.getCount(), _this.object.getGlobalObjectId() || "new", error);
      };
    })(this));
    if (this.modeIs(["bulk"]) || !this.object.id()) {
      promise = CUI.resolvedPromise();
    } else {
      version = this.object.getVersion();
      promise = this.object.loadFromDbWithMask(this.editor_data.mask_name);
      promise.done((function(_this) {
        return function() {
          if (version !== _this.object.getVersion() && !_this.object.__ignore_version_on_load) {
            CUI.alert({
              text: $$("editor.load.warning.version_different", {
                old_version: version,
                new_version: _this.object.getVersion()
              })
            });
          }
          delete _this.object.__ignore_version_on_load;
          if (_this.editor_data.object_version && version !== _this.editor_data.object_version) {
            delete _this.editor_data._pool;
          }
          return _this.editor_data.object_version = version;
        };
      })(this));
    }
    promise.fail(dfr.reject);
    promise.done((function(_this) {
      return function() {
        var ignore_not_found, pool;
        if (!_this.editor_data._pool && _this.editor_data.table.poolLink()) {
          pool = _this.object.pool();
          if (_this.modeIsNot(["new", "bulk"])) {
            assert(pool, "Editor.load", "Unable to set pool for object, pool not found.", {
              object: _this.object,
              table: _this.editor_data.table
            });
          }
          _this.setPoolFromObject(pool);
          console.debug("pool not set in editor_data, using object to set pool:", _this.object, pool);
        }
        if (_this.modeIs(["new"])) {
          ignore_not_found = true;
        } else {
          ignore_not_found = false;
        }
        return _this.getDbInfo(ignore_not_found).fail(dfr.reject).done(function(dbInfo) {
          var error1, ex, load_trigger;
          _this.editor_data.dbInfo = dbInfo;
          try {
            if (_this.modeIsNot(["new"]) && !dbInfo.getGeneratedRights().write) {
              _this.throwNoRightsError();
            }
            if (_this.checkAndSetPoolFromDbInfo()) {
              assert(level === 0, "Editor.load", "Unable to set pool in new object.", {
                editor: _this
              });
              _this.load(dfr, level + 1);
              return;
            }
            if (_this.editor_data.mask_name && !dbInfo.maskNameAvailable(_this.editor_data.mask_name)) {
              _this.editor_data.mask_name = null;
            }
            if (!_this.editor_data.mask_name) {
              if (dbInfo.availableMasks().length === 0) {
                throw new UserError({
                  label: "editor.load.rightsmanagement.error.no_masks"
                });
              }
              if (dbInfo.maskNameAvailable(_this.object.maskName())) {
                _this.editor_data.mask_name = _this.object.maskName();
              } else {
                _this.editor_data.mask_name = dbInfo.availableMasks()[0].name();
              }
            }
          } catch (error1) {
            ex = error1;
            if (ex instanceof UserError) {
              ex.presentError().done(function() {
                return dfr.reject();
              });
              return;
            }
            throw ex;
          }
          load_trigger = _this.triggerCallback("editor-load");
          load_trigger.fail(dfr.reject);
          return load_trigger.done(function() {
            console.timeEnd("load");
            console.time("render");
            dfr.notify("render");
            return _this.renderObject().always(function() {
              return console.timeEnd("render");
            }).done(dfr.resolve).fail(dfr.reject);
          });
        });
      };
    })(this));
    return dfr.promise();
  };

  Editor.prototype.triggerCallback = function(type, info) {
    if (info == null) {
      info = {};
    }
    info.editor = this;
    info.object = this.object;
    info.editor_data = this.editor_data;
    return Events.trigger({
      type: type,
      info: info
    });
  };

  Editor.prototype.throwNoRightsError = function() {
    if (this.modeIs(["bulk"])) {
      throw new UserError({
        label: "editor.load.rightsmanagement.error.no_rights_bulk"
      });
    } else {
      throw new UserError({
        label: "editor.load.rightsmanagement.error.no_rights"
      });
    }
  };

  Editor.prototype.getMaskSelectPlaceholder = function() {
    return this.maskSelectPlaceholder = $div("cui-buttonbar");
  };

  Editor.prototype.updateMaskSelect = function() {
    var mfs;
    this.maskSelectPlaceholder.empty();
    mfs = new MaskFieldSelector({
      dbInfo: this.editor_data.dbInfo,
      show_all_fields_mask: true,
      mask_name: this.editor_data.mask_name,
      onChanged: (function(_this) {
        return function(old_name, new_name) {
          return _this.loadNewMask({
            loca_key: "main.editor.confirm_mask_change",
            new_mask_name: new_name
          });
        };
      })(this)
    });
    this.maskSelectPlaceholder.append(mfs.getSelect().start().DOM);
    return this;
  };

  Editor.prototype.getPoolNameLocalized = function(pool) {
    if (pool == null) {
      pool = this.editor_data._pool;
    }
    return (new Pool({
      pool: pool
    })).getDisplayText();
  };

  Editor.prototype.getMaskNameLocalized = function(mask_name) {
    if (mask_name == null) {
      mask_name = this.editor_data.mask_name;
    }
    return Mask.getMaskByMaskName(mask_name, this.editor_data.table.id()).nameLocalized();
  };

  Editor.prototype.loadNewMask = function(_opts) {
    var confirm_text, dfr, load_new_mask, new_pool, opts;
    opts = CUI.Element.readOpts(_opts, "Editor.loadMasks", {
      loca_key: {
        mandatory: true,
        check: String
      },
      new_mask_name: {
        mandatory: true,
        check: String
      },
      confirm: {
        "default": this.hasChanges(),
        mandatory: true,
        check: Boolean
      }
    });
    if (this.editor_data._pool) {
      new_pool = this.getPoolNameLocalized();
    } else {
      new_pool = "";
    }
    confirm_text = $$(opts.loca_key, {
      current_mask: this.getMaskNameLocalized(),
      new_mask: this.getMaskNameLocalized(opts.new_mask_name),
      new_pool: new_pool
    });
    dfr = new CUI.Deferred();
    if (this.modeIs(["new", "bulk"])) {
      load_new_mask = (function(_this) {
        return function() {
          _this.editor_data.mask_name = opts.new_mask_name;
          _this.reloadEditor();
          return dfr.resolve();
        };
      })(this);
    } else {
      load_new_mask = (function(_this) {
        return function() {
          var old_name;
          old_name = _this.editor_data.mask_name;
          _this.editor_data.mask_name = opts.new_mask_name;
          return _this.load().done(function() {
            _this.object_list.updateObjectInBrowser();
            _this.updateButtons();
            return dfr.resolve();
          }).fail(function() {
            _this.editor_data.mask_name = old_name;
            return dfr.reject();
          });
        };
      })(this);
    }
    if (opts.confirm) {
      CUI.confirm({
        text: confirm_text
      }).done(load_new_mask).fail(dfr.reject);
    } else {
      load_new_mask();
    }
    return dfr.promise();
  };

  Editor.prototype.getDeleteButton = function() {
    return this.deleteButton = new LocaButton({
      loca_key: "editor.button.delete",
      text: $$("base.delete"),
      onClick: (function(_this) {
        return function() {
          return _this.deleteObjects();
        };
      })(this)
    });
  };

  Editor.prototype.deleteObjects = function(ask, allow_empty) {
    var dfr, len, t;
    if (ask == null) {
      ask = this.editor_data.require_comment;
    }
    if (allow_empty == null) {
      allow_empty = false;
    }
    if (this.hasTemplate()) {
      len = this.object_list.getCount() - 1;
    } else {
      len = this.object_list.getCount();
    }
    if (len === 1) {
      t = $$("admin.easydb.object.remove.confirm");
    } else {
      t = $$("admin.easydb.object.remove.confirm.bulk", [len]);
    }
    dfr = new CUI.Deferred();
    CUI.confirm({
      text: t,
      button_text_ok: $$("base.delete"),
      button_text_cancel: $$("base.cancel"),
      button_primary: "cancel"
    }).fail(dfr.reject).done((function(_this) {
      return function(choice, btn, ev) {
        return _this.askForComment(ev, "delete", ask, allow_empty).fail(dfr.reject).done(function(ev) {
          return _this["delete"](ev).done(dfr.resolve).fail(dfr.reject);
        });
      };
    })(this));
    return dfr.promise();
  };

  Editor.prototype.doSave = function(ev) {
    var dfr, ref;
    if ((ref = DOM.find(":focus")[0]) != null) {
      ref.blur();
    }
    if (ev.altKey() || ev.shiftKey()) {
      return this.save(ev);
    }
    dfr = new CUI.Deferred();
    this.askForComment(ev, "save", this.editor_data.require_comment).fail(dfr.reject).done((function(_this) {
      return function(ev) {
        return _this.save(ev).fail(dfr.reject).done(function(received_data) {
          var read_only;
          if (_this.modeIsNot(["bulk"]) && received_data.length === 1 && !received_data[0]._generated_rights.write) {
            read_only = true;
          } else {
            read_only = false;
          }
          return dfr.resolve(received_data, read_only);
        });
      };
    })(this));
    return dfr.promise();
  };

  Editor.prototype.getCancelButton = function() {
    return new LocaButton({
      loca_key: "editor.button.cancel",
      onClick: (function(_this) {
        return function(ev) {
          return _this.doCancel(ev);
        };
      })(this)
    });
  };

  Editor.prototype.getSaveButton = function() {
    this.saveButton = new LocaButton({
      loca_key: "editor.button.save",
      text: $$("base.save"),
      disabled: true,
      onClick: (function(_this) {
        return function(ev) {
          return _this.doSave(ev).done(function(received_data, read_only) {
            if (read_only) {
              return _this.callback("saveReadOnly", received_data);
            } else {
              return _this.callback("save", received_data);
            }
          });
        };
      })(this)
    });
    return this.saveButton;
  };

  Editor.prototype.askForComment = function(ev, type, ask, allow_empty) {
    var dfr, modal, save_button, update_save_button;
    if (ask == null) {
      ask = true;
    }
    if (allow_empty == null) {
      allow_empty = false;
    }
    dfr = new CUI.Deferred();
    if (!ev.ctrlKey() && !ask) {
      dfr.resolve(ev);
      return dfr.promise();
    }
    save_button = new Button({
      text: $$("base." + type),
      onClick: (function(_this) {
        return function(ev) {
          modal.destroy();
          return dfr.resolve(ev);
        };
      })(this)
    });
    update_save_button = (function(_this) {
      return function() {
        if (_this.editor_data.comment.trim().length || allow_empty) {
          return save_button.enable();
        } else {
          return save_button.disable();
        }
      };
    })(this);
    modal = new Modal({
      "class": "ez5-editor-comment-modal",
      cancel: true,
      onCancel: function() {
        dfr.reject();
      },
      pane: {
        padded: true,
        header_left: new Label({
          text: $$("main.editor.comment." + type + ".title")
        }),
        content: (function(_this) {
          return function() {
            return [
              new MultilineLabel({
                text: $$("main.editor.comment." + type + ".hint")
              }), CUI.DOM.space(), new Input({
                textarea: true,
                onDataChanged: update_save_button,
                name: "comment",
                data: _this.editor_data
              }).start()
            ];
          };
        })(this),
        footer_right: (function(_this) {
          return function() {
            return [
              {
                text: $$("base.cancel"),
                onClick: function() {
                  modal.destroy();
                  return dfr.reject();
                }
              }, save_button
            ];
          };
        })(this)
      }
    });
    modal.show();
    update_save_button();
    return dfr.promise();
  };

  Editor.prototype.onChange = function(ev, data, info) {
    switch (ev.getType()) {
      case "pool-field-changed":
        this.poolChange(info);
        break;
      case "tags-field-changed":
        this.tagsChange(info).done((function(_this) {
          return function(resolve_info) {
            _this.triggerCallback("editor-tags-field-changed", resolve_info);
            return _this.__updateObject();
          };
        })(this));
        break;
      case "editor-changed":
      case "editor-reload-asset-browser":
      case "editor-update-asset-browser":
        CUI.scheduleCallback({
          call: this.__updateObject,
          ms: 200
        });
        switch (ev.getType()) {
          case "editor-reload-asset-browser":
            this.renderAssetBrowser();
            break;
          case "editor-update-asset-browser":
            this.updateAssetBrowser();
        }
        break;
      case "editor-changed-reload":
        this.reloadEditor();
    }
  };

  Editor.prototype.tagsChange = function(info) {
    console.debug("tag change!", info);
    return this.__checkDbInfoAndSwitchMask({
      loca_key_attrs: {
        current_pool: this.getPoolNameLocalized(info.old_pool),
        new_pool: this.getPoolNameLocalized()
      },
      confirm: info.editor_has_changes,
      old_tags: info.old_tags,
      new_tags: info.new_tags,
      type: "tags"
    }).fail((function(_this) {
      return function() {
        console.debug("copying back old tags", dump(info.old_tags));
        _this.object.getData()._tags = info.old_tags;
        return _this.reloadEditor();
      };
    })(this));
  };

  Editor.prototype.poolChange = function(info) {
    var ref;
    if (!this.__old_pool) {
      this.__old_pool = info.old_pool;
    }
    this.editor_data._pool = info.new_pool;
    if (info.new_pool && ((ref = this.__old_pool) != null ? ref.pool._id : void 0) === info.new_pool.pool._id) {
      this.__old_pool = null;
      return;
    }
    if (!this.editor_data._pool) {
      return;
    }
    return this.__checkDbInfoAndSwitchMask({
      loca_key_attrs: {
        current_pool: this.getPoolNameLocalized(info.old_pool),
        new_pool: this.getPoolNameLocalized()
      },
      confirm: info.editor_has_changes,
      type: "pool"
    }).done((function(_this) {
      return function() {
        return _this.__old_pool = null;
      };
    })(this)).fail((function(_this) {
      return function() {
        _this.editor_data._pool = _this.__old_pool;
        return _this.reloadEditor();
      };
    })(this));
  };

  Editor.prototype.__checkDbInfoAndSwitchMask = function(_opts) {
    var dfr, oldDbInfo, opts;
    opts = CUI.Element.readOpts(_opts, "Editor.__checkDbInfoAndSwitchMask", {
      loca_key_attrs: {
        mandatory: true,
        check: "PlainObject"
      },
      confirm: {
        mandatory: true,
        check: Boolean
      },
      type: {
        mandatory: true,
        check: ["tags", "pool"]
      },
      old_tags: {
        check: Array
      },
      new_tags: {
        check: Array
      }
    });
    dfr = new CUI.Deferred();
    oldDbInfo = this.editor_data.dbInfo;
    dfr.done((function(_this) {
      return function() {
        return _this.updateSaveButton();
      };
    })(this));
    dfr.fail((function(_this) {
      return function() {
        return _this.editor_data.dbInfo = oldDbInfo;
      };
    })(this));
    this.getDbInfo().done((function(_this) {
      return function(dbInfo) {
        var availableTagIdsAfter, availableTagIdsBefore, comment, confirm_mask_change, confirm_text, error1, ex, fake_data, load_new_mask, loca_key_attrs, m, masksAfter, masksBefore, new_fields, old_fields, ref, render_mode, render_mode_header, resolve_info, tags_field, use_mask_name;
        _this.editor_data.dbInfo = dbInfo;
        try {
          if (_this.modeIsNot(["new"]) && !dbInfo.getGeneratedRights().write) {
            _this.throwNoRightsError();
          }
          masksBefore = oldDbInfo.availableMasks();
          masksAfter = dbInfo.availableMasks();
          availableTagIdsBefore = JSON.stringify(oldDbInfo.availableTagIds());
          availableTagIdsAfter = JSON.stringify(dbInfo.availableTagIds());
          console.debug("masks before " + opts.type + " change", (function() {
            var i, len1, results;
            results = [];
            for (i = 0, len1 = masksBefore.length; i < len1; i++) {
              m = masksBefore[i];
              results.push(m.name());
            }
            return results;
          })());
          console.debug("masks after " + opts.type + " change", (function() {
            var i, len1, results;
            results = [];
            for (i = 0, len1 = masksAfter.length; i < len1; i++) {
              m = masksAfter[i];
              results.push(m.name());
            }
            return results;
          })());
          console.debug("tag ids before " + opts.type + " change", availableTagIdsBefore);
          console.debug("tag ids after " + opts.type + " change", availableTagIdsAfter);
          console.debug("confirm:", opts.confirm, "editor has changes:", _this.hasChanges());
          if (masksAfter.length === 0) {
            throw new UserError({
              label: "editor.load.rightsmanagement.error.no_masks"
            });
          }
          resolve_info = {
            old_tags: opts.old_tags,
            new_tags: opts.new_tags,
            available_tag_ids_before: oldDbInfo.availableTagIds(),
            available_tag_ids_after: dbInfo.availableTagIds()
          };
        } catch (error1) {
          ex = error1;
          if (ex instanceof UserError) {
            ex.presentError().done(function() {
              return dfr.reject();
            });
            return;
          }
          throw ex;
        }
        if (dbInfo.maskNameAvailable(_this.editor_data.mask_name)) {
          if (availableTagIdsBefore !== availableTagIdsAfter) {
            CUI.confirm({
              text: $$("editor.confirm_mask_change.tags_differ_warning")
            }).done(function() {
              return _this.reloadEditor().done(function() {
                return dfr.resolve(resolve_info);
              }).fail(dfr.reject);
            }).fail(dfr.reject);
          } else if (opts.old_tags && opts.new_tags) {
            ref = _this.getRenderModes(_this.object), render_mode_header = ref[0], render_mode = ref[1];
            if (_this.getTemplateIdx() !== null && !_this.isTemplate()) {
              fake_data = {
                _template: {
                  _tags: _this.object_list.getObject(_this.getTemplateIdx()).getData()._tags
                }
              };
            } else {
              fake_data = {};
            }
            fake_data._objecttype = _this.object.objecttype();
            tags_field = _this.object.mask.getFieldsByType(render_mode_header, TagsField)[0];
            old_fields = [];
            new_fields = [];
            _this.object.mask.invokeOnFields(render_mode, true, function(f) {
              fake_data._tags = opts.old_tags;
              if (f.isVisible(render_mode, {
                top_level_data: fake_data
              })) {
                old_fields.push(f);
              }
              fake_data._tags = opts.new_tags;
              if (f.isVisible(render_mode, {
                top_level_data: fake_data
              })) {
                return new_fields.push(f);
              }
            });
            if (old_fields.length !== new_fields.length) {
              CUI.confirm({
                text: $$("editor.confirm_mask_change.fields_differ_warning")
              }).done(function() {
                return _this.reloadEditor().done(function() {
                  return dfr.resolve(resolve_info);
                }).fail(dfr.reject);
              }).fail(dfr.reject);
            } else {
              dfr.resolve(resolve_info);
            }
          } else {
            dfr.resolve(resolve_info);
          }
          return;
        }
        confirm_mask_change = opts.confirm;
        load_new_mask = function() {
          return _this.loadNewMask({
            loca_key: "editor.confirm_mask_change." + opts.type,
            new_mask_name: use_mask_name,
            confirm: confirm_mask_change
          }).done(dfr.resolve).fail(dfr.reject);
        };
        use_mask_name = masksAfter[0].name();
        if (_this.modeIsNot(["bulk", "new"])) {
          loca_key_attrs = copyObject(opts.loca_key_attrs);
          loca_key_attrs.current_mask = _this.getMaskNameLocalized();
          loca_key_attrs.new_mask = _this.getMaskNameLocalized(use_mask_name);
          confirm_text = $$("editor.confirm_mask_change." + opts.type + ".save", loca_key_attrs);
          comment = $$("editor.confirm_mask_change." + opts.type + ".save.comment", loca_key_attrs);
          return CUI.confirm({
            text: confirm_text
          }).done(function(choice, btn, ev) {
            return _this.savePoolAndTagsOnly(ev, comment).done(function() {
              _this.object.__ignore_version_on_load = true;
              confirm_mask_change = false;
              return load_new_mask();
            }).fail(dfr.reject);
          }).fail(dfr.reject);
        } else {
          return load_new_mask();
        }
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  Editor.prototype.savePoolAndTagsOnly = function(ev, comment) {
    var send_data;
    assert(this.modeIsNot(["new", "bulk"]), "Editor.savePoolAndTagsOnly", "Mode cannot be 'new' or 'bulk'.");
    send_data = {
      _objecttype: this.object.objecttype(),
      _comment: comment
    };
    send_data[send_data._objecttype] = {
      _id: this.object.id(),
      _version: this.object.version() + 1
    };
    if (this.editor_data.table.poolLink()) {
      assert(this.editor_data._pool, "Editor.savePoolAndTagsOnly", "editor_data._pool needs to be set.");
      send_data[send_data._objecttype]._pool = {
        pool: {
          _id: this.editor_data._pool.pool._id
        }
      };
    }
    if (this.editor_data.table.hasTags() && this.object) {
      send_data._tags = this.object.getData()._tags;
    }
    if (ev.hasModifierKey()) {
      console.debug(dump(send_data));
      return CUI.rejectedPromise();
    }
    return ez5.api.db({
      api: "/" + send_data._objecttype,
      data: {
        base_fields_only: 1
      },
      json_data: [send_data]
    });
  };

  Editor.prototype.reloadEditor = function() {
    this.object_list.updateObjectInBrowser();
    return this.renderObject().done((function(_this) {
      return function() {
        return _this.updateButtons();
      };
    })(this));
  };

  Editor.prototype["delete"] = function(ev) {
    var i, idx, obj, ot_names, ref, ref1, ref2, send_data, send_data_per_ot, start, tn;
    if (this.hasTemplate()) {
      start = 1;
    } else {
      start = 0;
    }
    send_data_per_ot = {};
    ot_names = [];
    for (idx = i = ref = start, ref1 = this.object_list.getCount(); ref <= ref1 ? i < ref1 : i > ref1; idx = ref <= ref1 ? ++i : --i) {
      obj = this.object_list.getObject(idx);
      if (!obj.id()) {
        continue;
      }
      tn = obj.objecttype();
      send_data = send_data_per_ot[tn];
      if (!send_data) {
        send_data = send_data_per_ot[tn] = [];
        ot_names.push(tn);
      }
      send_data.push([obj.id(), obj.version(), (ref2 = this.editor_data.comment) != null ? ref2.trim() : void 0]);
    }
    if (ev.ctrlKey() || ev.shiftKey() || ev.altKey()) {
      console.debug("DELETE", dump(send_data_per_ot));
      return CUI.rejectedPromise();
    }
    return CUI.chunkWork.call(this, {
      items: ot_names,
      chunk_size: 1,
      call: (function(_this) {
        return function(items) {
          var ot_name;
          ot_name = items[0];
          send_data = send_data_per_ot[ot_name];
          return ez5.api.db({
            type: "DELETE",
            api: '/' + ot_name,
            json_data: send_data
          });
        };
      })(this)
    }).done((function(_this) {
      return function() {
        return _this.callback("delete");
      };
    })(this));
  };

  Editor.prototype.showWaitModal = function(status, attrs, footer_right) {
    var c, pre;
    if (status.indexOf(".") === -1) {
      pre = this.getWaitModalTitleLocaKeyPrefix();
    } else {
      pre = "";
    }
    c = new LocaLabel({
      loca_key: pre + status,
      loca_key_attrs: attrs
    });
    if (!this.waitModal) {
      this.waitModal = new Modal({
        "class": "ez5-editor-wait-for-saving-dialog cui-progress-info-dialog",
        pane: {
          padded: true,
          header_left: new LocaLabel({
            loca_key: pre + "title",
            loca_key_attrs: attrs
          }),
          footer_right: footer_right,
          content: c
        }
      });
      this.waitModal.show();
    } else {
      this.waitModal.replace(c, "content");
    }
    return this.waitModal;
  };

  Editor.prototype.getWaitModalTitleLocaKeyPrefix = function() {
    return "main.editor.save.";
  };

  Editor.prototype.dismissWaitModalTimeout = function() {
    this.__dismissWaitModalInProgress = true;
    CUI.setTimeout({
      ms: 1500,
      call: (function(_this) {
        return function() {
          _this.__dismissWaitModalInProgress = false;
          return _this.dismissWaitModal();
        };
      })(this)
    });
    return this;
  };

  Editor.prototype.dismissWaitModal = function() {
    if (this.waitModal && !this.__dismissWaitModalInProgress) {
      this.waitModal.destroy();
      this.waitModal = null;
    }
    return this;
  };

  Editor.prototype.save = function(ev) {
    var acl, api_progress_poll, bf, create_object, create_objects, data, data_json, data_object, dfr, error1, ex, fn, fn1, found, i, idx, j, l, len1, len2, len3, len4, n, o, obj, opts, pa, produce_assets, progress_uuid, q, r, ref, ref1, ref2, ref3, reloadEditor, reqs, save_url_appendix, send_data, send_data_object, send_data_objects, so, tmpl;
    console.debug("editor save", this, ev);
    this.__saveInProgress = true;
    dfr = new CUI.Deferred();
    dfr.done((function(_this) {
      return function(received_data) {
        _this.showWaitModal("saved");
        return _this.dismissWaitModalTimeout();
      };
    })(this));
    dfr.fail((function(_this) {
      return function() {
        _this.dismissWaitModal();
        if (reloadEditor) {
          return _this.reloadEditor();
        }
      };
    })(this));
    this.showWaitModal("preparing");
    send_data = [];
    create_objects = [];
    produce_assets = [];
    save_url_appendix = "";
    try {
      if (this.modeIsNot(["bulk"])) {
        for (idx = i = 0, ref = this.object_list.getCount(); 0 <= ref ? i < ref : i > ref; idx = 0 <= ref ? ++i : --i) {
          if (idx === this.getTemplateIdx()) {
            continue;
          }
          acl = [];
          obj = this.object_list.getObject(idx);
          obj.setMask(this.editor_data.mask_name);
          so = obj.getSaveData({
            "new": this.modeIs(["new"]),
            render_mode_header: 'editor-header',
            render_mode: 'editor',
            create_objects: create_objects,
            produce_assets: produce_assets
          });
          so._idx_in_objects = idx;
          so._comment = (ref1 = this.editor_data.comment) != null ? ref1.trim() : void 0;
          send_data.push(so);
        }
      } else {
        bf = this.getBulkFields();
        tmpl = this.object_list.getObject(0);
        assert(tmpl instanceof TemplateObject, (getObjectClass(this)) + ".save", "TemplateObject not found", {
          object_list: this.object_list
        });
        assert(bf.length, "Editor.save", "no bulk fields to save");
        opts = {
          bulk: true,
          render_mode_header: 'editor-header-bulk',
          render_mode: 'editor-bulk',
          create_objects: create_objects
        };
        data = tmpl.getSaveData(opts);
        if (opts.base_fields_only) {
          save_url_appendix = save_url_appendix + "&base_fields_only=1";
        }
        obj = data[data._objecttype];
        obj._id = [];
        obj._comment = (ref2 = this.editor_data.comment) != null ? ref2.trim() : void 0;
        for (idx = j = 1, ref3 = this.object_list.getCount(); 1 <= ref3 ? j < ref3 : j > ref3; idx = 1 <= ref3 ? ++j : --j) {
          o = this.object_list.getObject(idx);
          obj._id.push(o.id());
        }
        send_data.push(data);
      }
    } catch (error1) {
      ex = error1;
      if (ex instanceof UserError) {
        ex.presentError({
          title: $$("main.editor.save.error.title")
        }).done((function(_this) {
          return function() {
            return dfr.reject();
          };
        })(this));
        return;
      }
      throw ex;
    }
    send_data_objects = [];
    for (l = 0, len1 = create_objects.length; l < len1; l++) {
      create_object = create_objects[l];
      data_json = JSON.stringify(create_object._save_data);
      found = null;
      for (n = 0, len2 = send_data_objects.length; n < len2; n++) {
        send_data_object = send_data_objects[n];
        if (send_data_object.data_json === data_json) {
          found = send_data_object;
        }
      }
      if (!found) {
        found = {
          objects: [],
          data_json: data_json
        };
        send_data_objects.push(found);
      }
      found.objects.push(create_object);
    }
    progress_uuid = ez5.generateUUID();
    save_url_appendix = save_url_appendix + "&progress_uuid=" + progress_uuid;
    if (ev && (ev.ctrlKey() || ev.altKey() || ev.shiftKey())) {
      console.debug("save data ****************");
      console.debug("object list: ------------", this.object_list);
      console.debug("url appendix: ------------", save_url_appendix);
      console.debug("send data objects: -----------", dump(send_data_objects), send_data_objects);
      console.debug("produce assets: -----------", dump(produce_assets), produce_assets);
      console.debug("send data: --------------", dump(send_data), send_data);
      return dfr.reject().promise();
    }
    api_progress_poll = EventPoller.listen({
      instance: this,
      filter: (function(_this) {
        return function(event) {
          return event.type === "API_PROGRESS" && event.info.uuid === progress_uuid;
        };
      })(this),
      call: (function(_this) {
        return function(events) {
          var latest_info;
          latest_info = events[events.length - 1].info;
          if (!_this.waitModal) {
            return;
          }
          return _this.showWaitModal(latest_info.progress_info, latest_info.progress_info_parameters);
        };
      })(this)
    });
    this.showWaitModal("sending");
    reqs = [];
    reloadEditor = false;
    fn = (function(_this) {
      return function(data_object) {
        var _dfr, _send_data;
        _send_data = JSON.parse(data_object.data_json);
        delete _send_data.__in_memory;
        delete _send_data._orig_mask;
        _send_data[_send_data._objecttype]._version = 1;
        _dfr = ez5.api.db({
          api: "/" + _send_data._objecttype,
          json_data: [_send_data]
        }).done(function(data) {
          var k, len4, r, ref4, v;
          obj = data[0];
          ref4 = data_object.objects;
          for (r = 0, len4 = ref4.length; r < len4; r++) {
            create_object = ref4[r];
            create_object._save_data[obj._objecttype]._id = obj[obj._objecttype]._id;
            for (k in obj) {
              v = obj[k];
              create_object._data_ref[k] = v;
            }
          }
          return reloadEditor = true;
        });
        return reqs.push(_dfr);
      };
    })(this);
    for (q = 0, len3 = send_data_objects.length; q < len3; q++) {
      data_object = send_data_objects[q];
      fn(data_object);
    }
    fn1 = (function(_this) {
      return function(pa) {
        var _dfr, command;
        command = {
          eas_parent_id: pa.eas_parent_id,
          transform: pa.__transform
        };
        _dfr = ez5.server({
          api: "/eas/produce",
          type: "POST",
          json_data: command
        }).done(function(new_value) {
          CUI.debug("produce done", new_value, pa);
          delete pa.__transform;
          return pa._id = new_value._id;
        });
        return reqs.push(_dfr);
      };
    })(this);
    for (r = 0, len4 = produce_assets.length; r < len4; r++) {
      pa = produce_assets[r];
      fn1(pa);
    }
    CUI.when(reqs).done((function(_this) {
      return function() {
        return _this.sendData(send_data, save_url_appendix).always(function() {
          if (api_progress_poll) {
            return Events.ignore(api_progress_poll);
          }
        }).done(dfr.resolve).fail(dfr.reject);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  Editor.prototype.getApiDbPriority = function() {
    return 1;
  };

  Editor.prototype.getSendDataUrl = function() {
    var format;
    if (this._format) {
      format = this._format;
    } else if (this.modeIs(["new"])) {
      format = "long";
    } else {
      format = "short";
    }
    return "/" + this.editor_data.table.name() + "?priority=" + this.getApiDbPriority() + "&format=" + format;
  };

  Editor.prototype.sendData = function(send_data, save_url_appendix) {
    var dfr;
    if (save_url_appendix == null) {
      save_url_appendix = "";
    }
    this.showWaitModal("sending");
    dfr = new CUI.Deferred();
    return ez5.api.db({
      api: this.getSendDataUrl() + save_url_appendix,
      json_data: send_data,
      error: function(xhr) {}
    }).done((function(_this) {
      return function(data) {
        var i, idx, received_idx, ref, ro;
        CUI.debug("save is done", data);
        _this.discardHasChanges();
        if (_this.modeIsNot(["bulk"])) {
          received_idx = 0;
          for (idx = i = 0, ref = _this.object_list.getCount(); 0 <= ref ? i < ref : i > ref; idx = 0 <= ref ? ++i : --i) {
            if (idx === _this.getTemplateIdx()) {
              continue;
            }
            ro = _this.object_list.getObject(idx);
            ro.setData(data[received_idx]);
            CUI.debug(received_idx, data[received_idx], data, " object updated");
            received_idx++;
          }
        }
        delete _this.editor_data.comment;
        _this.updateButtons();
        return dfr.resolve();
      };
    })(this)).progress((function(_this) {
      return function(state, task_idx, len) {
        switch (state) {
          case "start":
            _this.dismissWaitModal();
            break;
          case "done":
            _this.showWaitModal("sending");
        }
      };
    })(this)).fail((function(_this) {
      return function(xhr) {
        _this.saveInProgress = false;
        if (xhr === "cancelled") {
          CUI.debug("save cancelled");
          dfr.reject();
          return;
        }
        CUI.debug("save failed", xhr);
        return ez5.error_handler(xhr).done(function() {
          return dfr.reject(xhr);
        });
      };
    })(this));
  };

  Editor.prototype.addNewTemplateObject = function(data) {
    var ref, ro;
    if (data == null) {
      data = {};
    }
    assert(((ref = this.editor_data) != null ? ref.table : void 0) instanceof Table, (getObjectClass(this)) + ".addNewTemplateObject", "@editor_data.table must be set");
    assert(this.object_list.getCount() === 0, (getObjectClass(this)) + ".addNewTemplateObject", "Unable to add TemplateObject to non-empty object_list", {
      object_list: this.object_list
    });
    ro = this.addNewResultObject(data, new TemplateObject());
    this.template_idx = 0;
    return ro;
  };

  Editor.prototype.addNewResultObject = function(data, ro) {
    var ref;
    if (data == null) {
      data = {};
    }
    if (ro == null) {
      ro = new ResultObject();
    }
    assert(((ref = this.editor_data) != null ? ref.table : void 0) instanceof Table, (getObjectClass(this)) + ".addNewResultObject", "@editor_data.table must be set");
    if (this.hasTemplate()) {
      data._template = this.object_list.getObject(this.getTemplateIdx()).data;
    }
    if (!data._mask) {
      data._mask = this.editor_data.mask_name;
    }
    ro.initData(this.editor_data.table.name(), data);
    this.object_list.push(ro);
    return ro;
  };

  Editor.prototype.supportsTemplate = function() {
    return false;
  };

  Editor.prototype.hasTemplate = function() {
    return !isNull(this.template_idx);
  };

  Editor.prototype.getTemplateIdx = function() {
    return this.template_idx;
  };

  Editor.prototype.hasUploads = function() {
    if (!this.__pane) {
      return false;
    }
    return !!CUI.DOM.findElement(this.__pane.DOM, ".ez5-file-upload-progress");
  };

  Editor.prototype.__abortUploads = function() {
    var el, i, len1, ref;
    if (!this.__pane) {
      return;
    }
    ref = CUI.DOM.matchSelector(this.__pane.DOM, ".ez5-file-upload-progress");
    for (i = 0, len1 = ref.length; i < len1; i++) {
      el = ref[i];
      CUI.DOM.data(el, "file-upload").abort();
    }
  };

  Editor.prototype.doCancel = function(ev) {
    return this.doClose(ev).done((function(_this) {
      return function(callback) {
        return _this.callback(callback);
      };
    })(this));
  };

  Editor.prototype.doClose = function() {
    var dfr, ref, save_button;
    if (this.hasChanges() || this.hasUploads()) {
      dfr = new CUI.Deferred();
      if (((ref = this.saveButton) != null ? ref.isEnabled() : void 0) && this.modeIsNot(["bulk"])) {
        save_button = true;
      } else {
        save_button = false;
      }
      new CUI.ConfirmationChoice({
        text: $$("main.editor.unsaved_changes"),
        choices: [
          {
            _value: "discard",
            text: $$("editor.discard.changes")
          }, {
            primary: !save_button,
            _value: "cancel",
            text: $$("base.cancel")
          }, save_button ? {
            _value: "save",
            primary: true,
            text: $$("base.save")
          } : void 0
        ]
      }).open().done((function(_this) {
        return function(choice, btn, ev) {
          switch (choice._value) {
            case "cancel":
              return dfr.reject();
            case "discard":
              _this.__abortUploads();
              return dfr.resolve("cancel");
            case "save":
              return _this.doSave(ev).fail(function() {
                return dfr.reject();
              }).done(function() {
                return dfr.resolve("save");
              });
          }
        };
      })(this));
      return dfr.promise();
    }
    return CUI.resolvedPromise("cancel");
  };

  Editor.prototype.hasChanges = function() {
    var el;
    if (!this.__pane) {
      return false;
    }
    if (this.modeIs(['new', 'bulk'])) {
      return true;
    }
    el = DOM.findElement(this.__pane.DOM, ".data-changed,.row-data-changed,.row-child-data-changed");
    if (el) {
      return true;
    } else {
      return false;
    }
  };

  Editor.prototype.discardHasChanges = function() {
    return this.__pane.DOM.find(".data-changed,.row-data-changed,.row-child-data-changed").removeClass("data-changed row-data-changed row-child-data-changed");
  };

  Editor.prototype.saveAllowed = function() {
    return this.hasChanges();
  };

  Editor.prototype.updateButtons = function() {
    var ac, cols, ref, ref1, ref2, ref3, show;
    if (!this.__pane) {
      return;
    }
    if ((ref = this.__title) != null) {
      ref.destroy();
    }
    this.__title = this.object.renderTitle();
    if (this.modeIs(["bulk"])) {
      this.__paneHeader.replace([
        new Label({
          text: $$("main.editor.bulk")
        }), this.__title
      ], "left");
    } else {
      this.__paneHeader.replace(this.__title, "left");
    }
    if (this.historyBrowserButton) {
      if (this.object.id() && this.object.changelog().length > 0) {
        this.historyBrowserButton.enable();
      } else {
        this.historyBrowserButton.disable();
      }
    }
    if (this.assetBrowserButton) {
      if (this.object instanceof TemplateObject) {
        if (CUI.__ng__) {
          cols = ((ref1 = this.getObjectList().getObject(1)) != null ? ref1.getAssetsForBrowser("editor") : void 0) || false;
        } else {
          cols === false;
        }
      } else {
        cols = this.object.getAssetsForBrowser("editor");
      }
      if (cols === false) {
        show = false;
      } else {
        show = true;
      }
      if (show) {
        this.assetBrowserButton.show();
        this.assetBrowserButton.enable();
        if (!this.__updateButtonsFirstDone) {
          if (ez5.session.getPref("show_asset_browser")) {
            if (this.assetBrowserButton.isActive()) {
              this.showPullOut();
            } else {
              this.assetBrowserButton.activate();
            }
          } else {
            if (!this.assetBrowserButton.isActive()) {
              this.hidePullOut();
            } else {
              this.assetBrowserButton.deactivate();
            }
          }
        }
      } else {
        this.assetBrowserButton.hide();
        this.assetBrowserButton.disable();
        this.hidePullOut();
      }
    }
    this.__updateButtonsFirstDone = true;
    ac = Mask.getMaskByMaskName(this.editor_data.mask_name, this.editor_data.table.id()).requireComment();
    if (this.modeIs(["bulk"]) && ac === "never") {
      ac = "default-disabled";
    }
    if (!this.__require_comment_type || this.__require_comment_type !== ac) {
      this.__require_comment_type = ac;
      switch (ac) {
        case "never":
          this.askForCommentCheckbox.hide();
          break;
        case "default-disabled":
          this.askForCommentCheckbox.setValue(false);
          this.askForCommentCheckbox.show();
          break;
        case "default-enabled":
          this.askForCommentCheckbox.setValue(true);
          this.askForCommentCheckbox.show();
          break;
        case "always":
          this.askForCommentCheckbox.setValue(true);
          this.askForCommentCheckbox.disable();
          this.askForCommentCheckbox.show();
          break;
        default:
          this.askForCommentCheckbox.hide();
      }
    }
    this.updateSaveButton();
    if (this.object.hasRight("delete") && (this.object.id() || (this.object instanceof TemplateObject && this.modeIs(["bulk"])))) {
      if ((ref2 = this.deleteButton) != null) {
        ref2.show();
      }
    } else {
      if ((ref3 = this.deleteButton) != null) {
        ref3.hide();
      }
    }
    return this;
  };

  Editor.prototype.updateSaveButton = function() {
    var el, enable, f, fdata, hide_toolbar, i, idx, j, key, l, len1, len2, len3, len4, n, obj, opts, p, problems, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
    if (!this.__pane) {
      return;
    }
    opts = {
      bulk: this.modeIs(['bulk']),
      "new": this.modeIs(['new'])
    };
    ref = ['ez5-check-failed-column', 'ez5-check-failed-tab', 'ez5-check-failed-row'];
    for (i = 0, len1 = ref.length; i < len1; i++) {
      key = ref[i];
      ref1 = DOM.matchSelector(this.__pane.DOM, '.' + key);
      for (j = 0, len2 = ref1.length; j < len2; j++) {
        el = ref1[j];
        el.classList.remove(key);
      }
    }
    enable = true;
    ref2 = this.object_list.getObjects();
    for (idx = l = 0, len3 = ref2.length; l < len3; idx = ++l) {
      obj = ref2[idx];
      if (opts.bulk && this.getTemplateIdx() !== idx) {
        continue;
      }
      ref3 = this.getRenderModes(obj), opts.render_mode = ref3[0], opts.render_mode_header = ref3[1];
      problems = obj.checkSaveData(opts);
      if (problems.length === 0) {
        continue;
      }
      for (n = 0, len4 = problems.length; n < len4; n++) {
        p = problems[n];
        f = p._field;
        fdata = p._field_data[f.name() + ':field'];
        if (!fdata) {
          continue;
        }
        if (!fdata.listViewColumn || !fdata.element) {
          continue;
        }
        fdata.listViewColumn.setProblemClass();
        if ((ref4 = DOM.data((ref5 = CUI.DOM.closest(fdata.element, ".cui-tmpl-tab-body")) != null ? ref5[0] : void 0, "element")) != null) {
          ref4.getButton().DOM.addClass('ez5-check-failed-tab');
        }
      }
      if (!opts.bulk && this.getTemplateIdx() === idx) {
        continue;
      }
      enable = false;
    }
    if (opts.bulk && this.getBulkFields().length === 0) {
      enable = false;
    }
    hide_toolbar = false;
    if (enable) {
      CUI.DOM.hideElement(this.__requiredLabel.DOM);
      if (this.askForCommentCheckbox.isHidden()) {
        hide_toolbar = true;
      }
    } else {
      CUI.DOM.showElement(this.__requiredLabel.DOM);
    }
    if (hide_toolbar) {
      CUI.DOM.hideElement(this.__toolbarBottom.DOM);
    } else {
      CUI.DOM.showElement(this.__toolbarBottom.DOM);
    }
    if (enable && this.hasUploads()) {
      enable = false;
    }
    if (!this.saveAllowed()) {
      enable = false;
    }
    if (enable) {
      this.saveButton.enable();
      if ((ref6 = this.copyButton) != null) {
        ref6.disable();
      }
      if ((ref7 = this.copyTool) != null) {
        ref7.disable();
      }
    } else {
      this.saveButton.disable();
      if ((ref8 = this.copyButton) != null) {
        ref8.enable();
      }
      if ((ref9 = this.copyTool) != null) {
        ref9.enable();
      }
    }
    return this;
  };

  Editor.prototype.getBulkFields = function() {
    var fields, object;
    fields = [];
    object = this.object_list.getObject(this.getTemplateIdx());
    object.mask.invokeOnFields("all", false, (function(_this) {
      return function(f) {
        if (f.getOption(object.data[object.data._objecttype], "bulk")) {
          return fields.push(f);
        }
      };
    })(this));
    return fields;
  };

  Editor.prototype.getObjectList = function() {
    return this.object_list;
  };

  Editor.prototype.isTemplate = function() {
    return this.getTemplateIdx() === this.object_list.getCurrentIdx();
  };

  Editor.prototype.renderObject = function() {
    var dfr, div, done_render, pool_ids, ref, ref1, render_detail, render_mode, render_mode_header;
    assert(this.editor_data.table instanceof Table, "Editor.renderObject", "table is not set");
    if (this.modeIsNot(["bulk"])) {
      assert(!this.editor_data.table.poolLink() || this.editor_data._pool, "Editor.renderObject", "pool is not set", {
        editor_data: this.editor_data
      });
    }
    if (this.modeIs(["new"])) {
      assert(!this.object.id(), "Editor.renderObject", "id is set for 'new' editor.", {
        editor_data: this.editor_data,
        data: this.object.getData()
      });
    }
    assert(this.editor_data.mask_name, "Editor.renderObject", "editor_data.mask_name needs to be set.", {
      editor_data: this.editor_data,
      data: this.object.getData()
    });
    assert(this.object.objecttype(), "Editor.renderObject", "object.objecttype() is empty", {
      data: this.object.getData()
    });
    if (this.editor_data.table.poolLink()) {
      this.setPoolInObject(this.object);
    }
    this.object.setMask(this.editor_data.mask_name);
    dfr = new CUI.Deferred();
    if (!this.__pane) {
      return dfr.reject().promise();
    }
    this.object.setCSSClasses(this.__pane);
    done_render = (function(_this) {
      return function() {
        return _this.renderAssetBrowser();
      };
    })(this);
    dfr.always((function(_this) {
      return function() {
        _this.__updateButtonsFirstDone = false;
        return _this.updateButtons();
      };
    })(this));
    if (this.modeIs(["bulk"]) && !this.isTemplate()) {
      this.__mainPane.empty("center");
      render_detail = (function(_this) {
        return function() {
          _this.__mainPane.replace(_this.object.renderDetail("detail", "detail-header", {
            onDone: function() {
              return dfr.resolve();
            },
            onFail: function() {
              return dfr.reject();
            }
          }), "center");
          return done_render();
        };
      })(this);
      if ((ref = this.object.getFormat()) === "full" || ref === "long") {
        render_detail();
      } else {
        this.object.loadFromDbWithMask(this.editor_data.mask_name).done((function(_this) {
          return function() {
            _this.object.data._template = _this.object_list.getObject(_this.getTemplateIdx()).data;
            return render_detail();
          };
        })(this)).fail(dfr.reject);
      }
    } else {
      ref1 = this.getRenderModes(this.object), render_mode_header = ref1[0], render_mode = ref1[1];
      if (this.editor_data.table.poolLink()) {
        pool_ids = this.editor_data.dbInfo.getPoolIds();
        if (pool_ids === false) {
          pool_ids = [];
        }
      } else {
        pool_ids = null;
      }
      this.updateMaskSelect();
      div = this.object.renderEditor(render_mode, render_mode_header, {
        onChange: (function(_this) {
          return function(ev, data, info) {
            return _this.onChange(ev, data, info);
          };
        })(this),
        editor: this,
        bulk_mode: this.modeIs(["bulk"]),
        pool_ids: pool_ids,
        maximize: false,
        onDone: (function(_this) {
          return function() {
            return _this.triggerCallback("editor-render-object").done(dfr.resolve).fail(dfr.reject);
          };
        })(this),
        onFail: (function(_this) {
          return function() {
            return dfr.reject();
          };
        })(this)
      });
      this.__mainPane.replace(div, "center");
      done_render();
    }
    return dfr.promise();
  };

  Editor.prototype.getRenderModes = function(obj) {
    var header, mode;
    if (this.modeIs(["new"])) {
      if (obj instanceof TemplateObject) {
        header = "editor-header-template";
        mode = "editor-template";
      } else {
        header = "editor-header";
        mode = "editor";
      }
    } else if (this.modeIs(["bulk"])) {
      header = "editor-header-bulk";
      mode = "editor-bulk";
    } else {
      header = "editor-header";
      mode = "editor";
    }
    return [header, mode];
  };

  Editor.prototype.askForVersionChanged = function() {
    return this.object.loadFromDb().done((function(_this) {
      return function() {
        var comment, last_change, mod, replace;
        last_change = _this.object.data._changelog.slice(-1)[0];
        replace = {
          user: last_change.user.user._generated_displayname
        };
        if (isEmpty(last_change.comment)) {
          comment = new EmptyLabel({
            text: $$("main.editor.version_changed.no_comment")
          });
        } else {
          comment = new EmptyLabel({
            text: last_change.comment
          });
        }
        mod = new CUI.ConfirmationDialog({
          title: $$("main.editor.version_changed.title"),
          content: [
            new MultilineLabel({
              text: $$("main.editor.version_changed.explain", replace)
            }), comment
          ],
          buttons: [
            {
              text: $$("main.editor.version_changed.button.discard_changes"),
              onClick: function(ev) {
                mod.destroy();
                return _this.reloadEditor();
              }
            }
          ]
        });
        return mod.show();
      };
    })(this));
  };

  Editor.prototype.askForVersionDeleted = function() {
    var mod;
    mod = new CUI.ConfirmationDialog({
      title: $$("main.editor.version_deleted.title"),
      content: new MultilineLabel({
        text: $$("main.editor.version_deleted.explain")
      }),
      buttons: [
        {
          text: $$("main.editor.version_deleted.button.close"),
          onClick: (function(_this) {
            return function(ev) {
              mod.destroy();
              return _this.callback("delete");
            };
          })(this)
        }
      ]
    });
    return mod.show();
  };

  Editor.prototype.getCopyButton = function() {
    if (this.modeIs(["new", "bulk"]) || !this._onCopy) {
      return;
    }
    return this.copyButton = new LocaButton({
      loca_key: "editor.copy",
      hidden: true,
      onClick: (function(_this) {
        return function() {
          return _this.callback("copy");
        };
      })(this)
    });
  };

  return Editor;

})(CUI.Element);

CUI.ready(function() {
  Events.registerEvent({
    type: ["editor-changed", "editor-changed-reload", "editor-reload-asset-browser", "editor-update-asset-browser"],
    bubble: true
  });
  return Events.registerEvent({
    type: ["editor-update", "editor-load", "editor-render-object", "editor-add-new-result-object", "editor-tags-field-changed"]
  });
});
// Generated by CoffeeScript 1.10.0
var EditorModal,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

EditorModal = (function(superClass) {
  extend(EditorModal, superClass);

  function EditorModal() {
    this.removeObject = bind(this.removeObject, this);
    return EditorModal.__super__.constructor.apply(this, arguments);
  }

  EditorModal.prototype.getMainPane = function() {
    this.__horizontalLayout = new HorizontalLayout({
      "class": "ez5-editor-pane",
      right: {
        flexHandle: {
          hidden: false,
          closed: true,
          state_name: "editor-modal-right"
        }
      }
    });
    this.__pullOutDiv = this.__horizontalLayout.right();
    this.__pullOutFlexHandle = this.__horizontalLayout.getFlexHandle("right");
    return this.__horizontalLayout;
  };

  EditorModal.prototype.appendAssetBrowser = function() {
    var vl;
    if (this.assetBrowserInfoControl) {
      vl = new VerticalLayout({
        top: {
          "class": "ez5-editor-pane-asset-browser",
          content: this.assetBrowser,
          flexHandle: {
            hidden: false,
            state_name: "editor-modal-asset-browser-divider"
          }
        },
        center: {
          "class": "ez5-editor-pane-asset-browser-info-control",
          content: this.assetBrowserInfoControl
        }
      });
      return this.__pullOutDiv.append(vl);
    } else {
      return this.__pullOutDiv.append(this.assetBrowser);
    }
  };

  EditorModal.prototype.updateButtons = function() {
    var ref;
    EditorModal.__super__.updateButtons.call(this);
    return (ref = this.focusNavigationManager) != null ? ref.update() : void 0;
  };

  EditorModal.prototype.destroy = function() {
    var ref, ref1, ref2;
    if ((ref = this.modal) != null) {
      ref.hide();
    }
    if ((ref1 = this.focusNavigationManager) != null) {
      ref1.destroy();
    }
    EditorModal.__super__.destroy.call(this);
    if ((ref2 = this.modal) != null) {
      ref2.destroy();
    }
    return this.modal = null;
  };

  EditorModal.prototype.open = function() {
    this.__show();
    if (!CUI.__ng__) {
      this.modal.show();
    }
    return this.load().done((function(_this) {
      return function() {
        if (CUI.__ng__) {
          return _this.modal.show();
        }
      };
    })(this)).fail((function(_this) {
      return function() {
        return _this.modal.destroy();
      };
    })(this));
  };

  EditorModal.prototype.__show = function() {
    this.render();
    return this.modal = new Modal({
      "class": "ez5-editor-modal",
      fill_space: "both",
      pane: this.__pane
    });
  };

  EditorModal.prototype.show = function() {
    this.__show();
    return this.modal.show();
  };

  EditorModal.prototype.destroy = function() {
    var ref;
    EditorModal.__super__.destroy.call(this);
    return (ref = this.modal) != null ? ref.destroy() : void 0;
  };

  EditorModal.prototype.render = function() {
    EditorModal.__super__.render.call(this);
    this.__toolbar.replace([this.getMaskSelectPlaceholder()], "left");
    this.__toolbar.replace([this.getPullOutSwitch()], "right");
    this.__paneHeader.replace([
      new LocaButton({
        "class": "ez5-modal-close-button",
        loca_key: "editor.modal.close",
        onClick: (function(_this) {
          return function(ev) {
            return _this.doCancel(ev);
          };
        })(this)
      })
    ], "right");
    this.__paneFooter.replace([this.getCancelButton()], "left");
    this.__paneFooter.replace([this.getDeleteButton(), this.getCopyButton(), this.getSaveButton()], "right");
    return this.__pane;
  };

  EditorModal.prototype.isOpen = function() {
    return !!this.modal;
  };

  EditorModal.prototype.removeObject = function(idx) {
    var load_first;
    CUI.debug("removeObject", this._object_list.getCurrentIdx(), idx);
    if (this._object_list.getCurrentIdx() === idx) {
      load_first = true;
      alert("load_first");
    }
    this._object_list.remove(idx);
    if (load_first) {
      this._object_list.setCurrentIdx(0);
      return this.load();
    } else {
      return this.updateButtons();
    }
  };

  return EditorModal;

})(Editor);
// Generated by CoffeeScript 1.10.0
var EditorModalBulk,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

EditorModalBulk = (function(superClass) {
  extend(EditorModalBulk, superClass);

  function EditorModalBulk() {
    this.removeObject = bind(this.removeObject, this);
    return EditorModalBulk.__super__.constructor.apply(this, arguments);
  }

  EditorModalBulk.prototype.getMainPane = function() {
    this.__sidebar = new VerticalLayout({
      "class": "ez5-editor-modal-bulk-left-vertical-layout",
      bottom: {}
    });
    this.__horizontalLayout = new HorizontalLayout({
      "class": "ez5-editor-pane",
      left: {
        content: this.__sidebar
      },
      right: {
        flexHandle: {
          hidden: false,
          closed: true,
          state_name: "editor-modal-right"
        }
      }
    });
    this.__pullOutDiv = this.__horizontalLayout.right();
    this.__pullOutFlexHandle = this.__horizontalLayout.getFlexHandle("right");
    return this.__horizontalLayout;
  };

  EditorModalBulk.prototype.getSidebarButtons = function() {
    this.minusButton = new LocaButton({
      loca_key: "editor.modal.bulk.sidebar.minus-button",
      disabled: true,
      group: "plusminus",
      onClick: (function(_this) {
        return function() {
          _this.minusButton.disable();
          return _this.removeObject(_this.object_list.getCurrentIdx());
        };
      })(this)
    });
    return [this.minusButton];
  };

  EditorModalBulk.prototype.getSidebar = function() {
    return this.__sidebar;
  };

  EditorModalBulk.prototype.render = function() {
    var browserDiv;
    EditorModalBulk.__super__.render.call(this);
    browserDiv = this.object_list.renderBrowser();
    this.__sidebar.replace(browserDiv, "center");
    this.__sidebar.replace(this.getSidebarButtons(), "bottom");
    Events.listen({
      node: browserDiv,
      type: "click",
      call: (function(_this) {
        return function(ev) {
          var idx, old_idx, target;
          ev.stopPropagation();
          target = DOM.closest(ev.getTarget(), "div[idx]");
          if (target) {
            idx = DOM.getAttribute(target, "idx");
            CUI.debug("clicked on object browser", ev, idx, parseInt(idx));
            old_idx = _this.object_list.getCurrentIdx();
            if (idx >= 0) {
              _this.object_list.setCurrentIdx(idx);
              _this.load().fail(function() {
                _this.object_list.setCurrentIdx(old_idx);
                return _this.load().fail(function() {});
              });
            }
          }
        };
      })(this)
    });
    this.object_list.updateBrowser();
    this.__pane.addClass("ez5-editor-bulk");
    return this.__pane;
  };

  EditorModalBulk.prototype.updateButtons = function() {
    EditorModalBulk.__super__.updateButtons.call(this);
    if (!this.minusButton) {
      return this;
    }
    if (this._object_list.getCurrentIdx() === this.getTemplateIdx() || this._object_list.getCountWithoutTemplate() <= this.getMinimumObjectCount()) {
      this.minusButton.disable();
    } else {
      this.minusButton.enable();
    }
    return this;
  };

  EditorModalBulk.prototype.getMinimumObjectCount = function() {
    return 2;
  };

  EditorModalBulk.prototype.removeObject = function(idx) {
    var load;
    CUI.debug("removeObject", this._object_list.getCurrentIdx(), idx);
    if (this._object_list.getCurrentIdx() === idx) {
      load = true;
    }
    this._object_list.remove(idx);
    if (load) {
      this.load();
    } else {
      this.updateButtons();
    }
    return this;
  };

  return EditorModalBulk;

})(EditorModal);
// Generated by CoffeeScript 1.10.0
var EditorModalSingle,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

EditorModalSingle = (function(superClass) {
  extend(EditorModalSingle, superClass);

  function EditorModalSingle() {
    return EditorModalSingle.__super__.constructor.apply(this, arguments);
  }

  EditorModalSingle.prototype.initOpts = function() {
    EditorModalSingle.__super__.initOpts.call(this);
    this.addOpts({
      editor_sidebar: {
        check: EditorSidebar
      }
    });
    this.mergeOpt("object_list", {
      mandatory: false,
      check: function(v) {
        return v instanceof ObjectList && v.getCount() === 1;
      }
    });
    return this.mergeOpt("mode", {
      "default": "single"
    });
  };

  EditorModalSingle.prototype.readOpts = function() {
    EditorModalSingle.__super__.readOpts.call(this);
    assert(xor(this._editor_sidebar, this._object_list || this._global_object_id), "new EditorModalSingle", "One of opts.editor_sidebar or opts.object_list must be set.", {
      opts: this.opts
    });
    if (this._editor_sidebar) {
      this.object_list = this._editor_sidebar.object_list;
      this.editor_data = this._editor_sidebar.editor_data;
      return this.object = this.object_list.getObject();
    }
  };

  EditorModalSingle.prototype.open = function() {
    if (this._editor_sidebar) {
      this.show();
      if (this.copyButton) {
        DbInfo.canCreate({
          objecttypes: [new Objecttype(this.editor_data.table)]
        }).done((function(_this) {
          return function() {
            return _this.copyButton.show();
          };
        })(this));
      }
      return this.reloadEditor();
    } else {
      return EditorModalSingle.__super__.open.call(this);
    }
  };

  return EditorModalSingle;

})(EditorModal);
// Generated by CoffeeScript 1.10.0
var EditorModalNew,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

EditorModalNew = (function(superClass) {
  extend(EditorModalNew, superClass);

  function EditorModalNew() {
    return EditorModalNew.__super__.constructor.apply(this, arguments);
  }

  EditorModalNew.prototype.readOpts = function() {
    EditorModalNew.__super__.readOpts.call(this);
    this.initFileUpload();
    return this.__modalForm = null;
  };

  EditorModalNew.prototype.keyPrefix = "main.editor.modal.new.form";

  EditorModalNew.prototype.getSidebarButtons = function() {
    var buttons, items;
    items = [];
    if (this.editor_data.bulk_field) {
      items.push(new FileUploadButton({
        text: ez5.loca.str_default("editor.modal.new.button.files|text"),
        icon: ez5.loca.str_default("editor.modal.new.button.files|icon"),
        tooltip: {
          text: ez5.loca.str_default("editor.modal.new.button.files|tooltip")
        },
        multiple: true,
        fileUpload: this.__fileUpload
      }));
      if (window.bowser.webkit || window.bowser.blink) {
        items.push(new FileUploadButton({
          text: ez5.loca.str_default("editor.modal.new.button.directory|text"),
          icon: ez5.loca.str_default("editor.modal.new.button.directory|icon"),
          tooltip: {
            text: ez5.loca.str_default("editor.modal.new.button.directory|tooltip")
          },
          directory: true,
          fileUpload: this.__fileUpload
        }));
      }
      items.push({
        divider: true
      });
    }
    items.push({
      loca_key: "editor.modal.new.add_objects",
      loca_key_attrs: {
        count: 5
      },
      onClick: (function(_this) {
        return function() {
          return _this.addEmptyToEditor(5);
        };
      })(this)
    });
    items.push({
      loca_key: "editor.modal.new.add_object",
      onClick: (function(_this) {
        return function() {
          return _this.addEmptyToEditor();
        };
      })(this)
    });
    buttons = EditorModalNew.__super__.getSidebarButtons.call(this);
    buttons.splice(0, 0, {
      loca_key: "editor.modal.new.sidebar.plus-button",
      group: "plusminus",
      menu: {
        items: items
      }
    });
    return buttons;
  };

  EditorModalNew.prototype.getUploadButtons = function() {
    var buttons;
    buttons = [];
    this.__fileUploadButton = new FileUploadButton({
      fileUpload: this.__fileUpload,
      text: ez5.loca.str_default("editor.modal.new.button.files|text"),
      icon: ez5.loca.str_default("editor.modal.new.button.files|icon"),
      tooltip: {
        text: ez5.loca.str_default("editor.modal.new.button.files|tooltip")
      },
      multiple: true
    });
    buttons.push(this.__fileUploadButton);
    if (window.bowser.webkit || window.bowser.blink) {
      this.__directoryUploadButton = new FileUploadButton({
        fileUpload: this.__fileUpload,
        text: ez5.loca.str_default("editor.modal.new.button.directory|text"),
        icon: ez5.loca.str_default("editor.modal.new.button.directory|icon"),
        tooltip: {
          text: ez5.loca.str_default("editor.modal.new.button.directory|tooltip")
        },
        directory: true
      });
      buttons.push(this.__directoryUploadButton);
    }
    return buttons;
  };

  EditorModalNew.prototype.getEASFields = function(include_nested) {
    var fields, mask;
    if (include_nested == null) {
      include_nested = true;
    }
    if (this.editor_data) {
      mask = Mask.getMaskByMaskName(this.editor_data.mask_name, this.editor_data.table.id());
    }
    assert(mask instanceof Mask, "EditorModalNew.getEASFields", "Mask not found.", {
      editor_data: this.editor_data
    });
    fields = [];
    mask.invokeOnFields('editor', include_nested, (function(_this) {
      return function(f) {
        var eas_column, new_eas_column;
        if (f instanceof EASColumn && !f.isReadOnly('editor')) {
          fields.push(f);
        }
        if (f instanceof LinkedObject && include_nested) {
          eas_column = f.getFirstStandardEASColumn();
          if (eas_column) {
            new_eas_column = new EASColumnLinkedObject(eas_column.mask, eas_column.FieldSchema, f);
            return fields.push(new_eas_column);
          }
        }
      };
    })(this));
    return fields;
  };

  EditorModalNew.prototype.onFileAdd = function(file) {
    var remove_btn;
    if (this.newModal) {
      remove_btn = new LocaButton({
        loca_key: "editor.modal.new.remove-button",
        appearance: "flat",
        size: "mini",
        onClick: function() {
          return file.remove();
        }
      });
      file._tmpl = new Template({
        name: "file-upload",
        map: {
          remove: true,
          info: true,
          thumb: true
        }
      });
      file._tmpl.DOM.appendTo(this.__dropZone);
      file._tmpl.append(remove_btn, "remove");
      file._tmpl.append(new Label({
        text: file.getName()
      }).DOM, "info");
      file._tmpl.replace(ez5.eas.getFileUploadMeter(file), "thumb");
      file.original_filename = file.getName();
      new Tooltip({
        element: file._tmpl.DOM,
        text: (function(_this) {
          return function() {
            return file.getName() + ", " + ez5.format_filesize(file.getFile().size);
          };
        })(this)
      });
      this.updateNextButton();
    } else {
      this.addFileToEditor(file);
    }
  };

  EditorModalNew.prototype.onFileRemove = function(file) {
    if (this.newModal && file._tmpl) {
      file._tmpl.destroy();
      delete file._tmpl;
      this.updateNextButton();
    }
  };

  EditorModalNew.prototype.onFileFail = function(file) {
    if (this.newModal) {
      return file.remove();
    } else {
      file._upload_field.uploadFail(file._file_data, file);
      return this.updateButtons();
    }
  };

  EditorModalNew.prototype.onFileDone = function(file) {
    var data, file_always, ref;
    data = file.getData();
    if (this.newModal) {
      file._value = {
        _id: data[0]._id
      };
      file_always = (function(_this) {
        return function() {
          var asset;
          file._value = data[0];
          if (file._tmpl) {
            asset = new AssetPlain({
              value: file._value
            });
            file._tmpl.replace(asset.getImgElement(), "thumb");
          }
        };
      })(this);
      ez5.eas.addToQueue({
        value: file._value,
        done: file_always,
        failed: file_always
      });
      return this.updateNextButton();
    } else {
      file._upload_field.uploadDone(file._file_data, file);
      if (this.editor_data.mapping) {
        return EAS.mapMetadata({
          data: file._object_top_level_data,
          eas_id: file._value._id,
          mask_name: this.editor_data.bulk_field.getMainMask().name(),
          objecttype: this.editor_data.bulk_field.getMainMask().table.name(),
          pool_id: (ref = this.editor_data._pool) != null ? ref.pool._id : void 0,
          mapping: this.editor_data.mapping
        }).done((function(_this) {
          return function() {
            var idx;
            idx = _this.object_list.idxByData(file._top_level_data);
            if (_this.isDestroyed()) {
              return;
            }
            if (_this.object_list.getCurrentIdx() === idx) {
              return _this.reloadEditor();
            } else {
              _this.object_list.updateObjectInBrowser(idx);
              return _this.updateButtons();
            }
          };
        })(this));
      } else {
        return this.updateButtons();
      }
    }
  };

  EditorModalNew.prototype.addEmptyToEditor = function(count) {
    var i, j, ref;
    if (count == null) {
      count = 1;
    }
    this.addNewTemplateObject();
    for (i = j = 0, ref = count; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      this.addNewResultObject();
    }
    return this;
  };

  EditorModalNew.prototype.getMinimumObjectCount = function() {
    return 1;
  };

  EditorModalNew.prototype.addNewTemplateObject = function(data) {
    var to;
    if (data == null) {
      data = {};
    }
    if (!isNull(this.template_idx)) {
      return;
    }
    to = EditorModalNew.__super__.addNewTemplateObject.call(this, data);
    this.updateButtons();
    return to;
  };

  EditorModalNew.prototype.addNewResultObject = function(data, ro) {
    if (data == null) {
      data = {};
    }
    if (ro == null) {
      ro = new ResultObject();
    }
    ro = EditorModalNew.__super__.addNewResultObject.call(this, data, ro);
    this.updateButtons();
    return ro;
  };

  EditorModalNew.prototype.initFileUpload = function() {
    this.__dupDialog = new DuplicatesDialog();
    this.__fileUpload = new FileUpload({
      url: ez5.eas.getUploadUrl(),
      onAdd: (function(_this) {
        return function(file) {
          var fn;
          fn = file.getFile().name;
          if (fn === "Thumbs.db") {
            CUI.alert({
              text: $$("editor.modal.new.file_ignored", {
                file: fn
              })
            });
            return false;
          }
          _this.onFileAdd(file);
        };
      })(this),
      onBatchQueued: (function(_this) {
        return function() {
          if (_this.__dupDialog.getQueue().length === 0) {
            _this.__dupDialog.startBatch();
          }
          return _this.updateNextButton();
        };
      })(this),
      onRemove: (function(_this) {
        return function(file) {
          return _this.onFileRemove(file);
        };
      })(this),
      onBeforeDone: (function(_this) {
        return function(file) {
          return _this.__dupDialog.addFile(file);
        };
      })(this),
      onDone: (function(_this) {
        return function(file) {
          return _this.onFileDone(file);
        };
      })(this),
      onFail: (function(_this) {
        return function(file) {
          if (file.getStatus() !== "ABORT") {
            return EAS.presentUploadError(file).done(function() {
              return _this.onFileFail(file);
            });
          } else {
            return _this.onFileFail(file);
          }
        };
      })(this)
    });
    return this.__fileUpload;
  };

  EditorModalNew.prototype.queueFiles = function(files) {
    return this.__fileUpload.queueFiles(files);
  };

  EditorModalNew.prototype.saveAllowed = function() {
    return EditorModalNew.__super__.saveAllowed.call(this) && this.__fileUpload.isDone();
  };

  EditorModalNew.prototype.hasUploads = function() {
    return EditorModalNew.__super__.hasUploads.call(this) || !this.__fileUpload.isDone();
  };

  EditorModalNew.prototype.destroy = function() {
    var ref;
    this.abortUploads();
    if ((ref = this.newModal) != null) {
      ref.destroy();
    }
    return EditorModalNew.__super__.destroy.call(this);
  };

  EditorModalNew.prototype.destroyNewModal = function() {
    this.newModal.destroy();
    return this.newModal = null;
  };

  EditorModalNew.prototype.abortUploads = function() {
    var ref;
    if ((ref = this.__fileUpload) != null) {
      ref.clear();
    }
    return this.upload_in_progress = false;
  };

  EditorModalNew.prototype.initDbInfo = function(warn_if_no_objecttype_found) {
    var dfr;
    if (warn_if_no_objecttype_found == null) {
      warn_if_no_objecttype_found = true;
    }
    dfr = new CUI.Deferred();
    this.__allDbInfo = new DbInfo();
    this.__allDbInfo.load().done((function(_this) {
      return function() {
        var opts, pool_id, ref, ref1;
        _this.__available_objecttypes = _this.__allDbInfo.getAvailableObjecttypes();
        opts = _this.getObjecttypeFieldOptions();
        if (opts.length === 0 && warn_if_no_objecttype_found) {
          CUI.alert({
            title: $$("base.error"),
            text: $$("main.editor.modal.new.no_objecttype_found")
          }).done(function() {
            return dfr.reject("zero_objecttypes");
          });
          return;
        }
        if (((ref = _this.editor_data.table) != null ? ref.poolLink() : void 0) && !_this.editor_data._pool) {
          pool_id = (ref1 = _this.__allDbInfo.getPoolIds(_this.editor_data.table.name())) != null ? ref1[0] : void 0;
          if (pool_id) {
            _this.setPoolFromPoolId(pool_id);
          }
        }
        return dfr.resolve(opts);
      };
    })(this));
    return dfr.promise();
  };

  EditorModalNew.prototype.openEmpty = function() {
    var dfr, ref;
    assert(((ref = this._object_list) != null ? ref.getCount() : void 0) === 0, "EditorModalNew.openEmpty", "opts.objects.getCount() must be 0", {
      opts: this.opts
    });
    dfr = new CUI.Deferred();
    this.initDbInfo().done((function(_this) {
      return function() {
        _this.__showAllObjecttypes = false;
        if (CUI.__ng__) {
          _this.__newPane = _this.__dropZoneDiv = new Template({
            name: "editor-modal-new-ng",
            map: {
              left: true,
              upload_buttons: true,
              drop_zone: true,
              backpane: true
            }
          });
        } else {
          _this.__dropZoneDiv = new Template({
            name: "editor-modal-new-drop-zone-div",
            map: {
              drop_zone: true,
              backpane: true
            }
          });
          _this.__newPane = new HorizontalLayout({
            "class": "ez5-editor-modal-new-new-pane",
            left: {},
            center: {
              content: _this.__dropZoneDiv
            }
          });
        }
        _this.__dropZone = _this.__dropZoneDiv.map.drop_zone;
        _this.__fileUpload.initDropZone({
          dropZone: _this.__dropZone,
          allow_drop: function(ev) {
            if (_this.editor_data.bulk_field) {
              return true;
            } else {
              return false;
            }
          }
        });
        _this.__dropZoneDiv.replace(new LocaLabel({
          "class": "cui-empty-label",
          centered: true,
          multiline: true,
          loca_key: "main.editor.new.drop_zone"
        }), "backpane");
        _this.nextButton = new LocaButton({
          loca_key: "main.editor.new.button.next",
          left: true,
          disabled: true,
          onClick: function() {
            return _this.openEditor();
          }
        });
        _this.newModal = new CUI.Modal({
          "class": "ez5-editor-modal-new ez5-event-poller",
          cancel: true,
          onCancel: function(ev) {
            return _this.doClose(ev).done(function(callback) {
              _this.abortUploads();
              return _this.callback(callback);
            });
          },
          pane: {
            header_left: new Label({
              text: $$("main.editor.objects.new_choice")
            }),
            content: _this.__newPane,
            footer_right: _this.nextButton
          }
        });
        return _this.updateModalForm().done(function() {
          _this.newModal.show();
          return dfr.resolve();
        }).fail(dfr.reject);
      };
    })(this)).fail((function(_this) {
      return function(xhr) {
        if (xhr === "zero_objecttypes") {
          _this.callback("cancel");
          dfr.reject();
        } else {
          dfr.reject(xhr);
        }
      };
    })(this));
    return dfr.promise();
  };

  EditorModalNew.prototype.openEditor = function() {
    var count, file, j, len, promises, ref, st;
    count = 0;
    promises = [];
    if (this.editor_data.bulk_field) {
      ref = this.__fileUpload.getFiles();
      for (j = 0, len = ref.length; j < len; j++) {
        file = ref[j];
        st = file.getStatus();
        if (st === "FAILED" || st === "ABORT" || st === "DEQUEUED") {
          continue;
        }
        promises.push(this.addFileToEditor(file));
        count++;
      }
    }
    if (count === 0) {
      this.addEmptyToEditor();
    }
    if (this.object_list.getCount(true) > 1) {
      this.object_list.setCurrentIdx(0);
    } else {
      this.object_list.setCurrentIdx(1);
    }
    this.nextButton.startSpinner();
    this.newModal.disableAllButtons();
    return CUI.when(promises).done((function(_this) {
      return function() {
        _this.destroyNewModal();
        return _this.open().done(function() {
          if (_this.editor_data.bulk_field) {
            return _this.__fileUpload.initDropZone({
              dropZone: _this.getSidebar()
            });
          }
        });
      };
    })(this));
  };

  EditorModalNew.prototype.updateModalForm = function(dfr) {
    var wb;
    if (!dfr) {
      dfr = new CUI.Deferred();
      dfr.always((function(_this) {
        return function() {
          return _this.updateNextButton();
        };
      })(this));
    }
    if (this.__modalForm) {
      wb = new WaitBlock({
        element: this.__modalForm
      }).show();
      dfr.always((function(_this) {
        return function() {
          return wb.destroy();
        };
      })(this));
    }
    this.getDbInfo().done((function(_this) {
      return function(dbInfo) {
        var error, ex, fields, form, ref, tags_field;
        _this.editor_data.dbInfo = dbInfo;
        try {
          if (_this.checkAndSetPoolFromDbInfo()) {
            _this.updateModalForm(dfr);
            return;
          }
        } catch (error) {
          ex = error;
          if (ex instanceof UserError) {
            ex.presentError();
          }
          dfr.reject();
          return;
        }
        if (_this.editor_data.dbInfo.availableMasks().length === 0) {
          CUI.alert({
            title: $$("base.error"),
            text: $$("main.editor.modal.new.no_mask_found", {
              objecttype: _this.editor_data.table.nameLocalized()
            })
          }).done(function() {
            return dfr.reject();
          });
          return dfr.promise();
        }
        if (!_this.editor_data.mask_name) {
          _this.editor_data.mask_name = _this.editor_data.dbInfo.availableMasks()[0].name();
        }
        fields = [_this.getObjecttypeField(), _this.getPoolField(), _this.getMaskField(), _this.getEASField(), _this.getMappingField()];
        if (tags_field = _this.getTagsField()) {
          fields.push(tags_field);
        }
        form = new Form({
          "class": "modal-editor-new",
          fields: fields
        }).start();
        _this.__replaceModalForm(form);
        if ((ref = _this.__dropZoneDiv) != null) {
          ref.replace(new Buttonbar({
            buttons: _this.getUploadButtons()
          }), "upload_buttons");
        }
        return dfr.resolve();
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  EditorModalNew.prototype.__replaceModalForm = function(form) {
    return this.__modalForm = this.replaceModalForm(form);
  };

  EditorModalNew.prototype.replaceModalForm = function(form) {
    this.__newPane.replace(form, "left");
    return this.__newPane;
  };

  EditorModalNew.prototype.updateNextButton = function() {
    var ref, ref1, ref2, ref3;
    if (!this.editor_data.bulk_field) {
      if ((ref = this.__fileUploadButton) != null) {
        ref.disable();
      }
      if ((ref1 = this.__directoryUploadButton) != null) {
        ref1.disable();
      }
    } else {
      if ((ref2 = this.__fileUploadButton) != null) {
        ref2.enable();
      }
      if ((ref3 = this.__directoryUploadButton) != null) {
        ref3.enable();
      }
    }
    if (!this.editor_data.bulk_field && this.__fileUpload.getFiles().length) {
      this.nextButton.disable();
    } else if (this.__fileUpload.getFiles(["FAILED", "ABORT", "CREATED"]).length > 0) {
      this.nextButton.disable();
    } else if (this.editor_data.table.poolLink() && !this.editor_data._pool) {
      this.nextButton.disable();
    } else if (this.editor_data.bulk_field && !this.editor_data.bulk_field.isEASFieldEnabled()) {
      this.nextButton.disable();
    } else {
      this.nextButton.enable();
    }
    this.__updateDropZoneCss();
    return this;
  };

  EditorModalNew.prototype.__updateDropZoneCss = function() {
    if (this.__fileUpload.getFiles().length === 0) {
      return this.__dropZoneDiv.removeClass("ez5-drop-zone-has-files");
    } else {
      return this.__dropZoneDiv.addClass("ez5-drop-zone-has-files");
    }
  };

  EditorModalNew.prototype.getTagsField = function() {};

  EditorModalNew.prototype.getEASField = function() {
    var df, eas_opts, f, found, idx, j, k, len, len1, opt, ref, ref1, ref2, ref3;
    eas_opts = [];
    ref = this.getEASFields();
    for (j = 0, len = ref.length; j < len; j++) {
      f = ref[j];
      eas_opts.push(f.getEASFieldOption(this.editor_data, (function(_this) {
        return function() {
          return _this.updateNextButton();
        };
      })(this)));
    }
    if (eas_opts.length === 0) {
      df = new DataFieldProxy({
        form: {
          label: $$(this.keyPrefix + ".field.label")
        },
        element: new Label({
          content: $empty$(this.keyPrefix + ".field.none")
        })
      });
      if ((ref1 = this.__dropZoneDiv) != null) {
        ref1.addClass("ez5-disable-drop-zone");
      }
      this.editor_data.bulk_field = null;
    } else {
      if ((ref2 = this.__dropZoneDiv) != null) {
        ref2.removeClass("ez5-disable-drop-zone");
      }
      found = 0;
      for (idx = k = 0, len1 = eas_opts.length; k < len1; idx = ++k) {
        opt = eas_opts[idx];
        if (((ref3 = this.editor_data.bulk_field) != null ? ref3.fullNameForCollectionSave() : void 0) === opt.value.fullNameForCollectionSave()) {
          found = idx;
          break;
        }
      }
      this.editor_data.bulk_field = eas_opts[found].value;
      df = Select.newSelectOrOutput({
        form: {
          label: $$(this.keyPrefix + ".field.label")
        },
        tooltip: {
          text: eas_opts.length > 1 ? ez5.loca.str_default("editor.modal.new.eas_field.tooltip") : void 0
        },
        name: "bulk_field",
        mark_changed: false,
        check_changed: false,
        undo_support: false,
        options: eas_opts,
        data: this.editor_data
      });
    }
    return df;
  };

  EditorModalNew.prototype.getFileData = function(_opts) {
    var bulk_field, create, eas_field_name, file_data, file_data_match_type, get_match_names, mask, match_file, match_filename, object_top_level_data, opts, set_file_data, tn;
    if (_opts == null) {
      _opts = {};
    }
    opts = CUI.Element.readOpts(_opts, "EditorModalNew.setFileData", {
      top_level_data: {
        mandatory: true,
        check: 'PlainObject'
      },
      mask_name: {
        mandatory: true,
        check: String
      },
      file: {
        mandatory: true,
        check: FileUploadFile
      },
      table: {
        mandatory: true,
        check: Table
      },
      bulk_field: {
        mandatory: true,
        check: EASColumn
      },
      mode: {
        mandatory: true,
        check: String
      },
      create: {
        mandatory: true,
        check: Boolean,
        "default": false
      }
    });
    mask = Mask.getMaskByMaskName(opts.mask_name, opts.table.id());
    bulk_field = opts.bulk_field;
    eas_field_name = bulk_field.name();
    get_match_names = (function(_this) {
      return function(filename) {
        var match, ref;
        assert(isString(filename), "EditorModalNew.addFileToEditor[get_match_names]", "filename needs to be String.", {
          filename: filename
        });
        match = {
          filename: filename,
          dirname: ez5.dirname(filename),
          basename: ez5.basename(filename),
          bare_basename: ez5.bareBasename(filename).toLocaleLowerCase()
        };
        match.series_basename = (ref = match.basename.match(/^(.*)[_\- ]+[0-9]+\.[a-zA-Z]+[a-zA-Z0-9]*$/)) != null ? ref[1].toLocaleLowerCase() : void 0;
        return match;
      };
    })(this);
    match_filename = get_match_names(opts.file.getName());
    match_file = (function(_this) {
      return function(eas_data) {
        var filename, j, len, match, value;
        if (!((eas_data != null ? eas_data.length : void 0) > 0)) {
          return;
        }
        for (j = 0, len = eas_data.length; j < len; j++) {
          value = eas_data[j];
          if (value._file_upload) {
            filename = value._file_upload.getName();
          } else {
            filename = value.original_filename;
          }
          match = get_match_names(filename);
          if (match.dirname !== match_filename.dirname) {
            continue;
          }
          if (match.filename === match_filename.filename) {
            return 'same';
          }
          if (match.bare_basename === match_filename.bare_basename) {
            return 'version';
          }
          if (match.series_basename && match.series_basename === match_filename.series_basename) {
            return 'series';
          }
        }
      };
    })(this);
    tn = opts.table.name();
    file_data = null;
    file_data_match_type = null;
    object_top_level_data = null;
    create = opts.create;
    set_file_data = (function(_this) {
      return function(mask, mode, start_data) {
        assert(CUI.isPlainObject(start_data), "EditorModalNew.getFileData[set_file_data]", "start_data needs to be PlainObject.");
        object_top_level_data = start_data;
        return mask.invokeOnFields(mode, true, (function(f, data, depth) {
          var _data, _ro, create_new_entry, create_new_nested, eas_column, file_data_match, j, k, l, len, len1, len2, link_data, link_mask, link_tn, match_type, new_record, set_link_file_data, tf;
          if (file_data || file_data_match_type) {
            return;
          }
          if (bulk_field instanceof EASColumnLinkedObject && f.fullName() === bulk_field.getLinkedObject().fullName()) {
            eas_column = bulk_field;
            link_mask = f.linkMask();
            link_tn = link_mask.table.name();
            set_link_file_data = function(data) {
              if (!(data != null ? data[link_tn] : void 0)) {
                return;
              }
              return set_file_data(link_mask, 'standard', data[link_tn]);
            };
            create_new_nested = false;
            if (CUI.isArray(data)) {
              for (j = 0, len = data.length; j < len; j++) {
                _data = data[j];
                set_link_file_data(_data[f.name()]);
                if (file_data) {
                  return;
                }
                if (file_data_match_type) {
                  create = true;
                  file_data_match_type = null;
                  break;
                }
              }
            } else {
              set_link_file_data(data[f.name()]);
              if (file_data) {
                return;
              }
            }
            if (create) {
              _ro = new ResultObject();
              link_data = {
                _mapped_metadata_created: true,
                _format: 'long',
                _mask: link_mask.name()
              };
              link_data[link_tn] = {};
              _ro.initData(link_tn, link_data);
              tf = link_mask.getTagsField('all');
              if (tf) {
                tf.initData(link_data, {
                  mode: 'new',
                  dbInfo: bulk_field.getDbInfo()
                });
              }
              set_link_file_data(link_data);
              if (CUI.isArray(data)) {
                new_record = {
                  _new: true
                };
                new_record[f.name()] = link_data;
                data.push(new_record);
              } else {
                data[f.name()] = link_data;
              }
            }
            return;
          }
          if (!(f instanceof EASColumn)) {
            return;
          }
          if (f.fullName() !== bulk_field.fullName()) {
            return;
          }
          if (CUI.isArray(data)) {
            create_new_entry = function() {
              new_record = {
                _new: true
              };
              new_record[f.name()] = [];
              file_data = new_record;
              return data.push(new_record);
            };
            for (k = 0, len1 = data.length; k < len1; k++) {
              _data = data[k];
              match_type = match_file(_data[f.name()]);
              switch (match_type) {
                case 'same':
                case 'version':
                  file_data = _data;
                  file_data_match = match_type;
                  return;
              }
            }
            for (l = 0, len2 = data.length; l < len2; l++) {
              _data = data[l];
              match_type = match_file(_data[f.name()]);
              switch (match_type) {
                case 'series':
                  create_new_entry();
                  file_data_match = match_type;
                  return;
              }
            }
            if (create) {
              create_new_entry();
            }
            return;
          }
          match_type = match_file(data[f.name()]);
          switch (match_type) {
            case 'same':
            case 'version':
              file_data = data;
              file_data_match_type = match_type;
              return;
            case 'series':
              file_data_match_type = match_type;
          }
          if (create) {
            data[f.name()] = [];
            file_data = data;
          }
        }), start_data);
      };
    })(this);
    set_file_data(mask, opts.mode, opts.top_level_data);
    return [file_data, object_top_level_data];
  };

  EditorModalNew.prototype.addFileToEditor = function(file) {
    var add_result_object, bulk_field, dfr, eas_field_name, file_data, j, len, obj, object_top_level_data, ref, ref1, ref2, ref3, tn, top_level_data;
    dfr = new CUI.Deferred();
    tn = this.editor_data.table.name();
    bulk_field = this.editor_data.bulk_field;
    this.addNewTemplateObject();
    ref = this.object_list.getObjects();
    for (j = 0, len = ref.length; j < len; j++) {
      obj = ref[j];
      if (obj instanceof TemplateObject) {
        continue;
      }
      top_level_data = obj.getData();
      ref1 = this.getFileData({
        top_level_data: top_level_data[tn],
        file: file,
        mask_name: this.editor_data.mask_name,
        table: this.editor_data.table,
        bulk_field: bulk_field,
        mode: 'editor'
      }), file_data = ref1[0], object_top_level_data = ref1[1];
      if (file_data) {
        break;
      }
    }
    if (!file_data) {
      top_level_data = {};
      top_level_data[tn] = {};
      add_result_object = true;
      ref2 = this.getFileData({
        top_level_data: top_level_data[tn],
        file: file,
        mask_name: this.editor_data.mask_name,
        table: this.editor_data.table,
        bulk_field: bulk_field,
        mode: 'editor',
        create: true
      }), file_data = ref2[0], object_top_level_data = ref2[1];
    } else {
      add_result_object = false;
    }
    assert(file_data, "EditorModalNew.addFileToEditor", "Unable to find data to store file.");
    if (file.getStatus() === "DONE") {
      eas_field_name = bulk_field.name();
      if (file_data[eas_field_name].length === 0) {
        file._value.preferred = true;
      }
      file_data[eas_field_name].push(file._value);
      if (this.editor_data.mapping) {
        EAS.mapMetadata({
          data: object_top_level_data,
          eas_id: file._value._id,
          mask_name: bulk_field.getMainMask().name(),
          objecttype: bulk_field.getMainMask().table.name(),
          pool_id: (ref3 = this.editor_data._pool) != null ? ref3.pool._id : void 0,
          mapping: this.editor_data.mapping
        }).done((function(_this) {
          return function() {
            _this.updateSaveButton();
            return dfr.resolve();
          };
        })(this));
      } else {
        dfr.resolve();
      }
    } else {
      bulk_field.uploadAdd(file_data, file);
      file._upload_field = bulk_field;
      file._top_level_data = top_level_data;
      file._object_top_level_data = object_top_level_data;
      file._file_data = file_data;
      dfr.resolve();
    }
    if (add_result_object) {
      this.addNewResultObject(top_level_data);
    }
    this.updateSaveButton();
    return dfr.promise();
  };

  EditorModalNew.prototype.getMappingField = function() {
    var inject, injectOpts, j, mopts, msg;
    mopts = ez5.metadata.getMappingOpts(null, {
      exiftool_import: true
    });
    if (this.editor_data.bulk_field === null) {
      msg = this.keyPrefix + ".field.none";
    } else if (mopts.length === 0) {
      msg = this.keyPrefix + ".mapping.no_profile";
    } else {
      injectOpts = [
        {
          text: $$(this.keyPrefix + ".mapping.standard_mapping"),
          value: "standard"
        }, {
          text: $$(this.keyPrefix + ".mapping.no_mapping"),
          value: null
        }, {
          divider: true
        }
      ];
      for (j = injectOpts.length - 1; j >= 0; j += -1) {
        inject = injectOpts[j];
        mopts.splice(0, 0, inject);
      }
      if (!this.editor_data.hasOwnProperty("mapping")) {
        this.editor_data.mapping = "standard";
      }
    }
    if (msg) {
      delete this.editor_data.mapping;
      return new DataFieldProxy({
        form: {
          label: $$(this.keyPrefix + ".mapping.label")
        },
        element: new Label({
          content: $empty$(msg)
        })
      });
    }
    return new Select({
      form: {
        label: $$(this.keyPrefix + ".mapping.label")
      },
      tooltip: {
        text: ez5.loca.str_default("editor.modal.new.mapping.tooltip")
      },
      name: "mapping",
      mark_changed: false,
      check_changed: false,
      undo_support: false,
      data: this.editor_data,
      options: mopts
    });
  };

  EditorModalNew.prototype.getPoolField = function() {
    var df, pool_ids, psel;
    if (this.editor_data.table.poolLink()) {
      pool_ids = this.editor_data.dbInfo.getPoolIds();
      psel = (new PoolFieldForEditor()).renderEditorInput(this.editor_data, null, {
        pool_ids: pool_ids
      });
      Events.listen({
        type: "pool-field-changed",
        node: psel,
        call: (function(_this) {
          return function(ev) {
            if (!_this.editor_data._pool) {
              _this.updateNextButton();
              return;
            }
            delete _this.editor_data.mask_name;
            return _this.updateModalForm().done(function() {
              return Events.trigger({
                node: psel,
                type: "data-changed"
              });
            });
          };
        })(this)
      });
      df = new DataFieldProxy({
        "class": "ez5-pool-field-proxy",
        form: {
          label: $$(this.keyPrefix + ".pool.label")
        },
        element: psel
      });
    } else {
      df = new DataFieldProxy({
        "class": "ez5-pool-field-proxy",
        form: {
          label: $$(this.keyPrefix + ".pool.label")
        },
        element: new Label({
          content: $empty$(this.keyPrefix + ".pool.none")
        })
      });
    }
    return df;
  };

  EditorModalNew.prototype.getObjecttypeFieldOptions = function() {
    var correct, idx, j, len, opt, opts, ref, tb;
    opts = [];
    correct = false;
    ref = ez5.schema.CURRENT._objecttypes;
    for (idx = j = 0, len = ref.length; j < len; idx = ++j) {
      tb = ref[idx];
      if (!tb.in_main_search && !this.__showAllObjecttypes) {
        continue;
      }
      if (!this.__available_objecttypes[tb.table_id]) {
        continue;
      }
      opt = {
        value: tb.table_id,
        text: tb._name_localized
      };
      if (this.editor_data.choice_table_id && this.editor_data.choice_table_id === tb.table_id) {
        correct = true;
      }
      if (this.__showAllObjecttypes) {
        opt.right = new Label({
          text: (new Objecttype(tb)).getDisplayType()
        });
        if (tb.in_main_search) {
          opt.appearance = "important";
        }
      }
      opts.push(opt);
    }
    if (opts.length && (!this.editor_data.choice_table_id || !correct)) {
      this.editor_data.choice_table_id = opts[0].value;
      this.editor_data.table = null;
    }
    if (!this.editor_data.table && this.editor_data.choice_table_id) {
      this.editor_data.table = new Table("CURRENT", this.editor_data.choice_table_id);
    }
    return opts;
  };

  EditorModalNew.prototype.getObjecttypeField = function() {
    var df;
    df = new Select({
      name: "choice_table_id",
      form: {
        label: $$(this.keyPrefix + ".objecttype.label")
      },
      tooltip: {
        text: ez5.loca.str_default("editor.modal.new.objecttype.tooltip")
      },
      mark_changed: false,
      options: (function(_this) {
        return function(df, ev) {
          if (ev != null ? ev.altKey() : void 0) {
            _this.__showAllObjecttypes = true;
          }
          return _this.getObjecttypeFieldOptions();
        };
      })(this),
      onDataChanged: (function(_this) {
        return function() {
          _this.editor_data.table = new Table("CURRENT", _this.editor_data.choice_table_id);
          delete _this.editor_data.mask_name;
          delete _this.editor_data._pool;
          delete _this.editor_data.bulk_field;
          return _this.updateModalForm();
        };
      })(this),
      data: this.editor_data
    });
    return df;
  };

  EditorModalNew.prototype.getShowAllFieldsMask = function() {
    return true;
  };

  EditorModalNew.prototype.getMaskField = function() {
    var mfs;
    mfs = new MaskFieldSelector({
      dbInfo: this.editor_data.dbInfo,
      form: {
        label: $$(this.keyPrefix + ".mask.label")
      },
      mask_name: this.editor_data.mask_name,
      show_all_fields_mask: this.getShowAllFieldsMask(),
      onChanged: (function(_this) {
        return function(old_name, new_name) {
          _this.editor_data.mask_name = new_name;
          return _this.updateModalForm().fail(function() {
            return _this.editor_data.mask_name = old_name;
          });
        };
      })(this)
    });
    return mfs.getSelect();
  };

  EditorModalNew.prototype.getApiDbPriority = function() {
    return 2;
  };

  return EditorModalNew;

})(EditorModalBulk);
// Generated by CoffeeScript 1.10.0
var DuplicatesDialog,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DuplicatesDialog = (function(superClass) {
  extend(DuplicatesDialog, superClass);

  function DuplicatesDialog() {
    return DuplicatesDialog.__super__.constructor.apply(this, arguments);
  }

  DuplicatesDialog.prototype.initOpts = function() {
    DuplicatesDialog.__super__.initOpts.call(this);
    this.removeOpt("text");
    this.removeOpt("title");
    this.removeOpt("markdown");
    this.removeOpt("html");
    return this.removeOpt("content");
  };

  DuplicatesDialog.prototype.readOpts = function() {
    DuplicatesDialog.__super__.readOpts.call(this);
    return this.__queue = [];
  };

  DuplicatesDialog.prototype.init = function() {
    this.__batch_solution = null;
    this.__approved_in_batch = [];
    return this;
  };

  DuplicatesDialog.prototype.startBatch = function() {
    assert(this.__queue.length === 0, "DuplicatesDialog.startBatch", "Unable to start batch, queue not empty.");
    return this.init();
  };

  DuplicatesDialog.prototype.getQueue = function() {
    return this.__queue;
  };

  DuplicatesDialog.prototype.addFile = function(file) {
    var dfr, ref;
    assert(file instanceof FileUploadFile && ((ref = file.getData()) != null ? ref[0]._id : void 0) > 0, "DuplicatesDialog.addFile", "file needs to be valid", {
      file: file
    });
    dfr = new CUI.Deferred();
    dfr.always((function(_this) {
      return function(solution) {
        var item;
        item = _this.__queue.splice(0, 1)[0];
        if (solution !== "skip") {
          pushOntoArray(item.file.getData()[0]._id, _this.__approved_in_batch);
        }
        if (_this.__queue.length > 0) {
          return _this.processItem(_this.__queue[0]);
        }
      };
    })(this));
    this.__queue.push({
      deferred: dfr,
      file: file
    });
    if (this.__queue.length === 1) {
      this.processItem(this.__queue[0]);
    }
    return dfr.promise();
  };

  DuplicatesDialog.prototype.processItem = function(item) {
    var asset, buttons, cb, content, done, dup, dup_count, hl, i, key, len, pane, ref, ref1, value, vl;
    done = (function(_this) {
      return function(solution) {
        _this.hide();
        item.file._duplicates_solution = solution;
        if (DuplicatesDialog.form_data.apply_to_batch) {
          _this.__batch_solution = solution;
        }
        switch (solution) {
          case "skip":
            item.deferred.reject(solution);
            break;
          default:
            item.deferred.resolve(solution);
        }
      };
    })(this);
    value = item.file.getData()[0];
    asset = new AssetPlain({
      value: value
    });
    dup_count = 0;
    if (value._duplicates) {
      ref = value._duplicates;
      for (i = 0, len = ref.length; i < len; i++) {
        dup = ref[i];
        if (idxInArray(dup._id, this.__approved_in_batch) > -1) {
          dup_count = dup_count + 1;
        } else if (dup.linked_system_objects.length > 0) {
          dup_count = dup_count + 1;
        }
      }
    }
    if (dup_count === 0) {
      done("import");
      return this;
    }
    if (this.__batch_solution) {
      done(this.__batch_solution);
      return this;
    }
    buttons = [
      {
        "class": 'ez5-duplicates-dialog-button-skip',
        text: $$("duplicates.dialog.button.skip"),
        onClick: (function(_this) {
          return function() {
            return done("skip");
          };
        })(this)
      }, {
        "class": 'ez5-duplicates-dialog-button-import',
        text: $$("duplicates.dialog.button.import"),
        onClick: (function(_this) {
          return function() {
            return done("import");
          };
        })(this)
      }
    ];
    hl = new HorizontalList({
      "class": "ez5-duplicates-dialog-duplicates",
      content: [asset.getImgElement()]
    });
    vl = new VerticalList({
      content: [
        new Label({
          multiline: true,
          markdown: true,
          text: $$("duplicates.dialog.text" + (dup_count === 1 ? ".one" : ""), {
            count: dup_count,
            filename: MarkdownInput.escape(item.file.getFile().name)
          })
        }), hl
      ]
    });
    cb = new Checkbox({
      text: $$("duplicates.dialog.checkbox.apply_to_batch"),
      name: "apply_to_batch",
      data: DuplicatesDialog.form_data
    }).start();
    pane = this.getPane();
    ref1 = {
      header_left: new LocaLabel({
        loca_key: "duplicates.dialog.title"
      }),
      content: vl,
      footer_right: buttons,
      footer_left: cb
    };
    for (key in ref1) {
      content = ref1[key];
      pane.replace(content, key);
    }
    this.show();
    return this;
  };

  DuplicatesDialog.form_data = {
    apply_to_batch: false
  };

  return DuplicatesDialog;

})(CUI.ConfirmationDialog);
// Generated by CoffeeScript 1.10.0
var EditorHeadlessNew,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

EditorHeadlessNew = (function(superClass) {
  extend(EditorHeadlessNew, superClass);

  function EditorHeadlessNew() {
    return EditorHeadlessNew.__super__.constructor.apply(this, arguments);
  }

  EditorHeadlessNew.prototype.initOpts = function() {
    CUI.Element.prototype.initOpts.call(this);
    this.addOpts({
      collection: {
        check: Collection
      },
      data: {
        "default": {},
        check: "PlainObject"
      }
    });
    return this.mergeOpt("mode", {
      "default": "new"
    });
  };

  EditorHeadlessNew.prototype.readOpts = function() {
    CUI.Element.prototype.readOpts.call(this);
    this.editor_data = this._data;
    if (this.editor_data.choice_table_id) {
      this.editor_data.table = new Table("CURRENT", this.editor_data.choice_table_id);
    }
    this.object_list = new ObjectList();
    return this.collection = this._collection;
  };

  EditorHeadlessNew.prototype.replaceModalForm = function(form) {
    this.__container.empty();
    this.__container.append(form.DOM);
    return this.__container;
  };

  EditorHeadlessNew.prototype.getSendDataUrl = function() {
    var url;
    url = EditorHeadlessNew.__super__.getSendDataUrl.call(this);
    if (this.collection) {
      url += "&collection=" + this.collection.getId();
    }
    return url;
  };

  EditorHeadlessNew.prototype.setModalFormContainer = function(__container) {
    this.__container = __container;
  };

  EditorHeadlessNew.prototype.setTableByName = function(tn) {
    this.editor_data.table = new Table("CURRENT", ez5.schema.CURRENT._table_by_name[tn].table_id);
    return this;
  };

  EditorHeadlessNew.prototype.setTags = function(tags) {
    return this.editor_data._tags = tags;
  };

  EditorHeadlessNew.prototype.getEASFields = function() {
    return EditorHeadlessNew.__super__.getEASFields.call(this, false);
  };

  EditorHeadlessNew.prototype.setEASFieldByCollectionStoreName = function(eas_field_name) {
    this.editor_data.bulk_field = (function(_this) {
      return function() {
        var f, i, len, ref;
        if (isEmpty(eas_field_name)) {
          return null;
        }
        ref = _this.getEASFields();
        for (i = 0, len = ref.length; i < len; i++) {
          f = ref[i];
          if (f.fullNameForCollectionSave() === eas_field_name) {
            return f;
          }
          if (eas_field_name.indexOf('.') === -1) {
            if (f.name() === eas_field_name) {
              return f;
            }
          }
        }
        return null;
      };
    })(this)();
    return this.editor_data.bulk_field;
  };

  EditorHeadlessNew.prototype.setMapping = function(mapping) {
    return this.editor_data.mapping = mapping;
  };

  EditorHeadlessNew.prototype.discardHasChanges = function() {};

  EditorHeadlessNew.prototype.updateNextButton = function() {};

  EditorHeadlessNew.prototype.addNewTemplateObject = function() {};

  EditorHeadlessNew.prototype.addNewResultObject = function(data, ro) {
    if (data == null) {
      data = {};
    }
    if (ro == null) {
      ro = new ResultObject();
    }
    ro = EditorHeadlessNew.__super__.addNewResultObject.call(this, data, ro);
    if (this.editor_data.table.poolLink()) {
      this.setPoolInObject(ro);
    }
    if (this.editor_data._tags) {
      ro.getData()._tags = this.editor_data._tags;
    }
    console.error(ro, this.editor_data._tags);
    return ro;
  };

  EditorHeadlessNew.prototype.getWaitModalTitleLocaKeyPrefix = function() {
    if (this.__saveInProgress) {
      return EditorHeadlessNew.__super__.getWaitModalTitleLocaKeyPrefix.call(this);
    } else {
      return "main.editor.upload.";
    }
  };

  EditorHeadlessNew.prototype.initFileUpload = function() {};

  EditorHeadlessNew.prototype.getUploadButtons = function() {};

  EditorHeadlessNew.prototype.getShowAllFieldsMask = function() {
    return false;
  };

  EditorHeadlessNew.prototype.getTagsField = function() {
    var df, tsel;
    if (this.editor_data.table.hasTags()) {
      tsel = (new TagsFieldForEditor()).renderEditorInput(this.editor_data, this.editor_data, {
        editor: this
      });
      Events.listen({
        node: tsel,
        type: "editor-changed",
        call: function(ev) {
          return CUI.debug("data changed on tags");
        }
      });
      df = new DataFieldProxy({
        form: {
          label: $$(this.keyPrefix + ".tags.label")
        },
        element: tsel
      });
    } else {
      this.editor_data._tags = [];
      df = new DataFieldProxy({
        form: {
          label: $$(this.keyPrefix + ".tags.label")
        },
        element: $empty$(this.keyPrefix + ".tags.none")
      });
    }
    CUI.debug("getTagsField", df.DOM[0]);
    return df;
  };

  EditorHeadlessNew.prototype.callback = function(status) {};

  return EditorHeadlessNew;

})(EditorModalNew);
// Generated by CoffeeScript 1.10.0
var EditorHeadlessDelete,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

EditorHeadlessDelete = (function(superClass) {
  extend(EditorHeadlessDelete, superClass);

  function EditorHeadlessDelete() {
    return EditorHeadlessDelete.__super__.constructor.apply(this, arguments);
  }

  EditorHeadlessDelete.prototype.initOpts = function() {
    CUI.Element.prototype.initOpts.call(this);
    return this.addOpts({
      object_list: {
        mandatory: true,
        check: ObjectList
      },
      require_comment: {
        "default": true,
        mandatory: true,
        check: Boolean
      }
    });
  };

  EditorHeadlessDelete.prototype.readOpts = function() {
    EditorHeadlessDelete.__super__.readOpts.call(this);
    return this._mode = "bulk";
  };

  return EditorHeadlessDelete;

})(Editor);
// Generated by CoffeeScript 1.10.0
var EditorSidebar,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

EditorSidebar = (function(superClass) {
  extend(EditorSidebar, superClass);

  function EditorSidebar() {
    return EditorSidebar.__super__.constructor.apply(this, arguments);
  }

  EditorSidebar.prototype.initOpts = function() {
    EditorSidebar.__super__.initOpts.call(this);
    return this.addOpts({
      onCloseEditor: {
        check: Function
      },
      sidebar: {
        mandatory: true,
        check: Sidebar
      }
    });
  };

  EditorSidebar.prototype.loadGlobalObjectId = function(gid) {
    return this._sidebar.allow_unload().done((function(_this) {
      return function() {
        return _this._sidebar.loadEditor({
          global_object_id: gid
        });
      };
    })(this));
  };

  EditorSidebar.prototype.__getHashPath = function(gid) {
    return [gid, 0, this.opts.search_name].join(",");
  };

  EditorSidebar.prototype.showWaitBlock = function() {};

  EditorSidebar.prototype.getCloseButton = function() {
    return new LocaButton({
      loca_key: "editor.sidebar.close_sidebar",
      onClick: (function(_this) {
        return function(ev) {
          return _this.doClose(ev).done(function(callback) {
            return _this.callback("cancel");
          });
        };
      })(this)
    });
  };

  EditorSidebar.prototype.getCloseEditorButton = function() {
    return new LocaButton({
      active: true,
      disabled: this.modeIs(["new"]),
      loca_key: "editor.sidebar.close_editor",
      onClick: (function(_this) {
        return function(ev) {
          return _this.doClose(ev).done(function(callback) {
            return _this.callback("closeEditor");
          });
        };
      })(this)
    });
  };

  EditorSidebar.prototype.getMainPane = function() {
    var p;
    p = new VerticalLayout({
      "class": "ez5-editor-pane",
      top: {
        flexHandle: {
          hidden: true,
          closed: true,
          state_name: "editor-sidebar-top"
        }
      }
    });
    this.__pullOutDiv = p.top();
    this.__pullOutFlexHandle = p.getFlexHandle("top");
    return p;
  };

  EditorSidebar.prototype.showTools = function() {
    var show_tools, tools;
    this.copyTool = new ToolboxTool({
      name: "editor.copy",
      loca_key: "tool.editor.copy",
      favorite: true,
      disabled: true,
      run: (function(_this) {
        return function() {
          return _this.callback("copy");
        };
      })(this)
    });
    tools = [];
    tools.push(new ToolboxTool({
      name: "editor.sidebar.fullscreen",
      loca_key: "editor.sidebar.button.fullscreen",
      favorite: true,
      run: (function(_this) {
        return function() {
          var editor_modal;
          editor_modal = new EditorModalSingle({
            editor_sidebar: _this,
            mode: _this.getMode(),
            onCancel: function() {
              editor_modal.destroy();
              return _this.load();
            },
            onSave: function() {
              var ref;
              editor_modal.destroy();
              return (ref = _this._onSave) != null ? ref.apply(_this, arguments) : void 0;
            },
            onDelete: function() {
              var ref;
              editor_modal.destroy();
              return (ref = _this._onDelete) != null ? ref.apply(_this, arguments) : void 0;
            }
          });
          return editor_modal.open();
        };
      })(this)
    }));
    show_tools = (function(_this) {
      return function() {
        if (_this.object.hasRight("delete") && _this.object.id()) {
          tools.push(new ToolboxTool({
            name: "editor.delete",
            loca_key: "tool.editor.delete",
            run: function() {
              return _this.deleteObjects();
            }
          }));
        }
        return _this.__toolbar.replace(Toolbox.getFlyoutButtonbar(tools), "right");
      };
    })(this);
    if (this.modeIsNot(["new"]) && this._onCopy) {
      DbInfo.canCreate({
        objecttypes: [new Objecttype(this.editor_data.table)]
      }).done((function(_this) {
        return function() {
          tools.push(_this.copyTool);
          return show_tools();
        };
      })(this)).fail((function(_this) {
        return function() {
          return show_tools();
        };
      })(this));
    } else {
      show_tools();
    }
    return this;
  };

  EditorSidebar.prototype.render = function() {
    EditorSidebar.__super__.render.call(this);
    this.__paneHeader.replace([typeof this.getCloseEditorButton === "function" ? this.getCloseEditorButton() : void 0, this.getCloseButton()], "right");
    this.__toolbar.replace([this.getPullOutSwitch(), this.getMaskSelectPlaceholder()], "left");
    this.__paneFooter.replace(this.getCancelButton(), "left");
    this.__paneFooter.replace([this.getSaveButton()], "right");
    this.__pane.addClass("cui-pane--window");
    return this.__pane;
  };

  EditorSidebar.prototype.renderObject = function() {
    this.showTools();
    return EditorSidebar.__super__.renderObject.call(this);
  };

  EditorSidebar.prototype.getSearch = function() {
    return this._sidebar.getSearch();
  };

  EditorSidebar.prototype.getHistoryBrowserButton = function() {
    return null;
  };

  EditorSidebar.prototype.unfocus = function() {
    var ref;
    if ((ref = this.focusNavigationManager) != null) {
      ref.destroy();
    }
    return this.focusNavigationManager = null;
  };

  EditorSidebar.prototype.destroy = function() {
    this.unfocus();
    return EditorSidebar.__super__.destroy.call(this);
  };

  return EditorSidebar;

})(Editor);
// Generated by CoffeeScript 1.10.0
var EditorPopover,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

EditorPopover = (function(superClass) {
  extend(EditorPopover, superClass);

  function EditorPopover() {
    return EditorPopover.__super__.constructor.apply(this, arguments);
  }

  EditorPopover.prototype.initOpts = function() {
    EditorPopover.__super__.initOpts.call(this);
    return this.addOpts({
      popover_element: {
        mandatory: true,
        check: function(v) {
          return isContent(v);
        }
      }
    });
  };

  EditorPopover.prototype.getMainPane = function() {
    var p;
    p = new VerticalLayout({
      "class": "ez5-editor-pane"
    });
    return p;
  };

  EditorPopover.prototype.callback = function(status, arg1) {
    this.popover.destroy();
    return EditorPopover.__super__.callback.call(this, status, arg1);
  };

  EditorPopover.prototype.render = function() {
    EditorPopover.__super__.render.call(this);
    this.__toolbar.replace([this.getMaskSelectPlaceholder()], "right");
    this.__paneHeader.replace([
      Pane.getToggleFillScreenButton(), new LocaButton({
        appearance: CUI.__ng__ ? void 0 : "flat",
        loca_key: "editor.popover.button.close",
        icon: "close",
        onClick: (function(_this) {
          return function(ev) {
            return _this.doClose(ev).done(function() {
              _this.popover.destroy();
              return _this.callback("cancel");
            });
          };
        })(this)
      })
    ], "right");
    this.__paneFooter.replace([this.getDeleteButton(), this.getCopyButton(), this.getSaveButton()], "right");
    return this.__pane;
  };

  EditorPopover.prototype.open = function() {
    this.render();
    this.popover = new Popover({
      element: this.opts.popover_element,
      backdrop: {
        policy: "modal"
      },
      placement: "w",
      pane: this.__pane
    });
    this.popover.show();
    return this.load().done((function(_this) {
      return function() {
        Field.focusFirstTextField(_this.__pane.DOM[0]);
        return _this.popover.autoSize();
      };
    })(this)).fail((function(_this) {
      return function() {
        return _this.popover.destroy();
      };
    })(this));
  };

  return EditorPopover;

})(Editor);
// Generated by CoffeeScript 1.10.0
var DbInfo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

DbInfo = (function(superClass) {
  extend(DbInfo, superClass);

  function DbInfo() {
    return DbInfo.__super__.constructor.apply(this, arguments);
  }

  DbInfo.prototype.load = function(_opts) {
    var mode, opts;
    if (_opts == null) {
      _opts = {};
    }
    opts = CUI.Element.readOpts(_opts, "DBInfo.load", {
      table: {
        check: Table
      },
      pool_id: {
        check: function(v) {
          return v > 0;
        }
      },
      tag_ids: {
        check: function(v) {
          return $.isArray(v);
        }
      },
      object_ids: {
        check: function(v) {
          return v.length > 0;
        }
      },
      ignore_not_found: {
        check: Boolean
      }
    });
    this.request = {};
    if (opts.table) {
      this.__table = opts.table;
      this.request.objecttype = this.__table.name();
    }
    if (opts.object_ids) {
      this.request.object_ids = opts.object_ids;
      mode = "update";
    } else {
      mode = "create";
    }
    if (opts.pool_id) {
      this.request.pool_id = opts.pool_id;
    }
    if (opts.tag_ids) {
      this.request.tag_ids = opts.tag_ids;
    }
    return ez5.api.db_info({
      type: "POST",
      api: "/" + mode,
      json_data: this.request,
      handle_error: (function(_this) {
        return function(xhr) {
          var ref;
          if (!opts.ignore_not_found) {
            return;
          }
          if ((xhr != null ? (ref = xhr.responseJSON) != null ? ref.code : void 0 : void 0) === "error.user.no_masks_for_create") {
            return true;
          }
        };
      })(this)
    }).done((function(_this) {
      return function(data1) {
        _this.data = data1;
        return _this.request._mode = mode;
      };
    })(this)).fail((function(_this) {
      return function(xhr) {
        return _this.data = null;
      };
    })(this));
  };

  DbInfo.prototype.sortPoolIds = function(pool_ids) {
    pool_ids.sort(function(a, b) {
      var a_name, a_pool, b_name, b_pool;
      a_pool = ez5.pools.findPoolById(a);
      b_pool = ez5.pools.findPoolById(b);
      if (a_pool) {
        a_name = a_pool.getSortName();
      } else {
        a_name = "zzz";
      }
      if (b_pool) {
        b_name = b_pool.getSortName();
      } else {
        b_name = "zzz";
      }
      return compareIndex(a_name, b_name);
    });
    return pool_ids;
  };

  DbInfo.prototype.getGeneratedRights = function() {
    if (!this.data) {
      return {};
    }
    return this.data._generated_rights;
  };

  DbInfo.prototype.getPoolIds = function(ot_name, filtered) {
    var found_ot, i, len, ot, ots, pool_ids, ref, ref1;
    if (filtered == null) {
      filtered = true;
    }
    if (this.request._mode === "create") {
      found_ot = null;
      ots = (ref = this.data) != null ? ref._available_objecttypes : void 0;
      if (ots) {
        for (i = 0, len = ots.length; i < len; i++) {
          ot = ots[i];
          if (ot.name === ot_name || !ot_name) {
            found_ot = ot;
            break;
          }
        }
      }
      assert(found_ot, "DbInfo.getPoolIds", "No correct data available, make sure you called .load with on table given.", {
        request: this.request,
        data: this.data,
        ot_name: ot_name
      });
      pool_ids = found_ot.pool_ids;
    } else {
      assert(!ot_name, "DbInfo.getPoolIds", "ot_name can only be given for mode 'create'.", {
        request: this.request,
        data: this.data,
        ot_name: ot_name
      });
      pool_ids = (ref1 = this.data) != null ? ref1._available_pools : void 0;
      if (!pool_ids) {
        return false;
      }
    }
    assert(CUI.isArray(pool_ids), "DbInfo.getPoolIds", "No correct data available, make sure you called .load with on table given.", {
      request: this.request,
      data: this.data
    });
    if (filtered) {
      return this.sortPoolIds(DbInfo.filterPoolIds(pool_ids));
    } else {
      return this.sortPoolIds(pool_ids);
    }
  };

  DbInfo.prototype.maskNameAvailable = function(mask_name) {
    var av_mask, i, len, ref;
    ref = this.availableMasks();
    for (i = 0, len = ref.length; i < len; i++) {
      av_mask = ref[i];
      if (av_mask.name() === mask_name) {
        return true;
      }
    }
    return false;
  };

  DbInfo.prototype.getAvailableObjecttypes = function() {
    var _ots, i, len, ot, ots, ref;
    _ots = (ref = this.data) != null ? ref._available_objecttypes : void 0;
    assert(_ots, "DbInfo.getAvailableObjecttypes", "No data available, make sure you called .load.", {
      request: this.request,
      data: this.data
    });
    ots = {};
    for (i = 0, len = _ots.length; i < len; i++) {
      ot = _ots[i];
      ots[ot._id] = ot;
    }
    return ots;
  };

  DbInfo.prototype.availableMasks = function(all_fields_preferred) {
    var av_masks, i, len, m, ref;
    if (all_fields_preferred == null) {
      all_fields_preferred = true;
    }
    assert(this.__table, "DbInfo.availableMasks", "Table not set, make sure you called .load with table given.");
    av_masks = [];
    if (this.data._available_masks) {
      ref = this.data._available_masks;
      for (i = 0, len = ref.length; i < len; i++) {
        m = ref[i];
        av_masks.push(Mask.getMaskByMaskName(m.name, this.__table.id(), 'CURRENT', all_fields_preferred));
      }
    }
    return av_masks;
  };

  DbInfo.prototype.tagIdAvailable = function(tagId) {
    var av_tag, i, len, ref;
    ref = this.data._available_tags;
    for (i = 0, len = ref.length; i < len; i++) {
      av_tag = ref[i];
      if (av_tag._id === tagId) {
        return av_tag;
      }
    }
    return null;
  };

  DbInfo.prototype.availableTagIds = function() {
    var av_tag;
    if (this.data._available_tags) {
      return ((function() {
        var i, len, ref, results;
        ref = this.data._available_tags;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          av_tag = ref[i];
          results.push(av_tag._id);
        }
        return results;
      }).call(this)).sort(function(a, b) {
        return a - b;
      });
    } else {
      return null;
    }
  };

  DbInfo.filterPoolIds = function(pool_ids) {
    var i, len, pool_id, valid_pool_ids;
    valid_pool_ids = [];
    for (i = 0, len = pool_ids.length; i < len; i++) {
      pool_id = pool_ids[i];
      if (!ez5.pools.findPoolById(pool_id)) {
        console.warn("DbInfo.filterPoolIds: Pool #" + pool_id + " is allowed by DbInfo, but not readable. Check rightsmanagement for pool to have BAG_READ right.");
        continue;
      }
      valid_pool_ids.push(pool_id);
    }
    return valid_pool_ids;
  };

  DbInfo.__loadingGeneratedRights = {};

  DbInfo.loadGeneratedRights = function(_opts) {
    var dfr, gids, opts;
    opts = CUI.Element.readOpts(_opts, "DbInfo.loadGeneratedRights", {
      global_object_ids: {
        mandatory: true,
        check: function(v) {
          return CUI.isArray(v) && v.length > 0;
        }
      }
    });
    gids = opts.global_object_ids;
    if (gids.length === 1) {
      if (this.__loadingGeneratedRights[gids[0]]) {
        console.warn("Re-Using Deferred:", gids[0]);
        return this.__loadingGeneratedRights[gids[0]];
      }
    }
    dfr = new CUI.Deferred();
    ez5.api.search({
      data: {
        debug: "DbInfo.loadGeneratedRights"
      },
      json_data: {
        format: "short",
        generate_rights: true,
        search: [
          {
            type: "in",
            fields: ["_global_object_id"],
            "in": gids
          }
        ]
      }
    }).done((function(_this) {
      return function(data) {
        var generated_rights, gid, i, j, len, len1, obj, ref;
        generated_rights = {};
        ref = data.objects;
        for (i = 0, len = ref.length; i < len; i++) {
          obj = ref[i];
          generated_rights[obj._global_object_id] = obj._generated_rights;
        }
        for (j = 0, len1 = gids.length; j < len1; j++) {
          gid = gids[j];
          if (!generated_rights[gid]) {
            generated_rights[gid] = {};
          }
        }
        return dfr.resolve(generated_rights);
      };
    })(this)).fail((function(_this) {
      return function() {
        return dfr.reject();
      };
    })(this));
    if (gids.length === 1) {
      this.__loadingGeneratedRights[gids[0]] = dfr;
    }
    return dfr.promise();
  };

  DbInfo.canDelete = function(opts) {
    opts.right = "delete";
    return this.__checkRight(opts);
  };

  DbInfo.canWrite = function(opts) {
    opts.right = "write";
    return this.__checkRight(opts);
  };

  DbInfo.__checkRight = function(_opts, right) {
    var dfr, gid, opts, ref;
    opts = CUI.Element.readOpts(_opts, "DbInfo.canWrite", {
      object: {
        mandatory: true,
        check: "PlainObject"
      },
      right: {
        mandatory: true,
        check: ["write", "delete"]
      }
    });
    dfr = new CUI.Deferred();
    if ((ref = opts.object._generated_rights) != null ? ref[opts.right] : void 0) {
      dfr.resolve();
    } else {
      gid = opts.object._global_object_id;
      DbInfo.loadGeneratedRights({
        global_object_ids: [gid]
      }).done((function(_this) {
        return function(generated_rights) {
          opts.object._generated_rights = generated_rights[gid];
          if (generated_rights[gid][opts.right]) {
            return dfr.resolve();
          } else {
            return dfr.reject();
          }
        };
      })(this)).fail(dfr.reject);
    }
    return dfr.promise();
  };

  DbInfo.canCreate = function(_opts) {
    var dbInfo, dfr, opts, ots;
    opts = CUI.Element.readOpts(_opts, "DbInfo.canCreate", {
      objecttypes: {
        mandatory: true,
        check: function(v) {
          var i, item, len;
          if ($.isArray(v)) {
            for (i = 0, len = v.length; i < len; i++) {
              item = v[i];
              if (!(item instanceof Objecttype)) {
                return false;
              }
            }
            return true;
          } else {
            return false;
          }
        }
      }
    });
    ots = opts.objecttypes;
    dfr = new CUI.Deferred();
    if (ots.length === 1) {
      ez5.api.db_info({
        api: "/create",
        json_data: {
          objecttype: ots[0].name(),
          tag_ids: null
        },
        handle_error: (function(_this) {
          return function(xhr) {
            var ref;
            if ((xhr != null ? (ref = xhr.responseJSON) != null ? ref.code : void 0 : void 0) === "error.user.no_masks_for_create") {
              return true;
            }
          };
        })(this)
      }).done((function(_this) {
        return function(data) {
          var ref, ref1, ref2, ref3, ref4, ref5;
          if ((ref = data._available_masks) != null ? ref.length : void 0) {
            dfr.resolve();
            return;
          }
          if ((ref1 = data._available_objecttypes) != null ? (ref2 = ref1[0]) != null ? ref2.pool_ids : void 0 : void 0) {
            if (DbInfo.filterPoolIds((ref3 = data._available_objecttypes) != null ? (ref4 = ref3[0]) != null ? ref4.pool_ids : void 0 : void 0).length > 0) {
              dfr.resolve();
            } else {
              dfr.reject();
            }
            return;
          }
          if ((ref5 = data._available_objecttypes) != null ? ref5[0] : void 0) {
            dfr.resolve();
          } else {
            dfr.reject();
          }
        };
      })(this)).fail((function(_this) {
        return function(xhr) {
          return dfr.reject();
        };
      })(this));
    } else {
      dbInfo = new DbInfo();
      dbInfo.load({
        ignore_not_found: true
      }).done((function(_this) {
        return function() {
          var ok, ot, ot_id, ot_names, ref, ref1;
          ot_names = (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = ots.length; i < len; i++) {
              ot = ots[i];
              results.push(ot.name());
            }
            return results;
          })();
          ok = false;
          ref = dbInfo.getAvailableObjecttypes();
          for (ot_id in ref) {
            ot = ref[ot_id];
            if (ref1 = ot.name, indexOf.call(ot_names, ref1) >= 0) {
              ok = true;
              break;
            }
          }
          if (ok) {
            dfr.resolve();
          } else {
            dfr.reject();
          }
        };
      })(this)).fail(dfr.reject);
    }
    return dfr.promise();
  };

  return DbInfo;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var AssetCropTool,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AssetCropTool = (function(superClass) {
  extend(AssetCropTool, superClass);

  function AssetCropTool() {
    this.startCrop = bind(this.startCrop, this);
    this.assetDetailEvent = bind(this.assetDetailEvent, this);
    return AssetCropTool.__super__.constructor.apply(this, arguments);
  }

  AssetCropTool.prototype.initOpts = function() {
    AssetCropTool.__super__.initOpts.call(this);
    return this.addOpts({
      content: {
        check: function(v) {
          return DOM.isNode(v);
        }
      },
      asset: {
        check: function(v) {
          return v instanceof Asset;
        }
      }
    });
  };

  AssetCropTool.prototype.readOpts = function() {
    var k, ref, v;
    this.opts.name = "crop";
    AssetCropTool.__super__.readOpts.call(this);
    this.__asset = this._asset;
    this.__content = this._content;
    ref = {
      name: "crop",
      loca_key: "asset.versions.tool.crop",
      run: (function(_this) {
        return function(ev, btn) {
          _this.btn = btn;
          CUI.debug("running crop", ev.getType(), _this.btn);
          if (_this.btn.isActive()) {
            _this.btn.deactivate();
            return _this.stopCrop();
          } else {
            _this.btn.activate();
            return _this.startCrop(true);
          }
        };
      })(this)
    };
    for (k in ref) {
      v = ref[k];
      this.opts[k] = v;
    }
    Events.listen({
      type: "asset-detail",
      node: this.__content,
      instance: this,
      call: (function(_this) {
        return function(ev, info) {
          var ref1, ref2;
          if (!((ref1 = _this.btn) != null ? ref1.isActive() : void 0)) {
            return;
          }
          if (info.tool instanceof Zoomer) {
            if ((ref2 = info.type) === "init" || ref2 === "destroy") {
              return _this.reload();
            }
          }
        };
      })(this)
    });
    Events.listen({
      type: "eas_update",
      node: this.__content,
      instance: this,
      call: (function(_this) {
        return function(ev, info) {
          var cmd, j, len, ref1, ref2, ts;
          ts = [];
          if ((ref1 = _this.imgDim) != null ? ref1.transform : void 0) {
            ref2 = _this.imgDim.transform;
            for (j = 0, len = ref2.length; j < len; j++) {
              cmd = ref2[j];
              for (k in cmd) {
                v = cmd[k];
                ts.push(k + ":" + v);
              }
            }
          }
          CUI.debug("AssetCropTool.updateCropPos", ev.getType(), info, ts.join(" "));
          return _this.updateCropPos();
        };
      })(this)
    });
    Events.listen({
      type: "zoomer-scroll",
      node: this.__content,
      instance: this,
      call: (function(_this) {
        return function(ev, info) {
          globalDrag.startCoordinates.pageY += info.y;
          return globalDrag.startCoordinates.pageX += info.x;
        };
      })(this)
    });
    Events.listen({
      type: "viewport-resize",
      instance: this,
      call: (function(_this) {
        return function(ev, info) {
          return CUI.setTimeout({
            ms: 0,
            call: function() {
              return _this.resize();
            }
          });
        };
      })(this)
    });
    CUI.DOM.waitForDOMRemove({
      node: this._content
    }).done((function(_this) {
      return function() {
        if (!_this.isDestroyed()) {
          return _this.destroy();
        }
      };
    })(this));
    return AssetCropTool.__super__.readOpts.call(this, this.opts);
  };

  AssetCropTool.prototype.destroy = function() {
    var ref;
    this.__movableInst = null;
    this.__resizableInst = null;
    Events.ignore({
      instance: this
    });
    this.stopCrop();
    if ((ref = this.btn) != null) {
      ref.deactivate();
    }
    this.cropDiv = null;
    return this.cropMapDiv = null;
  };

  AssetCropTool.prototype.getProduceTransform = function() {
    var ref;
    if ((ref = this.btn) != null ? ref.isActive() : void 0) {
      return {
        crop: {
          top: this.cropPos.y,
          left: this.cropPos.x,
          width: this.cropPos.w,
          height: this.cropPos.h
        }
      };
    } else {
      return null;
    }
  };

  AssetCropTool.prototype.assetDetailEvent = function(ev_type, info) {
    var ref, ref1;
    switch (ev_type) {
      case "fade-in":
      case "start":
        if ((ref = this.$btn) != null ? ref.hasClass("btn-primary") : void 0) {
          return this.startCrop();
        }
        break;
      case "fade-out":
        if ((ref1 = this.$btn) != null ? ref1.hasClass("btn-primary") : void 0) {
          return this.startCrop();
        }
    }
  };

  AssetCropTool.prototype.resize = function() {
    return this.updateCropPos();
  };

  AssetCropTool.prototype.updateCropPos = function() {
    var _v, arr, cmd, dir, from, i, j, k, lastCropPos, oldCropPos, oldImgDim, ref, ref1, ref2, to, turn_x_180, turn_y_180, turn_z_minus_90, v;
    if (!this.cropDiv) {
      return;
    }
    oldImgDim = copyObject(this.imgDim);
    oldCropPos = copyObject(this.cropPos);
    oldCropPos.view_w = oldImgDim.original_width;
    oldCropPos.view_h = oldImgDim.original_height;
    lastCropPos = copyObject(oldCropPos);
    this.initImgDim();
    turn_z_minus_90 = (function(_this) {
      return function() {
        _this.cropPos.x = lastCropPos.y;
        _this.cropPos.y = lastCropPos.view_w - lastCropPos.x - lastCropPos.w;
        _this.cropPos.w = lastCropPos.h;
        _this.cropPos.h = lastCropPos.w;
        _this.cropPos.view_w = lastCropPos.view_h;
        _this.cropPos.view_h = lastCropPos.view_w;
        CUI.debug(dump(lastCropPos), dump(_this.cropPos));
        return lastCropPos = copyObject(_this.cropPos);
      };
    })(this);
    turn_x_180 = (function(_this) {
      return function() {
        _this.cropPos.y = lastCropPos.view_h - lastCropPos.y - lastCropPos.h;
        return lastCropPos = copyObject(_this.cropPos);
      };
    })(this);
    turn_y_180 = (function(_this) {
      return function() {
        _this.cropPos.x = lastCropPos.view_w - lastCropPos.x - lastCropPos.w;
        return lastCropPos = copyObject(_this.cropPos);
      };
    })(this);
    if (oldImgDim.transform.length < this.imgDim.transform.length) {
      from = oldImgDim.transform.length;
      to = this.imgDim.transform.length - 1;
      arr = this.imgDim.transform;
      dir = 1;
    } else {
      from = oldImgDim.transform.length - 1;
      to = this.imgDim.transform.length;
      arr = oldImgDim.transform;
      dir = -1;
    }
    for (i = j = ref = from, ref1 = to, ref2 = dir; ref2 > 0 ? j <= ref1 : j >= ref1; i = j += ref2) {
      cmd = arr[i];
      for (k in cmd) {
        _v = cmd[k];
        if (isInteger(_v)) {
          v = _v * dir;
          while (v < 0) {
            v += 360;
          }
        } else {
          continue;
        }
        if (v === 0) {
          continue;
        }
        CUI.debug("cmd", cmd, k, v);
        switch (k) {
          case "rotate-z":
            if (v === 270) {
              turn_z_minus_90();
            } else if (v === 180) {
              turn_z_minus_90();
              turn_z_minus_90();
            } else if (v === 90) {
              turn_z_minus_90();
              turn_z_minus_90();
              turn_z_minus_90();
            } else {
              assert(false, "AssetCropTool.updateCropPos", "Unable to perform rotate-z: " + v);
            }
            break;
          case "rotate-x":
            if (v === 180) {
              turn_x_180();
            } else {
              assert(false, "AssetCropTool.updateCropPos", "Unable to perform rotate-x: " + v);
            }
            break;
          case "rotate-y":
            if (v === 180) {
              turn_y_180();
            } else {
              assert(false, "AssetCropTool.updateCropPos", "Unable to perform rotate-y: " + v);
            }
        }
      }
    }
    return this.positionCrop();
  };

  AssetCropTool.prototype.getAssetElement = function() {
    return this.__content.find(".ez-asset")[0];
  };

  AssetCropTool.prototype.getZoomer = function() {
    var zoomer;
    zoomer = DOM.data(this.__content.find(".cui-asset-browser")[0], "element").getActiveTool();
    if (zoomer instanceof Zoomer) {
      return zoomer;
    } else {
      return null;
    }
  };

  AssetCropTool.prototype.initImgDim = function() {
    var dest_h, dest_w, ref, ref1, rotate, viewport;
    viewport = {
      width: this.__asset.getElement().width(),
      height: this.__asset.getElement().height()
    };
    rotate = EAS.getRotateMapFromTransform(this.__asset.value.transform);
    this.imgDim = (ref = rotate.z) === 90 || ref === 270 ? {
      original_width: this.__asset.getHeight(),
      original_height: this.__asset.getWidth(),
      transform: this.__asset.value.transform.slice(0)
    } : {
      original_width: this.__asset.getWidth(),
      original_height: this.__asset.getHeight(),
      transform: this.__asset.value.transform.slice(0)
    };
    if (this.zoomer) {
      this.imgDim.marginLeft = 0;
      this.imgDim.marginTop = 0;
      this.imgDim.getZoom = (function(_this) {
        return function() {
          return _this.zoomer.getZoom();
        };
      })(this);
    } else {
      ref1 = ez5.fitRectangle(this.imgDim.original_width, this.imgDim.original_height, viewport.width, viewport.height), dest_w = ref1[0], dest_h = ref1[1], this.imgDim.marginTop = ref1[2], this.imgDim.marginLeft = ref1[3];
      this.imgDim.getZoom = (function(_this) {
        return function() {
          return dest_w / _this.imgDim.original_width;
        };
      })(this);
      CUI.debug("initImgDim", dest_w + "x" + dest_h, this.imgDim, this.__asset, this.imgDim.getZoom());
    }
    return this.imgDim;
  };

  AssetCropTool.prototype.getLimitRect = function() {
    return {
      min_x: 0,
      min_y: 0,
      min_w: 1,
      min_h: 1,
      max_x: this.imgDim.original_width,
      max_w: this.imgDim.original_width,
      max_y: this.imgDim.original_height,
      max_h: this.imgDim.original_height
    };
  };

  AssetCropTool.prototype.startCrop = function(initial) {
    var do_drag, ref, ref1, start_drag;
    if (initial == null) {
      initial = false;
    }
    if ((ref = this.cropDiv) != null) {
      ref.remove();
    }
    if ((ref1 = this.cropMapDiv) != null) {
      ref1.remove();
    }
    this.cropDiv = (new Template({
      name: "asset-crop-tool"
    })).DOM.hide();
    this.zoomer = this.getZoomer();
    this.initImgDim();
    if (this.zoomer) {
      this.zoomer.registerPlugin(this.zoomerPlugin = new AssetDetailPlugin({
        name: "crop",
        destroy: (function(_this) {
          return function() {
            delete _this.zoomer;
            return delete _this.cropMapDiv;
          };
        })(this),
        update: (function(_this) {
          return function() {
            return _this.positionCrop();
          };
        })(this)
      }));
      this.zoomer.innerDiv.append(this.cropDiv);
      this.cropMapDiv = (new Template({
        name: "asset-crop-tool"
      })).DOM.hide();
      this.zoomer.mapDiv.append(this.cropMapDiv);
    } else {
      this.getAssetElement().append(this.cropDiv);
    }
    if (!this.cropPos) {
      this.cropPos = {
        w: Math.round(this.imgDim.original_width / 2),
        h: Math.round(this.imgDim.original_height / 2)
      };
      this.cropPos.x = Math.round((this.imgDim.original_width - this.cropPos.w) / 2);
      this.cropPos.y = Math.round((this.imgDim.original_height - this.cropPos.h) / 2);
    }
    console.debug("startCrop", this, this.cropPos);
    start_drag = (function(_this) {
      return function(ev, $target, diff) {
        console.warn("start drag movable", ev, $target, diff);
        _this.cropPosStart = copyObject(_this.cropPos);
        return _this.cropPosStart.shiftKey = ev.shiftKey();
      };
    })(this);
    do_drag = (function(_this) {
      return function(ev, $target, diff, instance) {
        return _this.moveCropDiv(diff, instance);
      };
    })(this);
    this.__resizableInst = new CUI.Resizable({
      element: this.cropDiv,
      limitRect: (function(_this) {
        return function() {
          return _this.getLimitRect();
        };
      })(this),
      start_drag: start_drag,
      do_drag: do_drag
    });
    this.__movableInst = new Movable({
      element: this.cropDiv,
      limitRect: (function(_this) {
        return function() {
          return _this.getLimitRect();
        };
      })(this),
      start_drag: start_drag,
      do_drag: do_drag
    });
    this.positionCrop();
    this.cropDiv.show();
    if (this.zoomer) {
      return this.cropMapDiv.show();
    }
  };

  AssetCropTool.prototype.moveCropDiv = function(diff, instance) {
    var j, k, len, newPos, ref;
    if (!this.cropPosStart.shiftKey) {
      diff.x /= this.imgDim.getZoom();
      diff.y /= this.imgDim.getZoom();
    }
    if (globalDrag.resize) {
      newPos = instance.getResizePos(this.cropPosStart, diff);
    } else {
      newPos = {
        x: this.cropPosStart.x + diff.x,
        y: this.cropPosStart.y + diff.y,
        w: this.cropPosStart.w,
        h: this.cropPosStart.h
      };
      instance.limitRect(newPos, this.cropPosStart);
    }
    if (newPos.w < 10) {
      newPos.w = 10;
    }
    if (newPos.h < 10) {
      newPos.h = 10;
    }
    ref = ["x", "y", "w", "h"];
    for (j = 0, len = ref.length; j < len; j++) {
      k = ref[j];
      newPos[k] = Math.round(newPos[k]);
    }
    this.cropPos = newPos;
    return this.positionCrop();
  };

  AssetCropTool.prototype.getCropPosition = function() {
    return "+" + (Math.round(this.cropPos.x)) + "+" + (Math.round(this.cropPos.y));
  };

  AssetCropTool.prototype.getCropDimension = function() {
    return (Math.round(this.cropPos.w)) + "x" + (Math.round(this.cropPos.h));
  };

  AssetCropTool.prototype.positionCrop = function() {
    var pos_div;
    this.cropDiv.find(".asset-crop-tool-position span > span ")[0].text(this.getCropPosition());
    this.cropDiv.find(".asset-crop-tool-dimensions span > span")[0].text(this.getCropDimension());
    pos_div = (function(_this) {
      return function(div, zoom) {
        var bw;
        bw = Math.max(1, zoom);
        div.css({
          top: Math.round(_this.imgDim.marginTop + _this.cropPos.y * zoom),
          left: Math.round(_this.imgDim.marginLeft + _this.cropPos.x * zoom),
          borderWidth: bw
        });
        return CUI.DOM.setDimensions(div[0], {
          marginBoxWidth: Math.floor(_this.cropPos.w * zoom),
          marginBoxHeight: Math.floor(_this.cropPos.h * zoom)
        });
      };
    })(this);
    pos_div(this.cropDiv, this.imgDim.getZoom());
    if (this.zoomer) {
      return pos_div(this.cropMapDiv, this.zoomer.getMapZoom());
    }
  };

  AssetCropTool.prototype.stopCrop = function() {
    var ref, ref1, ref2;
    console.debug("stopCrop", this);
    if ((ref = this.zoomerPlugin) != null) {
      ref.deregister();
    }
    this.zoomerPlugin = null;
    if ((ref1 = this.cropDiv) != null) {
      ref1.remove();
    }
    if (this.zoomer) {
      if ((ref2 = this.cropMapDiv) != null) {
        ref2.remove();
      }
    }
    this.cropDiv = null;
    this.cropMapDiv = null;
    return this.cropPos = null;
  };

  AssetCropTool.prototype.reload = function() {
    var original_height, original_width, pos, transform;
    if (!CUI.DOM.isInDOM(this._content)) {
      return;
    }
    pos = this.cropPos;
    transform = this.imgDim.transform;
    original_width = this.imgDim.original_width;
    original_height = this.imgDim.original_height;
    CUI.debug("before reload: ", dump(transform), original_width + "x" + original_height);
    this.stopCrop();
    this.cropPos = pos;
    this.startCrop();
    this.imgDim.transform = transform;
    this.imgDim.original_width = original_width;
    return this.imgDim.original_height = original_height;
  };

  AssetCropTool.prototype.getTool = function() {};

  return AssetCropTool;

})(ToolboxTool);
// Generated by CoffeeScript 1.10.0
var AssetVersions,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AssetVersions = (function(superClass) {
  extend(AssetVersions, superClass);

  function AssetVersions() {
    return AssetVersions.__super__.constructor.apply(this, arguments);
  }

  AssetVersions.prototype.versions = [];

  AssetVersions.prototype.initOpts = function() {
    return this.addOpts({
      field: {
        mandatory: true,
        check: Field
      },
      data: {
        mandatory: true,
        check: "PlainObject"
      },
      mode: {
        mandatory: true,
        "default": "editor",
        check: ["editor", "detail"]
      },
      done: {
        "default": function() {},
        check: Function
      }
    });
  };

  AssetVersions.prototype.readOpts = function() {
    var values;
    AssetVersions.__super__.readOpts.call(this);
    this.mode = this._mode;
    this.data = this._data;
    this.field = this._field;
    this.__done = this._done;
    CUI.debug("new AssetVersions", this.field, this.data, this.activeEASColumnData);
    this.toolInstances = [];
    if (CUI.__ng__) {
      this.__tmpl = new Template({
        name: "asset-versions",
        init_flex_handles: true,
        map: {
          list: true,
          list_buttons: true,
          tools: true,
          preview: true,
          drag_hint: true,
          form: true,
          info: true
        }
      });
      this.list = this.__tmpl.map.list;
      this.content = this.__tmpl.map.preview;
      this.tools = this.__tmpl.map.tools;
      this.__tmpl.append(new Label({
        multiline: true,
        text: $$('asset.versions.list.label.drag_hint')
      }), 'drag_hint');
      this.__currentLbl = new Label({
        text: $$('asset.versions.list.label.current')
      }).DOM;
      this.__additionalLbl = new Label({
        text: $$('asset.versions.list.label.additional')
      }).DOM;
    } else {
      this.listPane = new VerticalLayout({
        "class": "asset-versions-list-pane",
        bottom: {}
      });
      this.layout = new BorderLayout({
        "class": "asset-versions-layout",
        east: {},
        west: {
          content: this.listPane,
          flexHandle: {
            hidden: false
          }
        }
      });
      this.list = this.listPane.center();
      this.content = this.layout.center();
      this.tools = $div("asset-version-tools");
      this.layout.replace(this.tools, "east");
    }
    this.init();
    this.modal = new Modal({
      "class": "ez5-asset-versions-editor-modal",
      fill_space: "both",
      cancel: true,
      onCancel: (function(_this) {
        return function() {
          if (_this.mode === "detail") {
            return;
          }
          if (_this.hasChanges() || !_this.__fileUpload.isDone()) {
            return CUI.confirm({
              text: $$("asset.versions.modal.close_confirm")
            }).done(function() {
              return _this.__fileUpload.clear();
            });
          } else {

          }
        };
      })(this),
      pane: {
        content: CUI.__ng__ ? this.__tmpl : this.layout,
        header_left: new LocaLabel({
          loca_key: "asset_versions.title." + this.mode
        }),
        footer_right: (function(_this) {
          return function() {
            return _this.buttons();
          };
        })(this)
      }
    });
    this.modal.show();
    values = this.data[this.field.name()];
    this.__data = {};
    if (values) {
      this.__data[this.field.name()] = copyObject(values, true);
    } else {
      this.__data[this.field.name()] = [];
    }
    this.renderList();
    this.__startValue = JSON.stringify(this.getSaveData());
    this.__updateButtons();
    Events.listen({
      type: "click",
      node: this.modal,
      call: (function(_this) {
        return function(ev) {
          var $target, asset, version;
          $target = $(ev.getTarget());
          if ((version = $target.closest(".asset-version")).length) {
            asset = CUI.DOM.data(version[0], "asset");
            return _this.focus(asset);
          }
        };
      })(this)
    });
  };

  AssetVersions.prototype.hasChanges = function() {
    if (!this.__startValue) {
      return false;
    } else if (this.__startValue !== JSON.stringify(this.getSaveData())) {
      return true;
    } else {
      return false;
    }
  };

  AssetVersions.prototype.getSaveData = function() {
    return this.saveTrimValues(this.getSaveValues());
  };

  AssetVersions.prototype.saveTrimValues = function(values) {
    var _v, _values, j, k, l, len, len1, ref, v;
    _values = [];
    for (j = 0, len = values.length; j < len; j++) {
      v = values[j];
      _v = {};
      ref = ["_id", "_export", "transform", "name", "preferred"];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        k = ref[l];
        if (v.hasOwnProperty(k)) {
          _v[k] = v[k];
        } else if (k === "name") {
          _v[k] = "";
        }
      }
      _values.push(_v);
    }
    return _values;
  };

  AssetVersions.prototype.getSaveValues = function() {
    var asset, j, len, ref, results;
    ref = this.versions;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      asset = ref[j];
      results.push(CUI.DOM.data(asset, "asset").value);
    }
    return results;
  };

  AssetVersions.prototype.buttons = function() {
    if (this.mode === "detail") {
      this.__doneButton = new LocaButton({
        loca_key: "asset.versions.button.done",
        onClick: (function(_this) {
          return function(ev) {
            _this.modal.destroy();
            return _this.__done();
          };
        })(this)
      });
      return [this.__doneButton];
    }
    this.__applyButton = new LocaButton({
      loca_key: "asset.versions.button.apply",
      onClick: (function(_this) {
        return function(ev) {
          CUI.debug("save data", _this.hasChanges(), _this.getSaveValues());
          if (ev.hasModifierKey()) {
            return;
          }
          _this.data[_this.field.name()] = _this.getSaveValues();
          _this.modal.destroy();
          return _this.__done();
        };
      })(this)
    });
    this.__produceButton = new LocaButton({
      loca_key: "asset.versions.button.produce",
      disabled: true,
      left: true,
      onClick: (function(_this) {
        return function(ev) {
          return CUI.prompt({
            text: $$('asset.versions.button.produce.name_prompt.msg'),
            placeholder: $$('asset.versions.button.produce.name_prompt.placeholder'),
            button_text_ok: $$("asset.versions.button.produce|text"),
            min_length: 0
          }).done(function(name) {
            _this.__produceButton.startSpinner();
            _this.__produceButton.disable();
            return _this.__produceAsset(ev, {
              id: _this.__produce_asset.value._id,
              name: name,
              transform: _this.__getProduceTransform(_this.__produce_asset).transform
            }).always(function() {
              return _this.__produceButton.stopSpinner();
            }).fail(function() {
              return _this.__produceButton.enable();
            }).done(function() {
              _this.__produce_asset.value.transform = [];
              return _this.updateAsset(_this.__produce_asset);
            });
          });
        };
      })(this)
    });
    return [this.__produceButton, this.__applyButton];
  };

  AssetVersions.prototype.__produceAsset = function(ev, _opts) {
    var command, opts;
    if (_opts == null) {
      _opts = {};
    }
    opts = CUI.Element.readOpts(_opts, 'AssetVersions.__produceAsset', {
      id: {
        check: function(v) {
          return v > 0;
        },
        mandatory: true
      },
      name: {
        check: String
      },
      transform: {
        check: function(v) {
          return (v != null ? v.length : void 0) > 0;
        },
        mandatory: true
      }
    });
    command = {
      eas_parent_id: opts.id,
      transform: opts.transform
    };
    if (ev.hasModifierKey()) {
      CUI.debug(dump(command));
      return new CUI.Deferred().reject().promise();
    }
    console.debug("produce called with command", dump(command));
    return ez5.server({
      api: "/eas/produce",
      type: "POST",
      json_data: command
    }).done((function(_this) {
      return function(new_value) {
        var asset;
        CUI.debug("new value", new_value);
        new_value.preferred = false;
        if (_this.mode === "export") {
          new_value._export = true;
        }
        new_value.name = opts.name;
        asset = new Asset(_this.field, new_value);
        _this.appendAsset(asset);
        return _this.focus(asset);
      };
    })(this));
  };

  AssetVersions.prototype.init = function() {
    var bb, dupDialog, uploder_btn;
    if (this.mode !== "editor") {
      CUI.DOM.remove(this.__tmpl.map.list_buttons);
      return;
    }
    dupDialog = new DuplicatesDialog();
    this.__fileUpload = new FileUpload({
      url: ez5.eas.getUploadUrl(),
      onBeforeDone: (function(_this) {
        return function(file) {
          return dupDialog.addFile(file);
        };
      })(this),
      onAdd: (function(_this) {
        return function(file) {
          var value;
          value = _this.field.uploadAdd(_this.__data, file);
          file._asset = new Asset(_this.field, value);
          _this.appendAsset(file._asset);
          _this.focus(file._asset);
          return _this.__updateButtons();
        };
      })(this),
      onUpdate: (function(_this) {
        return function() {
          return _this.__updateButtons();
        };
      })(this),
      onDone: (function(_this) {
        return function(file) {
          _this.field.uploadDone(_this.__data, file);
          return _this.__updateButtons();
        };
      })(this),
      onFail: (function(_this) {
        return function(file) {
          if (file.getStatus() === "FAILED") {
            EAS.presentUploadError(file);
          }
          _this.removeAsset(file._asset);
          return _this.__updateButtons();
        };
      })(this)
    });
    uploder_btn = new FileUploadButton({
      fileUpload: this.__fileUpload,
      multiple: false,
      tooltip: {
        text: $$("asset.versions.button.upload|tooltip")
      },
      group: "one",
      icon: $$("asset.versions.button.upload|icon")
    });
    this.removeButton = new LocaButton({
      loca_key: "asset.versions.edit.button.remove",
      group: "one",
      onClick: (function(_this) {
        return function(ev) {
          return _this.removeAsset(DOM.data(_this.focused_version[0], "asset"));
        };
      })(this)
    });
    bb = new Buttonbar({
      buttons: [uploder_btn, this.removeButton],
      size: "big"
    });
    this.__tmpl.replace(bb, "list_buttons");
    return this;
  };

  AssetVersions.addTransform = function(_transform, rotateOffset, flipX, flipY) {
    var axes, i, j, l, len, len1, m, map, newTransforms, ref, rotate, rotation, rx, ry, rz, sY, transform;
    if (flipX == null) {
      flipX = 1;
    }
    if (flipY == null) {
      flipY = 1;
    }
    axes = ['rotate-z', 'rotate-x', 'rotate-y'];
    newTransforms = [];
    for (i = j = 0; j <= 2; i = ++j) {
      map = {};
      rotation = 0;
      for (l = 0, len = _transform.length; l < len; l++) {
        transform = _transform[l];
        if (transform.hasOwnProperty(axes[i])) {
          rotation = transform[axes[i]];
          break;
        }
      }
      map[axes[i]] = rotation;
      newTransforms.push(map);
    }
    rotate = newTransforms[0]['rotate-z'] + rotateOffset;
    if (rotate % 180 !== 0) {
      sY = flipY;
      flipY = flipX;
      flipX = sY;
    }
    newTransforms[0]['rotate-z'] = rotate % 360;
    newTransforms[1]['rotate-x'] = (newTransforms[1]['rotate-x'] + 90 * flipY - 90) % 360;
    newTransforms[2]['rotate-y'] = (newTransforms[2]['rotate-y'] + 90 * flipX - 90) % 360;
    rz = newTransforms[0]['rotate-z'];
    rx = newTransforms[1]['rotate-x'];
    ry = newTransforms[2]['rotate-y'];
    if (Math.abs(rz) === 180 && rx === -180 && ry === -180) {
      newTransforms = [];
    } else {
      ref = [2, 1, 0];
      for (m = 0, len1 = ref.length; m < len1; m++) {
        i = ref[m];
        if (newTransforms[i][axes[i]] === 0) {
          newTransforms.splice(i, 1);
        }
      }
    }
    return newTransforms;
  };

  AssetVersions.prototype.getTools = function(asset) {
    var add_transform, crop_tool, ref, ref1, ref2, ref3, reset_tool, reset_transform, update_reset_tool, value;
    if (!(asset != null ? (ref = asset.value) != null ? (ref1 = ref.versions) != null ? ref1.original : void 0 : void 0 : void 0) || (asset != null ? (ref2 = asset.value) != null ? (ref3 = ref2.versions) != null ? ref3.original.status : void 0 : void 0 : void 0) !== "done") {
      return [];
    }
    value = asset.value;
    if (value.versions.original["class"] !== "image") {
      return [];
    }
    update_reset_tool = (function(_this) {
      return function() {
        return reset_tool.$btn.setEnabled(value.transform && value.transform.length > 0);
      };
    })(this);
    add_transform = (function(_this) {
      return function(rotateOffset, flipX, flipY) {
        var element;
        if (flipX == null) {
          flipX = 1;
        }
        if (flipY == null) {
          flipY = 1;
        }
        value.transform = AssetVersions.addTransform(value.transform, rotateOffset, flipX, flipY);
        element = _this.content.find(".ez5-asset-element-transform")[0];
        EAS.setTransformStyle(element, value.transform);
        update_reset_tool();
        _this.__updateButtons(asset);
        return Events.trigger({
          type: "eas_update",
          node: element,
          info: {
            asset: asset
          }
        });
      };
    })(this);
    reset_transform = (function(_this) {
      return function() {
        var element;
        value.transform = [];
        element = _this.content.find(".ez5-asset-element-transform ")[0];
        EAS.setTransformStyle(element, value.transform);
        update_reset_tool();
        _this.__updateButtons(asset);
        return Events.trigger({
          type: "eas_update",
          node: element,
          info: {
            asset: asset
          }
        });
      };
    })(this);
    crop_tool = new AssetCropTool({
      asset: asset,
      content: this.content
    });
    reset_tool = new ToolboxTool({
      name: "reset",
      loca_key: "asset.versions.tool.reset",
      disabled: !value.transform || value.transform.length === 0,
      run: (function(_this) {
        return function(ev, $btn) {
          return reset_transform();
        };
      })(this)
    });
    return [
      new ToolboxTool({
        name: "rotate-left",
        loca_key: "asset.versions.tool.rotate_left",
        group: CUI.__ng__ ? "rotate" : void 0,
        run: (function(_this) {
          return function() {
            return add_transform(-90);
          };
        })(this)
      }), new ToolboxTool({
        name: "rotate-right",
        loca_key: "asset.versions.tool.rotate_right",
        group: CUI.__ng__ ? "rotate" : void 0,
        run: (function(_this) {
          return function() {
            return add_transform(90);
          };
        })(this)
      }), new ToolboxTool({
        name: "flip",
        loca_key: "asset.versions.tool.rotate_vertical",
        group: CUI.__ng__ ? "mirror" : void 0,
        run: (function(_this) {
          return function(ev, $btn) {
            return add_transform(0, 1, -1);
          };
        })(this)
      }), new ToolboxTool({
        name: "flop",
        loca_key: "asset.versions.tool.rotate_horizontal",
        group: CUI.__ng__ ? "mirror" : void 0,
        run: (function(_this) {
          return function(ev, $btn) {
            return add_transform(0, -1, 1);
          };
        })(this)
      }), crop_tool, reset_tool
    ];
  };

  AssetVersions.prototype.renderTools = function(asset) {
    var bb, buttons, idx, itemList, j, l, len, len1, ref, ref1, tool;
    if (this.mode === "detail") {
      return;
    }
    buttons = [];
    if (asset !== this.__tools_for_asset) {
      this.destroyTools();
    }
    this.__tools_for_asset = asset;
    ref = this.getTools(asset);
    for (j = 0, len = ref.length; j < len; j++) {
      tool = ref[j];
      if (!tool) {
        continue;
      }
      idx = idxInArray(tool, this.toolInstances, function(a, b) {
        return a.getName() === b.getName();
      });
      if (idx === -1) {
        this.toolInstances.push(tool);
      } else {
        tool.destroy();
      }
    }
    ref1 = this.toolInstances;
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      tool = ref1[l];
      if (!tool.$btn) {
        (function(_this) {
          return (function(tool) {
            var opts;
            opts = tool.getLabelKeys();
            opts.icon = tool.getIcon();
            opts.size = "big";
            opts.group = tool.getGroup();
            opts.disabled = tool.isDisabled();
            opts.onClick = function(ev, $btn) {
              tool.run(ev, $btn);
              return _this.__updateButtons(asset);
            };
            return tool.$btn = new LocaButton(opts);
          });
        })(this)(tool);
      }
      buttons.push(tool.$btn);
    }
    this.__updateButtons(asset);
    if (CUI.__ng__) {
      bb = new Buttonbar({
        buttons: buttons
      });
      this.__tmpl.replace(bb, "tools");
    } else {
      itemList = new ItemList({
        items: buttons
      });
      itemList.render();
      this.tools.append(itemList.DOM);
    }
    return this;
  };

  AssetVersions.prototype.setFirstVersionPreferred = function() {
    var c, idx, j, len, ref;
    if (this.mode === "export") {
      return;
    }
    ref = this.versions;
    for (idx = j = 0, len = ref.length; j < len; idx = ++j) {
      c = ref[idx];
      CUI.DOM.data(c, "asset").getValue().preferred = idx === 0;
    }
    return this.__updateButtons();
  };

  AssetVersions.prototype.destroy = function() {
    var ref, ref1;
    this.destroyTools();
    if ((ref = this.layout) != null) {
      ref.destroy();
    }
    if ((ref1 = this.__tmpl) != null) {
      ref1.destroy();
    }
    return this.modal.destroy();
  };

  AssetVersions.prototype.renderList = function() {
    var focus_asset, j, l, len, len1, ref, ref1, ref2, value;
    this.list.empty();
    this.versions = [];
    if ((ref = this.removeButton) != null) {
      ref.disable();
    }
    Events.listen({
      type: "eas_update",
      node: this.list,
      call: (function(_this) {
        return function(ev, info) {
          CUI.debug("renderList EAS UPDATE", ev, info);
          return _this.updateAsset(info.asset);
        };
      })(this)
    });
    if (this.__data[this.field.name()]) {
      ref1 = this.__data[this.field.name()];
      for (j = 0, len = ref1.length; j < len; j++) {
        value = ref1[j];
        if (value.preferred) {
          this.old_preferred_value = value;
          focus_asset = this.appendAsset(new Asset(this.field, value));
        }
      }
      ref2 = this.__data[this.field.name()];
      for (l = 0, len1 = ref2.length; l < len1; l++) {
        value = ref2[l];
        if (!value.preferred) {
          this.appendAsset(new Asset(this.field, value));
        }
      }
    }
    if (this.mode === "editor") {
      new Sortable({
        element: this.list,
        selector: ".ez5-asset-versions-list-item",
        dragend: (function(_this) {
          return function() {
            return _this.addListLabels();
          };
        })(this),
        dragstop: (function(_this) {
          return function() {
            return _this.addListLabels();
          };
        })(this),
        sorted: (function(_this) {
          return function() {
            var i, len2, m, ref3, version;
            ref3 = _this.list.querySelectorAll(".ez5-asset-versions-list-item");
            for (i = m = 0, len2 = ref3.length; m < len2; i = ++m) {
              version = ref3[i];
              _this.versions[i] = version;
            }
            return _this.setFirstVersionPreferred();
          };
        })(this)
      });
    }
    if (focus_asset) {
      return this.focus(focus_asset);
    }
  };

  AssetVersions.prototype.removeAsset = function(asset) {
    var version;
    version = this.findVersionByAsset(asset);
    if (!version) {
      return;
    }
    this.versions.splice(this.versions.indexOf(version), 1);
    version.remove();
    if (this.versions.length === 0) {
      asset = null;
    } else {
      if (asset.value.preferred) {
        this.setFirstVersionPreferred();
      }
      asset = CUI.DOM.data(this.versions[0], "asset");
    }
    this.__updateButtons();
    this.addListLabels();
    this.focus(asset);
  };

  AssetVersions.prototype.appendAsset = function(asset) {
    var ref, version;
    if ((ref = this.removeButton) != null) {
      ref.enable();
    }
    version = this.getVersionElement(asset);
    this.list.append(version);
    this.__updateButtons();
    this.versions.push(version);
    this.addListLabels();
    return asset;
  };

  AssetVersions.prototype.addListLabels = function() {
    this.removeListLabels();
    if (this.list.children.length > 1) {
      CUI.DOM.insertChildAtPosition(this.list, this.__additionalLbl, 1);
    }
    return CUI.DOM.insertChildAtPosition(this.list, this.__currentLbl, 0);
  };

  AssetVersions.prototype.removeListLabels = function() {
    CUI.DOM.remove(this.__currentLbl);
    return CUI.DOM.remove(this.__additionalLbl);
  };

  AssetVersions.prototype.updateAsset = function(asset) {
    var current_version, new_version;
    new_version = this.getVersionElement(asset);
    current_version = this.findVersionByAsset(asset);
    if (current_version.hasClass(ez5.defaults.focusClass)) {
      this.focused_version = new_version;
      new_version.addClass(ez5.defaults.focusClass);
      this.renderTools(asset);
    }
    current_version.replaceWith(new_version);
    this.versions.splice(this.versions.indexOf(current_version), 1, new_version);
    return this.__updateButtons();
  };

  AssetVersions.prototype.findVersionByAsset = function(asset) {
    var c, j, len, ref;
    ref = this.versions;
    for (j = 0, len = ref.length; j < len; j++) {
      c = ref[j];
      if (CUI.DOM.data(c, "asset") === asset) {
        return $(c);
      }
    }
    assert(false, "AssetVersions.findVersionByValue", "version not found in list", {
      list: this.list,
      asset: asset
    });
    return asset;
  };

  AssetVersions.prototype.__getProduceTransform = function(asset) {
    var from_tools, j, len, ref, ref1, ti, trans, transform;
    if ((ref = asset.value.transform) != null ? ref.length : void 0) {
      transform = asset.value.transform.slice(0);
    } else {
      transform = [];
    }
    from_tools = false;
    ref1 = this.toolInstances;
    for (j = 0, len = ref1.length; j < len; j++) {
      ti = ref1[j];
      trans = typeof ti.getProduceTransform === "function" ? ti.getProduceTransform(asset) : void 0;
      if (trans) {
        transform.push(trans);
        from_tools = true;
      }
    }
    return {
      transform: transform,
      from_tools: from_tools
    };
  };

  AssetVersions.prototype.__updateButtons = function(asset) {
    var info, ref, ref1, ref2;
    if (this.mode === "detail") {
      return;
    }
    if (asset) {
      info = this.__getProduceTransform(asset);
      if (info.transform.length === 0) {
        this.__produceButton.disable();
      } else {
        this.__produceButton.enable();
        this.__produce_asset = asset;
      }
      if (info.from_tools) {
        this.__applyButton.disable();
        return this;
      }
    }
    if (!this.__fileUpload.isDone()) {
      if ((ref = this.removeButton) != null) {
        ref.disable();
      }
      this.__applyButton.disable();
      return this;
    }
    if (this.versions.length <= 1) {
      if ((ref1 = this.removeButton) != null) {
        ref1.disable();
      }
    } else {
      if ((ref2 = this.removeButton) != null) {
        ref2.enable();
      }
    }
    if (this.hasChanges()) {
      this.__applyButton.enable();
    } else {
      this.__applyButton.disable();
    }
    return this;
  };

  AssetVersions.prototype.getVersionElement = function(asset) {
    var date_created_key, date_uploaded_key, div, fields, form, hl, img_el, ref, rows, version_tmpl;
    assert(asset instanceof Asset, "AssetVersions.getVersionElement", "asset must be instance of Asset", {
      asset: asset
    });
    img_el = asset.getImgElement();
    date_created_key = "asset.versions.label.date_created";
    if (asset.value.eas_parent_id) {
      date_uploaded_key = "asset.versions.label.version_date_uploaded";
    } else {
      date_uploaded_key = "asset.versions.label.date_uploaded";
    }
    if (CUI.__ng__) {
      div = CUI.DOM.element("DIV", {
        "class": "ez5-asset-versions-list-item asset-version"
      });
      hl = asset.renderDetailOutput();
      div.appendChild(hl.DOM);
      rows = [];
      if (asset.value.date_uploaded) {
        rows.push({
          key: $$(date_uploaded_key),
          value: ez5.format_date_and_time(asset.value.date_uploaded)
        });
      }
      if (((ref = asset.value.name) != null ? ref.trim().length : void 0) > 0) {
        rows.push({
          key: $$("asset.versions.label.name"),
          value: asset.value.name
        });
      }
      if (rows.length > 0) {
        div.appendChild(new CUI.Table({
          "class": "ez5-asset-versions-list-item-more-info",
          flex: true,
          rows: rows,
          key_value: true
        }).DOM);
      }
      CUI.DOM.data(div, "asset", asset);
      return $(div);
    }
    version_tmpl = new Template({
      name: "asset-version",
      map: {
        form: true,
        thumbnail: true
      }
    });
    CUI.DOM.data(version_tmpl.DOM[0], "asset", asset);
    version_tmpl.map.thumbnail.append(img_el);
    fields = [
      {
        form: {
          label: $$("asset.versions.label.eas_id")
        },
        type: Output,
        undo_support: false,
        mark_changed: false,
        check_changed: false,
        placeholder: "new",
        name: "_id"
      }, asset.value.original_filename ? {
        type: Output,
        form: {
          label: $$("asset.versions.label.filename")
        },
        undo_support: false,
        mark_changed: false,
        check_changed: false,
        text: asset.value.original_filename,
        placeholder: $$("asset.versions.label.filename.placeholder")
      } : void 0, {
        type: Output,
        form: {
          label: $$("asset.versions.label.filesize")
        },
        undo_support: false,
        mark_changed: false,
        check_changed: false,
        text: ez5.format_filesize(asset.value.filesize),
        placeholder: $$("asset.versions.label.filesize.placeholder")
      }, asset.value.date_created ? {
        form: {
          label: $$(date_created_key)
        },
        undo_support: false,
        mark_changed: false,
        check_changed: false,
        type: Output,
        text: ez5.format_date_and_time(asset.value.date_created),
        placeholder: $$(date_created_key + ".placeholder")
      } : void 0, {
        form: {
          label: $$(date_uploaded_key)
        },
        undo_support: false,
        mark_changed: false,
        check_changed: false,
        type: Output,
        text: ez5.format_date_and_time(asset.value.date_uploaded),
        placeholder: $$(date_uploaded_key + ".placeholder")
      }, {
        form: {
          label: $$("asset.versions.label.name")
        },
        undo_support: false,
        mark_changed: false,
        check_changed: false,
        type: Input,
        placeholder: $$("asset.versions.label.name.placeholder"),
        name: "name",
        maxLength: 30
      }
    ];
    if (this.mode === "export") {
      fields.splice(0, 0, {
        form: {
          label: $$("asset.versions.label.export")
        },
        type: Checkbox,
        name: "_export"
      });
      fields[fields.length - 1].type = Output;
      fields[fields.length - 1].placeholder = $$("asset.versions.label.export.name.placeholder");
    }
    form = new Form({
      undo_support: false,
      mark_changed: false,
      check_changed: false,
      onDataChanged: (function(_this) {
        return function() {
          return _this.__updateButtons();
        };
      })(this),
      data: asset.value,
      fields: fields
    }).start();
    version_tmpl.replace(form, "form");
    return version_tmpl.DOM;
  };

  AssetVersions.prototype.destroyTools = function() {
    var j, len, ref, ti;
    ref = this.toolInstances;
    for (j = 0, len = ref.length; j < len; j++) {
      ti = ref[j];
      if (typeof ti.destroy === "function") {
        ti.destroy();
      }
    }
    this.toolInstances = [];
    this.tools.empty();
    return this;
  };

  AssetVersions.prototype.renderForm = function(asset) {
    var fields, form;
    fields = [];
    switch (this.mode) {
      case "export":
        fields.push({
          type: Checkbox,
          undo_and_changed_support: false,
          form: {
            label: $$("asset.versions.label.export")
          },
          name: "_export"
        });
        break;
      case "editor":
        fields.push({
          type: Input,
          undo_and_changed_support: false,
          form: {
            label: $$("asset.versions.label.name")
          },
          placeholder: $$("asset.versions.label.name.placeholder"),
          name: "name",
          maxLength: 30
        });
        break;
      case "detail":
        if (!isEmpty(asset.value.name)) {
          fields.push({
            type: Output,
            undo_and_changed_support: false,
            form: {
              label: $$("asset.versions.label.name")
            },
            name: "name"
          });
        }
    }
    if (fields.length === 0) {
      return null;
    }
    return form = new Form({
      undo_and_changed_support: false,
      maximize_horizontal: true,
      onDataChanged: (function(_this) {
        return function() {
          return _this.__updateButtons();
        };
      })(this),
      data: asset.value,
      fields: fields
    }).start();
  };

  AssetVersions.prototype.focus = function(asset) {
    var version;
    assert(!asset || asset instanceof Asset, "AssetVersions.focus", "asset needs to be instanceof Asset", {
      asset: asset
    });
    if (this.focused_version) {
      this.focused_version.removeClass(ez5.defaults.focusClass);
      this.focused_version = null;
    }
    DOM.empty(this.content);
    Events.ignore({
      instance: this
    });
    this.renderTools(asset);
    if (CUI.__ng__) {
      this.__tmpl.replace(asset.getInfoTabs(this.mode === "detail"), "info");
      this.__tmpl.replace(this.renderForm(asset), "form");
    }
    if (!asset) {
      return;
    }
    version = this.findVersionByAsset(asset);
    this.focused_version = version;
    version.addClass(ez5.defaults.focusClass);
    this.content.append(new AssetBrowser({
      hires: true,
      assets: [asset]
    }).DOM);
    Events.listen({
      node: this.content,
      instance: this,
      type: "asset-detail",
      call: (function(_this) {
        return function(ev, info) {
          var j, len, ref, ti;
          ref = _this.toolInstances;
          for (j = 0, len = ref.length; j < len; j++) {
            ti = ref[j];
            if (typeof ti.assetDetailEvent === "function") {
              ti.assetDetailEvent(info.type, info);
            }
          }
        };
      })(this)
    });
    Events.listen({
      node: this.content,
      instance: this,
      type: "eas_update",
      call: (function(_this) {
        return function(ev) {
          _this.updateAsset(asset);
        };
      })(this)
    });
  };

  return AssetVersions;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var RightPresetManagerAdmin,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

RightPresetManagerAdmin = (function(superClass) {
  extend(RightPresetManagerAdmin, superClass);

  function RightPresetManagerAdmin() {
    return RightPresetManagerAdmin.__super__.constructor.apply(this, arguments);
  }

  RightPresetManagerAdmin.label = function() {
    return "right.preset.manager.admin.menu";
  };

  RightPresetManagerAdmin.group = function() {
    return "rightsmanagement";
  };

  RightPresetManagerAdmin.submenu = function() {
    return "rightsmanagement";
  };

  RightPresetManagerAdmin.path = function() {
    return ["rightpresetmanager"];
  };

  RightPresetManagerAdmin.is_allowed = function() {
    return ez5.session.hasSystemRight("root", "rightpresetmanager");
  };

  RightPresetManagerAdmin.prototype.hasFooter = function() {
    return false;
  };

  RightPresetManagerAdmin.prototype.loadFilter = false;

  RightPresetManagerAdmin.prototype.setTitle = function() {
    return this.appManager.setTitle("right.preset.manager.admin.title");
  };

  RightPresetManagerAdmin.prototype.getMissingLabel = function() {
    return new EmptyLabel({
      centered: true,
      text: $$("right.preset.manager.admin.empty")
    });
  };

  RightPresetManagerAdmin.prototype.getMenuTitle = function() {
    return new Label({
      text: $$("right.preset.manager.admin.list.context")
    });
  };

  RightPresetManagerAdmin.prototype.getListFields = function() {
    return [
      {
        th_label: "right.preset.manager.admin.list.context"
      }
    ];
  };

  RightPresetManagerAdmin.prototype.loadList = function(ev, info) {
    var dfr, i, len, managers, ref, server_context;
    managers = [];
    ref = RightPresetManager.getServerContexts();
    for (i = 0, len = ref.length; i < len; i++) {
      server_context = ref[i];
      managers.push(new RightPresetManager({
        manager: this,
        server_context: server_context
      }));
    }
    return dfr = new CUI.Deferred().resolve(managers);
  };

  return RightPresetManagerAdmin;

})(SystemListManager);

ez5.session_ready(function() {
  return ez5.rootMenu.registerApp(RightPresetManagerAdmin);
});
// Generated by CoffeeScript 1.10.0
var Presentation,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Presentation = (function(superClass) {
  extend(Presentation, superClass);

  function Presentation() {
    return Presentation.__super__.constructor.apply(this, arguments);
  }

  Presentation.prototype.initOpts = function() {
    Presentation.__super__.initOpts.call(this);
    return this.addOpts({
      collection: {
        mandatory: true,
        check: CollectionWorkfolder
      }
    });
  };

  Presentation.prototype.readOpts = function() {
    Presentation.__super__.readOpts.call(this);
    return this.__load_dfr = this.loadFromData();
  };

  Presentation.prototype.update = function() {
    var overview, slide;
    slide = this.__presentationOverview.getSelectedNode();
    if (!slide) {
      this.__presentationMainViewPane.replace(new EmptyLocaLabel({
        loca_key: "collection.presentation.main_view.select_slide",
        centered: true
      }), "center");
      this.minusButton.disable();
    } else {
      if (CUI.__ng__) {
        overview = $div("ez5-presentation-slide-overview");
        overview.append(slide.renderSlide());
        this.__presentationMainViewPane.replace(overview, "center");
      } else {
        this.__presentationMainViewPane.replace(slide.renderSlide(), "center");
      }
      if (slide.isDeletable()) {
        this.minusButton.enable();
      } else {
        this.minusButton.disable();
      }
    }
    this.updateSaveButton();
    return this;
  };

  Presentation.prototype.getCollection = function() {
    return this._collection;
  };

  Presentation.prototype.updateSaveButton = function() {
    if (this.__saveData !== JSON.stringify(this.getSaveData())) {
      this.saveButton.enable();
    } else {
      this.saveButton.disable();
    }
    return this.setPresentationClassesAndAttributes();
  };

  Presentation.prototype.setPresentationClassesAndAttributes = function(divs) {
    var div, i, len;
    if (divs == null) {
      divs = [this.__presentationOverviewPane.DOM, this.__presentationMainViewPane.DOM];
    }
    for (i = 0, len = divs.length; i < len; i++) {
      div = divs[i];
      DOM.setAttribute(div, "data-show-info", this.__settings.show_info);
    }
    if (this.__settings.show_info !== this.__last_show_info) {
      this.__last_show_info = this.__settings.show_info;
      Events.trigger({
        type: "viewport-resize"
      });
    }
  };

  Presentation.prototype.loadObject = function(global_object_id) {
    return ResultObject.loadFromGlobalObjectId(global_object_id, "long", null, true);
  };

  Presentation.prototype.getData = function() {
    return this.__pres_data;
  };

  Presentation.prototype.loadFromData = function() {
    var dfr, gids, has_start, i, j, len, len1, pres_data, ref, ref1, slide, slides;
    dfr = new CUI.Deferred();
    pres_data = (ref = this._collection.getData().collection.webfrontend_props) != null ? ref.presentation : void 0;
    if (pres_data) {
      this.__pres_data = copyObject(pres_data, true);
    } else {
      this.__pres_data = {};
    }
    if (this.__pres_data.settings) {
      this.__settings = this.__pres_data.settings;
    } else {
      this.__settings = this.getDefaultSettings();
    }
    slides = [];
    if (this.__pres_data.slides) {
      ref1 = this.__pres_data.slides;
      for (i = 0, len = ref1.length; i < len; i++) {
        slide = ref1[i];
        slides.push(PresentationSlide.newFromData(this, slide));
      }
    }
    has_start = false;
    for (j = 0, len1 = slides.length; j < len1; j++) {
      slide = slides[j];
      if (slide instanceof PresentationSlideStart) {
        has_start = true;
      }
    }
    if (!has_start) {
      slides.splice(0, 0, new PresentationSlideStart({
        presentation: this
      }));
    }
    this.__overviewRoot = new ListViewTreeNode({
      children: slides
    });
    gids = this.getGlobalObjectIds();
    this.__saveData = null;
    CUI.chunkWork.call(this, {
      items: gids,
      chunk_size: 1000,
      call: (function(_this) {
        return function(items) {
          return ez5.api.search({
            json_data: {
              best_mask_filter: true,
              generate_rights: false,
              limit: 1000,
              format: 'short',
              search: [
                {
                  type: 'in',
                  fields: ['_global_object_id'],
                  "in": items
                }
              ]
            }
          }).done(function(data) {
            var k, len2, obj, ref2, results;
            ref2 = data.objects;
            results = [];
            for (k = 0, len2 = ref2.length; k < len2; k++) {
              obj = ref2[k];
              results.push(removeFromArray(obj._global_object_id, gids));
            }
            return results;
          });
        };
      })(this)
    }).fail(dfr.reject).done((function(_this) {
      return function() {
        if (gids.length > 0) {
          return CUI.confirm({
            text: $$('presentation.load.not_all_objects_found.message', {
              count: gids.length + ""
            }),
            button_primary: 'ok',
            button_text_ok: $$('presentation.load.not_all_objects_found.button.ok'),
            button_text_cancel: $$('presentation.load.not_all_objects_found.button.cancel')
          }).done(function() {
            var k, len2, ref2;
            _this.__saveData = JSON.stringify(_this.getSaveData());
            ref2 = _this.__overviewRoot.children;
            for (k = 0, len2 = ref2.length; k < len2; k++) {
              slide = ref2[k];
              slide.removeGlobalObjectIds(gids);
            }
            return dfr.resolve();
          }).fail(dfr.resolve);
        } else {
          return dfr.resolve();
        }
      };
    })(this));
    return dfr.promise();
  };

  Presentation.prototype.getSlideIdx = function() {
    var ref;
    if (!this.__presentationOverview) {
      return this.getData().slide_idx;
    } else {
      return ((ref = this.__presentationOverview.getSelectedNode()) != null ? ref.getChildIdx() : void 0) || 0;
    }
  };

  Presentation.prototype.showEditor = function() {
    CUI.debug("presentatino show editor", this._collection.getData());
    return this.__load_dfr.fail((function(_this) {
      return function() {
        return CUI.alert({
          text: "Fehler beim Laden"
        });
      };
    })(this)).done((function(_this) {
      return function() {
        var dm, downloadBtn, downloadManagers, i, len, mod, psc, ref;
        _this.plusButton = new LocaButton({
          loca_key: "presentation.edit.add.button",
          group: "plusminus",
          menu: {
            items: function() {
              var fn, i, items, len, ref, type;
              items = [];
              ref = PresentationSlide.getTypes();
              fn = function(type) {
                return items.push({
                  loca_key: "presentation.slide_type." + type.getType(),
                  onClick: function() {
                    return _this.addSlide(new type({
                      presentation: _this
                    })).select();
                  }
                });
              };
              for (i = 0, len = ref.length; i < len; i++) {
                type = ref[i];
                if (!(new type({
                  presentation: _this
                }).isUserSelectable())) {
                  continue;
                }
                fn(type);
              }
              items.push({
                divider: true
              });
              items.push({
                loca_key: "presentation.menu.add_all_missing",
                onClick: function() {
                  return CUI.confirm({
                    text: $$("presentation.menu.add_all_missing.confirm")
                  }).done(function() {
                    var wb;
                    wb = new WaitBlock({
                      element: _this.__presentationLayout.left()
                    }).show();
                    return _this._collection.executeSearch({
                      limit: 1000
                    }).always(function() {
                      return wb.destroy();
                    }).done(function(data) {
                      var gids, j, len1, obj, ref1, ref2, slide;
                      gids = _this.getGlobalObjectIds();
                      ref1 = data.objects;
                      for (j = 0, len1 = ref1.length; j < len1; j++) {
                        obj = ref1[j];
                        if (ref2 = obj._global_object_id, indexOf.call(gids, ref2) < 0) {
                          slide = new PresentationSlideOne({
                            presentation: _this
                          });
                          slide.initFromData({
                            center: {
                              global_object_id: obj._global_object_id
                            }
                          });
                          _this.addSlide(slide, true);
                        }
                      }
                      _this.updateSaveButton();
                    });
                  });
                }
              });
              return items;
            }
          }
        });
        _this.minusButton = new LocaButton({
          loca_key: "presentation.edit.minus.button",
          group: "plusminus",
          disabled: true,
          onClick: function(ev, btn) {
            var ref;
            btn.disable();
            return (ref = _this.__presentationOverview.getSelectedNode()) != null ? ref.remove().always(function() {
              return btn.enable();
            }) : void 0;
          }
        });
        _this.saveButton = new LocaButton({
          loca_key: "presentation.edit.save.button",
          disabled: true,
          left: true,
          onClick: function(ev, btn) {
            btn.disable().startSpinner();
            return _this.save().always(function() {
              return btn.enable().stopSpinner();
            }).done(function() {
              return mod.destroy();
            });
          }
        });
        _this.playButton = new LocaButton({
          loca_key: "presentation.edit.start.button",
          size: "big",
          "class": "ez5-play-button",
          onClick: function() {
            var start_idx;
            start_idx = _this.getSlideIdx();
            return _this.play(start_idx).done(function(slide_no) {
              return _this.__overviewRoot.children[slide_no].select();
            });
          }
        });
        _this.settingsButton = new LocaButton({
          loca_key: "presentation.button.settings",
          group: "a",
          onClick: function() {
            return _this.showPresentationSettings();
          }
        });
        if (Presentation.downloadManagers.length > 0) {
          downloadManagers = [];
          ref = Presentation.downloadManagers;
          for (i = 0, len = ref.length; i < len; i++) {
            dm = ref[i];
            downloadManagers.push(new dm({
              presentation: _this
            }));
          }
          downloadBtn = new LocaButton({
            group: "a",
            loca_key: "presentation.button.download",
            menu: {
              items: function() {
                var j, len1, results;
                results = [];
                for (j = 0, len1 = downloadManagers.length; j < len1; j++) {
                  dm = downloadManagers[j];
                  results.push(dm.getMenuButton());
                }
                return results;
              }
            }
          });
        }
        _this.__presentationOverview = new ListViewTree({
          selectableRows: true,
          rowMove: true,
          rowMoveFixedRows: 1,
          onRowMove: function(from, to, after) {
            return _this.updateSaveButton();
          },
          onSelect: function() {
            return _this.update();
          },
          onDeselect: function() {
            return _this.update();
          },
          no_hierarchy: true,
          root: _this.__overviewRoot,
          cols: ["maximize"],
          footer_left: [_this.plusButton, _this.minusButton],
          footer_right: [downloadBtn, _this.settingsButton]
        });
        _this.__presentationOverviewPane = new SimplePane({
          "class": "ez5-presentation-overview-pane",
          header_left: new LocaLabel({
            loca_key: "collection.presentation.overview.title"
          }),
          content: function() {
            var node;
            node = _this.__presentationOverview.render(false);
            _this.__presentationOverview.root.open();
            return node;
          }
        });
        _this.__presentationMainViewPane = new SimplePane({
          "class": "ez5-presentation-main-view-pane",
          header_left: new LocaLabel({
            loca_key: "collection.presentation.main_view.title"
          })
        });
        _this.__presentationCollectionPane = new SimplePane({
          "class": "ez5-presentation-collection-pane",
          header_left: new LocaLabel({
            loca_key: "collection.presentation.collection.title"
          })
        });
        _this.__presentationLayout = new HorizontalLayout({
          absolute: true,
          "class": "ez5-collection-workfolder-presentation",
          left: {
            "class": "ez5-collection-workfolder-presentation-left",
            flexHandle: {
              state_name: "presentation-left",
              hidden: false
            },
            content: _this.__presentationOverviewPane
          },
          center: {
            "class": "ez5-collection-workfolder-presentation-center",
            content: _this.__presentationMainViewPane
          },
          right: {
            "class": "ez5-collection-workfolder-presentation-right",
            content: _this.__presentationCollectionPane,
            flexHandle: {
              state_name: "presentation-right",
              hidden: false
            }
          }
        });
        _this.__overviewRoot.children[_this.getData().slide_idx || 0].select();
        if (!_this.__saveData) {
          _this.__saveData = JSON.stringify(_this.getSaveData());
        }
        _this.update();
        _this.updateSaveButton();
        mod = new Modal({
          fill_space: "both",
          "class": "ez5-collection-workfolder-presentation-modal",
          cancel: true,
          onCancel: function() {
            var dfr;
            if (!_this.saveButton.isEnabled()) {
              return true;
            }
            dfr = new CUI.Deferred();
            new CUI.ConfirmationChoice({
              text: $$("presentation.unsaved_changes.text"),
              choices: [
                {
                  _value: "discard",
                  text: $$("presentation.unsaved_changes.button.discard")
                }, {
                  _value: "cancel",
                  text: $$("base.cancel")
                }, {
                  _value: "save",
                  primary: true,
                  text: $$("presentation.unsaved_changes.button.save")
                }
              ]
            }).open().done(function(choice, btn, ev) {
              switch (choice._value) {
                case "discard":
                  return dfr.resolve();
                case "cancel":
                  return dfr.reject();
                case "save":
                  return _this.save().done(dfr.resolve).fail(dfr.reject);
              }
            });
            return dfr.promise();
          },
          pane: {
            header_left: new Label({
              text: _this._collection.renderNameAsText()
            }),
            content: _this.__presentationLayout,
            footer_left: _this.playButton,
            footer_right: _this.saveButton
          }
        }).show();
        psc = new PresentationSearchCollection({
          container: _this.__presentationCollectionPane.center(),
          collection: _this._collection
        });
        return psc.init();
      };
    })(this));
  };

  Presentation.prototype.getGlobalObjectIds = function() {
    var gids, i, len, ref, slide;
    gids = [];
    ref = this.__overviewRoot.children;
    for (i = 0, len = ref.length; i < len; i++) {
      slide = ref[i];
      gids.push.apply(gids, slide.getGlobalObjectIds());
    }
    return gids;
  };

  Presentation.prototype.save = function(ev) {
    return this._collection.save(ev, this.getSaveData());
  };

  Presentation.prototype.getFieldsForSettings = function() {
    return [
      {
        type: Options,
        horizontal: false,
        undo_and_changed_support: false,
        form: {
          label: $$("presentation.settings.form.info.label")
        },
        radio: true,
        options: [
          {
            text: $$("presentation.settings.form.info.option.no-info"),
            value: "no-info"
          }, {
            text: $$("presentation.settings.form.info.option.standard-info"),
            value: "standard-info"
          }
        ],
        name: "show_info"
      }
    ];
  };

  Presentation.prototype.showPresentationSettings = function() {
    var form, mod;
    form = new Form({
      data: this.__settings,
      undo_and_changed_support: false,
      fields: this.getFieldsForSettings(),
      onDataChanged: (function(_this) {
        return function() {
          return _this.setPresentationClassesAndAttributes();
        };
      })(this)
    }).start();
    return mod = new Popover({
      element: this.settingsButton,
      placement: "nw",
      placements: ["nw", "n"],
      onHide: (function(_this) {
        return function() {
          return _this.updateSaveButton();
        };
      })(this),
      pane: {
        header_left: new LocaLabel({
          loca_key: "presentation.settings.popover.title"
        }),
        content: form
      }
    }).show();
  };

  Presentation.prototype.getDefaultSettings = function() {
    return {
      show_info: "no-info"
    };
  };

  Presentation.prototype.getSettings = function() {
    return this.__settings;
  };

  Presentation.prototype.checkRemoveObjects = function(collection_objects) {
    var co, dfr, gid, gids, i, len, loca_key, remove_gids, txt;
    gids = this.getGlobalObjectIds();
    remove_gids = [];
    dfr = new CUI.Deferred();
    for (i = 0, len = collection_objects.length; i < len; i++) {
      co = collection_objects[i];
      gid = co.getGlobalObjectId();
      if (indexOf.call(this.getGlobalObjectIds(), gid) >= 0) {
        remove_gids.push(gid);
      }
    }
    if (remove_gids.length === 0) {
      return dfr.resolve().promise();
    }
    if (remove_gids.length === 1) {
      loca_key = "presentation.remove_objects.confirm.one";
    } else {
      loca_key = "presentation.remove_objects.confirm";
    }
    txt = $$(loca_key, {
      count: remove_gids.length
    });
    CUI.confirm({
      text: txt
    }).done((function(_this) {
      return function() {
        var j, len1, ref, slide;
        ref = _this.__overviewRoot.children;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          slide = ref[j];
          slide.removeGlobalObjectIds(remove_gids);
        }
        return _this.save().done(dfr.resolve).fail(dfr.reject);
      };
    })(this)).fail(dfr.reject);
    return dfr.promise();
  };

  Presentation.prototype.getSaveData = function() {
    var c, i, len, ref, sd, sd_pres, sd_slide;
    sd = this._collection.getSaveData();
    if (!sd.collection.webfrontend_props) {
      sd.collection.webfrontend_props = {};
    }
    sd_pres = sd.collection.webfrontend_props.presentation;
    if (!sd_pres) {
      sd_pres = sd.collection.webfrontend_props.presentation = {};
    }
    sd_pres.slides = [];
    sd_pres.slide_idx = this.getSlideIdx();
    sd_pres.settings = this.getSettings();
    ref = this.__overviewRoot.children;
    for (i = 0, len = ref.length; i < len; i++) {
      c = ref[i];
      sd_slide = c.getSaveData();
      sd_pres.slides.push(sd_slide);
    }
    if (sd_pres.slides.length > 0) {
      sd.collection.type = "presentation";
    } else {
      sd.collection.type = "workfolder";
    }
    return sd;
  };

  Presentation.prototype.play = function(slide_no) {
    var dfr;
    if (slide_no == null) {
      slide_no = 0;
    }
    dfr = new CUI.Deferred();
    this.__load_dfr.fail((function(_this) {
      return function() {
        return dfr.reject();
      };
    })(this)).done((function(_this) {
      return function() {
        var closeBtn, fn, i, leftBtn, len, play_div, player_overview_div, player_overview_outer_div, present_slide, prevNext, rightBtn, slide, slide_idx, slides, update_btns;
        play_div = new Template({
          name: "presentation-player",
          map: {
            content: true,
            controls: true
          }
        });
        if (CUI.__ng__) {
          player_overview_outer_div = $div("cui-presentation-player-overview-outer");
          player_overview_div = $div("cui-presentation-player-overview");
          player_overview_outer_div.append(player_overview_div);
        } else {
          player_overview_div = $div("cui-presentation-player-overview ez5-slide-in");
        }
        DOM.setClassOnMousemove({
          element: CUI.__ng__ ? player_overview_outer_div[0] : player_overview_div[0],
          ms: 1500,
          "class": "ez5-presentation-player-overview--show"
        });
        _this.setPresentationClassesAndAttributes([play_div.DOM]);
        DOM.setClassOnMousemove({
          element: play_div.DOM[0],
          ms: CUI.__ng__ ? 500 : 1500,
          "class": "ez5-presentation-player--show-controls"
        });
        closeBtn = new LocaButton({
          loca_key: "presentation.play.close.button",
          "class": "ez5-presentation-player-close-button ez5-slide-in",
          onClick: function() {
            play_div.DOM.remove();
            if (CUI.__ng__) {
              player_overview_outer_div.remove();
            } else {
              player_overview_div.remove();
            }
            return dfr.resolve(slide_no);
          }
        });
        leftBtn = new LocaButton({
          loca_key: "presentation.play.left.button",
          disabled: true,
          onClick: function() {
            return present_slide(slide_no - 1);
          }
        });
        rightBtn = new LocaButton({
          loca_key: "presentation.play.right.button",
          disabled: true,
          onClick: function() {
            return present_slide(slide_no + 1);
          }
        });
        slides = _this.__overviewRoot.children;
        fn = function(slide_idx) {
          var outer, overview_slide;
          overview_slide = slide.renderContent();
          if (overview_slide.DOM) {
            overview_slide = overview_slide.DOM;
          }
          DOM.setAttribute(overview_slide[0], "slide-no", slide_idx);
          Events.listen({
            type: "click",
            node: overview_slide,
            call: function() {
              return present_slide(slide_idx);
            }
          });
          if (CUI.__ng__) {
            outer = $div("cui-presentation-player-overview-entry");
            outer.append(overview_slide);
            return player_overview_div.append(outer);
          } else {
            return player_overview_div.append(overview_slide);
          }
        };
        for (slide_idx = i = 0, len = slides.length; i < len; slide_idx = ++i) {
          slide = slides[slide_idx];
          fn(slide_idx);
        }
        update_btns = function() {
          if (slide_no === 0) {
            leftBtn.disable();
          } else {
            leftBtn.enable();
          }
          if (slide_no + 1 < slides.length) {
            return rightBtn.enable();
          } else {
            return rightBtn.disable();
          }
        };
        prevNext = new Buttonbar({
          "class": "ez5-presentation-player-prev-next-buttonbar ez5-slide-in",
          buttons: [leftBtn, rightBtn]
        });
        play_div.append(closeBtn, "controls");
        play_div.append(prevNext, "controls");
        present_slide = function(new_no) {
          slide_no = new_no;
          player_overview_div.find(".cui-selected").removeClass("cui-selected");
          if (CUI.__ng__) {
            player_overview_div.find("[slide-no=\"" + slide_no + "\"]")[0].parentNode.addClass("cui-selected");
          } else {
            player_overview_div.find("[slide-no=\"" + slide_no + "\"]").addClass("cui-selected");
          }
          play_div.replace(slides[slide_no].renderPresentation(), "content");
          return update_btns();
        };
        present_slide(slide_no);
        document.body.appendChild(play_div.DOM[0]);
        if (CUI.__ng__) {
          return document.body.appendChild(player_overview_outer_div[0]);
        } else {
          return document.body.appendChild(player_overview_div[0]);
        }
      };
    })(this));
    return dfr.promise();
  };

  Presentation.prototype.addSlide = function(slide, append) {
    var sel_slide;
    if (append == null) {
      append = false;
    }
    sel_slide = this.__presentationOverview.getSelectedNode();
    if (sel_slide && !append) {
      sel_slide.appendSibling(slide);
    } else {
      this.__overviewRoot.addNode(slide);
    }
    slide.scrollIntoView();
    return slide;
  };

  Presentation.registerDownloadManager = function(dm) {
    var inst;
    if (CUI.isFunction(dm)) {
      inst = new dm();
    }
    assert(inst instanceof PresentationDownloadManager, "Presentation.registerDownloadManager", "download manager needs to be instance of PresentationDownloadManager");
    this.downloadManagers.push(dm);
  };

  Presentation.downloadManagers = [];

  return Presentation;

})(CUI.Element);
// Generated by CoffeeScript 1.10.0
var PresentationDownloadManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PresentationDownloadManager = (function(superClass) {
  extend(PresentationDownloadManager, superClass);

  function PresentationDownloadManager(opts) {
    if (!opts) {
      return;
    }
    PresentationDownloadManager.__super__.constructor.call(this, opts);
  }

  PresentationDownloadManager.prototype.initOpts = function() {
    PresentationDownloadManager.__super__.initOpts.call(this);
    this.removeOpt("collection");
    this.removeOpt("result_object");
    return this.addOpts({
      presentation: {
        mandatory: true,
        check: Presentation
      }
    });
  };

  PresentationDownloadManager.prototype.readOpts = function() {
    ExportManager.prototype.readOpts.call(this);
    this._collection = this._presentation.getSetOpt("collection");
    return this;
  };

  PresentationDownloadManager.prototype.showUserAdminMessages = function() {
    return CUI.resolvedPromise();
  };

  PresentationDownloadManager.prototype.getMenuButton = function() {
    return {
      text: this.__cls
    };
  };

  PresentationDownloadManager.prototype.addToRequest = function(request) {
    var gids;
    if (request == null) {
      request = {};
    }
    request.offset = 0;
    if (!request.search) {
      request.search = [];
    }
    gids = this._presentation.getGlobalObjectIds();
    if (gids.length === 0) {
      gids.push("-1");
    }
    request.search.push({
      type: "in",
      fields: ["_global_object_id"],
      "in": gids
    });
    return request;
  };

  PresentationDownloadManager.prototype.gatherBaseData = function() {
    var eas_info, sm;
    eas_info = {
      total: 0,
      assets: [],
      counts: {
        by_class: {},
        by_field_name: {}
      }
    };
    this.setEASColumnsInfo(eas_info);
    sm = new DownloadManagerResult({
      manager: this,
      eas_info: eas_info
    });
    return this.__search.execute(new Request({
      searchManagers: [sm],
      exclusive: true
    }));
  };

  PresentationDownloadManager.prototype.getAssetVersionsToExport = function(asset, gid) {
    var i, len, ref, version, versions;
    versions = [];
    ref = asset.value.versions;
    for (i = 0, len = ref.length; i < len; i++) {
      version = ref[i];
      if (version._not_allowed || version.status !== "done") {
        continue;
      }
      versions.push(version);
    }
    return versions;
  };

  PresentationDownloadManager.prototype.gatherAssetsForExport = function() {
    var asset, eas_id, eas_info, gid, i, j, k, len, len1, order, produce_versions, ref, ref1, standard, text, version, versions;
    this.assets = {};
    this.data_by_gid = {};
    eas_info = this.getEASColumnsInfo();
    ref = eas_info.assets;
    for (i = 0, len = ref.length; i < len; i++) {
      asset = ref[i];
      gid = asset.__object_data._global_object_id;
      console.debug("dump", asset.__object_data._standard);
      if (!this.data_by_gid[gid]) {
        standard = {};
        for (order = j = 1; j <= 3; order = j += 1) {
          text = ez5.loca.getBestFrontendValue((ref1 = asset.__object_data._standard[order]) != null ? ref1.text : void 0);
          if (isNull(text)) {
            standard[order] = "";
          } else {
            standard[order] = text;
          }
        }
        this.data_by_gid[gid] = {
          asset_ids: [],
          standard_info: standard
        };
      }
      versions = this.getAssetVersionsToExport(asset, gid);
      if (!(versions != null ? versions.length : void 0)) {
        continue;
      }
      produce_versions = [];
      eas_id = asset.value._id;
      this.data_by_gid[gid].asset_ids.push(eas_id);
      this.assets[eas_id] = {
        versions: produce_versions
      };
      for (k = 0, len1 = versions.length; k < len1; k++) {
        version = versions[k];
        if (version.version === "original") {
          produce_versions.push({
            type: "current",
            metadata: "standard"
          });
        } else {
          produce_versions.push({
            type: "version",
            version: version.version,
            metadata: "standard"
          });
        }
      }
      console.debug("gather base data:", dump(this.getEASColumnsInfo()));
    }
  };

  PresentationDownloadManager.prototype.getExportSaveData = function() {
    var data, sd;
    this.gatherAssetsForExport();
    sd = this._presentation.getSaveData();
    data = {
      "export": {
        search: this.addToRequest(),
        xml: false,
        flat: true,
        eas_fields: {},
        produce_options: {
          pptx: true,
          presentation: {
            slides: sd.collection.webfrontend_props.presentation.slides,
            settings: sd.collection.webfrontend_props.presentation.settings,
            data_by_gid: this.data_by_gid,
            filename: ez5.loca.getBestFrontendValue(sd.collection.displayname)
          }
        },
        filename_template: "%_asset.id%",
        type: "download",
        json: true,
        json_one_file_per_object: true,
        filename_original: null,
        assets: this.assets
      }
    };
    return data;
  };

  return PresentationDownloadManager;

})(DownloadManager);
// Generated by CoffeeScript 1.10.0
var PresentationSearchCollection,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PresentationSearchCollection = (function(superClass) {
  extend(PresentationSearchCollection, superClass);

  function PresentationSearchCollection() {
    return PresentationSearchCollection.__super__.constructor.apply(this, arguments);
  }

  PresentationSearchCollection.prototype.init = function() {
    this.__pane = new Pane({
      "class": "ez5-search-collection-pane",
      top: {
        "class": "ez5-search-collection-pane-top",
        content: [
          this.__buttonToolbar = new PaneToolbar({
            "class": "ez5-search-collection-toolbar"
          })
        ]
      },
      center: {
        "class": "ez5-search-collection-center"
      }
    });
    Events.listen({
      type: "toolbox",
      call: (function(_this) {
        return function(ev, info) {
          removeFromArray(null, info.tools, function(v) {
            return v.getName() === "object.delete_from_server";
          });
        };
      })(this)
    });
    this.rc = this.__pane.center();
    this.container.append(this.__pane.DOM);
    this.registerResultContainer(this.rc);
    this.addResultSearchManager();
    return CUI.chainedCall(Search.prototype.init.call(this), (function(_this) {
      return function() {
        return _this.execute();
      };
    })(this));
  };

  PresentationSearchCollection.prototype.addResultSearchManager = function() {
    return this.addSearchManager(new ResultManager({
      pref: "presentation_search_collection_view_data",
      managers: [
        new ResultStandard({
          container: this.getResultContainer(),
          selectable_opts: {
            collection: this.getCollection(),
            select_with_modifier: false,
            lasso: false,
            fullscreen: false,
            draggable: true,
            select: false
          }
        })
      ]
    }));
  };

  return PresentationSearchCollection;

})(SearchCollection);
// Generated by CoffeeScript 1.10.0
var PresentationSlide,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PresentationSlide = (function(superClass) {
  extend(PresentationSlide, superClass);

  function PresentationSlide(opts) {
    this.opts = opts;
    if (this.opts) {
      PresentationSlide.__super__.constructor.call(this, this.opts);
    } else {
      return;
    }
  }

  PresentationSlide.prototype.initOpts = function() {
    PresentationSlide.__super__.initOpts.call(this);
    return this.addOpts({
      presentation: {
        check: Presentation
      }
    });
  };

  PresentationSlide.prototype.allowRowMove = function(to_node, new_father, after) {
    if (to_node.getDisplayRowIdx() === 0) {
      return false;
    } else {
      return true;
    }
  };

  PresentationSlide.prototype.getSaveData = function() {
    return {
      type: window[this.__cls].getType()
    };
  };

  PresentationSlide.prototype.getGlobalObjectIds = function() {
    return [];
  };

  PresentationSlide.prototype.removeGlobalObjectIds = function(gids) {};

  PresentationSlide.prototype.initFromData = function(data) {};

  PresentationSlide.prototype.isDeletable = function() {
    return true;
  };

  PresentationSlide.prototype.update = function() {
    this._presentation.updateSaveButton();
    return PresentationSlide.__super__.update.call(this);
  };

  PresentationSlide.prototype.isUserSelectable = function() {
    return true;
  };

  PresentationSlide.prototype.updateSlide = function() {
    this._presentation.update();
    return this.update();
  };

  PresentationSlide.prototype.renderContent = function() {
    var overview;
    overview = this.renderOverview();
    return $div("ez5-presentation-slide-overview").append(overview.DOM || overview);
  };

  PresentationSlide.prototype.renderPresentation = function() {
    return assert(false, "PresentationSlide.renderPresentation", "Needs to be overwritten");
  };

  PresentationSlide.prototype.renderOverview = function() {
    return this.renderPresentation();
  };

  PresentationSlide.prototype.renderSlide = function() {
    return assert(false, "PresentationSlide.renderSlide", "Needs to be overwritten");
  };

  PresentationSlide.prototype.loadObject = function(global_object_id) {
    return this._presentation.loadObject(global_object_id);
  };

  PresentationSlide.prototype.__fillSlide = function(tmpl, key, hires, remove_button) {
    var func, obj, txt;
    if (hires == null) {
      hires = false;
    }
    if (remove_button == null) {
      remove_button = false;
    }
    if (hires) {
      txt = new LocaLabel({
        loca_key: "presentation.slide.drag_info",
        centered: true
      }).DOM;
      func = "renderHires";
    } else {
      txt = key;
      func = "renderStandard";
    }
    obj = this["__" + key];
    if (obj) {
      return this._presentation.loadObject(obj).done((function(_this) {
        return function(result_object) {
          return tmpl.replace(result_object[func](), key);
        };
      })(this)).fail((function(_this) {
        return function() {
          return tmpl.replace(new LocaLabel({
            loca_key: 'presentation.slide.error_loading',
            centered: true
          }), key);
        };
      })(this)).always((function(_this) {
        return function() {
          if (remove_button) {
            return tmpl.append(new LocaButton({
              "class": "ez5-presentation-slide-remove-button",
              loca_key: "presentation.slide.trash",
              onClick: function() {
                _this["__" + key] = null;
                return _this.updateSlide();
              }
            }), key);
          }
        };
      })(this));
    } else {
      return tmpl.replace(txt, key);
    }
  };

  PresentationSlide.__types = [];

  PresentationSlide.addType = function(type) {
    assert(new type() instanceof PresentationSlide, "PresentationSlide.addType", "Type needs to be instance of PresentationSlide.", {
      type: type
    });
    return this.__types.push(type);
  };

  PresentationSlide.getTypes = function() {
    return this.__types;
  };

  PresentationSlide.newFromData = function(presentation, data) {
    var found, i, len, ref, slide, type;
    ref = this.__types;
    for (i = 0, len = ref.length; i < len; i++) {
      type = ref[i];
      if (type.getType() === data.type) {
        found = type;
        break;
      }
    }
    assert(type, "PresentationSlide.newFromData", "Unable to load data, type " + data.type + " not found.", {
      data: data
    });
    slide = new type({
      presentation: presentation
    });
    slide.initFromData(data);
    return slide;
  };

  return PresentationSlide;

})(ListViewTreeNode);
// Generated by CoffeeScript 1.10.0
var PresentationSlideInfo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PresentationSlideInfo = (function(superClass) {
  extend(PresentationSlideInfo, superClass);

  function PresentationSlideInfo() {
    return PresentationSlideInfo.__super__.constructor.apply(this, arguments);
  }

  PresentationSlideInfo.prototype.readOpts = function() {
    PresentationSlideInfo.__super__.readOpts.call(this);
    return this.initFromData({
      data: {}
    });
  };

  PresentationSlideInfo.prototype.isUserSelectable = function() {
    return false;
  };

  PresentationSlideInfo.prototype.initFromData = function(data) {
    PresentationSlideInfo.__super__.initFromData.call(this, data);
    this.data = data.data;
    if (!this.data.hasOwnProperty("title")) {
      this.data.title = this.getDefaultTitle();
    }
    if (isEmpty(this.data.info)) {
      this.data.info = "";
    }
    return this;
  };

  PresentationSlideInfo.prototype.getDefaultTitle = function() {
    return "";
  };

  PresentationSlideInfo.prototype.getSaveData = function() {
    var sd;
    sd = PresentationSlideInfo.__super__.getSaveData.call(this);
    sd.data = copyObject(this.data, true);
    delete sd.data._undo;
    return sd;
  };

  PresentationSlideInfo.prototype.getTemplate = function() {
    var tmpl;
    tmpl = new Template({
      name: "presentation-slide-info",
      map: {
        title: true,
        content: true
      }
    });
    return tmpl;
  };

  PresentationSlideInfo.prototype.renderSlide = function() {
    return new Form({
      data: this.data,
      undo_and_changed_support: false,
      onDataChanged: (function(_this) {
        return function() {
          return _this.update();
        };
      })(this),
      fields: [
        {
          type: Input,
          name: "title",
          undo_and_changed_support: false,
          placeholder: $$('presentation.slide.info.placeholder.title'),
          content_size: false
        }, {
          type: Input,
          textarea: true,
          name: "info",
          rows: 12,
          undo_and_changed_support: false,
          placeholder: $$('presentation.slide.info.placeholder.info'),
          content_size: true
        }
      ]
    }).start();
  };

  PresentationSlideInfo.getType = function() {
    return "info";
  };

  return PresentationSlideInfo;

})(PresentationSlide);

PresentationSlide.addType(PresentationSlideInfo);
// Generated by CoffeeScript 1.10.0
var PresentationSlideBullets,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PresentationSlideBullets = (function(superClass) {
  extend(PresentationSlideBullets, superClass);

  function PresentationSlideBullets() {
    return PresentationSlideBullets.__super__.constructor.apply(this, arguments);
  }

  PresentationSlideBullets.getType = function() {
    return "bullets";
  };

  PresentationSlideBullets.prototype.isUserSelectable = function() {
    return true;
  };

  PresentationSlideBullets.prototype.renderPresentation = function() {
    var bullet, i, len, list, ref, tmpl;
    tmpl = this.getTemplate();
    tmpl.replace(new Label({
      text: this.data.title
    }), "title");
    list = $ul("ez5-presentation-slide-bullets-list");
    ref = this.data.info.split("\n");
    for (i = 0, len = ref.length; i < len; i++) {
      bullet = ref[i];
      if (bullet.trim().length === 0) {
        continue;
      }
      list.append($li().text(bullet.trim()));
    }
    tmpl.replace(new Label({
      "class": "ez5-presentation-bullets-list-label",
      multiline: true,
      content: list
    }), "content");
    return tmpl;
  };

  return PresentationSlideBullets;

})(PresentationSlideInfo);

PresentationSlide.addType(PresentationSlideBullets);
// Generated by CoffeeScript 1.10.0
var PresentationSlideStart,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PresentationSlideStart = (function(superClass) {
  extend(PresentationSlideStart, superClass);

  function PresentationSlideStart() {
    return PresentationSlideStart.__super__.constructor.apply(this, arguments);
  }

  PresentationSlideStart.prototype.isDeletable = function() {
    if (this.getDisplayRowIdx() === 0) {
      return false;
    } else {
      return true;
    }
  };

  PresentationSlideStart.prototype.renderPresentation = function() {
    var tmpl;
    tmpl = this.getTemplate();
    tmpl.replace(new Label({
      text: this.data.title
    }), "title");
    tmpl.replace(new Label({
      multiline: true,
      text: this.data.info
    }), "content");
    if (!isEmpty(this.data.title.trim())) {
      tmpl.addClass("ez5-presentation-slide-has-title");
    } else {
      tmpl.addClass("ez5-presentation-slide-no-title");
    }
    if (!isEmpty(this.data.info.trim())) {
      tmpl.addClass("ez5-presentation-slide-has-info");
    } else {
      tmpl.addClass("ez5-presentation-slide-no-info");
    }
    return tmpl;
  };

  PresentationSlideStart.prototype.getDefaultTitle = function() {
    return this._presentation.getCollection().renderNameAsText();
  };

  PresentationSlideStart.getType = function() {
    return "start";
  };

  return PresentationSlideStart;

})(PresentationSlideInfo);

PresentationSlide.addType(PresentationSlideStart);
// Generated by CoffeeScript 1.10.0
var PresentationSlideOne,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PresentationSlideOne = (function(superClass) {
  extend(PresentationSlideOne, superClass);

  function PresentationSlideOne() {
    return PresentationSlideOne.__super__.constructor.apply(this, arguments);
  }

  PresentationSlideOne.prototype.renderPresentation = function(hires) {
    var tmpl;
    if (hires == null) {
      hires = true;
    }
    tmpl = new Template({
      name: "presentation-slide-one",
      map: {
        center: true
      }
    });
    this.__fillSlide(tmpl, "center", hires, false);
    return tmpl;
  };

  PresentationSlideOne.prototype.renderOverview = function() {
    return this.renderPresentation(false);
  };

  PresentationSlideOne.prototype.renderSlide = function() {
    var tmpl;
    tmpl = new Template({
      name: "presentation-slide-one",
      map: {
        center: true
      }
    });
    this.__fillSlide(tmpl, "center", true, true);
    new Droppable({
      element: tmpl.map.center,
      drop: (function(_this) {
        return function(ev, info) {
          _this.__center = info.globalDrag.objects[0].getGlobalObjectId();
          return _this.updateSlide();
        };
      })(this)
    });
    return tmpl;
  };

  PresentationSlideOne.prototype.initFromData = function(data) {
    var ref;
    PresentationSlideOne.__super__.initFromData.call(this, data);
    return this.__center = (ref = data.center) != null ? ref.global_object_id : void 0;
  };

  PresentationSlideOne.prototype.removeGlobalObjectIds = function(gids) {
    var gid, i, len;
    for (i = 0, len = gids.length; i < len; i++) {
      gid = gids[i];
      if (gid === this.__center) {
        this.__center = null;
      }
    }
  };

  PresentationSlideOne.prototype.getGlobalObjectIds = function() {
    var gids;
    gids = [];
    if (this.__center) {
      gids.push(this.__center);
    }
    return gids;
  };

  PresentationSlideOne.prototype.getSaveData = function() {
    var sd;
    sd = PresentationSlideOne.__super__.getSaveData.call(this);
    sd.center = {
      global_object_id: this.__center || null
    };
    return sd;
  };

  PresentationSlideOne.getType = function() {
    return "one";
  };

  return PresentationSlideOne;

})(PresentationSlide);

PresentationSlide.addType(PresentationSlideOne);
// Generated by CoffeeScript 1.10.0
var PresentationSlideDuo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

PresentationSlideDuo = (function(superClass) {
  extend(PresentationSlideDuo, superClass);

  function PresentationSlideDuo() {
    return PresentationSlideDuo.__super__.constructor.apply(this, arguments);
  }

  PresentationSlideDuo.prototype.renderPresentation = function(hires) {
    var tmpl;
    if (hires == null) {
      hires = true;
    }
    tmpl = new Template({
      name: "presentation-slide-duo",
      map: {
        left: true,
        right: true
      }
    });
    this.__fillSlide(tmpl, "right", hires, false);
    this.__fillSlide(tmpl, "left", hires, false);
    return tmpl;
  };

  PresentationSlideDuo.prototype.renderOverview = function() {
    return this.renderPresentation(false);
  };

  PresentationSlideDuo.prototype.renderSlide = function() {
    var tmpl;
    tmpl = new Template({
      name: "presentation-slide-duo",
      map: {
        left: true,
        right: true
      }
    });
    this.__fillSlide(tmpl, "right", true, true);
    this.__fillSlide(tmpl, "left", true, true);
    new Droppable({
      element: tmpl.map.left,
      drop: (function(_this) {
        return function(ev, info) {
          _this.__left = info.globalDrag.objects[0].getGlobalObjectId();
          return _this.updateSlide();
        };
      })(this)
    });
    new Droppable({
      element: tmpl.map.right,
      drop: (function(_this) {
        return function(ev, info) {
          _this.__right = info.globalDrag.objects[0].getGlobalObjectId();
          return _this.updateSlide();
        };
      })(this)
    });
    return tmpl;
  };

  PresentationSlideDuo.prototype.initFromData = function(data) {
    var ref, ref1;
    this.__left = (ref = data.left) != null ? ref.global_object_id : void 0;
    return this.__right = (ref1 = data.right) != null ? ref1.global_object_id : void 0;
  };

  PresentationSlideDuo.prototype.getGlobalObjectIds = function() {
    var gids;
    gids = [];
    if (this.__left) {
      gids.push(this.__left);
    }
    if (this.__right) {
      gids.push(this.__right);
    }
    return gids;
  };

  PresentationSlideDuo.prototype.removeGlobalObjectIds = function(gids) {
    var gid, i, len;
    for (i = 0, len = gids.length; i < len; i++) {
      gid = gids[i];
      if (gid === this.__left) {
        this.__left = null;
      }
      if (gid === this.__right) {
        this.__right = null;
      }
    }
  };

  PresentationSlideDuo.prototype.getSaveData = function() {
    var sd;
    sd = PresentationSlideDuo.__super__.getSaveData.call(this);
    sd.left = {
      global_object_id: this.__left || null
    };
    sd.right = {
      global_object_id: this.__right || null
    };
    return sd;
  };

  PresentationSlideDuo.getType = function() {
    return "duo";
  };

  return PresentationSlideDuo;

})(PresentationSlide);

PresentationSlide.addType(PresentationSlideDuo);
// Generated by CoffeeScript 1.10.0
var BusyState,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

BusyState = (function(superClass) {
  extend(BusyState, superClass);

  function BusyState() {
    var icon;
    BusyState.__super__.constructor.call(this);
    icon = new Icon({
      icon: "spinner"
    });
    this.__span = $span("ez5-busy-state");
    this.__span.append(icon.DOM);
    ez5.start.rootLayoutSouth.append(this.pm, "right");
    this.update();
    CUI.registerTimeoutChangeCallback((function(_this) {
      return function(counter) {
        return _this.update();
      };
    })(this));
  }

  BusyState.prototype.update = function() {
    if (CUI.countTimeouts() || ServerRequest.hasRequests()) {
      return this.__span.addClass("ez5-busy-state-busy");
    } else {
      return this.__span.removeClass("ez5-busy-state-busy");
    }
  };

  return BusyState;

})(TrayApp);

ez5.session_ready(function() {
  if (CUI.__ng__) {
    return;
  }
  ez5.busyState = new BusyState();
  return ez5.tray.registerApp(ez5.busyState);
});
// Generated by CoffeeScript 1.10.0
var RootMenuAbout,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

RootMenuAbout = (function(superClass) {
  extend(RootMenuAbout, superClass);

  function RootMenuAbout() {
    return RootMenuAbout.__super__.constructor.apply(this, arguments);
  }

  RootMenuAbout.is_allowed = function() {
    return true;
  };

  RootMenuAbout.group = function() {
    return "zzz_info";
  };

  RootMenuAbout.submenu = function() {
    return "zzz_info";
  };

  RootMenuAbout.label = function() {
    return "root.menu.about.label";
  };

  RootMenuAbout.isStartApp = function() {
    return false;
  };

  RootMenuAbout.click = function() {
    var addInfoTableEntry, add_even_more, add_fallback_info, add_more, info_table;
    info_table = $table("ez5-root-menu-info-table");
    addInfoTableEntry = (function(_this) {
      return function(key_text_key, value_text) {
        return info_table.append($tr_one_row(new LocaLabel({
          loca_key: key_text_key
        }), new Label({
          text: value_text,
          appearance: 'important',
          multiline: true
        })));
      };
    })(this);
    add_more = (function(_this) {
      return function() {
        var func, i, info_names, len, name, opt, opts, plugin_name, plugin_names, ref, show_problem, text;
        plugin_names = (function() {
          var i, len, ref, results;
          ref = ez5.pluginManager.getPluginNames();
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            name = ref[i];
            results.push(name);
          }
          return results;
        })();
        if (plugin_names.length > 0) {
          info_names = [];
          for (i = 0, len = plugin_names.length; i < len; i++) {
            plugin_name = plugin_names[i];
            info_names.push(ez5.pluginManager.getPlugin(plugin_name).getInfoName());
          }
          text = info_names.join(", ");
        } else {
          text = "-";
        }
        addInfoTableEntry("root.menu.info.plugins", text);
        opts = [];
        ref = {
          debug: function() {
            return ez5.session.isDebug();
          }
        };
        for (opt in ref) {
          func = ref[opt];
          if (func()) {
            opts.push(opt);
          }
        }
        if (opts.length > 0) {
          text = opts.join(", ");
        } else {
          text = "-";
        }
        addInfoTableEntry("root.menu.info.webfrontend_options", text);
        show_problem = function() {
          return CUI.problem({
            text: $$("root.menu.about.failed_to_load_build_info")
          }).done(add_even_more);
        };
        return new CUI.XHR({
          url: '/web/build_info.json'
        }).start().done(function(build_info, status, statusText) {
          var build, k, v;
          if (!CUI.isPlainObject(build_info)) {
            show_problem();
            return;
          }
          build = ez5.format_date_and_time(new Date(build_info.date * 1000)) + "@" + build_info.host;
          addInfoTableEntry("root.menu.info.webfrontend_build", build);
          for (k in build_info) {
            v = build_info[k];
            if ((k === "date" || k === "host") || isEmpty(v)) {
              continue;
            }
            addInfoTableEntry("root.menu.info.webfrontend_build." + k, v);
          }
          return add_even_more();
        }).fail(show_problem);
      };
    })(this);
    add_fallback_info = (function(_this) {
      return function() {
        var k, ref, v;
        console.error("Unable to read settings from server, using session instance instead.");
        ref = ez5.session.getInstance();
        for (k in ref) {
          v = ref[k];
          addInfoTableEntry("root.menu.info.instance." + k, v);
        }
        add_more();
      };
    })(this);
    ez5.api.settings().done((function(_this) {
      return function(settings) {
        var k, v;
        if (!CUI.isPlainObject(settings)) {
          add_fallback_info();
          return;
        }
        for (k in settings) {
          v = settings[k];
          if (k.endsWith('_time')) {
            addInfoTableEntry("root.menu.info.instance." + k, v.replace(/T/g, ' '));
          } else {
            addInfoTableEntry("root.menu.info.instance." + k, v);
          }
        }
        return add_more();
      };
    })(this)).fail(add_fallback_info);
    return add_even_more = (function(_this) {
      return function() {
        var cd, css_hrefs, css_s, i, len, ref;
        css_hrefs = [];
        ref = CUI.DOM.matchSelector(document, "link[name='cui-css-main']");
        for (i = 0, len = ref.length; i < len; i++) {
          css_s = ref[i];
          css_hrefs.push(CUI.DOM.getAttribute(css_s, "href"));
        }
        addInfoTableEntry("root.menu.info.css_hrefs", css_hrefs.join(", "));
        if (window.easydb_server_url) {
          addInfoTableEntry("root.menu.info.server", window.easydb_server_url);
        } else {
          addInfoTableEntry("root.menu.info.server", document.location.origin);
        }
        cd = new CUI.ConfirmationDialog({
          title: $$("root.menu.info.dialog.title"),
          content: info_table,
          buttons: [
            {
              text: $$("base.ok"),
              onClick: function() {
                return cd.destroy();
              }
            }
          ]
        });
        return cd.show();
      };
    })(this);
  };

  return RootMenuAbout;

})(RootMenuApp);

ez5.session_ready(function() {
  return ez5.rootMenu.registerApp(RootMenuAbout);
});
// Generated by CoffeeScript 1.10.0
var Filepicker,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Filepicker = (function(superClass) {
  extend(Filepicker, superClass);

  function Filepicker() {
    return Filepicker.__super__.constructor.apply(this, arguments);
  }

  Filepicker.prototype.type = function() {
    return assert(false, getObjectClass(this) + ".type", "Needs implentation.");
  };

  Filepicker.prototype.readOpts = function() {
    this.__type = this.type();
    return this.__TYPE = this.__type.toUpperCase();
  };

  Filepicker.prototype.setDownloadManagerClass = function(__downloadManagerCls) {
    this.__downloadManagerCls = __downloadManagerCls;
  };

  Filepicker.prototype.getCurrentTools = function(col) {
    var count, tools;
    tools = [];
    if (!(col instanceof CollectionSelection)) {
      return tools;
    }
    count = col.getCount();
    if (count === 0) {
      return tools;
    }
    tools.push(new ToolboxTool({
      group: col.getToolGroup(),
      name: col.getToolNamePrefix() + '.' + this.__type + '.download',
      sort: "D:3",
      loca_key: "tool." + col.getToolNamePrefix() + '.' + this.__type + '.download',
      loca_key_attrs: {
        count: count
      },
      favorite: true,
      run: (function(_this) {
        return function() {
          new _this.__downloadManagerCls({
            collection: col
          }).startExport();
        };
      })(this)
    }));
    return tools;
  };

  Filepicker.session_ready = function(type) {
    var base_conf, fp, lbl, set_filepicker, url_parm_name, url_parms;
    url_parms = CUI.decodeUrlData(document.location.search.substring(1));
    url_parm_name = type + 'filepicker';
    base_conf = ez5.session.getBaseConfig().system[type] || {};
    set_filepicker = function(filepicker) {
      var fp;
      fp = JSON.parse(atou(filepicker));
      if (!(fp != null ? fp.callbackurl : void 0)) {
        return false;
      }
      if (fp.existing_files == null) {
        fp.existing_files = [];
      }
      fp.type = type;
      CUI.setSessionStorage('filepicker', fp);
      Filepicker.conf = fp;
      return true;
    };
    if (!url_parms[type + 'filepicker']) {
      fp = CUI.getSessionStorage('filepicker');
      if (!(fp != null ? fp.callbackurl : void 0) || (fp != null ? fp.type : void 0) !== type) {
        return;
      }
      if (fp.existing_files == null) {
        fp.existing_files = [];
      }
      Filepicker.conf = fp;
    } else {
      if (!base_conf.active) {
        CUI.setSessionStorage('filepicker');
        return CUI.problem({
          markdown: true,
          text: $$(type + '.filepicker.error.not_active.md')
        });
      }
      ez5.start.removeFromUrl(url_parm_name);
      console.debug(fp, url_parms[url_parm_name]);
      if (!set_filepicker(url_parms[url_parm_name])) {
        CUI.setSessionStorage('filepicker');
        return;
      }
    }
    lbl = new LocaLabel({
      "class": 'ez5-modebar ez5-modebar--' + type,
      loca_key: type + '.filepicker.badge'
    });
    if (ez5.session.isDebug()) {
      new CUI.Tooltip({
        element: lbl,
        text: (function(_this) {
          return function() {
            return dump(Filepicker.conf);
          };
        })(this)
      });
    }
    document.documentElement.classList.add('ez5--has-modebar');
    if (window.opener) {
      Events.listen({
        node: window,
        type: 'beforeunload',
        call: (function(_this) {
          return function(ev) {
            return window.opener.postMessage({
              easydb: {
                action: 'close'
              }
            }, '*');
          };
        })(this)
      });
      Events.listen({
        node: window,
        type: 'message',
        call: (function(_this) {
          return function(ev) {
            var ref;
            console.debug("received a message from ", type, ev);
            if (!((ref = ev.data) != null ? ref.type : void 0)) {
              return;
            }
            if (ev.data[type].filepicker) {
              set_filepicker(ev.data[type].filepicker);
            }
            if (ev.data[type].config) {
              return set_filepicker(ev.data[type].config);
            }
          };
        })(this)
      });
      window.opener.postMessage({
        easydb: {
          action: 'send_config'
        }
      }, '*');
    }
    document.body.append(lbl.DOM);
    return Collection.registerPlugin(new this());
  };

  return Filepicker;

})(CollectionPlugin);
// Generated by CoffeeScript 1.10.0
var FilepickerDownloadManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

FilepickerDownloadManager = (function(superClass) {
  extend(FilepickerDownloadManager, superClass);

  function FilepickerDownloadManager() {
    return FilepickerDownloadManager.__super__.constructor.apply(this, arguments);
  }

  FilepickerDownloadManager.prototype.type = function() {
    return assert(false, getObjectClass(this) + ".type", "Needs implentation.");
  };

  FilepickerDownloadManager.prototype.readOpts = function() {
    FilepickerDownloadManager.__super__.readOpts.call(this);
    this.__base_conf = ez5.session.getBaseConfig().system[this.type()] || {};
    this.__type = this.type();
    return this.__TYPE = this.__type.toUpperCase();
  };

  FilepickerDownloadManager.prototype.getDownloadPrepareError = function() {
    return $$(this.__type + '.download.manager.prepare.error', {
      extensions: Filepicker.conf.extensions.join(', ')
    });
  };

  FilepickerDownloadManager.prototype.acceptVersionForDownload = function(version) {
    var ref;
    if (ref = version.extension, indexOf.call(Filepicker.conf.extensions, ref) >= 0) {
      if (!this.__base_conf.send_files || !this.__base_conf.send_files_max_filesize) {
        return true;
      } else if (version.filesize <= this.__base_conf.send_files_max_filesize) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  };

  FilepickerDownloadManager.prototype.sendData = function(form_data, filepicker_files) {
    var xhr2;
    xhr2 = new CUI.XHR({
      method: "POST",
      headers: {},
      withCredentials: true,
      url: Filepicker.conf.callbackurl,
      body: form_data
    });
    return xhr2.start().done((function(_this) {
      return function(data) {
        var event, file, filepicker_file, i, len1, ref;
        ref = data.files;
        for (i = 0, len1 = ref.length; i < len1; i++) {
          file = ref[i];
          filepicker_file = findInArray(null, filepicker_files, function(v) {
            return v.uid = file.uid;
          });
          event = filepicker_file.event;
          event.info[_this.__type] = file;
          if (file.status === 'error') {
            event.type = _this.__TYPE + '_FILE_COPY_ERROR';
            _this.__upload_errors = _this.__upload_errors + 1;
          } else {
            event.type = _this.__TYPE + '_FILE_COPY';
          }
          EventPoller.saveEvent(event);
        }
      };
    })(this)).fail((function(_this) {
      return function(xhr) {
        var event, file, i, len1;
        for (i = 0, len1 = filepicker_files.length; i < len1; i++) {
          file = filepicker_files[i];
          event = file.event;
          event.type = _this.__TYPE + '_FILE_COPY_ERROR';
          event.info.error = xhr.responseJSON;
          _this.__upload_errors = _this.__upload_errors + 1;
          EventPoller.saveEvent(event);
        }
      };
    })(this));
  };

  FilepickerDownloadManager.prototype.showProgress = function(loca_key, loca_key_attrs) {
    if (!this.__toaster) {
      this.__lbl = new LocaLabel({
        loca_key: loca_key,
        loca_key_attrs: loca_key_attrs
      });
      this.__toaster = new CUI.Toaster({
        content: this.__lbl,
        show_ms: 0
      });
      return this.__toaster.open();
    } else {
      return this.__lbl.setText($$(loca_key + '|text', loca_key_attrs));
    }
  };

  FilepickerDownloadManager.prototype.hideProgress = function() {
    var ref, ref1;
    if ((ref = this.__toaster) != null) {
      ref.destroy();
    }
    if ((ref1 = this.__lbl) != null) {
      ref1.destroy();
    }
    this.__toaster = null;
    return this.__lbl = null;
  };

  FilepickerDownloadManager.prototype.sendFiles = function(filepicker_files, blobs) {
    var dfr, existing_file, filepicker_file, get_form_data, go_on, i, len1, overwrite, overwrite_files, ref, send_data, show_report;
    dfr = new CUI.Deferred();
    if (this.__base_conf.send_files) {
      send_data = true;
    } else {
      send_data = false;
    }
    overwrite_files = [];
    overwrite = null;
    this.__upload_errors = null;
    ref = Filepicker.conf.existing_files;
    for (i = 0, len1 = ref.length; i < len1; i++) {
      existing_file = ref[i];
      filepicker_file = findInArray(null, filepicker_files, function(v) {
        return v.uid === existing_file.uid;
      });
      if (filepicker_file) {
        overwrite_files.push(filepicker_file);
      }
    }
    get_form_data = (function(_this) {
      return function(files) {
        var body, form_data;
        body = {
          files: files,
          window_preferences: {
            width: window.innerWidth,
            height: window.innerHeight
          },
          send_data: send_data
        };
        form_data = new FormData();
        form_data.append('body', JSON.stringify(body));
        return form_data;
      };
    })(this);
    show_report = (function(_this) {
      return function() {
        var attrs, loca, ref1, type;
        attrs = {
          errors: _this.__upload_errors,
          count: filepicker_files.length,
          success: filepicker_files.length - _this.__upload_errors
        };
        if (attrs.errors === attrs.count) {
          loca = 'error';
          type = 'problem';
        } else if (attrs.errors > 0) {
          loca = 'with_errors';
          type = 'problem';
        } else {
          loca = 'success';
          type = 'alert';
        }
        CUI[type]({
          text: $$(_this.__type + ".download.manager.report.upload_" + loca + ".md", attrs)
        });
        return (ref1 = window.opener) != null ? ref1.postMessage({
          easydb: {
            action: 'reload'
          }
        }, '*') : void 0;
      };
    })(this);
    dfr.always((function(_this) {
      return function() {
        return _this.hideProgress();
      };
    })(this));
    dfr.done((function(_this) {
      return function() {
        var j, len2;
        for (j = 0, len2 = filepicker_files.length; j < len2; j++) {
          filepicker_file = filepicker_files[j];
          pushOntoArray(filepicker_file, Filepicker.conf.existing_files, function(v) {
            return v.uid === filepicker_file.uid;
          });
        }
        CUI.setSessionStorage('filepicker', Filepicker.conf);
        return show_report();
      };
    })(this));
    dfr.fail((function(_this) {
      return function() {
        if (_this.__upload_errors === null) {
          return;
        }
        return show_report();
      };
    })(this));
    go_on = (function(_this) {
      return function() {
        var form_data;
        _this.__upload_errors = 0;
        if (!send_data) {
          _this.showProgress(_this.__type + '.download.manager.sending_files', {
            number: 1,
            count: 1
          });
          form_data = get_form_data(filepicker_files);
          _this.sendData(form_data, filepicker_files).done(dfr.resolve).fail(dfr.reject);
          return dfr.promise();
        }
        return CUI.chunkWork.call(_this, {
          items: filepicker_files,
          chunk_size: 1,
          timeout: 0,
          call: function(items, idx, len) {
            var file;
            _this.showProgress(_this.__type + '.download.manager.sending_files', {
              number: idx + 1,
              count: len
            });
            file = items[0];
            form_data = get_form_data([file]);
            form_data.append("files[]", new File([blobs[file.path]], file.filename));
            return _this.sendData(form_data, [file]);
          }
        }).done(dfr.resolve).fail(dfr.reject);
      };
    })(this);
    if (overwrite_files.length > 0) {
      new CUI.ConfirmationChoice({
        text: $$(this.__type + '.download.manager.ask_overwrite_files.msg.md', {
          count: overwrite_files.length
        }),
        choices: [
          {
            loca_key: this.__type + '.download.manager.ask_overwrite_files.button.cancel',
            cancel: true
          }, overwrite_files.length < filepicker_files.length ? {
            loca_key: this.__type + '.download.manager.ask_overwrite_files.button.skip',
            choice: 'skip'
          } : void 0, {
            loca_key: this.__type + '.download.manager.ask_overwrite_files.button.overwrite',
            choice: 'overwrite',
            primary: true
          }
        ]
      }).open().done((function(_this) {
        return function(choice) {
          var j, len2, overwrite_file;
          switch (choice.choice) {
            case 'skip':
              for (j = 0, len2 = overwrite_files.length; j < len2; j++) {
                overwrite_file = overwrite_files[j];
                removeFromArray(overwrite_file, filepicker_files);
              }
              break;
            case 'overwrite':
          }
          return go_on();
        };
      })(this)).fail(dfr.reject);
    } else {
      go_on();
    }
    return dfr.promise();
  };

  FilepickerDownloadManager.prototype.mapFromNodes = function(nodes) {
    var i, key, lang, len1, map, node, nodeName, ref, value;
    map = {
      _items: 0
    };
    for (i = 0, len1 = nodes.length; i < len1; i++) {
      node = nodes[i];
      value = node.textContent;
      if (isEmpty(value)) {
        continue;
      }
      nodeName = node.nodeName;
      ref = node.nodeName.split('-'), key = ref[0], lang = ref[1];
      if (node.children.length > 0) {
        map[key] = this.mapFromNodes(node.children);
        if (map[key]) {
          map[key]._list = true;
        }
        continue;
      }
      if (!lang) {
        lang = '_value';
      }
      if (!map[key]) {
        map[key] = {};
      }
      if (!map[key][lang]) {
        map[key][lang] = [value];
      } else {
        map[key][lang].push(value);
      }
      map._items = Math.max(map._items, map[key][lang].length);
    }
    return map;
  };

  FilepickerDownloadManager.prototype.getValue = function(info, idx) {
    var _info, i, key, l1, l2, map, ref, ref1, value;
    if (idx == null) {
      idx = void 0;
    }
    value = (function(_this) {
      return function(v) {
        if (idx === void 0) {
          return v.join('; ');
        } else {
          return v[idx];
        }
      };
    })(this);
    if (info._list) {
      map = [];
      for (idx = i = 0, ref = info._items; 0 <= ref ? i < ref : i > ref; idx = 0 <= ref ? ++i : --i) {
        for (key in info) {
          _info = info[key];
          if (key === '_list' || key === '_items') {
            continue;
          }
          map.push(this.getValue(_info, idx));
        }
      }
      return map;
    }
    if (info._value) {
      return value(info._value);
    }
    map = {};
    ref1 = {
      'de': 'de-DE',
      'en': 'en-US',
      'es': 'es-ES',
      'it': 'it-IT'
    };
    for (l1 in ref1) {
      l2 = ref1[l1];
      if (info[l1]) {
        map[l2] = value(info[l1]);
      }
    }
    if (CUI.isEmptyObject(map)) {
      return void 0;
    } else {
      return map;
    }
  };

  FilepickerDownloadManager.prototype.downloadFiles = function(_files) {
    var blobs, dfr, file, filepicker_files, files, i, idx, len1, next_file, objects, parts, ref, ref1, ref2, xmlParser, xml_info;
    files = ((ref = this["export"].getData()._transports) != null ? (ref1 = ref[0]) != null ? (ref2 = ref1._download) != null ? ref2._files : void 0 : void 0 : void 0) || [];
    files.sort(function(a, b) {
      var get_value;
      get_value = (function(_this) {
        return function(file) {
          if (file.path.endsWith('.xml')) {
            return 0;
          } else if (file.path.endsWith('.json')) {
            return 1;
          } else {
            return 2;
          }
        };
      })(this);
      return compareIndex(get_value(a), get_value(b));
    });
    for (i = 0, len1 = files.length; i < len1; i++) {
      file = files[i];
      file.__path_prefix = file.path.split('/')[0];
      parts = file.url.split('/');
      idx = idxInArray('download', parts);
      file.__url_prefix = parts.slice(0, idx + 1).join('/');
    }
    filepicker_files = [];
    objects = [];
    blobs = {};
    xml_info = {};
    xmlParser = new DOMParser();
    dfr = new CUI.Deferred();
    dfr.done((function(_this) {
      return function() {
        return _this.sendFiles(filepicker_files, blobs);
      };
    })(this));
    dfr.fail((function(_this) {
      return function() {
        _this.hideProgress();
        return CUI.problem({
          text: $$(_this.__type + '.download.manager.error.download')
        });
      };
    })(this));
    idx = -1;
    next_file = (function(_this) {
      return function() {
        var creds, restype, xhr;
        idx = idx + 1;
        if (idx === files.length) {
          dfr.resolve();
          return;
        }
        _this.showProgress(_this.__type + '.download.manager.loading_files', {
          number: idx + 1,
          count: files.length
        });
        file = files[idx];
        if (file.path.endsWith('.json')) {
          creds = true;
          restype = 'json';
        } else if (file.path.endsWith('.xml')) {
          creds = true;
          restype = 'text';
        } else if (_this.__base_conf.send_files) {
          creds = false;
          restype = 'blob';
        } else {
          return next_file();
        }
        xhr = new CUI.XHR({
          method: "GET",
          url: file.url,
          withCredentials: creds,
          responseType: restype
        });
        return xhr.start().fail(dfr.reject).done(function(data) {
          var asset, asset_id, assets, bare_filename, do_export, doc, fileinfo, filepicker_file, info, info_map, j, k, key, l, len2, len3, map, ref3, ref4, ref5, ref6, ref7, ro, standard, v, version, vname;
          if (restype === 'text') {
            doc = xmlParser.parseFromString(data, 'text/xml');
            map = {};
            ref4 = _this.mapFromNodes(((ref3 = doc.getElementsByTagName('typo3')[0]) != null ? ref3.children : void 0) || []);
            for (key in ref4) {
              info = ref4[key];
              v = _this.getValue(info);
              if (!isEmpty(v)) {
                map[key] = v;
              }
            }
            xml_info[ez5.bareBasename(file.path)] = map;
            next_file();
            return;
          }
          if (restype === 'blob') {
            blobs[file.path] = data;
            next_file();
            return;
          }
          ro = new ResultObject();
          ro.setData(data);
          bare_filename = ez5.bareBasename(file.path);
          info_map = xml_info[bare_filename] || {};
          standard = ro.getStandard();
          ref6 = {
            title: ez5.loca.getBestFrontendValue(standard['1'].text),
            description: ez5.loca.getBestFrontendValue((ref5 = standard['2']) != null ? ref5.text : void 0)
          };
          for (k in ref6) {
            v = ref6[k];
            if (info_map[k] === void 0) {
              info_map[k] = v;
            }
          }
          assets = ro.getAssetsForBrowser('detail');
          for (j = 0, len2 = assets.length; j < len2; j++) {
            asset = assets[j];
            if (!asset.value) {
              continue;
            }
            asset_id = asset.value._id;
            do_export = true;
            for (l = 0, len3 = filepicker_files.length; l < len3; l++) {
              filepicker_file = filepicker_files[l];
              if (filepicker_file.asset_id === asset_id) {
                do_export = false;
                break;
              }
            }
            if (!do_export) {
              continue;
            }
            ref7 = asset.value.versions || {};
            for (vname in ref7) {
              version = ref7[vname];
              if (!version._relative_filename) {
                continue;
              }
              fileinfo = {
                url: file.__url_prefix + '/' + file.__path_prefix + '/' + version._relative_filename,
                path: file.__path_prefix + '/' + version._relative_filename,
                asset_id: asset_id,
                uid: data._uuid + '/' + asset_id + '/' + vname,
                event: {
                  objecttype: data._objecttype,
                  object_id: data[data._objecttype]._id,
                  object_version: data[data._objecttype]._version,
                  schema: 'USER',
                  info: {
                    asset: {
                      id: asset_id,
                      version: vname,
                      filesize: version.filesize,
                      filename: version._relative_filename
                    }
                  }
                },
                filename: ez5.basename(version._relative_filename)
              };
              for (k in info_map) {
                v = info_map[k];
                fileinfo[k] = v;
              }
              filepicker_files.push(fileinfo);
            }
          }
          return next_file();
        });
      };
    })(this);
    next_file();
    return dfr.promise();
  };

  FilepickerDownloadManager.prototype.getTitle = function() {
    return $$(this.__type + '.download.manager.modal.title');
  };

  FilepickerDownloadManager.prototype.getButtonStartLocaKey = function() {
    return this.__type + '.download.manager.modal.button.start';
  };

  FilepickerDownloadManager.prototype.getExportSaveData = function() {
    var data;
    data = FilepickerDownloadManager.__super__.getExportSaveData.call(this);
    data["export"].json = true;
    data["export"].json_one_file_per_object = true;
    data["export"].xml = true;
    data["export"].xml_one_file_per_object = true;
    data["export"].mapping = this.__base_conf.profile_mapping;
    data._transports = [
      {
        type: 'download',
        packer: null
      }
    ];
    return data;
  };

  return FilepickerDownloadManager;

})(DownloadManager);
