// Generated by CoffeeScript 1.9.3
var Positioner;

Positioner = (function() {
  function Positioner(obj) {
    var el, pos;
    el = obj;
    if (obj != null ? obj.DOM : void 0) {
      el = obj.DOM;
    } else {
      el = obj;
    }
    if (isElement(el)) {
      pos = el.rect();
      assert(pos.width > 0 && pos.height > 0, "new Positioner", "Element is not visible.", {
        element: el[0]
      });
      this.__pos = this.__convertToPositioner(pos);
    } else if (obj instanceof Positioner) {
      this.__pos = copyObject(obj.getPos(), true);
    } else {
      this.__pos = this.__convertToPositioner(obj);
    }
  }

  Positioner.__poleIndices = ["s", "e", "n", "w"];

  Positioner.__sideIndices = ["bottom", "right", "top", "left"];

  Positioner.__directions = [1, 1, -1, -1];

  Positioner.__dimension = ["height", "width", "height", "width"];

  Positioner.__axis = ["y", "x", "y", "x"];

  Positioner.prototype.keys = ["top", "left", "bottom", "right", "width", "height"];

  Positioner.prototype.getDim = function() {
    return {
      width: this.__pos.width,
      height: this.__pos.height
    };
  };

  Positioner.prototype.translate = function(x, y) {
    return this.move(x - this.__pos.left, y - this.__pos.top);
  };

  Positioner.prototype.translateX = function(x) {
    return this.move(x - this.__pos.left, 0);
  };

  Positioner.prototype.translateY = function(y) {
    return this.move(0, y - this.__pos.top);
  };

  Positioner.prototype.translateCenterY = function(y) {
    return this.move(0, y - this.__pos.middle);
  };

  Positioner.prototype.translateCenterX = function(x) {
    return this.move(x - this.__pos.center, 0);
  };

  Positioner.prototype.move = function(x, y) {
    this.__pos.top += y;
    this.__pos.bottom += y;
    this.__pos.middle += y;
    this.__pos.left += x;
    this.__pos.right += x;
    return this.__pos.center += x;
  };

  Positioner.prototype.updateHeightAndWidth = function() {
    this.__pos.width = this.__pos.right - this.__pos.left;
    return this.__pos.height = this.__pos.bottom - this.__pos.top;
  };

  Positioner.prototype.updateHeightAndWidthAndCenter = function() {
    this.__pos.width = this.__pos.right - this.__pos.left;
    this.__pos.height = this.__pos.bottom - this.__pos.top;
    this.__pos.center = (this.__pos.right - this.__pos.left) / 2 + this.__pos.left;
    return this.__pos.middle = (this.__pos.bottom - this.__pos.top) / 2 + this.__pos.top;
  };

  Positioner.prototype.__convertToPositioner = function(_pos) {
    var i, k, len, pos, ref, v, wrong;
    pos = {};
    ref = this.keys;
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      if (isInteger(_pos[k]) || isFloat(_pos[k])) {
        pos[k] = _pos[k];
      } else {
        pos[k] = null;
      }
    }
    if (pos.top !== null && pos.height !== null) {
      pos.bottom = pos.top + pos.height;
    }
    if (pos.left !== null && pos.width !== null) {
      pos.right = pos.left + pos.width;
    }
    if (pos.left !== null && pos.right !== null) {
      pos.center = (pos.right - pos.left) / 2 + pos.left;
    }
    if (pos.top !== null && pos.bottom !== null) {
      pos.middle = (pos.bottom - pos.top) / 2 + pos.top;
    }
    wrong = [];
    for (k in pos) {
      v = pos[k];
      if (v === null && (k !== "bottom" && k !== "right")) {
        wrong.push(k);
      }
    }
    assert(wrong.length === 0, "new Positioner", "Position is not complete, missing keys are \"" + (wrong.join()) + "\".", {
      opts: this.opts
    });
    return pos;
  };

  Positioner.prototype.getPos = function() {
    return this.__pos;
  };

  Positioner.getAxis = function(side) {
    return Positioner.__axis[Positioner.getIndex(side)];
  };

  Positioner.getDimension = function(side) {
    return Positioner.__dimension[Positioner.getIndex(side)];
  };

  Positioner.getPole = function(side) {
    return Positioner.__poleIndices[Positioner.getIndex(side)];
  };

  Positioner.getSide = function(side) {
    return Positioner.__sideIndices[Positioner.getIndex(side)];
  };

  Positioner.getDirection = function(side) {
    return Positioner.__directions[Positioner.getIndex(side)];
  };

  Positioner.getIndex = function(side) {
    var index;
    if (isInteger(side)) {
      return side % 4;
    } else {
      assert(isString(side));
      index = -1;
      if (side.length === 1) {
        index = Positioner.__poleIndices.indexOf(side);
      } else {
        index = Positioner.__sideIndices.indexOf(side);
      }
      assert(index >= 0);
      return index;
    }
  };

  Positioner.getOppositeIndex = function(side) {
    return Positioner.getIndex(Positioner.getIndex(side) + 2);
  };

  Positioner.prototype.align = function(align_side, target, target_side, subtract_margin) {
    var align_side_index, axis, result, target_pos;
    if (subtract_margin == null) {
      subtract_margin = null;
    }
    align_side_index = Positioner.getIndex(align_side);
    align_side = Positioner.__directions[align_side_index];
    target_side = Positioner.getSide(target_side);
    axis = Positioner.getAxis(target_side);
    assert(axis === Positioner.getAxis(align_side_index));
    target = new Positioner(target);
    target_pos = target.getPos()[target_side];
    if (subtract_margin !== null) {
      target_pos += subtract_margin[Positioner.__sideIndices[align_side_index]] * Positioner.__directions[align_side_index];
    }
    if (Positioner.__directions[align_side_index] > 0) {
      target_pos -= this.getPos()[Positioner.__dimension[align_side_index]];
    }
    result = new Positioner(this);
    if (axis === "x") {
      result.translateX(target_pos);
    } else {
      result.translateY(target_pos);
    }
    return result;
  };

  Positioner.prototype.getSideLength = function(side) {
    var end_pos, end_side, length, start_pos, start_side, target_side_index;
    target_side_index = Positioner.getIndex(side);
    start_side = Positioner.getSide(target_side_index + 1);
    end_side = Positioner.getSide(target_side_index + 3);
    start_pos = this.getPos()[start_side];
    end_pos = this.getPos()[end_side];
    length = Math.abs(end_pos - start_pos);
    return length;
  };

  Positioner.prototype.keepInside = function(outer_rect) {
    var result;
    outer_rect = new Positioner(outer_rect).getPos();
    result = new Positioner(this);
    if (this.__pos.left < outer_rect.left) {
      result.move(outer_rect.left - this.__pos.left, 0);
    } else if (this.__pos.right > outer_rect.right) {
      result.move(outer_rect.right - this.__pos.right, 0);
    }
    if (this.__pos.top < outer_rect.top) {
      result.move(0, outer_rect.top - this.__pos.top);
    } else if (this.__pos.bottom > outer_rect.bottom) {
      result.move(0, outer_rect.bottom - this.__pos.bottom);
    }
    return result;
  };

  Positioner.prototype.slideAlignToCenter = function(target, targetSide) {
    var axis, center_pos, end_pos, end_side, result, start_pos, start_side, target_side_index;
    axis = Positioner.getAxis(targetSide);
    target = new Positioner(target);
    target_side_index = Positioner.getIndex(targetSide);
    start_side = Positioner.getSide(target_side_index + 1);
    end_side = Positioner.getSide(target_side_index + 3);
    start_pos = target.getPos()[start_side];
    end_pos = target.getPos()[end_side];
    center_pos = (end_pos - start_pos) / 2 + start_pos;
    result = new Positioner(this);
    if (axis === "y") {
      result.translateCenterX(center_pos);
    } else {
      result.translateCenterY(center_pos);
    }
    return result;
  };

  Positioner.prototype.extendSide = function(side, margin, factor) {
    var newPos, result, side_index;
    if (factor == null) {
      factor = 1.0;
    }
    assert(isNumber(factor));
    side_index = Positioner.getIndex(side);
    side = Positioner.__sideIndices[side_index];
    if (!isNumber(margin)) {
      margin = margin[side];
    }
    newPos = this.__pos[side];
    newPos += margin * Positioner.__directions[side_index] * factor;
    result = new Positioner(this);
    result.getPos()[side] = newPos;
    result.updateHeightAndWidthAndCenter();
    return result;
  };

  Positioner.prototype.cutSide = function(side_to_cut, cut_position) {
    var end_pos, opposite_side_to_cut_index, result, side_to_cut_index, start_pos, v;
    side_to_cut_index = Positioner.getIndex(side_to_cut);
    opposite_side_to_cut_index = Positioner.getIndex(side_to_cut + 2);
    end_pos = this.getPos()[Positioner.__sideIndices[side_to_cut_index]];
    start_pos = this.getPos()[Positioner.__sideIndices[opposite_side_to_cut_index]];
    if (start_pos > end_pos) {
      v = end_pos;
      end_pos = start_pos;
      start_pos = v;
    }
    if (cut_position > end_pos) {
      cut_position = end_pos;
    }
    if (cut_position < start_pos) {
      cut_position = start_pos;
    }
    result = new Positioner(this);
    result.getPos()[Positioner.__sideIndices[side_to_cut_index]] = cut_position;
    result.updateHeightAndWidthAndCenter();
    return result;
  };

  Positioner.prototype.basicTest = function() {
    assert(Positioner.getIndex(1) === 1);
    assert(Positioner.getIndex(5) === 1);
    assert(Positioner.getIndex("e") === 1);
    assert(Positioner.getPole(2) === "n");
    assert(Positioner.getOppositeIndex(3) === 1);
    assert(Positioner.getOppositeIndex("w") === 1);
    assert(Positioner.getIndex("w") === 3);
    assert(Positioner.getAxis("w") === "x");
    return assert(Positioner.getAxis("top") === "y");
  };

  return Positioner;

})();
